{
  jetCoreEnvironment=JetTestUtils.createEnvironmentWithMockJdkAndIdeaAnnotations(myTestRootDisposable);
  String text=FileUtil.loadFile(ktFile);
  JetFile psiFile=JetTestUtils.createFile(ktFile.getName(),text,jetCoreEnvironment.getProject());
  ClassFileFactory classFileFactory=GenerationUtils.compileFileGetClassFileFactoryForTest(psiFile);
  CompileEnvironmentUtil.writeToOutputDirectory(classFileFactory,tmpdir);
  Disposer.dispose(myTestRootDisposable);
  JavaCompiler javaCompiler=ToolProvider.getSystemJavaCompiler();
  StandardJavaFileManager fileManager=javaCompiler.getStandardFileManager(null,Locale.ENGLISH,Charset.forName("utf-8"));
  try {
    Iterable<? extends JavaFileObject> javaFileObjectsFromFiles=fileManager.getJavaFileObjectsFromFiles(Collections.singleton(javaFile));
    List<String> options=Arrays.asList("-classpath",tmpdir.getPath() + System.getProperty("path.separator") + "out/production/stdlib","-d",tmpdir.getPath());
    JavaCompiler.CompilationTask task=javaCompiler.getTask(null,fileManager,null,options,null,javaFileObjectsFromFiles);
    Assert.assertTrue(task.call());
  }
  finally {
    fileManager.close();
  }
}
