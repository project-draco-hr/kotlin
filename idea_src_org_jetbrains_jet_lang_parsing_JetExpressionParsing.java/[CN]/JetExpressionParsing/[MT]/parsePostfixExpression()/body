{
  PsiBuilder.Marker expression=mark();
  parseAtomicExpression();
  while (true) {
    if (myBuilder.newlineBeforeCurrentToken()) {
      break;
    }
 else     if (at(LBRACKET)) {
      parseArrayAccess();
      expression.done(ARRAY_ACCESS_EXPRESSION);
    }
 else     if (atSet(Precedence.POSTFIX.getOperations())) {
      advance();
      expression.done(POSTFIX_EXPRESSION);
    }
 else     if (parseCallWithClosure()) {
      expression.done(CALL_EXPRESSION);
    }
 else     if (at(LPAR)) {
      parseValueArgumentList();
      parseCallWithClosure();
      expression.done(CALL_EXPRESSION);
    }
 else     if (at(LT)) {
      int gtPos=matchTokenStreamPredicate(new FirstBefore(new At(GT),new AtSet(TYPE_ARGUMENT_LIST_STOPPERS,false)){
        @Override public boolean isTopLevel(        int openAngleBrackets,        int openBrackets,        int openBraces,        int openParentheses){
          return openAngleBrackets == 1 && openBrackets == 0 && openBraces == 0 && openParentheses == 0;
        }
      }
);
      if (gtPos >= 0) {
        myJetParsing.parseTypeArgumentList();
        if (!myBuilder.newlineBeforeCurrentToken() && at(LPAR))         parseValueArgumentList();
        parseCallWithClosure();
        expression.done(CALL_EXPRESSION);
      }
 else {
        break;
      }
    }
 else     if (at(DOT)) {
      advance();
      parseAtomicExpression();
      expression.done(DOT_QIALIFIED_EXPRESSION);
    }
 else     if (at(SAFE_ACCESS)) {
      advance();
      parseAtomicExpression();
      expression.done(SAFE_ACCESS_EXPRESSION);
    }
 else     if (at(HASH)) {
      advance();
      expect(IDENTIFIER,"Expecting property or function name");
      expression.done(HASH_QIALIFIED_EXPRESSION);
    }
 else {
      break;
    }
    expression=expression.precede();
  }
  expression.drop();
}
