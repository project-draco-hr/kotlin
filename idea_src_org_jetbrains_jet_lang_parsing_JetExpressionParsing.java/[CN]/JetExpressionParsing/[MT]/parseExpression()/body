{
  if (at(LPAR)) {
    parseParenthesizedExpressionOrTuple();
  }
 else   if (at(LBRACKET)) {
    parseMapListOrRange();
  }
 else   if (at(THIS_KEYWORD)) {
    parseThisExpression();
  }
 else   if (at(TYPEOF_KEYWORD)) {
    parseTypeOf();
  }
 else   if (at(NEW_KEYWORD)) {
    parseNew();
  }
 else   if (at(OBJECT_KEYWORD)) {
    parseObjectLiteral();
  }
 else   if (at(THROW_KEYWORD)) {
    parseThrow();
  }
 else   if (at(RETURN_KEYWORD)) {
    parseReturn();
  }
 else   if (at(CONTINUE_KEYWORD)) {
    parseJump(CONTINUE);
  }
 else   if (at(BREAK_KEYWORD)) {
    parseJump(BREAK);
  }
 else   if (at(IF_KEYWORD)) {
    parseIf();
  }
 else   if (at(TRY_KEYWORD)) {
    parseTry();
  }
 else   if (at(FOR_KEYWORD)) {
    parseFor();
  }
 else   if (at(WHILE_KEYWORD)) {
    parseWhile();
  }
 else   if (at(DO_KEYWORD)) {
    parseDoWhile();
  }
 else   if (atSet(TokenSet.create(CLASS_KEYWORD,EXTENSION_KEYWORD,FUN_KEYWORD,VAL_KEYWORD,VAR_KEYWORD,TYPE_KEYWORD))) {
  }
 else   if (at(IDENTIFIER)) {
    advance();
  }
 else   if (at(LBRACE)) {
    myJetParsing.parseBlock();
  }
 else   if (at(INTEGER_LITERAL)) {
    parseOneTokenExpression(INTEGER_CONSTANT);
  }
 else   if (at(LONG_LITERAL)) {
    parseOneTokenExpression(LONG_CONSTANT);
  }
 else   if (at(CHARACTER_LITERAL)) {
    parseOneTokenExpression(CHARACTER_CONSTANT);
  }
 else   if (at(FLOAT_LITERAL)) {
    parseOneTokenExpression(FLOAT_CONSTANT);
  }
 else   if (at(STRING_LITERAL) || at(RAW_STRING_LITERAL)) {
    parseOneTokenExpression(STRING_CONSTANT);
  }
 else   if (at(TRUE_KEYWORD)) {
    parseOneTokenExpression(BOOLEAN_CONSTANT);
  }
 else   if (at(FALSE_KEYWORD)) {
    parseOneTokenExpression(BOOLEAN_CONSTANT);
  }
 else   if (at(NULL_KEYWORD)) {
    parseOneTokenExpression(NULL);
  }
 else {
    errorAndAdvance("Expecting an expression");
  }
}
