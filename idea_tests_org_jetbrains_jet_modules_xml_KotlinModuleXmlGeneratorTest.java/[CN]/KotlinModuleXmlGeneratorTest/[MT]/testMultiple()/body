{
  KotlinModuleDescriptionBuilder builder=KotlinModuleXmlBuilderFactory.INSTANCE.create();
  builder.addModule("name","output",null,new KotlinModuleDescriptionBuilder.DependencyProvider(){
    @Override public void processClassPath(    @NotNull KotlinModuleDescriptionBuilder.DependencyProcessor processor){
      processor.processAnnotationRoots(Arrays.asList(new File("a1/f1"),new File("a2")));
      processor.processClassPathSection("s1",Arrays.asList(new File("cp1"),new File("cp2")));
    }
  }
,Arrays.asList(new File("s1"),new File("s2")),false,Collections.singleton(new File("cp1")));
  builder.addModule("name2","output2",null,new KotlinModuleDescriptionBuilder.DependencyProvider(){
    @Override public void processClassPath(    @NotNull KotlinModuleDescriptionBuilder.DependencyProcessor processor){
      processor.processAnnotationRoots(Arrays.asList(new File("a12/f12"),new File("a22")));
      processor.processClassPathSection("s12",Arrays.asList(new File("cp12"),new File("cp22")));
    }
  }
,Arrays.asList(new File("s12"),new File("s22")),true,Collections.singleton(new File("cp12")));
  String actual=builder.asText().toString();
  JetTestUtils.assertEqualsToFile(new File("idea/testData/modules.xml/multiple.xml"),actual);
}
