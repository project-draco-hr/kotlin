{
  FileInputStream classInputStream=new FileInputStream(tmpdir + "/" + className.replace('.','/')+ ".class");
  try {
class Visitor extends ClassVisitor {
      ActualSignature readSignature;
      public Visitor(){
        super(Opcodes.ASM5);
      }
      @Override public void visit(      int version,      int access,      String name,      String signature,      String superName,      String[] interfaces){
        if (methodName == null) {
          Assert.assertNull(readSignature);
          readSignature=new ActualSignature(name,signature);
        }
        super.visit(version,access,name,signature,superName,interfaces);
      }
      @Override public MethodVisitor visitMethod(      int access,      String name,      final String desc,      final String signature,      String[] exceptions){
        if (name.equals(methodName)) {
          return new MethodVisitor(Opcodes.ASM5){
            @Override public void visitEnd(){
              Assert.assertNull(readSignature);
              readSignature=new ActualSignature(desc,signature);
            }
          }
;
        }
        return super.visitMethod(access,name,desc,signature,exceptions);
      }
    }
    Visitor visitor=new Visitor();
    new ClassReader(classInputStream).accept(visitor,ClassReader.SKIP_CODE | ClassReader.SKIP_DEBUG | ClassReader.SKIP_FRAMES);
    Assert.assertNotNull("method not found: " + className + "::"+ methodName,visitor.readSignature);
    return visitor.readSignature;
  }
  finally {
    Closeables.closeQuietly(classInputStream);
  }
}
