{
  ProtoBuf.Class.Builder builder=ProtoBuf.Class.newBuilder();
  int flags=Flags.getClassFlags(hasAnnotations(classDescriptor),classDescriptor.getVisibility(),classDescriptor.getModality(),classDescriptor.getKind(),classDescriptor.isInner(),classDescriptor.isCompanionObject());
  builder.setFlags(flags);
  builder.setFqName(getClassId(classDescriptor));
  for (  TypeParameterDescriptor typeParameterDescriptor : classDescriptor.getTypeConstructor().getParameters()) {
    builder.addTypeParameter(typeParameter(typeParameterDescriptor));
  }
  if (!KotlinBuiltIns.isSpecialClassWithNoSupertypes(classDescriptor)) {
    for (    JetType supertype : classDescriptor.getTypeConstructor().getSupertypes()) {
      builder.addSupertype(type(supertype));
    }
  }
  for (  ConstructorDescriptor descriptor : classDescriptor.getConstructors()) {
    builder.addConstructor(constructorProto(descriptor));
  }
  for (  DeclarationDescriptor descriptor : sort(classDescriptor.getDefaultType().getMemberScope().getAllDescriptors())) {
    if (descriptor instanceof CallableMemberDescriptor) {
      CallableMemberDescriptor member=(CallableMemberDescriptor)descriptor;
      if (member.getKind() == CallableMemberDescriptor.Kind.FAKE_OVERRIDE)       continue;
      if (descriptor instanceof PropertyDescriptor) {
        builder.addProperty(propertyProto((PropertyDescriptor)descriptor));
      }
 else       if (descriptor instanceof FunctionDescriptor) {
        builder.addFunction(functionProto((FunctionDescriptor)descriptor));
      }
    }
  }
  for (  DeclarationDescriptor descriptor : sort(classDescriptor.getUnsubstitutedInnerClassesScope().getAllDescriptors())) {
    int name=getSimpleNameIndex(descriptor.getName());
    if (isEnumEntry(descriptor)) {
      builder.addEnumEntry(name);
    }
 else {
      builder.addNestedClassName(name);
    }
  }
  ClassDescriptor companionObjectDescriptor=classDescriptor.getCompanionObjectDescriptor();
  if (companionObjectDescriptor != null) {
    builder.setCompanionObjectName(getSimpleNameIndex(companionObjectDescriptor.getName()));
  }
  extension.serializeClass(classDescriptor,builder);
  return builder;
}
