{
  List<JetProperty> properties=collectPropertiesToInitialize(file);
  if (properties.isEmpty())   return;
  MethodVisitor mv=builder.newMethod(file,ACC_STATIC,"<clinit>","()V",null,null);
  if (state.getClassBuilderMode() == ClassBuilderMode.FULL) {
    mv.visitCode();
    FrameMap frameMap=new FrameMap();
    SimpleFunctionDescriptorImpl clInit=new SimpleFunctionDescriptorImpl(descriptor,Collections.<AnnotationDescriptor>emptyList(),Name.special("<clinit>"),CallableMemberDescriptor.Kind.SYNTHESIZED);
    clInit.initialize(null,null,Collections.<TypeParameterDescriptor>emptyList(),Collections.<ValueParameterDescriptor>emptyList(),null,null,Visibilities.PRIVATE,false);
    ExpressionCodegen codegen=new ExpressionCodegen(mv,frameMap,Type.VOID_TYPE,CodegenContext.STATIC.intoFunction(clInit),state);
    for (    JetDeclaration declaration : properties) {
      ImplementationBodyCodegen.initializeProperty(codegen,state.getBindingContext(),(JetProperty)declaration);
    }
    mv.visitInsn(RETURN);
    FunctionCodegen.endVisit(mv,"static initializer for namespace",file);
    mv.visitEnd();
  }
}
