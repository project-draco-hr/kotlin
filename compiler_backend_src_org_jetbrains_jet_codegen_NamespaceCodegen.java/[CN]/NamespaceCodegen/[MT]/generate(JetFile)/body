{
  boolean generateSrcClass=false;
  FieldOwnerContext packagePartContext=CodegenContext.STATIC.intoPackagePart(getPackageFragment(file));
  for (  JetDeclaration declaration : file.getDeclarations()) {
    if (declaration instanceof JetProperty || declaration instanceof JetNamedFunction) {
      generateSrcClass=true;
    }
 else     if (declaration instanceof JetClassOrObject) {
      if (state.isGenerateDeclaredClasses()) {
        generateClassOrObject((JetClassOrObject)declaration);
      }
    }
 else     if (declaration instanceof JetScript) {
      ScriptCodegen.createScriptCodegen((JetScript)declaration,state,packagePartContext).generate();
    }
  }
  if (!generateSrcClass)   return null;
  Type packagePartType=getNamespacePartType(getPackageClassFqName(name),file.getVirtualFile());
  ClassBuilder builder=state.getFactory().forPackageFragment(packagePartType,file);
  new NamespacePartCodegen(builder,file,packagePartType,packagePartContext,state).generate();
  FieldOwnerContext namespaceFacade=CodegenContext.STATIC.intoPackageFacade(packagePartType,getPackageFragment(file));
  for (  JetDeclaration declaration : file.getDeclarations()) {
    if (declaration instanceof JetNamedFunction || declaration instanceof JetProperty) {
      genFunctionOrProperty(namespaceFacade,(JetTypeParameterListOwner)declaration,v.getClassBuilder());
    }
  }
  return builder;
}
