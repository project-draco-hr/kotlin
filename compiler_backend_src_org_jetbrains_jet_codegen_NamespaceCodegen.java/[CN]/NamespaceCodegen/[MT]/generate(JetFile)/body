{
  NamespaceDescriptor descriptor=state.getBindingContext().get(BindingContext.FILE_TO_NAMESPACE,file);
  final CodegenContext context=CodegenContext.STATIC.intoNamespace(descriptor);
  final FunctionCodegen functionCodegen=new FunctionCodegen(context,v,state);
  final PropertyCodegen propertyCodegen=new PropertyCodegen(context,v,functionCodegen,state);
  final ClassCodegen classCodegen=state.forClass();
  for (  JetDeclaration declaration : file.getDeclarations()) {
    if (declaration instanceof JetProperty) {
      propertyCodegen.gen((JetProperty)declaration);
    }
 else     if (declaration instanceof JetNamedFunction) {
      try {
        functionCodegen.gen((JetNamedFunction)declaration);
      }
 catch (      CompilationException e) {
        throw e;
      }
catch (      Exception e) {
        throw new CompilationException("Failed to generate function " + declaration.getName(),e,declaration);
      }
    }
 else     if (declaration instanceof JetClassOrObject) {
      classCodegen.generate(context,(JetClassOrObject)declaration);
    }
  }
  if (hasNonConstantPropertyInitializers(file)) {
    generateStaticInitializers(file);
  }
}
