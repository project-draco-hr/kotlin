{
  if (context.typeInfoConstants != null) {
    String jvmClassName=getJVMClassName(JetPsiUtil.getFQName(file),true);
    for (int index=0; index != context.typeInfoConstantsCount; index++) {
      JetType type=context.reverseTypeInfoConstants.get(index);
      String fieldName="$typeInfoCache$" + index;
      v.newField(null,ACC_PRIVATE | ACC_STATIC | ACC_SYNTHETIC,fieldName,"Ljet/TypeInfo;",null,null);
      MethodVisitor mmv=v.newMethod(null,ACC_PUBLIC | ACC_STATIC | ACC_SYNTHETIC,"$getCachedTypeInfo$" + index,"()Ljet/TypeInfo;",null,null);
      InstructionAdapter v=new InstructionAdapter(mmv);
      v.visitFieldInsn(GETSTATIC,jvmClassName,fieldName,"Ljet/TypeInfo;");
      v.visitInsn(DUP);
      Label end=new Label();
      v.visitJumpInsn(IFNONNULL,end);
      v.pop();
      generateTypeInfo(context,v,type,state.getTypeMapper(),type);
      v.dup();
      v.visitFieldInsn(PUTSTATIC,jvmClassName,fieldName,"Ljet/TypeInfo;");
      v.visitLabel(end);
      v.visitInsn(ARETURN);
      FunctionCodegen.endVisit(v,"type info method",file);
    }
  }
}
