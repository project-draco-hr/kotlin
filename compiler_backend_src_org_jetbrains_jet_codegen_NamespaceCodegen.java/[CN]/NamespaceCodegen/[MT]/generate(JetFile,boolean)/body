{
  NamespaceDescriptor descriptor=state.getBindingContext().get(BindingContext.FILE_TO_NAMESPACE,file);
  for (  JetDeclaration declaration : file.getDeclarations()) {
    if (declaration instanceof JetProperty) {
      final CodegenContext context=CodegenContext.STATIC.intoNamespace(descriptor);
      genFunctionOrProperty(context,(JetTypeParameterListOwner)declaration,v.getClassBuilder());
    }
 else     if (declaration instanceof JetNamedFunction) {
      if (!multiFile) {
        final CodegenContext context=CodegenContext.STATIC.intoNamespace(descriptor);
        genFunctionOrProperty(context,(JetTypeParameterListOwner)declaration,v.getClassBuilder());
      }
    }
 else     if (declaration instanceof JetClassOrObject) {
      final CodegenContext context=CodegenContext.STATIC.intoNamespace(descriptor);
      genClassOrObject(context,(JetClassOrObject)declaration);
    }
 else     if (declaration instanceof JetScript) {
      state.getScriptCodegen().generate((JetScript)declaration);
    }
  }
  if (multiFile) {
    int k=0;
    for (    JetDeclaration declaration : file.getDeclarations()) {
      if (declaration instanceof JetNamedFunction) {
        k++;
      }
    }
    if (k > 0) {
      String namespaceInternalName=JvmClassName.byFqNameWithoutInnerClasses(name.child(Name.identifier(JvmAbi.PACKAGE_CLASS))).getInternalName();
      String className=getMultiFileNamespaceInternalName(namespaceInternalName,file);
      ClassBuilder builder=state.getFactory().forNamespacepart(className,file);
      builder.defineClass(file,V1_6,ACC_PUBLIC,className,null,"java/lang/Object",new String[0]);
      builder.visitSource(file.getName(),null);
      for (      JetDeclaration declaration : file.getDeclarations()) {
        if (declaration instanceof JetNamedFunction) {
{
            final CodegenContext context=CodegenContext.STATIC.intoNamespace(descriptor);
            genFunctionOrProperty(context,(JetTypeParameterListOwner)declaration,builder);
          }
{
            final CodegenContext context=CodegenContext.STATIC.intoNamespacePart(className,descriptor);
            genFunctionOrProperty(context,(JetTypeParameterListOwner)declaration,v.getClassBuilder());
          }
        }
      }
      builder.done();
    }
  }
}
