{
  TestSuite suite=new TestSuite("IntentionTestGenerated");
  suite.addTestSuite(IntentionTestGenerated.class);
  suite.addTestSuite(AddBraces.class);
  suite.addTest(AttributeCallReplacements.innerSuite());
  suite.addTest(Branched.innerSuite());
  suite.addTestSuite(ConvertAssertToIf.class);
  suite.addTestSuite(ConvertIfToAssert.class);
  suite.addTestSuite(ConvertNegatedBooleanSequence.class);
  suite.addTestSuite(ConvertNegatedExpressionWithDemorgansLaw.class);
  suite.addTestSuite(ConvertToBlockBody.class);
  suite.addTestSuite(ConvertToConcatenatedStringIntention.class);
  suite.addTestSuite(ConvertToExpressionBody.class);
  suite.addTestSuite(ConvertToForEachFunctionCall.class);
  suite.addTestSuite(ConvertToForEachLoop.class);
  suite.addTestSuite(ConvertToStringTemplateIntention.class);
  suite.addTest(Declarations.innerSuite());
  suite.addTestSuite(InsertCurlyBracesToTemplate.class);
  suite.addTestSuite(InsertExplicitTypeArguments.class);
  suite.addTestSuite(InvertIfCondition.class);
  suite.addTestSuite(MakeTypeExplicitInLambda.class);
  suite.addTestSuite(MakeTypeImplicitInLambda.class);
  suite.addTestSuite(MoveLambdaInsideParentheses.class);
  suite.addTestSuite(MoveLambdaOutsideParentheses.class);
  suite.addTestSuite(OperatorToFunction.class);
  suite.addTestSuite(ReconstructedType.class);
  suite.addTestSuite(RemoveBraces.class);
  suite.addTestSuite(RemoveCurlyBracesFromTemplate.class);
  suite.addTest(RemoveExplicitTypeArguments.innerSuite());
  suite.addTestSuite(RemoveUnnecessaryParentheses.class);
  suite.addTestSuite(ReplaceExplicitFunctionLiteralParamWithIt.class);
  suite.addTestSuite(ReplaceItWithExplicitFunctionLiteralParam.class);
  suite.addTestSuite(ReplaceWithDotQualifiedMethodCall.class);
  suite.addTestSuite(ReplaceWithInfixFunctionCall.class);
  suite.addTestSuite(ReplaceWithOperatorAssign.class);
  suite.addTestSuite(ReplaceWithTraditionalAssignment.class);
  suite.addTestSuite(SimplifyBooleanWithConstants.class);
  suite.addTest(SimplifyNegatedBinaryExpressionIntention.innerSuite());
  suite.addTestSuite(SpecifyType.class);
  suite.addTestSuite(SplitIf.class);
  suite.addTestSuite(SwapBinaryExpression.class);
  return suite;
}
