{
  if (allDescriptors == null) {
    allDescriptors=Sets.newHashSet();
    if (psiClass != null) {
      allDescriptors.addAll(semanticServices.getDescriptorResolver().resolveMethods(psiClass,descriptor,getResolverScopeData()));
      allDescriptors.addAll(semanticServices.getDescriptorResolver().resolveFieldGroup(descriptor,psiClass,staticMembers(),getResolverScopeData()));
    }
    final PsiPackage javaPackage=semanticServices.getDescriptorResolver().findPackage(packageFQN);
    if (javaPackage != null) {
      boolean isKotlinNamespace=semanticServices.getKotlinNamespaceDescriptor(new FqName(javaPackage.getQualifiedName())) != null;
      final JavaDescriptorResolver descriptorResolver=semanticServices.getDescriptorResolver();
      for (      PsiPackage psiSubPackage : javaPackage.getSubPackages()) {
        NamespaceDescriptor childNs=descriptorResolver.resolveNamespace(new FqName(psiSubPackage.getQualifiedName()),DescriptorSearchRule.IGNORE_IF_FOUND_IN_KOTLIN);
        if (childNs != null) {
          allDescriptors.add(childNs);
        }
      }
      for (      PsiClass psiClass : javaPackage.getClasses()) {
        if (isKotlinNamespace && JvmAbi.PACKAGE_CLASS.equals(psiClass.getName())) {
          continue;
        }
        if (psiClass instanceof JetJavaMirrorMarker) {
          continue;
        }
        if (JvmAbi.PACKAGE_CLASS.equals(psiClass.getName())) {
          continue;
        }
        if (psiClass.hasModifierProperty(PsiModifier.PUBLIC)) {
          ClassDescriptor classDescriptor=descriptorResolver.resolveClass(psiClass,DescriptorSearchRule.ERROR_IF_FOUND_IN_KOTLIN);
          if (classDescriptor != null) {
            allDescriptors.add(classDescriptor);
          }
        }
      }
    }
  }
  return allDescriptors;
}
