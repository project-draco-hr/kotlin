{
  ModuleDescriptor moduleDescriptor=new ModuleDescriptor("<dummy for object>");
  TopDownAnalysisParameters topDownAnalysisParameters=new TopDownAnalysisParameters(Predicates.equalTo(object.getContainingFile()),false,true);
  InjectorForTopDownAnalyzerBasic injector=new InjectorForTopDownAnalyzerBasic(project,topDownAnalysisParameters,new ObservableBindingTrace(trace),moduleDescriptor,JetControlFlowDataTraceFactory.EMPTY,ModuleConfiguration.EMPTY);
  injector.getTopDownAnalyzer().doProcess(outerScope,new NamespaceLikeBuilder(){
    @NotNull @Override public DeclarationDescriptor getOwnerForChildren(){
      return containingDeclaration;
    }
    @Override public void addClassifierDescriptor(    @NotNull MutableClassDescriptorLite classDescriptor){
    }
    @Override public void addObjectDescriptor(    @NotNull MutableClassDescriptorLite objectDescriptor){
    }
    @Override public void addFunctionDescriptor(    @NotNull SimpleFunctionDescriptor functionDescriptor){
      throw new UnsupportedOperationException();
    }
    @Override public void addPropertyDescriptor(    @NotNull PropertyDescriptor propertyDescriptor){
    }
    @Override public ClassObjectStatus setClassObjectDescriptor(    @NotNull MutableClassDescriptorLite classObjectDescriptor){
      return ClassObjectStatus.NOT_ALLOWED;
    }
  }
,Collections.<PsiElement>singletonList(object));
}
