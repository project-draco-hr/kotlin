{
  ModuleDescriptorImpl moduleDescriptor=new ModuleDescriptorImpl(Name.special("<dummy for object>"),Collections.<ImportPath>emptyList(),PlatformToKotlinClassMap.EMPTY);
  TopDownAnalysisParameters topDownAnalysisParameters=new TopDownAnalysisParameters(globalContext.getStorageManager(),globalContext.getExceptionTracker(),Predicates.equalTo(object.getContainingFile()),false,true);
  InjectorForTopDownAnalyzerBasic injector=new InjectorForTopDownAnalyzerBasic(object.getProject(),topDownAnalysisParameters,context.trace,moduleDescriptor);
  TopDownAnalysisContext c=new TopDownAnalysisContext(topDownAnalysisParameters);
  c.setOuterDataFlowInfo(context.dataFlowInfo);
  injector.getTopDownAnalyzer().doProcess(c,context.scope,new PackageLikeBuilder(){
    @NotNull @Override public DeclarationDescriptor getOwnerForChildren(){
      return containingDeclaration;
    }
    @Override public void addClassifierDescriptor(    @NotNull MutableClassDescriptorLite classDescriptor){
      if (scope != null) {
        scope.addClassifierDescriptor(classDescriptor);
      }
    }
    @Override public void addFunctionDescriptor(    @NotNull SimpleFunctionDescriptor functionDescriptor){
      throw new UnsupportedOperationException();
    }
    @Override public void addPropertyDescriptor(    @NotNull PropertyDescriptor propertyDescriptor){
    }
    @Override public ClassObjectStatus setClassObjectDescriptor(    @NotNull MutableClassDescriptorLite classObjectDescriptor){
      return ClassObjectStatus.NOT_ALLOWED;
    }
  }
,Collections.<PsiElement>singletonList(object));
}
