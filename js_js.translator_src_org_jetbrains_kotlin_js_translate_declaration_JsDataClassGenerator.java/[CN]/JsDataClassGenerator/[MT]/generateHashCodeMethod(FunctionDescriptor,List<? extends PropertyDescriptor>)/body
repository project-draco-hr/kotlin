{
  JsFunction functionObj=generateJsMethod(function);
  JsProgram jsProgram=context.program();
  List<JsStatement> statements=functionObj.getBody().getStatements();
  JsName varName=functionObj.getScope().declareName("result");
  statements.add(new JsVars(new JsVars.JsVar(varName,JsNumberLiteral.ZERO)));
  for (  PropertyDescriptor prop : classProperties) {
    JsName name=context.getNameForDescriptor(prop);
    JsExpression component=new JsInvocation(context.namer().kotlin("hashCode"),new JsNameRef(name,JsLiteral.THIS));
    JsExpression newHashValue=JsAstUtils.sum(JsAstUtils.mul(new JsNameRef(varName),jsProgram.getNumberLiteral(31)),component);
    JsExpression assignment=JsAstUtils.assignment(new JsNameRef(varName),new JsBinaryOperation(JsBinaryOperator.BIT_OR,newHashValue,jsProgram.getNumberLiteral(0)));
    statements.add(assignment.makeStmt());
  }
  statements.add(new JsReturn(new JsNameRef(varName)));
}
