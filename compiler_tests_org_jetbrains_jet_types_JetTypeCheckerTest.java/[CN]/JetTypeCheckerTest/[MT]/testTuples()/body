{
  assertSubtype("Unit","#()");
  assertSubtype("#()","Unit");
  assertSubtype("#()","#()");
  assertSubtype("#(Boolean)","#(Boolean)");
  assertSubtype("#(Byte)","#(Byte)");
  assertSubtype("#(Char)","#(Char)");
  assertSubtype("#(Short)","#(Short)");
  assertSubtype("#(Int)","#(Int)");
  assertSubtype("#(Long)","#(Long)");
  assertSubtype("#(Float)","#(Float)");
  assertSubtype("#(Double)","#(Double)");
  assertSubtype("#(Unit)","#(Unit)");
  assertSubtype("#(Unit, Unit)","#(Unit, Unit)");
  assertSubtype("#(Boolean)","#(Boolean)");
  assertSubtype("#(Byte)","#(Byte)");
  assertSubtype("#(Char)","#(Char)");
  assertSubtype("#(Short)","#(Short)");
  assertSubtype("#(Int)","#(Int)");
  assertSubtype("#(Long)","#(Long)");
  assertSubtype("#(Float)","#(Float)");
  assertSubtype("#(Double)","#(Double)");
  assertSubtype("#(Unit)","#(Unit)");
  assertSubtype("#(Unit, Unit)","#(Unit, Unit)");
  assertNotSubtype("#(Unit)","#(Int)");
  assertSubtype("#(Unit)","#(Any)");
  assertSubtype("#(Unit, Unit)","#(Any, Any)");
  assertSubtype("#(Unit, Unit)","#(Any, Unit)");
  assertSubtype("#(Unit, Unit)","#(Unit, Any)");
}
