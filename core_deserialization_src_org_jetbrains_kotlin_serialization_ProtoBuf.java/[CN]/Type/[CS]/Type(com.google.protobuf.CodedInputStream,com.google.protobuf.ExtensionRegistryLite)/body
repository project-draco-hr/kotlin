{
  initFields();
  int mutable_bitField0_=0;
  try {
    boolean done=false;
    while (!done) {
      int tag=input.readTag();
switch (tag) {
case 0:
        done=true;
      break;
default :
{
      if (!parseUnknownField(input,extensionRegistry,tag)) {
        done=true;
      }
      break;
    }
case 10:
{
    org.jetbrains.kotlin.serialization.ProtoBuf.Type.Constructor.Builder subBuilder=null;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      subBuilder=constructor_.toBuilder();
    }
    constructor_=input.readMessage(org.jetbrains.kotlin.serialization.ProtoBuf.Type.Constructor.PARSER,extensionRegistry);
    if (subBuilder != null) {
      subBuilder.mergeFrom(constructor_);
      constructor_=subBuilder.buildPartial();
    }
    bitField0_|=0x00000001;
    break;
  }
case 18:
{
  if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
    argument_=new java.util.ArrayList<org.jetbrains.kotlin.serialization.ProtoBuf.Type.Argument>();
    mutable_bitField0_|=0x00000002;
  }
  argument_.add(input.readMessage(org.jetbrains.kotlin.serialization.ProtoBuf.Type.Argument.PARSER,extensionRegistry));
  break;
}
case 24:
{
bitField0_|=0x00000002;
nullable_=input.readBool();
break;
}
case 32:
{
bitField0_|=0x00000004;
flexibleTypeCapabilitiesId_=input.readInt32();
break;
}
case 42:
{
org.jetbrains.kotlin.serialization.ProtoBuf.Type.Builder subBuilder=null;
if (((bitField0_ & 0x00000008) == 0x00000008)) {
subBuilder=flexibleUpperBound_.toBuilder();
}
flexibleUpperBound_=input.readMessage(org.jetbrains.kotlin.serialization.ProtoBuf.Type.PARSER,extensionRegistry);
if (subBuilder != null) {
subBuilder.mergeFrom(flexibleUpperBound_);
flexibleUpperBound_=subBuilder.buildPartial();
}
bitField0_|=0x00000008;
break;
}
}
}
}
 catch (com.google.protobuf.InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
}
catch (java.io.IOException e) {
throw new com.google.protobuf.InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(this);
}
 finally {
if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
argument_=java.util.Collections.unmodifiableList(argument_);
}
makeExtensionsImmutable();
}
}
