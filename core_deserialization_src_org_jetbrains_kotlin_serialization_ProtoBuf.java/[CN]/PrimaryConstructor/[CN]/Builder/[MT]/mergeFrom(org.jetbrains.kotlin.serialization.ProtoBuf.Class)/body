{
  if (other == org.jetbrains.kotlin.serialization.ProtoBuf.Class.getDefaultInstance())   return this;
  if (other.hasFlags()) {
    setFlags(other.getFlags());
  }
  if (other.hasFqName()) {
    setFqName(other.getFqName());
  }
  if (other.hasCompanionObjectName()) {
    setCompanionObjectName(other.getCompanionObjectName());
  }
  if (!other.typeParameter_.isEmpty()) {
    if (typeParameter_.isEmpty()) {
      typeParameter_=other.typeParameter_;
      bitField0_=(bitField0_ & ~0x00000008);
    }
 else {
      ensureTypeParameterIsMutable();
      typeParameter_.addAll(other.typeParameter_);
    }
  }
  if (!other.supertype_.isEmpty()) {
    if (supertype_.isEmpty()) {
      supertype_=other.supertype_;
      bitField0_=(bitField0_ & ~0x00000010);
    }
 else {
      ensureSupertypeIsMutable();
      supertype_.addAll(other.supertype_);
    }
  }
  if (!other.nestedClassName_.isEmpty()) {
    if (nestedClassName_.isEmpty()) {
      nestedClassName_=other.nestedClassName_;
      bitField0_=(bitField0_ & ~0x00000020);
    }
 else {
      ensureNestedClassNameIsMutable();
      nestedClassName_.addAll(other.nestedClassName_);
    }
  }
  if (!other.constructor_.isEmpty()) {
    if (constructor_.isEmpty()) {
      constructor_=other.constructor_;
      bitField0_=(bitField0_ & ~0x00000040);
    }
 else {
      ensureConstructorIsMutable();
      constructor_.addAll(other.constructor_);
    }
  }
  if (!other.function_.isEmpty()) {
    if (function_.isEmpty()) {
      function_=other.function_;
      bitField0_=(bitField0_ & ~0x00000080);
    }
 else {
      ensureFunctionIsMutable();
      function_.addAll(other.function_);
    }
  }
  if (!other.property_.isEmpty()) {
    if (property_.isEmpty()) {
      property_=other.property_;
      bitField0_=(bitField0_ & ~0x00000100);
    }
 else {
      ensurePropertyIsMutable();
      property_.addAll(other.property_);
    }
  }
  if (!other.member_.isEmpty()) {
    if (member_.isEmpty()) {
      member_=other.member_;
      bitField0_=(bitField0_ & ~0x00000200);
    }
 else {
      ensureMemberIsMutable();
      member_.addAll(other.member_);
    }
  }
  if (!other.enumEntry_.isEmpty()) {
    if (enumEntry_.isEmpty()) {
      enumEntry_=other.enumEntry_;
      bitField0_=(bitField0_ & ~0x00000400);
    }
 else {
      ensureEnumEntryIsMutable();
      enumEntry_.addAll(other.enumEntry_);
    }
  }
  if (other.hasPrimaryConstructor()) {
    mergePrimaryConstructor(other.getPrimaryConstructor());
  }
  if (!other.secondaryConstructor_.isEmpty()) {
    if (secondaryConstructor_.isEmpty()) {
      secondaryConstructor_=other.secondaryConstructor_;
      bitField0_=(bitField0_ & ~0x00001000);
    }
 else {
      ensureSecondaryConstructorIsMutable();
      secondaryConstructor_.addAll(other.secondaryConstructor_);
    }
  }
  this.mergeExtensionFields(other);
  return this;
}
