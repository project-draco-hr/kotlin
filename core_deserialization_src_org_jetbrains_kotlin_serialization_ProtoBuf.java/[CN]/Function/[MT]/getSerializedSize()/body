{
  int size=memoizedSerializedSize;
  if (size != -1)   return size;
  size=0;
  if (((bitField0_ & 0x00000002) == 0x00000002)) {
    size+=org.jetbrains.kotlin.protobuf.CodedOutputStream.computeInt32Size(1,oldFlags_);
  }
  if (((bitField0_ & 0x00000004) == 0x00000004)) {
    size+=org.jetbrains.kotlin.protobuf.CodedOutputStream.computeInt32Size(2,name_);
  }
  if (((bitField0_ & 0x00000008) == 0x00000008)) {
    size+=org.jetbrains.kotlin.protobuf.CodedOutputStream.computeMessageSize(3,returnType_);
  }
  for (int i=0; i < typeParameter_.size(); i++) {
    size+=org.jetbrains.kotlin.protobuf.CodedOutputStream.computeMessageSize(4,typeParameter_.get(i));
  }
  if (((bitField0_ & 0x00000020) == 0x00000020)) {
    size+=org.jetbrains.kotlin.protobuf.CodedOutputStream.computeMessageSize(5,receiverType_);
  }
  for (int i=0; i < valueParameter_.size(); i++) {
    size+=org.jetbrains.kotlin.protobuf.CodedOutputStream.computeMessageSize(6,valueParameter_.get(i));
  }
  if (((bitField0_ & 0x00000010) == 0x00000010)) {
    size+=org.jetbrains.kotlin.protobuf.CodedOutputStream.computeInt32Size(7,returnTypeId_);
  }
  if (((bitField0_ & 0x00000040) == 0x00000040)) {
    size+=org.jetbrains.kotlin.protobuf.CodedOutputStream.computeInt32Size(8,receiverTypeId_);
  }
  if (((bitField0_ & 0x00000001) == 0x00000001)) {
    size+=org.jetbrains.kotlin.protobuf.CodedOutputStream.computeInt32Size(9,flags_);
  }
  if (((bitField0_ & 0x00000080) == 0x00000080)) {
    size+=org.jetbrains.kotlin.protobuf.CodedOutputStream.computeMessageSize(30,typeTable_);
  }
  size+=extensionsSerializedSize();
  memoizedSerializedSize=size;
  return size;
}
