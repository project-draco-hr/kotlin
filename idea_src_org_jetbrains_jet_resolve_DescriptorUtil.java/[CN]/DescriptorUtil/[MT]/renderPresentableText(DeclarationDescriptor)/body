{
  if (declarationDescriptor == null)   return "<null>";
  StringBuilder stringBuilder=new StringBuilder();
  declarationDescriptor.accept(new DeclarationDescriptorVisitor<Void,StringBuilder>(){
    @Override public Void visitVariableDescriptor(    VariableDescriptor descriptor,    StringBuilder builder){
      JetType outType=descriptor.getOutType();
      JetType inType=descriptor.getInType();
      String typeString="<no type>";
      if (inType != null && outType != null) {
        builder.append("var ");
        if (inType.equals(outType)) {
          typeString=outType.toString();
        }
 else {
          typeString="<in " + inType + " out "+ outType+ ">";
        }
      }
 else       if (outType != null) {
        builder.append("val ");
        typeString=outType.toString();
      }
 else       if (inType != null) {
        builder.append("<write-only> ");
        typeString=inType.toString();
      }
      builder.append(renderName(descriptor)).append(" : ").append(typeString);
      return super.visitVariableDescriptor(descriptor,builder);
    }
    @Override public Void visitFunctionDescriptor(    FunctionDescriptor descriptor,    StringBuilder builder){
      builder.append("fun ").append(renderName(descriptor));
      List<TypeParameterDescriptor> typeParameters=descriptor.getTypeParameters();
      renderTypeParameters(typeParameters,builder);
      builder.append("(");
      for (Iterator<ValueParameterDescriptor> iterator=descriptor.getUnsubstitutedValueParameters().iterator(); iterator.hasNext(); ) {
        ValueParameterDescriptor parameterDescriptor=iterator.next();
        visitVariableDescriptor(parameterDescriptor,builder);
        if (iterator.hasNext()) {
          builder.append(", ");
        }
      }
      builder.append(") : ").append(descriptor.getUnsubstitutedReturnType());
      return super.visitFunctionDescriptor(descriptor,builder);
    }
    private void renderTypeParameters(    List<TypeParameterDescriptor> typeParameters,    StringBuilder builder){
      if (!typeParameters.isEmpty()) {
        builder.append("<");
        for (Iterator<TypeParameterDescriptor> iterator=typeParameters.iterator(); iterator.hasNext(); ) {
          TypeParameterDescriptor typeParameterDescriptor=iterator.next();
          renderTypeParameter(typeParameterDescriptor,builder);
          if (iterator.hasNext()) {
            builder.append(", ");
          }
        }
        builder.append(">");
      }
    }
    @Override public Void visitTypeParameterDescriptor(    TypeParameterDescriptor descriptor,    StringBuilder builder){
      builder.append("<");
      renderTypeParameter(descriptor,builder);
      builder.append(">");
      return super.visitTypeParameterDescriptor(descriptor,builder);
    }
    @Override public Void visitNamespaceDescriptor(    NamespaceDescriptor namespaceDescriptor,    StringBuilder builder){
      builder.append("namespace ").append(renderName(namespaceDescriptor));
      return super.visitNamespaceDescriptor(namespaceDescriptor,builder);
    }
    @Override public Void visitClassDescriptor(    ClassDescriptor descriptor,    StringBuilder builder){
      builder.append("class ").append(renderName(descriptor));
      renderTypeParameters(descriptor.getTypeConstructor().getParameters(),builder);
      Collection<? extends JetType> supertypes=descriptor.getTypeConstructor().getSupertypes();
      if (!supertypes.isEmpty()) {
        builder.append(" : ");
        for (Iterator<? extends JetType> iterator=supertypes.iterator(); iterator.hasNext(); ) {
          JetType supertype=iterator.next();
          builder.append(supertype);
          if (iterator.hasNext()) {
            builder.append(", ");
          }
        }
      }
      return super.visitClassDescriptor(descriptor,builder);
    }
  }
,stringBuilder);
  return stringBuilder.toString();
}
