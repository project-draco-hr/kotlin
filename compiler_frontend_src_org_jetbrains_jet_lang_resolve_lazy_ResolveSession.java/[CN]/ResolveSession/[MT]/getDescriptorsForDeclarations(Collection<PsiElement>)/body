{
  final List<DeclarationDescriptor> descriptors=Lists.newArrayList();
  for (  PsiElement declarationOrFile : declarationsOrFiles) {
    declarationOrFile.accept(new JetVisitorVoid(){
      @Override public void visitJetFile(      JetFile file){
        JetNamespaceHeader header=file.getNamespaceHeader();
        if (header == null) {
          throw new UnsupportedOperationException("Lazy resolve is not supported for scripts");
        }
        NamespaceDescriptor packageDescriptor=getPackageDescriptorByFqName(new FqName(header.getQualifiedName()));
        if (packageDescriptor == null) {
          throw new IllegalStateException("Package descriptor not found for: " + header.getQualifiedName());
        }
        JetScope packageMemberScope=packageDescriptor.getMemberScope();
        for (        JetDeclaration declaration : file.getDeclarations()) {
          collectDescriptors(packageMemberScope,declaration);
        }
      }
      @Override public void visitDeclaration(      JetDeclaration dcl){
        JetScope scope=scopeProvider.getResolutionScopeForDeclaration(dcl);
        collectDescriptors(scope,dcl);
      }
      private void collectDescriptors(      JetScope outerScope,      JetDeclaration declaration){
        if (declaration instanceof JetClass) {
          JetClass jetClass=(JetClass)declaration;
          descriptors.add(outerScope.getClassifier(jetClass.getNameAsSafeName()));
        }
 else         if (declaration instanceof JetFunction) {
          JetFunction jetFunction=(JetFunction)declaration;
          Set<FunctionDescriptor> functionDescriptors=outerScope.getFunctions(jetFunction.getNameAsSafeName());
          descriptors.addAll(functionDescriptors);
        }
 else         if (declaration instanceof JetProperty) {
          JetProperty jetProperty=(JetProperty)declaration;
          Set<VariableDescriptor> functionDescriptors=outerScope.getProperties(jetProperty.getNameAsSafeName());
          descriptors.addAll(functionDescriptors);
        }
 else         if (declaration instanceof JetObjectDeclaration) {
          JetObjectDeclaration jetObjectDeclaration=(JetObjectDeclaration)declaration;
          descriptors.addAll(outerScope.getProperties(jetObjectDeclaration.getNameAsSafeName()));
          descriptors.add(outerScope.getObjectDescriptor(jetObjectDeclaration.getNameAsSafeName()));
        }
      }
    }
);
  }
  return descriptors;
}
