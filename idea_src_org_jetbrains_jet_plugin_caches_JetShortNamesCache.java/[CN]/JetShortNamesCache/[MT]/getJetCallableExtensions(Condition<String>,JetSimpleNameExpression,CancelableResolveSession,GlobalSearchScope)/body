{
  Collection<DeclarationDescriptor> resultDescriptors=new ArrayList<DeclarationDescriptor>();
  BindingContext context=resolveSession.resolveToElement(expression);
  JetExpression receiverExpression=expression.getReceiverExpression();
  if (receiverExpression != null) {
    JetType expressionType=context.get(BindingContext.EXPRESSION_TYPE,receiverExpression);
    JetScope scope=context.get(BindingContext.RESOLUTION_SCOPE,receiverExpression);
    if (expressionType != null && scope != null && !ErrorUtils.isErrorType(expressionType)) {
      Collection<String> extensionFunctionsNames=getAllJetExtensionFunctionsNames(searchScope);
      Set<FqName> functionFQNs=new java.util.HashSet<FqName>();
      for (      String name : extensionFunctionsNames) {
        if (acceptedNameCondition.value(name)) {
          Collection<PsiElement> extensionFunctions=getJetExtensionFunctionsByName(name,searchScope);
          for (          PsiElement extensionFunction : extensionFunctions) {
            if (extensionFunction instanceof JetNamedFunction) {
              functionFQNs.add(JetPsiUtil.getFQName((JetNamedFunction)extensionFunction));
            }
 else             if (extensionFunction instanceof PsiMethod) {
              FqName functionFQN=JetFromJavaDescriptorHelper.getJetTopLevelDeclarationFQN((PsiMethod)extensionFunction);
              if (functionFQN != null) {
                functionFQNs.add(functionFQN);
              }
            }
          }
        }
      }
      for (      FqName functionFQN : functionFQNs) {
        for (        CallableDescriptor functionDescriptor : ExpressionTypingUtils.canFindSuitableCall(functionFQN,project,receiverExpression,expressionType,scope,resolveSession.getRootModuleDescriptor())) {
          resultDescriptors.add(functionDescriptor);
        }
      }
    }
  }
  return resultDescriptors;
}
