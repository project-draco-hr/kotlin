{
  JetFile jetFile=(JetFile)expression.getContainingFile();
  BindingContext context=WholeProjectAnalyzerFacade.getLazyResolveContext(jetFile,expression);
  JetScope jetScope=context.get(BindingContext.RESOLUTION_SCOPE,expression);
  if (jetScope == null) {
    return Collections.emptyList();
  }
  Set<FunctionDescriptor> result=Sets.newHashSet();
  Collection<PsiMethod> topLevelFunctionPrototypes=JetFromJavaDescriptorHelper.getTopLevelFunctionPrototypesByName(name,project,scope);
  for (  PsiMethod method : topLevelFunctionPrototypes) {
    FqName functionFQN=JetFromJavaDescriptorHelper.getJetTopLevelDeclarationFQN(method);
    if (functionFQN != null) {
      JetImportDirective importDirective=JetPsiFactory.createImportDirective(project,new ImportPath(functionFQN,false));
      Collection<? extends DeclarationDescriptor> declarationDescriptors=new QualifiedExpressionResolver().analyseImportReference(importDirective,jetScope,new BindingTraceContext());
      for (      DeclarationDescriptor declarationDescriptor : declarationDescriptors) {
        if (declarationDescriptor instanceof FunctionDescriptor) {
          result.add((FunctionDescriptor)declarationDescriptor);
        }
      }
    }
  }
  Collection<JetNamedFunction> jetNamedFunctions=JetShortFunctionNameIndex.getInstance().get(name,project,scope);
  for (  JetNamedFunction jetNamedFunction : jetNamedFunctions) {
    ResolveSession resolveSession=WholeProjectAnalyzerFacade.getLazyResolveSessionForFile((JetFile)jetNamedFunction.getContainingFile());
    FunctionDescriptor functionDescriptor=(FunctionDescriptor)resolveSession.resolveToDescriptor(jetNamedFunction);
    result.add(functionDescriptor);
  }
  return result;
}
