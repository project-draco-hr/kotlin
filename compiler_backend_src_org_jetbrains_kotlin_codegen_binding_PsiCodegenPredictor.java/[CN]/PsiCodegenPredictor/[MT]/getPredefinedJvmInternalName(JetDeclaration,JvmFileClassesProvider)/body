{
  JetDeclaration parentDeclaration=JetStubbedPsiUtil.getContainingDeclaration(declaration);
  String parentInternalName;
  if (parentDeclaration != null) {
    parentInternalName=getPredefinedJvmInternalName(parentDeclaration,fileClassesProvider);
    if (parentInternalName == null) {
      return null;
    }
  }
 else {
    JetFile containingFile=declaration.getContainingJetFile();
    if (declaration instanceof JetNamedFunction) {
      Name name=((JetNamedFunction)declaration).getNameAsName();
      return name == null ? null : FileClasses.getFileClassInternalName(fileClassesProvider,containingFile) + "$" + name.asString();
    }
    parentInternalName=AsmUtil.internalNameByFqNameWithoutInnerClasses(containingFile.getPackageFqName());
  }
  if (!PsiTreeUtil.instanceOf(declaration,JetClass.class,JetObjectDeclaration.class,JetNamedFunction.class,JetProperty.class) || isEnumEntryWithoutBody(declaration)) {
    return null;
  }
  Name name=((JetNamedDeclaration)declaration).getNameAsName();
  if (name == null) {
    return null;
  }
  if (declaration instanceof JetNamedFunction) {
    if (!(parentDeclaration instanceof JetClass || parentDeclaration instanceof JetObjectDeclaration)) {
      return null;
    }
  }
  if (declaration instanceof JetProperty) {
    return parentInternalName + "$" + name.asString();
  }
  if (parentInternalName.isEmpty()) {
    return name.asString();
  }
  return parentInternalName + (parentDeclaration == null ? "/" : "$") + name.asString();
}
