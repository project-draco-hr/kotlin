{
  KtDeclaration parentDeclaration=KtStubbedPsiUtil.getContainingDeclaration(declaration);
  String parentInternalName;
  if (parentDeclaration != null) {
    parentInternalName=getPredefinedJvmInternalName(parentDeclaration,fileClassesProvider);
    if (parentInternalName == null) {
      return null;
    }
  }
 else {
    KtFile containingFile=declaration.getContainingKtFile();
    if (declaration instanceof KtNamedFunction) {
      Name name=((KtNamedFunction)declaration).getNameAsName();
      return name == null ? null : FileClasses.getFileClassInternalName(fileClassesProvider,containingFile) + "$" + name.asString();
    }
    parentInternalName=AsmUtil.internalNameByFqNameWithoutInnerClasses(containingFile.getPackageFqName());
  }
  if (!PsiTreeUtil.instanceOf(declaration,KtClass.class,KtObjectDeclaration.class,KtNamedFunction.class,KtProperty.class) || isEnumEntryWithoutBody(declaration)) {
    return null;
  }
  Name name=((KtNamedDeclaration)declaration).getNameAsName();
  if (name == null) {
    return null;
  }
  if (declaration instanceof KtNamedFunction) {
    if (!(parentDeclaration instanceof KtClass || parentDeclaration instanceof KtObjectDeclaration)) {
      return null;
    }
  }
  if (declaration instanceof KtProperty) {
    return parentInternalName + "$" + name.asString();
  }
  if (parentInternalName.isEmpty()) {
    return name.asString();
  }
  return parentInternalName + (parentDeclaration == null ? "/" : "$") + name.asString();
}
