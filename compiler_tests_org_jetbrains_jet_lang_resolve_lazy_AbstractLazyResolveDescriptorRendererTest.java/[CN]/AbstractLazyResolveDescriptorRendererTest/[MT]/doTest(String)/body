{
  String fileText=FileUtil.loadFile(new File(testFile),true);
  JetFile psiFile=JetPsiFactory.createFile(getProject(),fileText);
  Collection<JetFile> files=Lists.newArrayList(psiFile);
  final ModuleDescriptorImpl lazyModule=AnalyzerFacadeForJVM.createJavaModule("<lazy module>");
  lazyModule.addFragmentProvider(DependencyKind.BUILT_INS,KotlinBuiltIns.getInstance().getBuiltInsModule().getPackageFragmentProvider());
  LockBasedStorageManagerWithExceptionTracking storageManager=LockBasedStorageManagerWithExceptionTracking.create();
  final ResolveSession resolveSession=new ResolveSession(getProject(),storageManager,lazyModule,new FileBasedDeclarationProviderFactory(storageManager,files));
  final List<DeclarationDescriptor> descriptors=new ArrayList<DeclarationDescriptor>();
  psiFile.accept(new JetVisitorVoid(){
    @Override public void visitJetFile(    @NotNull JetFile file){
      FqName fqName=file.getPackageDirective().getFqName();
      if (!fqName.isRoot()) {
        PackageViewDescriptor packageDescriptor=lazyModule.getPackage(fqName);
        descriptors.add(packageDescriptor);
      }
      file.acceptChildren(this);
    }
    @Override public void visitClassObject(    @NotNull JetClassObject classObject){
      classObject.acceptChildren(this);
    }
    @Override public void visitParameter(    @NotNull JetParameter parameter){
      PsiElement declaringElement=parameter.getParent().getParent();
      if (declaringElement instanceof JetFunctionType) {
        return;
      }
      if (declaringElement instanceof JetNamedFunction) {
        JetNamedFunction jetNamedFunction=(JetNamedFunction)declaringElement;
        FunctionDescriptor functionDescriptor=(FunctionDescriptor)getDescriptor(jetNamedFunction,resolveSession);
        addCorrespondingParameterDescriptor(functionDescriptor,parameter);
      }
 else       if (declaringElement instanceof JetClass) {
        JetClass jetClass=(JetClass)declaringElement;
        ClassDescriptor classDescriptor=(ClassDescriptor)getDescriptor(jetClass,resolveSession);
        addCorrespondingParameterDescriptor(classDescriptor.getConstructors().iterator().next(),parameter);
      }
 else {
        super.visitParameter(parameter);
      }
    }
    private void addCorrespondingParameterDescriptor(    FunctionDescriptor functionDescriptor,    JetParameter parameter){
      for (      ValueParameterDescriptor valueParameterDescriptor : functionDescriptor.getValueParameters()) {
        if (valueParameterDescriptor.getName().equals(parameter.getNameAsName())) {
          descriptors.add(valueParameterDescriptor);
        }
      }
      parameter.acceptChildren(this);
    }
    @Override public void visitPropertyAccessor(    @NotNull JetPropertyAccessor accessor){
      JetProperty parent=(JetProperty)accessor.getParent();
      PropertyDescriptor propertyDescriptor=(PropertyDescriptor)getDescriptor(parent,resolveSession);
      if (accessor.isGetter()) {
        descriptors.add(propertyDescriptor.getGetter());
      }
 else {
        descriptors.add(propertyDescriptor.getSetter());
      }
      accessor.acceptChildren(this);
    }
    @Override public void visitAnonymousInitializer(    @NotNull JetClassInitializer initializer){
      initializer.acceptChildren(this);
    }
    @Override public void visitDeclaration(    @NotNull JetDeclaration element){
      DeclarationDescriptor descriptor=getDescriptor(element,resolveSession);
      descriptors.add(descriptor);
      if (descriptor instanceof ClassDescriptor) {
        descriptors.addAll(((ClassDescriptor)descriptor).getConstructors());
      }
      element.acceptChildren(this);
    }
    @Override public void visitJetElement(    @NotNull JetElement element){
      element.acceptChildren(this);
    }
  }
);
  StringBuilder renderedDescriptors=new StringBuilder();
  for (  DeclarationDescriptor descriptor : descriptors) {
    if (renderedDescriptors.length() != 0) {
      renderedDescriptors.append("\n");
    }
    renderedDescriptors.append(DescriptorRenderer.TEXT.render(descriptor));
  }
  Document document=new DocumentImpl(psiFile.getText());
  assertEquals(JetTestUtils.getLastCommentedLines(document),renderedDescriptors.toString());
}
