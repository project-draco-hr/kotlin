{
  StringBuilder sb=new StringBuilder();
  if (myVarIndex.size() != myVarSizes.size()) {
    return "inconsistent";
  }
  List<Trinity<DeclarationDescriptor,Integer,Integer>> descriptors=Lists.newArrayList();
  for (  Object descriptor0 : myVarIndex.keys()) {
    DeclarationDescriptor descriptor=(DeclarationDescriptor)descriptor0;
    int varIndex=myVarIndex.get(descriptor);
    int varSize=myVarSizes.get(descriptor);
    descriptors.add(Trinity.create(descriptor,varIndex,varSize));
  }
  Collections.sort(descriptors,new Comparator<Trinity<DeclarationDescriptor,Integer,Integer>>(){
    @Override public int compare(    Trinity<DeclarationDescriptor,Integer,Integer> left,    Trinity<DeclarationDescriptor,Integer,Integer> right){
      return left.second - right.second;
    }
  }
);
  sb.append("size=").append(myMaxIndex);
  boolean first=true;
  for (  Trinity<DeclarationDescriptor,Integer,Integer> t : descriptors) {
    if (!first) {
      sb.append(", ");
    }
    first=false;
    sb.append(t.first).append(",i=").append(t.second).append(",s=").append(t.third);
  }
  return sb.toString();
}
