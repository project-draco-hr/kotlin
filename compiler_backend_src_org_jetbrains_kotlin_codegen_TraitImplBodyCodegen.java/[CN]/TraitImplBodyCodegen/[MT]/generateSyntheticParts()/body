{
  for (  DeclarationDescriptor memberDescriptor : descriptor.getDefaultType().getMemberScope().getAllDescriptors()) {
    if (!(memberDescriptor instanceof CallableMemberDescriptor))     continue;
    CallableMemberDescriptor fakeOverride=(CallableMemberDescriptor)memberDescriptor;
    if (fakeOverride.getKind().isReal())     continue;
    if (fakeOverride.getVisibility() == Visibilities.INVISIBLE_FAKE)     continue;
    if (fakeOverride.getModality() == Modality.ABSTRACT)     continue;
    CallableMemberDescriptor implementation=findImplementationFromInterface(fakeOverride);
    if (implementation == null)     continue;
    if (implementation instanceof JavaMethodDescriptor)     continue;
    CallableMemberDescriptor copy=fakeOverride.copy(fakeOverride.getContainingDeclaration(),Modality.OPEN,fakeOverride.getVisibility(),CallableMemberDescriptor.Kind.DECLARATION,true);
    if (fakeOverride instanceof FunctionDescriptor) {
      generateDelegationToSuperTraitImpl((FunctionDescriptor)copy,(FunctionDescriptor)implementation);
    }
 else     if (fakeOverride instanceof PropertyDescriptor) {
      PropertyGetterDescriptor getter=((PropertyDescriptor)copy).getGetter();
      PropertyGetterDescriptor implGetter=((PropertyDescriptor)implementation).getGetter();
      if (getter != null && implGetter != null) {
        generateDelegationToSuperTraitImpl(getter,implGetter);
      }
      PropertySetterDescriptor setter=((PropertyDescriptor)copy).getSetter();
      PropertySetterDescriptor implSetter=((PropertyDescriptor)implementation).getSetter();
      if (setter != null && implSetter != null) {
        generateDelegationToSuperTraitImpl(setter,implSetter);
      }
    }
  }
}
