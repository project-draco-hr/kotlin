{
  if (parent.equals("defaultConfig")) {
    if (property.equals("targetSdkVersion")) {
      int version=getIntLiteralValue(value,-1);
      if (version > 0 && version < context.getClient().getHighestKnownApiLevel()) {
        String message="Not targeting the latest versions of Android; compatibility " + "modes apply. Consider testing and updating this version. " + "Consult the android.os.Build.VERSION_CODES javadoc for details.";
        report(context,valueCookie,ManifestDetector.TARGET_NEWER,message);
      }
      if (version > 0) {
        mTargetSdkVersion=version;
        checkTargetCompatibility(context,valueCookie);
      }
 else {
        checkIntegerAsString(context,value,valueCookie);
      }
    }
 else     if (property.equals("minSdkVersion")) {
      int version=getIntLiteralValue(value,-1);
      if (version > 0) {
        mMinSdkVersion=version;
      }
 else {
        checkIntegerAsString(context,value,valueCookie);
      }
    }
    if (value.startsWith("0")) {
      checkOctal(context,value,valueCookie);
    }
    if (property.equals("versionName") || property.equals("versionCode") && !isInteger(value) || !isStringLiteral(value)) {
      if ((value.equals("getVersionCode") || value.equals("getVersionName"))) {
        String message="Bad method name: pick a unique method name which does not " + "conflict with the implicit getters for the defaultConfig " + "properties. For example, try using the prefix compute- "+ "instead of get-.";
        report(context,valueCookie,GRADLE_GETTER,message);
      }
    }
 else     if (property.equals("packageName")) {
      if (isModelOlderThan011(context)) {
        return;
      }
      String message="Deprecated: Replace 'packageName' with 'applicationId'";
      report(context,getPropertyKeyCookie(valueCookie),DEPRECATED,message);
    }
  }
 else   if (property.equals("compileSdkVersion") && parent.equals("android")) {
    int version=getIntLiteralValue(value,-1);
    if (version > 0) {
      mCompileSdkVersion=version;
      checkTargetCompatibility(context,valueCookie);
    }
 else {
      checkIntegerAsString(context,value,valueCookie);
    }
  }
 else   if (property.equals("buildToolsVersion") && parent.equals("android")) {
    String versionString=getStringLiteralValue(value);
    if (versionString != null) {
      PreciseRevision version=parseRevisionSilently(versionString);
      if (version != null) {
        PreciseRevision recommended=getLatestBuildTools(context.getClient(),version.getMajor());
        if (recommended != null && version.compareTo(recommended) < 0) {
          String message="Old buildToolsVersion " + version + "; recommended version is "+ recommended+ " or later";
          report(context,valueCookie,DEPENDENCY,message);
        }
      }
    }
  }
 else   if (parent.equals("dependencies")) {
    if (value.startsWith("files('") && value.endsWith("')")) {
      String path=value.substring("files('".length(),value.length() - 2);
      if (path.contains("\\\\")) {
        String message="Do not use Windows file separators in .gradle files; " + "use / instead";
        report(context,valueCookie,PATH,message);
      }
 else       if (new File(path.replace('/',File.separatorChar)).isAbsolute()) {
        String message="Avoid using absolute paths in .gradle files";
        report(context,valueCookie,PATH,message);
      }
    }
 else {
      String dependency=getStringLiteralValue(value);
      if (dependency == null) {
        dependency=getNamedDependency(value);
      }
      if (dependency != null) {
        GradleCoordinate gc=GradleCoordinate.parseCoordinateString(dependency);
        if (gc != null && dependency.contains("$")) {
          gc=resolveCoordinate(context,gc);
        }
        if (gc != null) {
          if (gc.acceptsGreaterRevisions()) {
            String message="Avoid using + in version numbers; can lead " + "to unpredictable and unrepeatable builds (" + dependency + ")";
            report(context,valueCookie,PLUS,message);
          }
          if (!dependency.startsWith(SdkConstants.GRADLE_PLUGIN_NAME) || !checkGradlePluginDependency(context,gc,valueCookie)) {
            checkDependency(context,gc,valueCookie);
          }
        }
      }
    }
  }
 else   if (property.equals("packageNameSuffix")) {
    if (isModelOlderThan011(context)) {
      return;
    }
    String message="Deprecated: Replace 'packageNameSuffix' with 'applicationIdSuffix'";
    report(context,getPropertyKeyCookie(valueCookie),DEPRECATED,message);
  }
 else   if (property.equals("applicationIdSuffix")) {
    String suffix=getStringLiteralValue(value);
    if (suffix != null && !suffix.startsWith(".")) {
      String message="Package suffix should probably start with a \".\"";
      report(context,valueCookie,PATH,message);
    }
  }
}
