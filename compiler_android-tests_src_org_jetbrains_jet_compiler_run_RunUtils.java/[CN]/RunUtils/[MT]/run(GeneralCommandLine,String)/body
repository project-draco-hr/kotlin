{
  System.out.println("RUN COMMAND: " + commandLine.getCommandLineString());
  final StringBuilder stdOut=new StringBuilder();
  final StringBuilder stdErr=new StringBuilder();
  final OSProcessHandler handler;
  try {
    handler=new OSProcessHandler(commandLine.createProcess(),commandLine.getCommandLineString(),Charsets.UTF_8);
    if (input != null) {
      handler.getProcessInput().write(input.getBytes());
    }
    close(handler.getProcessInput());
  }
 catch (  ExecutionException e) {
    return new RunResult(false,getStackTrace(e));
  }
catch (  IOException e) {
    return new RunResult(false,getStackTrace(e));
  }
  handler.addProcessListener(new ProcessAdapter(){
    @Override public void onTextAvailable(    ProcessEvent event,    Key outputType){
      String str=event.getText();
      if (outputType == ProcessOutputTypes.STDOUT || outputType == ProcessOutputTypes.SYSTEM) {
        appendToContent(stdOut,str);
      }
 else       if (outputType == ProcessOutputTypes.STDERR) {
        appendToContent(stdErr,str);
      }
    }
    private synchronized void appendToContent(    StringBuilder content,    String line){
      content.append(StringUtil.trimTrailing(line));
      content.append("\n");
    }
  }
);
  handler.startNotify();
  try {
    handler.waitFor(300000);
  }
 catch (  ProcessCanceledException e) {
    return new RunResult(false,getStackTrace(e));
  }
  if (!handler.isProcessTerminated()) {
    return new RunResult(false,"Timeout exception: execution was terminated after 5 min.");
  }
  int exitCode=handler.getProcess().exitValue();
  if (exitCode != 0) {
    return new RunResult(false,builderToString(stdOut) + builderToString(stdErr));
  }
 else {
    String output=builderToString(stdOut) + builderToString(stdErr);
    if (OutputUtils.isBuildFailed(output)) {
      return new RunResult(false,output);
    }
    if (!commandLine.getCommandLineString().contains("install")) {
      System.out.print(output);
    }
    return new RunResult(true,output);
  }
}
