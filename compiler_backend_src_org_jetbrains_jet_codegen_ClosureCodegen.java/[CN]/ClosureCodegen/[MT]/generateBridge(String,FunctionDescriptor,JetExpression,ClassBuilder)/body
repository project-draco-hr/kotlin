{
  final JvmMethodSignature bridge=erasedInvokeSignature(funDescriptor);
  final Method delegate=invokeSignature(funDescriptor).getAsmMethod();
  if (bridge.getAsmMethod().getDescriptor().equals(delegate.getDescriptor()))   return;
  final MethodVisitor mv=cv.newMethod(fun,ACC_PUBLIC,"invoke",bridge.getAsmMethod().getDescriptor(),null,new String[0]);
  if (cv.generateCode() == ClassBuilder.Mode.STUBS) {
    StubCodegen.generateStubCode(mv);
  }
  if (cv.generateCode() == ClassBuilder.Mode.FULL) {
    mv.visitCode();
    InstructionAdapter iv=new InstructionAdapter(mv);
    iv.load(0,Type.getObjectType(className));
    final ReceiverDescriptor receiver=funDescriptor.getReceiverParameter();
    int count=1;
    if (receiver.exists()) {
      StackValue.local(count,JetTypeMapper.TYPE_OBJECT).put(JetTypeMapper.TYPE_OBJECT,iv);
      StackValue.onStack(JetTypeMapper.TYPE_OBJECT).upcast(state.getTypeMapper().mapType(receiver.getType()),iv);
      count++;
    }
    final List<ValueParameterDescriptor> params=funDescriptor.getValueParameters();
    for (    ValueParameterDescriptor param : params) {
      StackValue.local(count,JetTypeMapper.TYPE_OBJECT).put(JetTypeMapper.TYPE_OBJECT,iv);
      StackValue.onStack(JetTypeMapper.TYPE_OBJECT).upcast(state.getTypeMapper().mapType(param.getType()),iv);
      count++;
    }
    iv.invokespecial(className,"invoke",delegate.getDescriptor());
    StackValue.onStack(delegate.getReturnType()).put(JetTypeMapper.TYPE_OBJECT,iv);
    iv.areturn(JetTypeMapper.TYPE_OBJECT);
    FunctionCodegen.endVisit(mv,"bridge",fun);
  }
}
