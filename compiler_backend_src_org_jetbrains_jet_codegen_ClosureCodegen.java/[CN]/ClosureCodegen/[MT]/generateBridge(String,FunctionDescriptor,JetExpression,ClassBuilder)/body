{
  JvmMethodSignature bridge=erasedInvokeSignature(funDescriptor);
  Method delegate=typeMapper.invokeSignature(funDescriptor).getAsmMethod();
  if (bridge.getAsmMethod().getDescriptor().equals(delegate.getDescriptor())) {
    return;
  }
  MethodVisitor mv=cv.newMethod(fun,ACC_PUBLIC | ACC_BRIDGE | ACC_VOLATILE,"invoke",bridge.getAsmMethod().getDescriptor(),null,new String[0]);
  if (state.getClassBuilderMode() == ClassBuilderMode.STUBS) {
    genStubCode(mv);
  }
  if (state.getClassBuilderMode() == ClassBuilderMode.FULL) {
    mv.visitCode();
    InstructionAdapter iv=new InstructionAdapter(mv);
    iv.load(0,Type.getObjectType(className));
    ReceiverParameterDescriptor receiver=funDescriptor.getReceiverParameter();
    int count=1;
    if (receiver != null) {
      StackValue.local(count,OBJECT_TYPE).put(typeMapper.mapType(receiver.getType()),iv);
      count++;
    }
    List<ValueParameterDescriptor> params=funDescriptor.getValueParameters();
    for (    ValueParameterDescriptor param : params) {
      StackValue.local(count,OBJECT_TYPE).put(typeMapper.mapType(param.getType()),iv);
      count++;
    }
    iv.invokevirtual(className,"invoke",delegate.getDescriptor());
    StackValue.onStack(delegate.getReturnType()).put(OBJECT_TYPE,iv);
    iv.areturn(OBJECT_TYPE);
    FunctionCodegen.endVisit(mv,"bridge",fun);
  }
}
