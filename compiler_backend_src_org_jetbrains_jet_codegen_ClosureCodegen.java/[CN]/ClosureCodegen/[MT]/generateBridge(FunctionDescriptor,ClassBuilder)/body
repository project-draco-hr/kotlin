{
  Method bridge=typeMapper.mapSignature(interfaceFunction).getAsmMethod();
  Method delegate=typeMapper.mapSignature(interfaceFunction.getName(),funDescriptor).getAsmMethod();
  if (bridge.getDescriptor().equals(delegate.getDescriptor())) {
    return;
  }
  MethodVisitor mv=cv.newMethod(fun,ACC_PUBLIC | ACC_BRIDGE,interfaceFunction.getName().asString(),bridge.getDescriptor(),null,ArrayUtil.EMPTY_STRING_ARRAY);
  if (state.getClassBuilderMode() == ClassBuilderMode.STUBS) {
    genStubCode(mv);
  }
  if (state.getClassBuilderMode() == ClassBuilderMode.FULL) {
    mv.visitCode();
    InstructionAdapter iv=new InstructionAdapter(mv);
    iv.load(0,asmType);
    ReceiverParameterDescriptor receiver=funDescriptor.getReceiverParameter();
    int count=1;
    if (receiver != null) {
      StackValue.local(count,bridge.getArgumentTypes()[count - 1]).put(typeMapper.mapType(receiver.getType()),iv);
      count++;
    }
    List<ValueParameterDescriptor> params=funDescriptor.getValueParameters();
    for (    ValueParameterDescriptor param : params) {
      StackValue.local(count,bridge.getArgumentTypes()[count - 1]).put(typeMapper.mapType(param.getType()),iv);
      count++;
    }
    iv.invokevirtual(asmType.getInternalName(),interfaceFunction.getName().asString(),delegate.getDescriptor());
    StackValue.onStack(delegate.getReturnType()).put(bridge.getReturnType(),iv);
    iv.areturn(bridge.getReturnType());
    FunctionCodegen.endVisit(mv,"bridge",fun);
  }
}
