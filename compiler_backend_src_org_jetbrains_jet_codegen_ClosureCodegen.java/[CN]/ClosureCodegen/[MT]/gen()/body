{
  ClassBuilder cv=state.getFactory().newVisitor(name,fun.getContainingFile());
  FunctionDescriptor interfaceFunction;
  String[] superInterfaces;
  if (samInterface == null) {
    interfaceFunction=getInvokeFunction(funDescriptor);
    superInterfaces=ArrayUtil.EMPTY_STRING_ARRAY;
  }
 else {
    interfaceFunction=SingleAbstractMethodUtils.getAbstractMethodOfSamInterface(samInterface);
    superInterfaces=new String[]{JvmClassName.byClassDescriptor(samInterface).getInternalName()};
  }
  cv.defineClass(fun,V1_6,ACC_FINAL | ACC_SUPER,name.getInternalName(),getGenericSignature(),superClass.getInternalName(),superInterfaces);
  cv.visitSource(fun.getContainingFile().getName(),null);
  generateBridge(interfaceFunction,cv);
  JvmMethodSignature jvmMethodSignature=typeMapper.mapSignature(interfaceFunction.getName(),funDescriptor);
  FunctionCodegen fc=new FunctionCodegen(context,cv,state);
  fc.generateMethod(fun,jvmMethodSignature,funDescriptor,strategy);
  this.constructor=generateConstructor(cv);
  if (isConst(closure)) {
    generateConstInstance(cv);
  }
  genClosureFields(closure,cv,typeMapper);
  cv.done();
}
