{
  final Pair<String,ClassBuilder> nameAndVisitor=state.forAnonymousSubclass(fun);
  final FunctionDescriptor funDescriptor=(FunctionDescriptor)state.getBindingContext().get(BindingContext.DECLARATION_TO_DESCRIPTOR,fun);
  cv=nameAndVisitor.getSecond();
  name=nameAndVisitor.getFirst();
  SignatureWriter signatureWriter=new SignatureWriter();
  final List<ValueParameterDescriptor> parameters=funDescriptor.getValueParameters();
  final String funClass=getInternalClassName(funDescriptor);
  signatureWriter.visitClassType(funClass);
  for (  ValueParameterDescriptor parameter : parameters) {
    appendType(signatureWriter,parameter.getOutType(),'=');
  }
  appendType(signatureWriter,funDescriptor.getReturnType(),'=');
  signatureWriter.visitEnd();
  cv.defineClass(V1_6,ACC_PUBLIC,name,null,funClass,new String[0]);
  cv.visitSource(fun.getContainingFile().getName(),null);
  generateBridge(name,funDescriptor,fun,cv);
  captureThis=generateBody(funDescriptor,cv,fun.getFunctionLiteral());
  ClassDescriptor thisDescriptor=context.getThisDescriptor();
  final Type enclosingType=thisDescriptor == null ? null : Type.getObjectType(thisDescriptor.getName());
  if (enclosingType == null)   captureThis=false;
  final Method constructor=generateConstructor(funClass,captureThis,fun,funDescriptor.getReturnType());
  if (captureThis) {
    cv.newField(fun,0,"this$0",enclosingType.getDescriptor(),null,null);
  }
  if (isConst()) {
    generateConstInstance(fun);
  }
  cv.done();
  final GeneratedAnonymousClassDescriptor answer=new GeneratedAnonymousClassDescriptor(name,constructor,captureThis);
  for (  DeclarationDescriptor descriptor : closure.keySet()) {
    final EnclosedValueDescriptor valueDescriptor=closure.get(descriptor);
    answer.addArg(valueDescriptor.getOuterValue());
  }
  return answer;
}
