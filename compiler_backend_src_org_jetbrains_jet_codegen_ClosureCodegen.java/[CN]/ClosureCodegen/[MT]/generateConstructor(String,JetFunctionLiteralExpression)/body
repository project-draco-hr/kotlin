{
  int argCount=captureThis ? 1 : 0;
  for (  DeclarationDescriptor descriptor : closure.keySet()) {
    if (descriptor instanceof VariableDescriptor) {
      argCount++;
    }
 else     if (descriptor instanceof FunctionDescriptor) {
      captureReceiver=state.getTypeMapper().mapType(((FunctionDescriptor)descriptor).getReceiverParameter().getType());
      argCount++;
    }
  }
  Type[] argTypes=new Type[argCount];
  int i=0;
  if (captureThis) {
    argTypes[i++]=Type.getObjectType(context.getThisDescriptor().getName());
  }
  if (captureReceiver != null) {
    argTypes[i++]=captureReceiver;
  }
  for (  DeclarationDescriptor descriptor : closure.keySet()) {
    if (descriptor instanceof VariableDescriptor) {
      final Type sharedVarType=exprContext.getSharedVarType(descriptor);
      final Type type=sharedVarType != null ? sharedVarType : state.getTypeMapper().mapType(((VariableDescriptor)descriptor).getOutType());
      argTypes[i++]=type;
    }
  }
  final Method constructor=new Method("<init>",Type.VOID_TYPE,argTypes);
  final MethodVisitor mv=cv.newMethod(fun,ACC_PUBLIC,"<init>",constructor.getDescriptor(),null,new String[0]);
  if (cv.generateCode()) {
    mv.visitCode();
    InstructionAdapter iv=new InstructionAdapter(mv);
    ExpressionCodegen expressionCodegen=new ExpressionCodegen(mv,null,Type.VOID_TYPE,context,state);
    iv.load(0,Type.getObjectType(funClass));
    iv.aconst(null);
    iv.invokespecial(funClass,"<init>","(Ljet/typeinfo/TypeInfo;)V");
    i=1;
    for (    Type type : argTypes) {
      StackValue.local(0,JetTypeMapper.TYPE_OBJECT).put(JetTypeMapper.TYPE_OBJECT,iv);
      StackValue.local(i,type).put(type,iv);
      final String fieldName;
      if (captureThis && i == 1) {
        fieldName="this$0";
      }
 else {
        if (captureReceiver != null && (captureThis && i == 2 || !captureThis && i == 1)) {
          fieldName="receiver$0";
        }
 else {
          fieldName="$" + (i);
          i++;
        }
      }
    }
    iv.visitInsn(RETURN);
    mv.visitMaxs(0,0);
    mv.visitEnd();
  }
  return constructor;
}
