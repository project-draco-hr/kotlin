{
  final Pair<String,ClassBuilder> nameAndVisitor=state.forAnonymousSubclass(fun);
  final FunctionDescriptor funDescriptor=(FunctionDescriptor)bindingContext.get(BindingContext.DECLARATION_TO_DESCRIPTOR,fun);
  cv=nameAndVisitor.getSecond();
  name=nameAndVisitor.getFirst();
  SignatureWriter signatureWriter=new SignatureWriter();
  final List<ValueParameterDescriptor> parameters=funDescriptor.getValueParameters();
  final String funClass=getInternalClassName(funDescriptor);
  signatureWriter.visitClassType(funClass);
  for (  ValueParameterDescriptor parameter : parameters) {
    appendType(signatureWriter,parameter.getOutType(),'=');
  }
  appendType(signatureWriter,funDescriptor.getReturnType(),'=');
  signatureWriter.visitEnd();
  cv.defineClass(fun,V1_6,ACC_PUBLIC,name,null,funClass,new String[0]);
  cv.visitSource(state.transformFileName(fun.getContainingFile().getName()),null);
  generateBridge(name,funDescriptor,fun,cv);
  captureThis=generateBody(funDescriptor,cv,(JetDeclarationWithBody)fun);
  ClassDescriptor thisDescriptor=context.getThisDescriptor();
  final Type enclosingType=thisDescriptor == null ? null : state.getTypeMapper().mapType(thisDescriptor.getDefaultType());
  if (enclosingType == null)   captureThis=false;
  final Method constructor=generateConstructor(funClass,fun);
  if (captureThis) {
    cv.newField(fun,ACC_FINAL,"this$0",enclosingType.getDescriptor(),null,null);
  }
  if (isConst()) {
    generateConstInstance(fun);
  }
  cv.done();
  final GeneratedAnonymousClassDescriptor answer=new GeneratedAnonymousClassDescriptor(name,constructor,captureThis,captureReceiver);
  for (  DeclarationDescriptor descriptor : closure.keySet()) {
    if (descriptor instanceof VariableDescriptor) {
      final EnclosedValueDescriptor valueDescriptor=closure.get(descriptor);
      answer.addArg(valueDescriptor.getOuterValue());
    }
 else     if (CodegenUtil.isNamedFun(descriptor,state.getBindingContext()) && descriptor.getContainingDeclaration() instanceof FunctionDescriptor) {
      final EnclosedValueDescriptor valueDescriptor=closure.get(descriptor);
      answer.addArg(valueDescriptor.getOuterValue());
    }
  }
  return answer;
}
