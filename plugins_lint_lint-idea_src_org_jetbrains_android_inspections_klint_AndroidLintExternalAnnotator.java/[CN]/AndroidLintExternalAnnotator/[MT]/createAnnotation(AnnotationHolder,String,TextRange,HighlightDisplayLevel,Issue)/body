{
  HighlightSeverity severity;
  if (displayLevel == HighlightDisplayLevel.ERROR) {
    severity=HighlightSeverity.ERROR;
  }
 else   if (displayLevel == HighlightDisplayLevel.WARNING) {
    severity=HighlightSeverity.WARNING;
  }
 else   if (displayLevel == HighlightDisplayLevel.WEAK_WARNING) {
    severity=HighlightSeverity.WEAK_WARNING;
  }
 else   if (displayLevel == HighlightDisplayLevel.INFO) {
    severity=HighlightSeverity.INFO;
  }
 else {
    severity=HighlightSeverity.WARNING;
  }
  Method createHtmlAnnotation=getCreateHtmlAnnotation();
  if (createHtmlAnnotation != null) {
    String link=" <a " + "href=\"#lint/" + issue.getId() + "\""+ (UIUtil.isUnderDarcula() ? " color=\"7AB4C9\" " : "")+ ">"+ DaemonBundle.message("inspection.extended.description")+ "</a> "+ getShowMoreShortCut();
    String tooltip=XmlStringUtil.wrapInHtml(RAW.convertTo(message,HTML) + link);
    try {
      return (Annotation)createHtmlAnnotation.invoke(holder,severity,range,message,tooltip);
    }
 catch (    IllegalAccessException ignored) {
      ourCreateHtmlAnnotationMethod=null;
      ourCreateHtmlAnnotationMethodFailed=true;
    }
catch (    InvocationTargetException e) {
      ourCreateHtmlAnnotationMethod=null;
      ourCreateHtmlAnnotationMethodFailed=true;
    }
  }
  return holder.createAnnotation(severity,range,message);
}
