{
  PropertyAccessTranslator result;
  PropertyDescriptor propertyDescriptor=getPropertyDescriptor(expression,context);
  if (isNativeObject(propertyDescriptor) || isBackingFieldReference(expression)) {
    result=new NativePropertyAccessTranslator(propertyDescriptor,qualifier,context);
  }
 else {
    ResolvedCall<?> resolvedCall=getResolvedCallForProperty(context.bindingContext(),expression);
    result=new KotlinPropertyAccessTranslator(propertyDescriptor,qualifier,resolvedCall,context);
  }
  result.setCallType(callType);
  return result;
}
