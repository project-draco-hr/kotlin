{
  return TypeSubstitutor.create(new TypeSubstitution(){
    @Override public TypeProjection get(    TypeConstructor key){
      DeclarationDescriptor declarationDescriptor=key.getDeclarationDescriptor();
      if (declarationDescriptor instanceof TypeParameterDescriptor) {
        TypeParameterDescriptor descriptor=(TypeParameterDescriptor)declarationDescriptor;
        if (typeParameterBounds.containsKey(descriptor)) {
          JetType value=getTypeBounds(descriptor).getValue();
          if (value != null && !TypeUtils.equalsOrContainsAsArgument(value,TypeUtils.DONT_CARE)) {
            return new TypeProjection(value);
          }
          return defaultTypeProjection;
        }
      }
      return null;
    }
    @Override public boolean isEmpty(){
      return false;
    }
    @Override public String toString(){
      return typeParameterBounds.toString();
    }
  }
);
}
