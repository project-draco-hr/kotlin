{
  for (  Map.Entry<TypeParameterDescriptor,Variance> entry : typeVariables.entrySet()) {
    TypeParameterDescriptor typeVariable=entry.getKey();
    Variance positionVariance=entry.getValue();
    typeParameterBounds.put(typeVariable,new TypeBoundsImpl(typeVariable,positionVariance));
  }
  TypeSubstitutor constantSubstitutor=TypeUtils.makeConstantSubstitutor(typeParameterBounds.keySet(),DONT_CARE);
  for (  Map.Entry<TypeParameterDescriptor,TypeBoundsImpl> entry : typeParameterBounds.entrySet()) {
    TypeParameterDescriptor typeVariable=entry.getKey();
    TypeBoundsImpl typeBounds=entry.getValue();
    for (    JetType declaredUpperBound : typeVariable.getUpperBounds()) {
      if (KotlinBuiltIns.getInstance().getNullableAnyType().equals(declaredUpperBound))       continue;
      JetType substitutedBound=constantSubstitutor.substitute(declaredUpperBound,Variance.INVARIANT);
      if (substitutedBound != null) {
        typeBounds.addBound(UPPER_BOUND,substitutedBound,ConstraintPosition.getTypeBoundPosition(typeVariable.getIndex()));
      }
    }
  }
}
