{
  JsBinaryOperator op=x.getOperator();
  JsExpression arg1=x.getArg1();
  _parenPush(x,arg1,!op.isLeftAssociative());
  accept(arg1);
  if (op.isKeyword()) {
    _parenPopOrSpace(x,arg1,!op.isLeftAssociative());
  }
 else {
    _parenPop(x,arg1,!op.isLeftAssociative());
    _spaceOpt();
  }
  p.print(op.getSymbol());
  JsExpression arg2=x.getArg2();
  if (_spaceCalc(op,arg2)) {
    _parenPushOrSpace(x,arg2,op.isLeftAssociative());
  }
 else {
    _spaceOpt();
    _parenPush(x,arg2,op.isLeftAssociative());
  }
  accept(arg2);
  _parenPop(x,arg2,op.isLeftAssociative());
  return false;
}
