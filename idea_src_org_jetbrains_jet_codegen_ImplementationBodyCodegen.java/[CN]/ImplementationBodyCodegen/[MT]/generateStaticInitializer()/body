{
  boolean needTypeInfo=descriptor.getTypeConstructor().getParameters().size() == 0;
  boolean needInstance=isNonLiteralObject();
  if (!needTypeInfo && !needInstance) {
    return;
  }
  final MethodVisitor mv=v.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC,"<clinit>","()V",null,null);
  mv.visitCode();
  InstructionAdapter v=new InstructionAdapter(mv);
  if (needTypeInfo) {
    JetTypeMapper typeMapper=state.getTypeMapper();
    ClassCodegen.newTypeInfo(v,false,typeMapper.jvmType(descriptor,OwnerKind.INTERFACE));
    v.putstatic(typeMapper.jvmName(descriptor,kind),"$typeInfo","Ljet/typeinfo/TypeInfo;");
  }
  if (needInstance) {
    String name=jvmName();
    v.anew(Type.getObjectType(name));
    v.dup();
    v.invokespecial(name,"<init>","()V");
    v.putstatic(name,"$instance",JetTypeMapper.jetImplementationType(descriptor).getDescriptor());
  }
  mv.visitInsn(Opcodes.RETURN);
  mv.visitMaxs(0,0);
  mv.visitEnd();
}
