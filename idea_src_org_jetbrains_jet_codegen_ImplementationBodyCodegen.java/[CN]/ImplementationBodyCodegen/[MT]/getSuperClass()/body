{
  List<JetDelegationSpecifier> delegationSpecifiers=myClass.getDelegationSpecifiers();
  if (delegationSpecifiers.isEmpty())   return "java/lang/Object";
  JetDelegationSpecifier first=delegationSpecifiers.get(0);
  if (first instanceof JetDelegatorToSuperClass || first instanceof JetDelegatorToSuperCall) {
    JetType superType=state.getBindingContext().resolveTypeReference(first.getTypeReference());
    ClassDescriptor superClassDescriptor=(ClassDescriptor)superType.getConstructor().getDeclarationDescriptor();
    final PsiElement declaration=state.getBindingContext().getDeclarationPsiElement(superClassDescriptor);
    if (declaration instanceof PsiClass && ((PsiClass)declaration).isInterface()) {
      return "java/lang/Object";
    }
    return state.getTypeMapper().jvmName(superClassDescriptor,kind);
  }
  return "java/lang/Object";
}
