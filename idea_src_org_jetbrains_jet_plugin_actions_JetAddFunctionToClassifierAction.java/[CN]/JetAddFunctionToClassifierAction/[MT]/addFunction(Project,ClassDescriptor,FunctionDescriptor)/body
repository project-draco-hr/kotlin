{
  final String signatureString=CodeInsightUtils.createFunctionSignatureStringFromDescriptor(functionDescriptor,false);
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  final JetClass classifierDeclaration=(JetClass)DescriptorToDeclarationUtil.INSTANCE$.getDeclaration(project,typeDescriptor);
  CommandProcessor.getInstance().executeCommand(project,new Runnable(){
    @Override public void run(){
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        @Override public void run(){
          JetPsiFactory psiFactory=JetPsiFactory(classifierDeclaration);
          JetClassBody body=classifierDeclaration.getBody();
          if (body == null) {
            PsiElement whitespaceBefore=classifierDeclaration.add(psiFactory.createWhiteSpace());
            body=(JetClassBody)classifierDeclaration.addAfter(psiFactory.createEmptyClassBody(),whitespaceBefore);
            classifierDeclaration.addAfter(psiFactory.createNewLine(),body);
          }
          String functionBody="";
          if (typeDescriptor.getKind() != ClassKind.TRAIT && functionDescriptor.getModality() != Modality.ABSTRACT) {
            functionBody="{}";
            JetType returnType=functionDescriptor.getReturnType();
            if (returnType == null || !KotlinBuiltIns.getInstance().isUnit(returnType)) {
              functionBody="{ throw UnsupportedOperationException() }";
            }
          }
          JetNamedFunction functionElement=psiFactory.createFunction(signatureString + functionBody);
          PsiElement anchor=body.getRBrace();
          JetNamedFunction insertedFunctionElement=(JetNamedFunction)body.addBefore(functionElement,anchor);
          ShortenReferences.INSTANCE$.process(insertedFunctionElement);
        }
      }
);
    }
  }
,JetBundle.message("add.function.to.type.action"),null);
}
