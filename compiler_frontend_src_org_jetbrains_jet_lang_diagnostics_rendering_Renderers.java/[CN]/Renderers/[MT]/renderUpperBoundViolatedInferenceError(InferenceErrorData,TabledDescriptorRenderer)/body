{
  TypeParameterDescriptor typeParameterDescriptor=null;
  ConstraintSystemImpl constraintSystem=(ConstraintSystemImpl)inferenceErrorData.constraintSystem;
  ConstraintSystemStatus status=constraintSystem.getStatus();
  LOG.assertTrue(status.hasViolatedUpperBound(),renderDebugMessage("Upper bound violated renderer is applied for incorrect status",inferenceErrorData));
  ConstraintSystem systemWithoutWeakConstraints=constraintSystem.getSystemWithoutWeakConstraints();
  for (  TypeParameterDescriptor typeParameter : inferenceErrorData.descriptor.getTypeParameters()) {
    if (!ConstraintsUtil.checkUpperBoundIsSatisfied(systemWithoutWeakConstraints,typeParameter,true)) {
      typeParameterDescriptor=typeParameter;
    }
  }
  if (typeParameterDescriptor == null && status.hasConflictingConstraints()) {
    return renderConflictingSubstitutionsInferenceError(inferenceErrorData,result);
  }
  if (typeParameterDescriptor == null) {
    LOG.error(renderDebugMessage("There is no type parameter with violated upper bound for 'upper bound violated' error",inferenceErrorData));
    return result;
  }
  JetType inferredValueForTypeParameter=systemWithoutWeakConstraints.getTypeBounds(typeParameterDescriptor).getValue();
  if (inferredValueForTypeParameter == null) {
    LOG.error(renderDebugMessage("System without weak constraints is not successful, there is no value for type parameter " + typeParameterDescriptor.getName() + "\n: "+ systemWithoutWeakConstraints,inferenceErrorData));
    return result;
  }
  result.text(newText().normal("Type parameter bound for ").strong(typeParameterDescriptor.getName()).normal(" in ")).table(newTable().descriptor(inferenceErrorData.descriptor));
  JetType violatedUpperBound=null;
  for (  JetType upperBound : typeParameterDescriptor.getUpperBounds()) {
    JetType upperBoundWithSubstitutedInferredTypes=systemWithoutWeakConstraints.getResultingSubstitutor().substitute(upperBound,Variance.INVARIANT);
    if (upperBoundWithSubstitutedInferredTypes != null && !JetTypeChecker.DEFAULT.isSubtypeOf(inferredValueForTypeParameter,upperBoundWithSubstitutedInferredTypes)) {
      violatedUpperBound=upperBoundWithSubstitutedInferredTypes;
      break;
    }
  }
  if (violatedUpperBound == null) {
    LOG.error(renderDebugMessage("Type parameter (chosen as violating its upper bound)" + typeParameterDescriptor.getName() + " violates no bounds after substitution",inferenceErrorData));
    return result;
  }
  Renderer<JetType> typeRenderer=result.getTypeRenderer();
  result.text(newText().normal(" is not satisfied: inferred type ").error(typeRenderer.render(inferredValueForTypeParameter)).normal(" is not a subtype of ").strong(typeRenderer.render(violatedUpperBound)));
  return result;
}
