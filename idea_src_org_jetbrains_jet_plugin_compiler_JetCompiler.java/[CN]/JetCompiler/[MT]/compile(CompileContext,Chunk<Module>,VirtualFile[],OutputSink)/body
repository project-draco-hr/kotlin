{
  if (virtualFiles.length == 0)   return;
  final Module module=compileContext.getModuleByFile(virtualFiles[0]);
  final VirtualFile outputDir=compileContext.getModuleOutputDirectory(module);
  if (outputDir == null) {
    compileContext.addMessage(ERROR,"[Internal Error] No output directory","",-1,-1);
    return;
  }
  File kotlinHome=PathUtil.getDefaultCompilerPath();
  if (kotlinHome == null) {
    compileContext.addMessage(ERROR,"Cannot file kotlinc home. Make sure plugin is properly installed","",-1,-1);
    return;
  }
  StringBuilder script=new StringBuilder();
  script.append("import kotlin.modules.*\n");
  script.append("fun project() {\n");
  script.append("module(\"" + moduleChunk.getNodes().iterator().next().getName() + "\") {\n");
  for (  VirtualFile sourceFile : virtualFiles) {
    script.append("sources += \"" + path(sourceFile) + "\"\n");
  }
  ModuleChunk chunk=new ModuleChunk((CompileContextEx)compileContext,moduleChunk,Collections.<Module,List<VirtualFile>>emptyMap());
  for (  VirtualFile root : chunk.getCompilationBootClasspathFiles()) {
    script.append("classpath += \"" + path(root) + "\"\n");
  }
  for (  VirtualFile root : chunk.getCompilationClasspathFiles()) {
    script.append("classpath += \"" + path(root) + "\"\n");
  }
  script.append("}\n");
  script.append("}\n");
  File scriptFile=new File(path(outputDir),"script.kts");
  try {
    FileUtil.writeToFile(scriptFile,script.toString());
  }
 catch (  IOException e) {
    compileContext.addMessage(ERROR,"[Internal Error] Cannot write script to " + scriptFile.getAbsolutePath(),"",-1,-1);
    return;
  }
  final SimpleJavaParameters params=new SimpleJavaParameters();
  params.setJdk(new SimpleJavaSdkType().createJdk("tmp",SystemProperties.getJavaHome()));
  params.setMainClass("org.jetbrains.jet.cli.KotlinCompiler");
  params.getProgramParametersList().add("-module",scriptFile.getAbsolutePath());
  params.getProgramParametersList().add("-output",path(outputDir));
  File libs=new File(kotlinHome,"lib");
  if (!libs.exists() || libs.isFile()) {
    compileContext.addMessage(ERROR,"Broken compiler at '" + libs.getAbsolutePath() + "'. Make sure plugin is properly installed","",-1,-1);
    return;
  }
  File[] jars=libs.listFiles();
  if (jars != null) {
    for (    File jar : jars) {
      if (jar.isFile() && jar.getName().endsWith(".jar")) {
        params.getClassPath().add(jar);
      }
    }
  }
  params.getVMParametersList().addParametersString("-Djava.awt.headless=true -Xmx512m");
  Sdk sdk=params.getJdk();
  final GeneralCommandLine commandLine=JdkUtil.setupJVMCommandLine(((JavaSdkType)sdk.getSdkType()).getVMExecutablePath(sdk),params,false);
  try {
    final OSProcessHandler processHandler=new OSProcessHandler(commandLine.createProcess(),commandLine.getCommandLineString()){
      @Override public Charset getCharset(){
        return commandLine.getCharset();
      }
    }
;
    processHandler.addProcessListener(new ProcessAdapter(){
      @Override public void onTextAvailable(      ProcessEvent event,      Key outputType){
        System.out.println(event.getText());
      }
    }
);
    processHandler.startNotify();
    processHandler.waitFor();
  }
 catch (  Exception e) {
    compileContext.addMessage(ERROR,"[Internal Error] " + e.getLocalizedMessage(),"",-1,-1);
    return;
  }
}
