{
  if (virtualFiles.length == 0)   return;
  final Module module=compileContext.getModuleByFile(virtualFiles[0]);
  final VirtualFile outputDir=compileContext.getModuleOutputDirectory(module);
  if (outputDir == null) {
    compileContext.addMessage(ERROR,"[Internal Error] No output directory","",-1,-1);
    return;
  }
  ApplicationManager.getApplication().runReadAction(new Runnable(){
    @Override public void run(){
      PluginCompilerEnvironment compilerEnvironment=new PluginCompilerEnvironment(compileContext.getProject());
      CompileSession compileSession=new CompileSession(compilerEnvironment);
      compileSession.addSources(compileContext.getCompileScope().getFiles(null,true));
      compileSession.addStdLibSources();
      BindingContext bindingContext=compileSession.analyze();
      boolean errors=false;
      for (      Diagnostic diagnostic : bindingContext.getDiagnostics()) {
switch (diagnostic.getSeverity()) {
case ERROR:
          errors=true;
        report(diagnostic,CompilerMessageCategory.ERROR,compileContext);
      break;
case INFO:
    report(diagnostic,CompilerMessageCategory.INFORMATION,compileContext);
  break;
case WARNING:
report(diagnostic,CompilerMessageCategory.WARNING,compileContext);
break;
}
}
if (!errors) {
final ClassFileFactory factory=compileSession.generate(new CompilationErrorHandler(){
@Override public void reportException(Throwable exception,String fileUrl){
if (exception instanceof CompilationException) {
report((CompilationException)exception,compileContext);
}
 else {
compileContext.addMessage(CompilerMessageCategory.ERROR,exception.getClass().getCanonicalName() + ": " + exception.getMessage(),fileUrl,0,0);
}
}
}
);
List<String> files=factory.files();
for (String file : files) {
File target=new File(outputDir.getPath(),file);
try {
FileUtil.writeToFile(target,factory.asBytes(file));
}
 catch (IOException e) {
compileContext.addMessage(ERROR,e.getMessage(),null,0,0);
}
}
}
}
}
);
}
