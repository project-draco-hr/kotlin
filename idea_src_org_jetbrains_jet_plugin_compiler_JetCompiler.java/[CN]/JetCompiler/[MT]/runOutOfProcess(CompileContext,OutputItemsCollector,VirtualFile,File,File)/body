{
  final SimpleJavaParameters params=new SimpleJavaParameters();
  params.setJdk(new SimpleJavaSdkType().createJdk("tmp",SystemProperties.getJavaHome()));
  params.setMainClass("org.jetbrains.jet.cli.KotlinCompiler");
  params.getProgramParametersList().add("-module",scriptFile.getAbsolutePath());
  params.getProgramParametersList().add("-output",path(outputDir));
  params.getProgramParametersList().add("-tags");
  params.getProgramParametersList().add("-verbose");
  for (  File jar : kompilerClasspath(kotlinHome,compileContext)) {
    params.getClassPath().add(jar);
  }
  params.getVMParametersList().addParametersString("-Djava.awt.headless=true -Xmx512m");
  Sdk sdk=params.getJdk();
  final GeneralCommandLine commandLine=JdkUtil.setupJVMCommandLine(((JavaSdkType)sdk.getSdkType()).getVMExecutablePath(sdk),params,false);
  compileContext.addMessage(INFORMATION,"Invoking out-of-process compiler with arguments: " + commandLine,"",-1,-1);
  try {
    Process process=commandLine.createProcess();
    final InputStream err=process.getErrorStream();
    final InputStream out=process.getInputStream();
    ApplicationManager.getApplication().executeOnPooledThread(new Runnable(){
      @Override public void run(){
        parseCompilerMessagesFromReader(compileContext,new InputStreamReader(out),collector);
      }
    }
);
    ApplicationManager.getApplication().executeOnPooledThread(new Runnable(){
      @Override public void run(){
        try {
          FileUtil.loadBytes(err);
        }
 catch (        IOException e) {
        }
      }
    }
);
    process.waitFor();
    handleProcessTermination(process.exitValue(),compileContext);
  }
 catch (  Exception e) {
    compileContext.addMessage(ERROR,"[Internal Error] " + e.getLocalizedMessage(),"",-1,-1);
    return;
  }
}
