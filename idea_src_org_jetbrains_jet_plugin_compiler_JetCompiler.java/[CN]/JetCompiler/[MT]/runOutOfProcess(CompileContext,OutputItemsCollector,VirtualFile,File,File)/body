{
  final SimpleJavaParameters params=new SimpleJavaParameters();
  params.setJdk(new SimpleJavaSdkType().createJdk("tmp",SystemProperties.getJavaHome()));
  params.setMainClass("org.jetbrains.jet.cli.jvm.K2JVMCompiler");
  for (  String arg : commandLineArguments(outputDir,scriptFile)) {
    params.getProgramParametersList().add(arg);
  }
  for (  File jar : kompilerClasspath(kotlinHome,compileContext)) {
    params.getClassPath().add(jar);
  }
  params.getVMParametersList().addParametersString("-Djava.awt.headless=true -Xmx512m");
  Sdk sdk=params.getJdk();
  final GeneralCommandLine commandLine=JdkUtil.setupJVMCommandLine(((JavaSdkType)sdk.getSdkType()).getVMExecutablePath(sdk),params,false);
  compileContext.addMessage(INFORMATION,"Invoking out-of-process compiler with arguments: " + commandLine,"",-1,-1);
  try {
    final Process process=commandLine.createProcess();
    ApplicationManager.getApplication().executeOnPooledThread(new Runnable(){
      @Override public void run(){
        parseCompilerMessagesFromReader(compileContext,new InputStreamReader(process.getInputStream()),collector);
      }
    }
);
    ApplicationManager.getApplication().executeOnPooledThread(new Runnable(){
      @Override public void run(){
        try {
          FileUtil.loadBytes(process.getErrorStream());
        }
 catch (        IOException e) {
        }
      }
    }
);
    int exitCode=process.waitFor();
    handleProcessTermination(exitCode,compileContext);
  }
 catch (  Exception e) {
    compileContext.addMessage(ERROR,"[Internal Error] " + e.getLocalizedMessage(),"",-1,-1);
    return;
  }
}
