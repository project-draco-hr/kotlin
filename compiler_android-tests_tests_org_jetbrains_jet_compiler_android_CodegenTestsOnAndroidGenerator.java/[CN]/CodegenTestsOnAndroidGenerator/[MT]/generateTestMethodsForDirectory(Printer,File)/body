{
  File[] files=dir.listFiles();
  Assert.assertNotNull("Folder with testData is empty: " + dir.getAbsolutePath(),files);
  Set<String> excludedFiles=SpecialFiles.getExcludedFiles();
  Set<String> filesCompiledWithoutStdLib=SpecialFiles.getFilesCompiledWithoutStdLib();
  Set<String> filesCompiledWithJUnit=SpecialFiles.getFilesCompiledWithJUnit();
  for (  File file : files) {
    if (excludedFiles.contains(file.getName())) {
      continue;
    }
    if (file.isDirectory()) {
      generateTestMethodsForDirectory(p,file);
    }
 else {
      String text=FileUtil.loadFile(file,true);
      if (hasBoxMethod(text)) {
        String generatedTestName=generateTestName(file.getName());
        String packageName=file.getPath().replaceAll("\\\\|-|\\.|/","_");
        text=changePackage(packageName,text);
        final ClassFileFactory factory;
        if (filesCompiledWithoutStdLib.contains(file.getName())) {
          factory=getFactoryFromText(file.getAbsolutePath(),text,environmentWithMockJdk);
        }
 else         if (filesCompiledWithJUnit.contains(file.getName())) {
          factory=getFactoryFromText(file.getAbsolutePath(),text,environmentWithFullJdkAndJUnit);
        }
 else {
          factory=getFactoryFromText(file.getAbsolutePath(),text,environmentWithFullJdk);
        }
        generateTestMethod(p,generatedTestName,StringUtil.escapeStringCharacters(file.getPath()));
        File outputDir=new File(pathManager.getOutputForCompiledFiles());
        if (!outputDir.exists()) {
          outputDir.mkdirs();
        }
        Assert.assertTrue("Cannot create directory for compiled files",outputDir.exists());
        CompileEnvironmentUtil.writeToOutputDirectory(factory,outputDir);
      }
    }
  }
}
