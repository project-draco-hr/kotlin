{
  List<ValueParameterDescriptor> resultParameters=Lists.newArrayList();
  for (  final ValueParameterDescriptor originalParam : parameters.getDescriptors()) {
    final int index=originalParam.getIndex();
    List<JetType> typesFromSuperMethods=ContainerUtil.map(superFunctions,new Function<FunctionDescriptor,JetType>(){
      @Override public JetType fun(      FunctionDescriptor superFunction){
        return superFunction.getValueParameters().get(index).getType();
      }
    }
);
    VarargCheckResult varargCheckResult=checkVarargInSuperFunctions(originalParam);
    JetType altType=modifyTypeAccordingToSuperMethods(varargCheckResult.parameterType,typesFromSuperMethods,false);
    resultParameters.add(new ValueParameterDescriptorImpl(originalParam.getContainingDeclaration(),index,originalParam.getAnnotations(),originalParam.getName(),originalParam.isVar(),altType,originalParam.declaresDefaultValue(),varargCheckResult.isVararg ? KotlinBuiltIns.getInstance().getArrayElementType(altType) : null));
  }
  return new JavaDescriptorResolver.ValueParameterDescriptors(parameters.getReceiverType(),resultParameters);
}
