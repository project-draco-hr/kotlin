{
  Set<Variance> projectionKindsInSuper=Sets.newLinkedHashSet();
  for (  TypeProjectionAndVariance projectionAndVariance : projectionsFromSuper) {
    projectionKindsInSuper.add(projectionAndVariance.typeProjection.getProjectionKind());
  }
  Variance defaultProjectionKind=argument.getProjectionKind();
  if (projectionKindsInSuper.size() == 0) {
    return defaultProjectionKind;
  }
 else   if (projectionKindsInSuper.size() == 1) {
    Variance projectionKindInSuper=projectionKindsInSuper.iterator().next();
    if (defaultProjectionKind == INVARIANT || defaultProjectionKind == projectionKindInSuper) {
      return projectionKindInSuper;
    }
 else {
      reportError("Incompatible projection kinds in type arguments of super methods' return types: " + projectionsFromSuper + ", defined in current: "+ argument);
      return defaultProjectionKind;
    }
  }
 else {
    reportError("Incompatible projection kinds in type arguments of super methods' return types: " + projectionsFromSuper);
    return defaultProjectionKind;
  }
}
