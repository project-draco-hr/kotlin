{
  List<JetFile> jetFiles=getJetFiles(files);
  ModuleDescriptor lazyModule=LazyResolveTestUtil.resolveLazily(jetFiles,getEnvironment());
  ModuleDescriptor eagerModule=LazyResolveTestUtil.resolveEagerly(jetFiles,getEnvironment());
  String path=JetTestUtils.getFilePath(new File(FileUtil.getRelativePath(TEST_DATA_DIR,testDataFile)));
  Set<Name> names=LazyResolveTestUtil.getTopLevelPackagesFromFileList(jetFiles);
  for (  Name name : names) {
    NamespaceDescriptor expected=eagerModule.getRootNamespace().getMemberScope().getNamespace(name);
    NamespaceDescriptor actual=lazyModule.getRootNamespace().getMemberScope().getNamespace(name);
    String txtFileRelativePath=path.replaceAll("\\.kt$|\\.ktscript","." + name.getName() + ".txt");
    File txtFile=new File("compiler/testData/lazyResolve/diagnostics/" + txtFileRelativePath);
    NamespaceComparator.compareNamespaces(expected,actual,NamespaceComparator.RECURSIVE.filterOutput(new Predicate<NamespaceDescriptor>(){
      @Override public boolean apply(      NamespaceDescriptor descriptor){
        return !Name.identifier("jet").equals(descriptor.getName());
      }
    }
),txtFile);
  }
}
