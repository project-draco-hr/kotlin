{
  List<JetFile> jetFiles=getJetFiles(files);
  ModuleDescriptor lazyModule=LazyResolveTestUtil.resolveLazily(jetFiles,getEnvironment());
  ModuleDescriptor eagerModule=LazyResolveTestUtil.resolveEagerly(jetFiles,getEnvironment());
  String path=JetTestUtils.getFilePath(new File(FileUtil.getRelativePath(TEST_DATA_DIR,testDataFile)));
  PackageViewDescriptor expected=eagerModule.getPackage(FqName.ROOT);
  PackageViewDescriptor actual=lazyModule.getPackage(FqName.ROOT);
  String txtFileRelativePath=path.replaceAll("\\.kt$|\\.kts$",".txt");
  File txtFile=new File("compiler/testData/lazyResolve/diagnostics/" + txtFileRelativePath);
  final Set<Name> names=LazyResolveTestUtil.getTopLevelPackagesFromFileList(jetFiles);
  validateAndCompareDescriptors(expected,actual,RECURSIVE.filterRecursion(new Predicate<DeclarationDescriptor>(){
    @Override public boolean apply(    DeclarationDescriptor descriptor){
      if (descriptor instanceof PackageViewDescriptor) {
        FqName fqName=((PackageViewDescriptor)descriptor).getFqName();
        return fqName.isRoot() || !fqName.parent().isRoot() || names.contains(fqName.shortName());
      }
      return true;
    }
  }
),txtFile);
}
