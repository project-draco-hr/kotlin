{
  if (JvmAnnotationNames.isSpecialAnnotation(classId,true))   return null;
  final ClassDescriptor annotationClass=resolveClass(classId,moduleDescriptor);
  return new KotlinJvmBinaryClass.AnnotationArgumentVisitor(){
    private final Map<ValueParameterDescriptor,CompileTimeConstant<?>> arguments=new HashMap<ValueParameterDescriptor,CompileTimeConstant<?>>();
    @Override public void visit(    @Nullable Name name,    @Nullable Object value){
      if (name != null) {
        setArgumentValueByName(name,createConstant(name,value));
      }
    }
    @Override public void visitEnum(    @NotNull Name name,    @NotNull ClassId enumClassId,    @NotNull Name enumEntryName){
      setArgumentValueByName(name,enumEntryValue(enumClassId,enumEntryName));
    }
    @Nullable @Override public AnnotationArrayArgumentVisitor visitArray(    @NotNull final Name name){
      return new KotlinJvmBinaryClass.AnnotationArrayArgumentVisitor(){
        private final ArrayList<CompileTimeConstant<?>> elements=new ArrayList<CompileTimeConstant<?>>();
        @Override public void visit(        @Nullable Object value){
          elements.add(createConstant(name,value));
        }
        @Override public void visitEnum(        @NotNull ClassId enumClassId,        @NotNull Name enumEntryName){
          elements.add(enumEntryValue(enumClassId,enumEntryName));
        }
        @Override public void visitEnd(){
          ValueParameterDescriptor parameter=DescriptorResolverUtils.getAnnotationParameterByName(name,annotationClass);
          if (parameter != null) {
            elements.trimToSize();
            arguments.put(parameter,new ArrayValue(elements,parameter.getType(),true,false));
          }
        }
      }
;
    }
    @NotNull private CompileTimeConstant<?> enumEntryValue(    @NotNull ClassId enumClassId,    @NotNull Name name){
      ClassDescriptor enumClass=resolveClass(enumClassId,moduleDescriptor);
      if (enumClass.getKind() == ClassKind.ENUM_CLASS) {
        ClassifierDescriptor classifier=enumClass.getUnsubstitutedInnerClassesScope().getClassifier(name);
        if (classifier instanceof ClassDescriptor) {
          return new EnumValue((ClassDescriptor)classifier,false);
        }
      }
      return ErrorValue.create("Unresolved enum entry: " + enumClassId + "."+ name);
    }
    @Override public void visitEnd(){
      result.add(new AnnotationDescriptorImpl(annotationClass.getDefaultType(),arguments));
    }
    @NotNull private CompileTimeConstant<?> createConstant(    @Nullable Name name,    @Nullable Object value){
      CompileTimeConstant<?> argument=ConstantsPackage.createCompileTimeConstant(value,true,false,false,null);
      return argument != null ? argument : ErrorValue.create("Unsupported annotation argument: " + name);
    }
    private void setArgumentValueByName(    @NotNull Name name,    @NotNull CompileTimeConstant<?> argumentValue){
      ValueParameterDescriptor parameter=DescriptorResolverUtils.getAnnotationParameterByName(name,annotationClass);
      if (parameter != null) {
        arguments.put(parameter,argumentValue);
      }
    }
  }
;
}
