{
  super.visitReferenceExpression(expression);
  final boolean isFieldReference=isFieldReference(expression,getContainingClass(expression));
  final boolean insideSecondaryConstructor=isInsideSecondaryConstructor(expression);
  final boolean hasReceiver=isFieldReference && insideSecondaryConstructor;
  final boolean isThis=isThisExpression(expression);
  final boolean isNullable=typeToType(expression.getType()).isNullable();
  final String className=getClassNameWithConstructor(expression);
  Expression identifier=new IdentifierImpl(expression.getReferenceName(),isNullable);
  final String temporaryObject="__";
  if (hasReceiver)   identifier=new CallChainExpression(new IdentifierImpl(temporaryObject,false),new IdentifierImpl(expression.getReferenceName(),isNullable));
 else   if (insideSecondaryConstructor && isThis)   identifier=new IdentifierImpl("val " + temporaryObject + " = "+ className);
  myResult=new CallChainExpression(expressionToExpression(expression.getQualifierExpression()),identifier);
}
