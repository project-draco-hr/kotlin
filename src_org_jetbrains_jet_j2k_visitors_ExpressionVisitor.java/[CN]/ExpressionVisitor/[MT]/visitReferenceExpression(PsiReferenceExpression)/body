{
  super.visitReferenceExpression(expression);
  final boolean isFieldReference=isFieldReference(expression,getContainingClass(expression));
  final boolean insideSecondaryConstructor=isInsideSecondaryConstructor(expression);
  final boolean hasReceiver=isFieldReference && insideSecondaryConstructor;
  final boolean isThis=isThisExpression(expression);
  final boolean isNullable=getConverter().typeToType(expression.getType()).getNullable();
  final String className=getClassNameWithConstructor(expression);
  Expression identifier=new Identifier(expression.getReferenceName(),isNullable);
  final String __="__";
  if (hasReceiver) {
    identifier=new CallChainExpression(new Identifier(__,false),new Identifier(expression.getReferenceName(),isNullable));
  }
 else   if (insideSecondaryConstructor && isThis) {
    identifier=new Identifier("val __ = " + className);
  }
  myResult=new CallChainExpression(getConverter().expressionToExpression(expression.getQualifierExpression()),identifier);
}
