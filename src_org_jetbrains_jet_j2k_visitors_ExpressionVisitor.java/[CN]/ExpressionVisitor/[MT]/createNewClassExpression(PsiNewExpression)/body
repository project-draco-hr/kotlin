{
  final PsiAnonymousClass anonymousClass=expression.getAnonymousClass();
  final PsiMethod constructor=expression.resolveMethod();
  PsiJavaCodeReferenceElement classReference=expression.getClassOrAnonymousClassReference();
  final boolean isNotConvertedClass=classReference != null && !Converter.getClassIdentifiers().contains(classReference.getQualifiedName());
  PsiExpressionList argumentList=expression.getArgumentList();
  if (constructor == null || isConstructorPrimary(constructor) || isNotConvertedClass) {
    return new NewClassExpression(expressionToExpression(expression.getQualifier()),elementToElement(classReference),elementToElement(argumentList),anonymousClass != null ? anonymousClassToAnonymousClass(anonymousClass) : null);
  }
  final PsiJavaCodeReferenceElement reference=expression.getClassReference();
  final List<Type> typeParameters=reference != null ? typesToTypeList(reference.getTypeParameters()) : Collections.<Type>emptyList();
  PsiExpression[] expressions=argumentList != null ? argumentList.getExpressions() : new PsiExpression[]{};
  return new CallChainExpression(new IdentifierImpl(constructor.getName(),false),new MethodCallExpression(new IdentifierImpl("init"),expressionsToExpressionList(expressions),false,typeParameters));
}
