{
  for (  final DeserializedCallableMemberDescriptor member : previouslyCompiledCallables) {
    generateCallableMemberTasks.put(member,new Runnable(){
      @Override public void run(){
        JetTypeMapper.ContainingClassesInfo containingClasses=state.getTypeMapper().getContainingClassesForDeserializedCallable(member);
        Type facadeType=AsmUtil.asmTypeByFqNameWithoutInnerClasses(containingClasses.getFacadeClassId().asSingleFqName());
        Type partType=AsmUtil.asmTypeByFqNameWithoutInnerClasses(containingClasses.getImplClassId().asSingleFqName());
        FieldOwnerContext context=state.getRootContext().intoPackageFacade(partType,compiledPackageFragment,facadeType);
        MemberCodegen<?> memberCodegen=createCodegenForPartOfPackageFacade(context);
        if (member instanceof DeserializedSimpleFunctionDescriptor) {
          DeserializedSimpleFunctionDescriptor function=(DeserializedSimpleFunctionDescriptor)member;
          memberCodegen.functionCodegen.generateMethod(JvmDeclarationOriginKt.OtherOrigin(function),function,new FunctionGenerationStrategy(){
            @Override public void generateBody(            @NotNull MethodVisitor mv,            @NotNull FrameMap frameMap,            @NotNull JvmMethodSignature signature,            @NotNull MethodContext context,            @NotNull MemberCodegen<?> parentCodegen){
              throw new IllegalStateException("shouldn't be called");
            }
          }
);
          memberCodegen.functionCodegen.generateDefaultIfNeeded(context.intoFunction(function),function,OwnerKind.PACKAGE,DefaultParameterValueLoader.DEFAULT,null);
          memberCodegen.functionCodegen.generateOverloadsWithDefaultValues(null,function,function);
        }
 else         if (member instanceof DeserializedPropertyDescriptor) {
          memberCodegen.propertyCodegen.generateInPackageFacade((DeserializedPropertyDescriptor)member);
        }
 else {
          throw new IllegalStateException("Unexpected member: " + member);
        }
      }
    }
);
  }
}
