{
  BothSignatureWriter sw=new BothSignatureWriter(BothSignatureWriter.Mode.CLASS);
  typeMapper.writeFormalTypeParameters(descriptor.getDeclaredTypeParameters(),sw);
  sw.writeSuperclass();
  if (superClassType == null) {
    sw.writeClassBegin(superClassAsmType);
    sw.writeClassEnd();
  }
 else {
    typeMapper.mapSupertype(superClassType,sw);
  }
  sw.writeSuperclassEnd();
  LinkedHashSet<String> superInterfaces=new LinkedHashSet<String>();
  Set<String> kotlinMarkerInterfaces=new LinkedHashSet<String>();
  for (  KotlinType supertype : descriptor.getTypeConstructor().getSupertypes()) {
    if (isJvmInterface(supertype.getConstructor().getDeclarationDescriptor())) {
      sw.writeInterface();
      Type jvmInterfaceType=typeMapper.mapSupertype(supertype,sw);
      sw.writeInterfaceEnd();
      String jvmInterfaceInternalName=jvmInterfaceType.getInternalName();
      superInterfaces.add(jvmInterfaceInternalName);
      FqName kotlinInterfaceName=DescriptorUtils.getFqName(supertype.getConstructor().getDeclarationDescriptor()).toSafe();
      String kotlinMarkerInterfaceInternalName=KOTLIN_MARKER_INTERFACES.get(kotlinInterfaceName);
      if (kotlinMarkerInterfaceInternalName != null) {
        kotlinMarkerInterfaces.add(kotlinMarkerInterfaceInternalName);
      }
    }
  }
  for (  String kotlinMarkerInterface : kotlinMarkerInterfaces) {
    sw.writeInterface();
    sw.writeAsmType(Type.getObjectType(kotlinMarkerInterface));
    sw.writeInterfaceEnd();
  }
  superInterfaces.addAll(kotlinMarkerInterfaces);
  return new JvmClassSignature(classAsmType.getInternalName(),superClassAsmType.getInternalName(),new ArrayList<String>(superInterfaces),sw.makeJavaGenericSignature());
}
