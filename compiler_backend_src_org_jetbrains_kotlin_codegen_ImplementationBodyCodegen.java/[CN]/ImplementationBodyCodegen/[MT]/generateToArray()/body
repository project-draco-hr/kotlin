{
  KotlinBuiltIns builtIns=KotlinBuiltIns.getInstance();
  if (!isSubclass(descriptor,builtIns.getCollection()))   return;
  int access=descriptor.getKind() == ClassKind.TRAIT ? ACC_PUBLIC | ACC_ABSTRACT : ACC_PUBLIC;
  if (CodegenUtil.getDeclaredFunctionByRawSignature(descriptor,Name.identifier("toArray"),builtIns.getArray()) == null) {
    MethodVisitor mv=v.newMethod(NO_ORIGIN,access,"toArray","()[Ljava/lang/Object;",null,null);
    if (descriptor.getKind() != ClassKind.TRAIT) {
      InstructionAdapter iv=new InstructionAdapter(mv);
      mv.visitCode();
      iv.load(0,classAsmType);
      iv.invokestatic("kotlin/jvm/internal/CollectionToArray","toArray","(Ljava/util/Collection;)[Ljava/lang/Object;",false);
      iv.areturn(Type.getType("[Ljava/lang/Object;"));
      FunctionCodegen.endVisit(mv,"toArray",myClass);
    }
  }
  if (!isGenericToArrayPresent()) {
    MethodVisitor mv=v.newMethod(NO_ORIGIN,access,"toArray","([Ljava/lang/Object;)[Ljava/lang/Object;",null,null);
    if (descriptor.getKind() != ClassKind.TRAIT) {
      InstructionAdapter iv=new InstructionAdapter(mv);
      mv.visitCode();
      iv.load(0,classAsmType);
      iv.load(1,Type.getType("[Ljava/lang/Object;"));
      iv.invokestatic("kotlin/jvm/internal/CollectionToArray","toArray","(Ljava/util/Collection;[Ljava/lang/Object;)[Ljava/lang/Object;",false);
      iv.areturn(Type.getType("[Ljava/lang/Object;"));
      FunctionCodegen.endVisit(mv,"toArray",myClass);
    }
  }
}
