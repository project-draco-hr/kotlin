{
  if (isInterface(descriptor) || isAnnotationClass(descriptor))   return;
  ConstructorDescriptor constructorDescriptor=descriptor.getUnsubstitutedPrimaryConstructor();
  if (constructorDescriptor == null)   return;
  ConstructorContext constructorContext=context.intoConstructor(constructorDescriptor);
  KtPrimaryConstructor primaryConstructor=myClass.getPrimaryConstructor();
  JvmDeclarationOrigin origin=JvmDeclarationOriginKt.OtherOrigin(primaryConstructor != null ? primaryConstructor : myClass,constructorDescriptor);
  functionCodegen.generateMethod(origin,constructorDescriptor,constructorContext,new FunctionGenerationStrategy.CodegenBased<ConstructorDescriptor>(state,constructorDescriptor){
    @Override public void doGenerateBody(    @NotNull ExpressionCodegen codegen,    @NotNull JvmMethodSignature signature){
      generatePrimaryConstructorImpl(callableDescriptor,codegen,delegationFieldsInfo);
    }
  }
);
  functionCodegen.generateDefaultIfNeeded(constructorContext,constructorDescriptor,OwnerKind.IMPLEMENTATION,DefaultParameterValueLoader.DEFAULT,null);
  new DefaultParameterValueSubstitutor(state).generatePrimaryConstructorOverloadsIfNeeded(constructorDescriptor,v,kind,myClass);
  if (isCompanionObject(descriptor)) {
    context.recordSyntheticAccessorIfNeeded(constructorDescriptor,bindingContext);
  }
}
