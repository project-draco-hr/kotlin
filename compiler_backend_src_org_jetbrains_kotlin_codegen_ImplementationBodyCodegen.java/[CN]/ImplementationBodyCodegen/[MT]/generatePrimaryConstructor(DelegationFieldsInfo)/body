{
  if (ignoreIfTraitOrAnnotation())   return;
  ConstructorDescriptor constructorDescriptor=descriptor.getUnsubstitutedPrimaryConstructor();
  if (constructorDescriptor == null)   return;
  ConstructorContext constructorContext=context.intoConstructor(constructorDescriptor);
  functionCodegen.generateMethod(OtherOrigin(myClass,constructorDescriptor),constructorDescriptor,constructorContext,new FunctionGenerationStrategy.CodegenBased<ConstructorDescriptor>(state,constructorDescriptor){
    @Override public void doGenerateBody(    @NotNull ExpressionCodegen codegen,    @NotNull JvmMethodSignature signature){
      generatePrimaryConstructorImpl(callableDescriptor,codegen,delegationFieldsInfo);
    }
  }
);
  functionCodegen.generateDefaultIfNeeded(constructorContext,constructorDescriptor,OwnerKind.IMPLEMENTATION,DefaultParameterValueLoader.DEFAULT,null);
  CallableMethod callableMethod=typeMapper.mapToCallableMethod(constructorDescriptor);
  new DefaultParameterValueSubstitutor(state).generateDefaultConstructorIfNeeded(callableMethod,constructorDescriptor,v,myClass);
  if (isCompanionObject(descriptor)) {
    context.recordSyntheticAccessorIfNeeded(constructorDescriptor,bindingContext);
  }
}
