{
  if (isInterface(descriptor) || isAnnotationClass(descriptor))   return;
  final ConstructorDescriptor constructorDescriptor=descriptor.getUnsubstitutedPrimaryConstructor();
  if (constructorDescriptor == null)   return;
  ConstructorContext constructorContext=context.intoConstructor(constructorDescriptor);
  final KtPrimaryConstructor primaryConstructor=myClass.getPrimaryConstructor();
  JvmDeclarationOrigin origin=JvmDeclarationOriginKt.OtherOrigin(primaryConstructor != null ? primaryConstructor : myClass,constructorDescriptor);
  functionCodegen.generateMethod(origin,constructorDescriptor,constructorContext,new FunctionGenerationStrategy.CodegenBased(state){
    @Override public void doGenerateBody(    @NotNull ExpressionCodegen codegen,    @NotNull JvmMethodSignature signature){
      generatePrimaryConstructorImpl(constructorDescriptor,codegen,delegationFieldsInfo,primaryConstructor);
    }
  }
);
  functionCodegen.generateDefaultIfNeeded(constructorContext,constructorDescriptor,OwnerKind.IMPLEMENTATION,DefaultParameterValueLoader.DEFAULT,null);
  new DefaultParameterValueSubstitutor(state).generatePrimaryConstructorOverloadsIfNeeded(constructorDescriptor,v,this,kind,myClass);
}
