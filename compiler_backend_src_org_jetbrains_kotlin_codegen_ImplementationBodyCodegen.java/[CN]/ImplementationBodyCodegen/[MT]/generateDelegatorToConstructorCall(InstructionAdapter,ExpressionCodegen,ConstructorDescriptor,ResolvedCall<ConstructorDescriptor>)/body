{
  if (delegationConstructorCall == null) {
    genSimpleSuperCall(iv);
    return;
  }
  iv.load(0,OBJECT_TYPE);
  ConstructorDescriptor delegateConstructor=SamCodegenUtil.resolveSamAdapter(codegen.getConstructorDescriptor(delegationConstructorCall));
  CallableMethod delegateConstructorCallable=typeMapper.mapToCallableMethod(delegateConstructor,false);
  CallableMethod callable=typeMapper.mapToCallableMethod(constructorDescriptor,false);
  List<JvmMethodParameterSignature> delegatingParameters=delegateConstructorCallable.getValueParameters();
  List<JvmMethodParameterSignature> parameters=callable.getValueParameters();
  ArgumentGenerator argumentGenerator;
  if (isSameClassConstructor(delegateConstructor)) {
    argumentGenerator=generateThisCallImplicitArguments(iv,codegen,delegateConstructor,delegateConstructorCallable,delegatingParameters,parameters);
  }
 else {
    argumentGenerator=generateSuperCallImplicitArguments(iv,codegen,constructorDescriptor,delegateConstructor,delegateConstructorCallable,delegatingParameters,parameters);
  }
  codegen.invokeMethodWithArguments(delegateConstructorCallable,delegationConstructorCall,StackValue.none(),codegen.defaultCallGenerator,argumentGenerator);
}
