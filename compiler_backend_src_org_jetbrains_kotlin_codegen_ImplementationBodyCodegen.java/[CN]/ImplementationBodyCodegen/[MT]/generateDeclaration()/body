{
  getSuperClass();
  JvmClassSignature signature=signature();
  boolean isAbstract=false;
  boolean isInterface=false;
  boolean isFinal=false;
  boolean isStatic;
  boolean isAnnotation=false;
  boolean isEnum=false;
  if (myClass instanceof JetClass) {
    JetClass jetClass=(JetClass)myClass;
    if (jetClass.hasModifier(JetTokens.ABSTRACT_KEYWORD)) {
      isAbstract=true;
    }
    if (jetClass.isInterface()) {
      isAbstract=true;
      isInterface=true;
    }
 else     if (jetClass.isAnnotation()) {
      isAbstract=true;
      isInterface=true;
      isAnnotation=true;
    }
 else     if (jetClass.isEnum()) {
      isAbstract=hasAbstractMembers(descriptor);
      isEnum=true;
    }
    if (isObject(descriptor)) {
      isFinal=true;
    }
    if (!jetClass.hasModifier(JetTokens.OPEN_KEYWORD) && !isAbstract) {
      isFinal=!(jetClass.isEnum() && state.getClassBuilderMode() == ClassBuilderMode.LIGHT_CLASSES);
    }
    isStatic=!jetClass.isInner();
  }
 else {
    isStatic=isCompanionObject(descriptor);
    isFinal=true;
  }
  int access=0;
  if (state.getClassBuilderMode() == ClassBuilderMode.LIGHT_CLASSES && !DescriptorUtils.isTopLevelDeclaration(descriptor)) {
    access|=getVisibilityAccessFlag(descriptor);
    if (isStatic) {
      access|=ACC_STATIC;
    }
  }
 else {
    access|=getVisibilityAccessFlagForClass(descriptor);
  }
  if (isAbstract) {
    access|=ACC_ABSTRACT;
  }
  if (isInterface) {
    access|=ACC_INTERFACE;
  }
 else {
    access|=ACC_SUPER;
  }
  if (isFinal) {
    access|=ACC_FINAL;
  }
  if (isAnnotation) {
    access|=ACC_ANNOTATION;
  }
  if (KotlinBuiltIns.isDeprecated(descriptor)) {
    access|=ACC_DEPRECATED;
  }
  if (isEnum) {
    for (    JetDeclaration declaration : myClass.getDeclarations()) {
      if (declaration instanceof JetEnumEntry) {
        if (enumEntryNeedSubclass(bindingContext,(JetEnumEntry)declaration)) {
          access&=~ACC_FINAL;
        }
      }
    }
    access|=ACC_ENUM;
  }
  v.defineClass(myClass,V1_6,access,signature.getName(),signature.getJavaGenericSignature(),signature.getSuperclassName(),ArrayUtil.toStringArray(signature.getInterfaces()));
  v.visitSource(myClass.getContainingFile().getName(),null);
  InlineCodegenUtil.initDefaultSourceMappingIfNeeded(context,this,state);
  writeEnclosingMethod();
  AnnotationCodegen.forClass(v.getVisitor(),typeMapper).genAnnotations(descriptor,null);
  generateReflectionObjectFieldIfNeeded();
}
