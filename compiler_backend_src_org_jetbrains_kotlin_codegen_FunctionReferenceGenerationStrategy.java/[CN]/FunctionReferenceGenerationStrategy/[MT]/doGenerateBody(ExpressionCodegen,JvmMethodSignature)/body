{
  KtCallExpression fakeExpression=constructFakeFunctionCall();
  final List<? extends ValueArgument> fakeArguments=fakeExpression.getValueArguments();
  final ReceiverValue dispatchReceiver=computeAndSaveReceiver(signature,codegen,referencedFunction.getDispatchReceiverParameter());
  final ReceiverValue extensionReceiver=computeAndSaveReceiver(signature,codegen,referencedFunction.getExtensionReceiverParameter());
  computeAndSaveArguments(fakeArguments,codegen);
  ResolvedCall<CallableDescriptor> fakeResolvedCall=new DelegatingResolvedCall<CallableDescriptor>(resolvedCall){
    private final Map<ValueParameterDescriptor,ResolvedValueArgument> argumentMap;
{
      argumentMap=new LinkedHashMap<ValueParameterDescriptor,ResolvedValueArgument>(fakeArguments.size());
      int index=0;
      List<ValueParameterDescriptor> parameters=callableDescriptor.getValueParameters();
      for (      ValueArgument argument : fakeArguments) {
        argumentMap.put(parameters.get(index),new ExpressionValueArgument(argument));
        index++;
      }
    }
    @NotNull @Override public ReceiverValue getExtensionReceiver(){
      return extensionReceiver;
    }
    @NotNull @Override public ReceiverValue getDispatchReceiver(){
      return dispatchReceiver;
    }
    @NotNull @Override public List<ResolvedValueArgument> getValueArgumentsByIndex(){
      return new ArrayList<ResolvedValueArgument>(argumentMap.values());
    }
    @NotNull @Override public Map<ValueParameterDescriptor,ResolvedValueArgument> getValueArguments(){
      return argumentMap;
    }
  }
;
  StackValue result;
  Type returnType=codegen.getReturnType();
  if (referencedFunction instanceof ConstructorDescriptor) {
    if (returnType.getSort() == Type.ARRAY) {
      result=codegen.generateNewArray(fakeExpression,referencedFunction.getReturnType());
    }
 else {
      result=codegen.generateConstructorCall(fakeResolvedCall,returnType);
    }
  }
 else {
    Call call=CallMaker.makeCall(fakeExpression,NO_RECEIVER,null,fakeExpression,fakeArguments);
    result=codegen.invokeFunction(call,fakeResolvedCall,StackValue.none());
  }
  InstructionAdapter v=codegen.v;
  result.put(returnType,v);
  v.areturn(returnType);
}
