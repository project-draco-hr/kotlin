{
  super.init();
  ExtractableCodeDescriptor extractableCodeDescriptor=originalDescriptor.getDescriptor();
  functionNameField=new NameSuggestionsField(ArrayUtil.toStringArray(extractableCodeDescriptor.getSuggestedNames()),project,KotlinFileType.INSTANCE);
  functionNameField.addDataChangedListener(new NameSuggestionsField.DataChanged(){
    @Override public void dataChanged(){
      update();
    }
  }
);
  functionNamePanel.add(functionNameField,BorderLayout.CENTER);
  functionNameLabel.setLabelFor(functionNameField);
  List<KotlinType> possibleReturnTypes=ExtractableCodeDescriptorKt.getPossibleReturnTypes(extractableCodeDescriptor.getControlFlow());
  if (possibleReturnTypes.size() > 1) {
    DefaultComboBoxModel returnTypeBoxModel=new DefaultComboBoxModel(possibleReturnTypes.toArray());
    returnTypeBox.setModel(returnTypeBoxModel);
    returnTypeBox.setRenderer(new DefaultListCellRenderer(){
      @NotNull @Override public Component getListCellRendererComponent(      JList list,      Object value,      int index,      boolean isSelected,      boolean cellHasFocus){
        super.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
        setText(IdeDescriptorRenderers.SOURCE_CODE_SHORT_NAMES_IN_TYPES.renderType((KotlinType)value));
        return this;
      }
    }
);
    returnTypeBox.addItemListener(new ItemListener(){
      @Override public void itemStateChanged(      @NotNull ItemEvent e){
        update();
      }
    }
);
  }
 else {
    returnTypePanel.getParent().remove(returnTypePanel);
  }
  boolean enableVisibility=isVisibilitySectionAvailable();
  visibilityBox.setEnabled(enableVisibility);
  if (enableVisibility) {
    visibilityBox.setSelectedItem(extractableCodeDescriptor.getVisibility());
  }
  visibilityBox.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    @NotNull ItemEvent e){
      update();
    }
  }
);
  parameterTablePanel=new KotlinParameterTablePanel(){
    @Override protected void updateSignature(){
      KotlinExtractFunctionDialog.this.update();
    }
    @Override protected void onEnterAction(){
      doOKAction();
    }
    @Override protected void onCancelAction(){
      doCancelAction();
    }
  }
;
  parameterTablePanel.init(extractableCodeDescriptor.getReceiverParameter(),extractableCodeDescriptor.getParameters());
  inputParametersPanel.setText("&Parameters");
  inputParametersPanel.setLabelFor(parameterTablePanel.getTable());
  inputParametersPanel.add(parameterTablePanel);
}
