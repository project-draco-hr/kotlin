{
  CachedValue<BindingContext> bindingContextCachedValue=file.getUserData(BINDING_CONTEXT);
  if (bindingContextCachedValue == null) {
    bindingContextCachedValue=CachedValuesManager.getManager(file.getProject()).createCachedValue(new CachedValueProvider<BindingContext>(){
      @Override public Result<BindingContext> compute(){
synchronized (lock) {
          try {
            BindingContext bindingContext=analyzingUtils.analyzeNamespaces(file.getProject(),declarationProvider.fun(file),Predicates.<PsiFile>equalTo(file),JetControlFlowDataTraceFactory.EMPTY);
            return new Result<BindingContext>(bindingContext,PsiModificationTracker.MODIFICATION_COUNT);
          }
 catch (          ProcessCanceledException e) {
            throw e;
          }
catch (          Throwable e) {
            if (System.getProperty("kotlin.running.in.server.mode","false").equals("true")) {
              if (e instanceof RuntimeException) {
                RuntimeException runtimeException=(RuntimeException)e;
                throw runtimeException;
              }
              if (e instanceof Error) {
                Error error=(Error)e;
                throw error;
              }
              throw new RuntimeException(e);
            }
            e.printStackTrace();
            BindingTraceContext bindingTraceContext=new BindingTraceContext();
            bindingTraceContext.report(Errors.EXCEPTION_WHILE_ANALYZING.on(file,e));
            return new Result<BindingContext>(bindingTraceContext.getBindingContext(),PsiModificationTracker.MODIFICATION_COUNT);
          }
        }
      }
    }
,false);
    file.putUserData(BINDING_CONTEXT,bindingContextCachedValue);
  }
  return bindingContextCachedValue.getValue();
}
