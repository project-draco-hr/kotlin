{
  left.put(this.operandType,v);
  right.put(this.operandType,v);
  int opcode;
  if (opToken == JetTokens.EQEQ || opToken == JetTokens.EQEQEQ) {
    opcode=jumpIfFalse ? IFNE : IFEQ;
  }
 else   if (opToken == JetTokens.EXCLEQ || opToken == JetTokens.EXCLEQEQEQ) {
    opcode=jumpIfFalse ? IFEQ : IFNE;
  }
 else   if (opToken == JetTokens.GT) {
    opcode=jumpIfFalse ? IFLE : IFGT;
  }
 else   if (opToken == JetTokens.GTEQ) {
    opcode=jumpIfFalse ? IFLT : IFGE;
  }
 else   if (opToken == JetTokens.LT) {
    opcode=jumpIfFalse ? IFGE : IFLT;
  }
 else   if (opToken == JetTokens.LTEQ) {
    opcode=jumpIfFalse ? IFGT : IFLE;
  }
 else {
    throw new UnsupportedOperationException("Don't know how to generate this condJump: " + opToken);
  }
  if (operandType == Type.FLOAT_TYPE || operandType == Type.DOUBLE_TYPE) {
    if (opToken == JetTokens.GT || opToken == JetTokens.GTEQ) {
      v.cmpl(operandType);
    }
 else {
      v.cmpg(operandType);
    }
  }
 else   if (operandType == Type.LONG_TYPE) {
    v.lcmp();
  }
 else {
    opcode+=(IF_ICMPEQ - IFEQ);
  }
  v.visitJumpInsn(opcode,label);
}
