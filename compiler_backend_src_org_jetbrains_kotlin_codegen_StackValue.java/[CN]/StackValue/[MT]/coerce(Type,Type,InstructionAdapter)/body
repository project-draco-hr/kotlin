{
  if (toType.equals(fromType))   return;
  if (toType.getSort() == Type.VOID) {
    pop(v,fromType);
  }
 else   if (fromType.getSort() == Type.VOID) {
    if (toType.equals(UNIT_TYPE) || toType.equals(OBJECT_TYPE)) {
      putUnitInstance(v);
    }
 else     if (toType.getSort() == Type.OBJECT || toType.getSort() == Type.ARRAY) {
      v.aconst(null);
    }
 else {
      pushDefaultPrimitiveValueOnStack(toType,v);
    }
  }
 else   if (toType.equals(UNIT_TYPE)) {
    if (fromType.equals(getType(Object.class))) {
      v.checkcast(UNIT_TYPE);
    }
 else     if (!fromType.equals(getType(Void.class))) {
      pop(v,fromType);
      putUnitInstance(v);
    }
  }
 else   if (toType.getSort() == Type.ARRAY) {
    if (fromType.getSort() == Type.ARRAY && fromType.getElementType().equals(AsmTypes.JAVA_CLASS_TYPE) && toType.equals(K_CLASS_ARRAY_TYPE)) {
      wrapJavaClassesIntoKClasses(v);
    }
 else {
      v.checkcast(toType);
    }
  }
 else   if (toType.getSort() == Type.OBJECT) {
    if (fromType.getSort() == Type.OBJECT || fromType.getSort() == Type.ARRAY) {
      if (!toType.equals(OBJECT_TYPE)) {
        if (fromType.equals(AsmTypes.JAVA_CLASS_TYPE) && toType.equals(AsmTypes.K_CLASS_TYPE)) {
          wrapJavaClassIntoKClass(v);
        }
 else {
          v.checkcast(toType);
        }
      }
    }
 else {
      box(fromType,toType,v);
    }
  }
 else   if (fromType.getSort() == Type.OBJECT) {
    Type unboxedType=unboxPrimitiveTypeOrNull(fromType);
    if (unboxedType != null) {
      unbox(unboxedType,v);
      coerce(unboxedType,toType,v);
    }
 else {
      if (toType.getSort() == Type.BOOLEAN || toType.getSort() == Type.CHAR) {
        coerce(fromType,boxType(toType),v);
      }
 else {
        coerce(fromType,getType(Number.class),v);
      }
      unbox(toType,v);
    }
  }
 else {
    v.cast(fromType,toType);
  }
}
