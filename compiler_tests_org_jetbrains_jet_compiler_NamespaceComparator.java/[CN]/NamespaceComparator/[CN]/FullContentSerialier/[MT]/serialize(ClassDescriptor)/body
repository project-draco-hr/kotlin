{
  if (!klass.getAnnotations().isEmpty()) {
    new Serializer(sb).serializeSeparated(klass.getAnnotations()," ");
    sb.append(" ");
  }
  serialize(klass.getModality());
  sb.append(" ");
  serialize(klass.getKind());
  sb.append(" ");
  new Serializer(sb).serialize(klass);
  if (!klass.getTypeConstructor().getParameters().isEmpty()) {
    sb.append("<");
    serializeCommaSeparated(klass.getTypeConstructor().getParameters());
    sb.append(">");
  }
  if (!klass.getTypeConstructor().getSupertypes().isEmpty()) {
    sb.append(" : ");
    new Serializer(sb).serializeCommaSeparated(new ArrayList<JetType>(klass.getTypeConstructor().getSupertypes()));
  }
  sb.append(" {\n");
  List<TypeProjection> typeArguments=new ArrayList<TypeProjection>();
  for (  TypeParameterDescriptor param : klass.getTypeConstructor().getParameters()) {
    typeArguments.add(new TypeProjection(Variance.INVARIANT,param.getDefaultType()));
  }
  List<String> memberStrings=new ArrayList<String>();
  for (  ConstructorDescriptor constructor : klass.getConstructors()) {
    StringBuilder constructorSb=new StringBuilder();
    new Serializer(constructorSb).serialize(constructor);
    memberStrings.add(constructorSb.toString());
  }
  JetScope memberScope=klass.getMemberScope(typeArguments);
  for (  DeclarationDescriptor member : memberScope.getAllDescriptors()) {
    if (!includeObject) {
      if (member.getName().matches("equals|hashCode|finalize|wait|notify(All)?|toString|clone|getClass")) {
        continue;
      }
    }
    StringBuilder memberSb=new StringBuilder();
    new FullContentSerialier(memberSb).serialize(member);
    memberStrings.add(memberSb.toString());
  }
  Collections.sort(memberStrings);
  for (  String memberString : memberStrings) {
    sb.append(indent(memberString));
  }
  if (klass.getClassObjectDescriptor() != null) {
    StringBuilder sbForClassObject=new StringBuilder();
    new FullContentSerialier(sbForClassObject).serialize(klass.getClassObjectDescriptor());
    sb.append(indent(sbForClassObject.toString()));
  }
  sb.append("}\n");
}
