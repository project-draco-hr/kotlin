{
  super(resolveSession.getStorageManager(),containingDeclaration,name);
  this.resolveSession=resolveSession;
  if (classLikeInfo.getCorrespondingClassOrObject() != null) {
    this.resolveSession.getTrace().record(BindingContext.CLASS,classLikeInfo.getCorrespondingClassOrObject(),this);
  }
  this.originalClassInfo=classLikeInfo;
  JetClassLikeInfo classLikeInfoForMembers=classLikeInfo.getClassKind() != ClassKind.ENUM_CLASS ? classLikeInfo : noEnumEntries(classLikeInfo);
  this.declarationProvider=resolveSession.getDeclarationProviderFactory().getClassMemberDeclarationProvider(classLikeInfoForMembers);
  this.unsubstitutedMemberScope=new LazyClassMemberScope(resolveSession,declarationProvider,this);
  this.unsubstitutedInnerClassesScope=new InnerClassesScopeWrapper(unsubstitutedMemberScope);
  this.typeConstructor=new LazyClassTypeConstructor();
  this.kind=classLikeInfo.getClassKind();
  JetModifierList modifierList=classLikeInfo.getModifierList();
  if (kind.isSingleton()) {
    this.modality=Modality.FINAL;
  }
 else {
    Modality defaultModality=kind == ClassKind.TRAIT ? Modality.ABSTRACT : Modality.FINAL;
    this.modality=resolveModalityFromModifiers(modifierList,defaultModality);
  }
  this.visibility=isEnumClassObject(this) ? DescriptorUtils.getSyntheticClassObjectVisibility() : resolveVisibilityFromModifiers(modifierList,getDefaultClassVisibility(this));
  this.isInner=isInnerClass(modifierList);
  StorageManager storageManager=resolveSession.getStorageManager();
  this.thisAsReceiverParameter=storageManager.createLazyValue(new Function0<ReceiverParameterDescriptor>(){
    @Override public ReceiverParameterDescriptor invoke(){
      return DescriptorFactory.createLazyReceiverParameterDescriptor(LazyClassDescriptor.this);
    }
  }
);
  this.annotations=storageManager.createLazyValue(new Function0<List<AnnotationDescriptor>>(){
    @Override public List<AnnotationDescriptor> invoke(){
      return resolveAnnotations();
    }
  }
);
  this.classObjectDescriptor=storageManager.createNullableLazyValue(new Function0<ClassDescriptor>(){
    @Override public ClassDescriptor invoke(){
      return computeClassObjectDescriptor();
    }
  }
);
  this.scopeForClassHeaderResolution=storageManager.createLazyValue(new Function0<JetScope>(){
    @Override public JetScope invoke(){
      return computeScopeForClassHeaderResolution();
    }
  }
);
  this.scopeForMemberDeclarationResolution=storageManager.createLazyValue(new Function0<JetScope>(){
    @Override public JetScope invoke(){
      return computeScopeForMemberDeclarationResolution();
    }
  }
);
  this.scopeForPropertyInitializerResolution=storageManager.createLazyValue(new Function0<JetScope>(){
    @Override public JetScope invoke(){
      return computeScopeForPropertyInitializerResolution();
    }
  }
);
}
