{
  final List<File> moduleExcludes=ContainerUtil.map(target.getModule().getExcludeRootsList().getUrls(),new Function<String,File>(){
    @Override public File fun(    String url){
      return JpsPathUtil.urlToFile(url);
    }
  }
);
  final JpsCompilerExcludes compilerExcludes=JpsJavaExtensionService.getInstance().getOrCreateCompilerConfiguration(target.getModule().getProject()).getCompilerExcludes();
  final List<File> result=ContainerUtil.newArrayList();
  for (  JpsModuleSourceRoot sourceRoot : getRelevantSourceRoots(target)) {
    FileUtil.processFilesRecursively(sourceRoot.getFile(),new Processor<File>(){
      @Override public boolean process(      File file){
        if (compilerExcludes.isExcluded(file))         return true;
        if (file.isFile() && isKotlinSourceFile(file)) {
          result.add(file);
        }
        return true;
      }
    }
,new Processor<File>(){
      @Override public boolean process(      final File dir){
        return ContainerUtil.find(moduleExcludes,new Condition<File>(){
          @Override public boolean value(          File exclude){
            return FileUtil.filesEqual(exclude,dir);
          }
        }
) == null;
      }
    }
);
  }
  return result;
}
