{
  holderFull.writeFilesOnDiskIfNeeded();
  holderMock.writeFilesOnDiskIfNeeded();
  for (  File file : files) {
    if (SpecialFiles.getExcludedFiles().contains(file.getName())) {
      continue;
    }
    if (file.isDirectory()) {
      File[] listFiles=file.listFiles();
      if (listFiles != null) {
        processFiles(printer,listFiles,holderFull,holderMock);
      }
    }
 else     if (!FileUtilRt.getExtension(file.getName()).equals(KotlinFileType.INSTANCE.getDefaultExtension())) {
    }
 else {
      String text=FileUtil.loadFile(file,true);
      if (text.contains("FILE:"))       continue;
      if (hasBoxMethod(text)) {
        String generatedTestName=generateTestName(file.getName());
        String packageName=file.getPath().replaceAll("\\\\|-|\\.|/","_");
        Ref<FqName> oldPackage=new Ref();
        text=changePackage(packageName,text,oldPackage);
        FqName className=getGeneratedClassName(file,text,packageName);
        text=patchClassForName(className,oldPackage.get(),text);
        FilesWriter filesHolder=InTextDirectivesUtils.isDirectiveDefined(text,"FULL_JDK") || InTextDirectivesUtils.isDirectiveDefined(text,"WITH_RUNTIME") || InTextDirectivesUtils.isDirectiveDefined(text,"WITH_REFLECT") ? holderFull : holderMock;
        CodegenTestFiles codegenFile=CodegenTestFiles.create(file.getName(),text,filesHolder.environment.getProject());
        filesHolder.files.add(codegenFile.getPsiFile());
        generateTestMethod(printer,generatedTestName,className.asString(),StringUtil.escapeStringCharacters(file.getPath()));
      }
    }
  }
}
