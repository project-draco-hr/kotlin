{
  Disposable disposable=new Disposable(){
    @Override public void dispose(){
    }
  }
;
  MockApplication app=new MockApplication(disposable){
    ExecutorService executorService=Executors.newFixedThreadPool(10);
    @Override public Future<?> executeOnPooledThread(    @NotNull Runnable action){
      return executorService.submit(action);
    }
  }
;
  app.addComponent(PathMacros.class,new PathMacrosImpl());
  ApplicationManager.setApplication(app,disposable);
  File rootForAndroidDependencies=new File(pathManager.getDependenciesRoot());
  if (!rootForAndroidDependencies.exists()) {
    rootForAndroidDependencies.mkdirs();
  }
  SDKDownloader downloader=new SDKDownloader(pathManager);
  Emulator emulator=new Emulator(pathManager);
  AntRunner antRunner=new AntRunner(pathManager);
  downloader.downloadAll();
  downloader.unzipAll();
  PermissionManager.setPermissions(pathManager);
  antRunner.packLibraries();
  try {
    emulator.createEmulator();
    emulator.startEmulator();
    try {
      emulator.waitEmulatorStart();
      antRunner.cleanOutput();
      antRunner.compileSources();
      antRunner.installApplicationOnEmulator();
      return antRunner.runTestsOnEmulator();
    }
 catch (    RuntimeException e) {
      e.printStackTrace();
      throw e;
    }
 finally {
      emulator.stopEmulator();
    }
  }
 catch (  RuntimeException e) {
    e.printStackTrace();
    throw e;
  }
 finally {
    emulator.finishEmulatorProcesses();
  }
}
