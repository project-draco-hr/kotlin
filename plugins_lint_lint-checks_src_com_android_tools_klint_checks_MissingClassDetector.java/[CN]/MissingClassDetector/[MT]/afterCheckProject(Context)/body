{
  if (!context.getProject().isLibrary() && mHaveClasses && mReferencedClasses != null && !mReferencedClasses.isEmpty() && context.getDriver().getScope().contains(Scope.CLASS_FILE)) {
    List<String> classes=new ArrayList<String>(mReferencedClasses.keySet());
    Collections.sort(classes);
    for (    String owner : classes) {
      Location.Handle handle=mReferencedClasses.get(owner);
      String fqcn=ClassContext.getFqcn(owner);
      String signature=ClassContext.getInternalName(fqcn);
      if (!signature.equals(owner)) {
        if (!mReferencedClasses.containsKey(signature)) {
          continue;
        }
      }
 else       if (signature.indexOf('$') != -1) {
        signature=signature.replace('$','/');
        if (!mReferencedClasses.containsKey(signature)) {
          continue;
        }
      }
      mReferencedClasses.remove(owner);
      if (owner.startsWith("android/")) {
        continue;
      }
      String message=String.format("Class referenced in the manifest, `%1$s`, was not found in the " + "project or the libraries",fqcn);
      Location location=handle.resolve();
      File parentFile=location.getFile().getParentFile();
      if (parentFile != null) {
        String parent=parentFile.getName();
        ResourceFolderType type=ResourceFolderType.getFolderType(parent);
        if (type == LAYOUT) {
          message=String.format("Class referenced in the layout file, `%1$s`, was not found in " + "the project or the libraries",fqcn);
        }
 else         if (type == XML) {
          message=String.format("Class referenced in the preference header file, `%1$s`, was not " + "found in the project or the libraries",fqcn);
        }
 else         if (type == VALUES) {
          message=String.format("Class referenced in the analytics file, `%1$s`, was not " + "found in the project or the libraries",fqcn);
        }
      }
      context.report(MISSING,location,message);
    }
  }
}
