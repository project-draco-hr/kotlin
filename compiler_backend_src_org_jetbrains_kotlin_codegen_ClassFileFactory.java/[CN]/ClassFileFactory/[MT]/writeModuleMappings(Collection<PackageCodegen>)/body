{
  final JvmPackageTable.PackageTable.Builder builder=JvmPackageTable.PackageTable.newBuilder();
  String outputFilePath=getMappingFileName(state.getModuleName());
  List<PackageParts> parts=ContainerUtil.newArrayList();
  Set<File> sourceFiles=new HashSet<File>();
  for (  PackageCodegen codegen : values) {
    parts.add(codegen.getPackageParts());
    sourceFiles.addAll(toIoFilesIgnoringNonPhysical(PackagePartClassUtils.getFilesWithCallables(codegen.getFiles())));
  }
  for (  PackageParts part : CodegenPackage.addCompiledPartsAndSort(parts,state)) {
    PackageParts.Companion.serialize(part,builder);
  }
  if (builder.getPackagePartsCount() != 0) {
    state.getProgress().reportOutput(sourceFiles,new File(outputFilePath));
    generators.put(outputFilePath,new OutAndSourceFileList(KotlinPackage.toList(sourceFiles)){
      @Override public byte[] asBytes(      ClassBuilderFactory factory){
        try {
          ByteArrayOutputStream moduleMapping=new ByteArrayOutputStream(1024);
          builder.build().writeTo(moduleMapping);
          return moduleMapping.toByteArray();
        }
 catch (        UnsupportedEncodingException e) {
          throw new RuntimeException(e);
        }
catch (        IOException e) {
          throw new RuntimeException(e);
        }
      }
      @Override public String asText(      ClassBuilderFactory factory){
        try {
          return new String(asBytes(factory),"UTF-8");
        }
 catch (        UnsupportedEncodingException e) {
          throw new RuntimeException(e);
        }
      }
    }
);
  }
}
