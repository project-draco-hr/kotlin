{
  File expectedFile=new File(expectedFileName);
  File sourcesDir=new File(expectedFileName.replaceFirst("\\.txt$",""));
  FileUtil.copyDir(sourcesDir,new File(tmpdir,"test"),new FileFilter(){
    @Override public boolean accept(    @NotNull File pathname){
      return pathname.getName().endsWith(".java");
    }
  }
);
  CompilerConfiguration configuration=JetTestUtils.compilerConfigurationForTests(ConfigurationKind.JDK_ONLY,TestJdkKind.MOCK_JDK);
  addKotlinSourceRoot(configuration,sourcesDir.getAbsolutePath());
  addJavaSourceRoot(configuration,new File("compiler/testData/loadJava/include"));
  addJavaSourceRoot(configuration,tmpdir);
  KotlinCoreEnvironment environment=KotlinCoreEnvironment.createForTests(getTestRootDisposable(),configuration,EnvironmentConfigFiles.JVM_CONFIG_FILES);
  BindingTrace trace=new CliLightClassGenerationSupport.NoScopeRecordCliBindingTrace();
  ModuleContext moduleContext=TopDownAnalyzerFacadeForJVM.createContextWithSealedModule(environment.getProject(),getModuleName(environment));
  TopDownAnalyzerFacadeForJVM.analyzeFilesWithJavaIntegrationNoIncremental(moduleContext,environment.getSourceFiles(),trace,TopDownAnalysisMode.TopLevelDeclarations,new JvmPackageMappingProvider(environment));
  PackageViewDescriptor packageView=moduleContext.getModule().getPackage(TEST_PACKAGE_FQNAME);
  checkJavaPackage(expectedFile,packageView,trace.getBindingContext(),DONT_INCLUDE_METHODS_OF_OBJECT);
}
