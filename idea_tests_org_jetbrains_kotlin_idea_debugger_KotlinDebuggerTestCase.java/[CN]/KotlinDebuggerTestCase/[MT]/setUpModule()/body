{
  super.setUpModule();
  IdeaTestUtil.setModuleLanguageLevel(myModule,LanguageLevel.JDK_1_6);
  String outputDirPath=getAppOutputPath();
  File outDir=new File(outputDirPath);
  if (!IS_TINY_APP_COMPILED) {
    String modulePath=getTestAppPath();
    File jarDir;
    try {
      jarDir=LOCAL_CACHE_REUSE ? LOCAL_CACHE_DIR : KotlinTestUtils.tmpDir("debuggerCustomLibrary");
    }
 catch (    IOException e) {
      throw ExceptionUtilsKt.rethrow(e);
    }
    CUSTOM_LIBRARY_JAR=MockLibraryUtil.compileLibraryToJar(CUSTOM_LIBRARY_SOURCES.getPath(),jarDir,"debuggerCustomLibrary",false,false);
    String sourcesDir=modulePath + File.separator + "src";
    MockLibraryUtil.compileKotlin(sourcesDir,outDir,CUSTOM_LIBRARY_JAR.getPath());
    List<String> options=Arrays.asList("-d",outputDirPath,"-classpath",ForTestCompileRuntime.runtimeJarForTests().getPath(),"-g");
    try {
      KotlinTestUtils.compileJavaFiles(findJavaFiles(new File(sourcesDir)),options);
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
    DexLikeBytecodePatchKt.patchDexTests(outDir);
    IS_TINY_APP_COMPILED=true;
  }
  CompilerUtil.refreshOutputRoots(Lists.newArrayList(outputDirPath));
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    @Override public void run(){
      ModifiableRootModel model=ModuleRootManager.getInstance(myModule).getModifiableModel();
      configureLibrary(model,CUSTOM_LIBRARY_NAME,CUSTOM_LIBRARY_JAR,CUSTOM_LIBRARY_SOURCES);
      configureLibrary(model,KOTLIN_LIBRARY_NAME,ForTestCompileRuntime.runtimeJarForTests(),new File("libraries/stdlib/src"));
      model.commit();
    }
  }
);
}
