{
  TestJdkKind jdkKind=TestJdkKind.MOCK_JDK;
  for (  TestFile file : files) {
    if (isFullJdkDirectiveDefined(file.content)) {
      jdkKind=TestJdkKind.FULL_JDK;
      break;
    }
  }
  File javaOutputDir;
  if (javaSourceDir != null) {
    final List<String> javaSourceFilePaths=new ArrayList<String>();
    FileUtil.processFilesRecursively(javaSourceDir,new Processor<File>(){
      @Override public boolean process(      File file){
        if (file.isFile() && file.getName().endsWith(".java")) {
          javaSourceFilePaths.add(file.getPath());
        }
        return true;
      }
    }
);
    javaOutputDir=compileJava(javaSourceFilePaths,Collections.<String>emptyList(),Collections.<String>emptyList());
  }
 else {
    javaOutputDir=null;
  }
  CompilerConfiguration configuration=compilerConfigurationForTests(ConfigurationKind.ALL,jdkKind,getAnnotationsJar(),javaOutputDir);
  myEnvironment=KotlinCoreEnvironment.createForTests(getTestRootDisposable(),configuration,EnvironmentConfigFiles.JVM_CONFIG_FILES);
  loadMultiFiles(files);
  blackBox();
}
