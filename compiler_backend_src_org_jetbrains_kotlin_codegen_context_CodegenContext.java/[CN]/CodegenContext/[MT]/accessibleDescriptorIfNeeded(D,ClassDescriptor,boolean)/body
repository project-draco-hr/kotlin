{
  CallableMemberDescriptor unwrappedDescriptor=DescriptorUtils.unwrapFakeOverride(descriptor);
  DeclarationDescriptor enclosed=descriptor.getContainingDeclaration();
  CodegenContext descriptorContext=findParentContextWithDescriptor(enclosed);
  if (descriptorContext == null && DescriptorUtils.isCompanionObject(enclosed)) {
    CodegenContext classContext=findParentContextWithDescriptor(enclosed.getContainingDeclaration());
    if (classContext instanceof ClassContext) {
      descriptorContext=((ClassContext)classContext).getCompanionObjectContext();
    }
  }
  if (descriptorContext == null && JavaVisibilities.PROTECTED_STATIC_VISIBILITY == descriptor.getVisibility() && !(descriptor instanceof SamConstructorDescriptor)) {
    descriptorContext=ExpressionCodegen.getParentContextSubclassOf((ClassDescriptor)enclosed,this);
    superCallTarget=(ClassDescriptor)enclosed;
  }
  if (descriptorContext == null && withinInliningContext && superCallTarget != null) {
    descriptorContext=ExpressionCodegen.getParentContextSubclassOf((ClassDescriptor)enclosed,this);
  }
  if (descriptorContext == null && descriptor instanceof ConstructorDescriptor) {
    ClassDescriptor classDescriptor=((ConstructorDescriptor)descriptor).getContainingDeclaration();
    if (DescriptorUtils.isSealedClass(classDescriptor)) {
      CodegenContext parentContextForClass=findParentContextWithDescriptor(classDescriptor.getContainingDeclaration());
      if (parentContextForClass != null) {
        descriptorContext=parentContextForClass.findChildContext(classDescriptor);
      }
    }
  }
  if (descriptorContext == null) {
    return descriptor;
  }
  if (descriptor instanceof PropertyDescriptor) {
    PropertyDescriptor propertyDescriptor=(PropertyDescriptor)descriptor;
    int propertyAccessFlag=getVisibilityAccessFlag(descriptor);
    PropertyGetterDescriptor getter=propertyDescriptor.getGetter();
    int getterAccessFlag=getter == null ? propertyAccessFlag : propertyAccessFlag | getVisibilityAccessFlag(getter);
    boolean getterAccessorRequired=isAccessorRequired(getterAccessFlag,unwrappedDescriptor,descriptorContext,withinInliningContext,superCallTarget != null);
    PropertySetterDescriptor setter=propertyDescriptor.getSetter();
    int setterAccessFlag=propertyAccessFlag;
    if (setter != null && setter.getVisibility().normalize() != Visibilities.INVISIBLE_FAKE) {
      setterAccessFlag=propertyAccessFlag | getVisibilityAccessFlag(setter);
    }
    boolean setterAccessorRequired=isAccessorRequired(setterAccessFlag,unwrappedDescriptor,descriptorContext,withinInliningContext,superCallTarget != null);
    if (!getterAccessorRequired && !setterAccessorRequired) {
      return descriptor;
    }
    return (D)descriptorContext.getPropertyAccessor(propertyDescriptor,superCallTarget,getterAccessorRequired,setterAccessorRequired);
  }
 else {
    int flag=getVisibilityAccessFlag(unwrappedDescriptor);
    if (!isAccessorRequired(flag,unwrappedDescriptor,descriptorContext,withinInliningContext,superCallTarget != null)) {
      return descriptor;
    }
    return (D)descriptorContext.getAccessor(descriptor,superCallTarget);
  }
}
