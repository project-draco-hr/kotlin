{
  CallableMemberDescriptor unwrappedDescriptor=DescriptorUtils.unwrapFakeOverride(descriptor);
  int flag=getAccessFlags(unwrappedDescriptor);
  if ((flag & ACC_PRIVATE) == 0 && (flag & ACC_PROTECTED) == 0) {
    return descriptor;
  }
  CodegenContext descriptorContext=null;
  if (!fromOutsideContext || getClassOrPackageParentContext().getContextDescriptor() != descriptor.getContainingDeclaration()) {
    DeclarationDescriptor enclosed=descriptor.getContainingDeclaration();
    boolean isCompanionObjectMember=DescriptorUtils.isCompanionObject(enclosed);
    if (hasThisDescriptor() && (enclosed != getThisDescriptor() || !fromOutsideContext)) {
      CodegenContext currentContext=this;
      while (currentContext != null) {
        if (currentContext.getContextDescriptor() == enclosed) {
          descriptorContext=currentContext;
          break;
        }
        if (isCompanionObjectMember && currentContext instanceof ClassContext) {
          ClassContext classContext=(ClassContext)currentContext;
          CodegenContext companionObjectContext=classContext.getCompanionObjectContext();
          if (companionObjectContext != null && companionObjectContext.getContextDescriptor() == enclosed) {
            descriptorContext=companionObjectContext;
            break;
          }
        }
        currentContext=currentContext.getParentContext();
      }
    }
  }
  if (descriptorContext == null) {
    return descriptor;
  }
  if ((flag & ACC_PROTECTED) != 0) {
    PackageFragmentDescriptor unwrappedDescriptorPackage=DescriptorUtils.getParentOfType(unwrappedDescriptor,PackageFragmentDescriptor.class,false);
    PackageFragmentDescriptor contextDescriptorPackage=DescriptorUtils.getParentOfType(descriptorContext.getContextDescriptor(),PackageFragmentDescriptor.class,false);
    boolean inSamePackage=contextDescriptorPackage != null && unwrappedDescriptorPackage != null && unwrappedDescriptorPackage.getFqName().equals(contextDescriptorPackage.getFqName());
    if (inSamePackage) {
      return descriptor;
    }
  }
  return (MemberDescriptor)descriptorContext.getAccessor(descriptor);
}
