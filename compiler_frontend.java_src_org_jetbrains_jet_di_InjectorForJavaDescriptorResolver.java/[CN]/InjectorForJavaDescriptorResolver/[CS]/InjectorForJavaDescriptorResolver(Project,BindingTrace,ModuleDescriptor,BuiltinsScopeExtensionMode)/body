{
  this.project=project;
  this.bindingTrace=bindingTrace;
  this.moduleDescriptor=moduleDescriptor;
  this.builtinsScopeExtensionMode=builtinsScopeExtensionMode;
  this.javaBridgeConfiguration=new JavaBridgeConfiguration();
  this.javaSemanticServices=new JavaSemanticServices();
  this.javaDescriptorResolver=new JavaDescriptorResolver();
  this.psiClassFinder=new PsiClassFinderImpl();
  this.javaTypeTransformer=new JavaTypeTransformer();
  this.javaDescriptorSignatureResolver=new JavaDescriptorSignatureResolver();
  javaBridgeConfiguration.setBuiltinsScopeExtensionMode(builtinsScopeExtensionMode);
  javaBridgeConfiguration.setJavaSemanticServices(javaSemanticServices);
  javaBridgeConfiguration.setProject(project);
  this.javaSemanticServices.setDescriptorResolver(javaDescriptorResolver);
  this.javaSemanticServices.setPsiClassFinder(psiClassFinder);
  this.javaSemanticServices.setTrace(bindingTrace);
  this.javaSemanticServices.setTypeTransformer(javaTypeTransformer);
  this.javaDescriptorResolver.setJavaDescriptorSignatureResolver(javaDescriptorSignatureResolver);
  this.javaDescriptorResolver.setProject(project);
  this.javaDescriptorResolver.setPsiClassFinder(psiClassFinder);
  this.javaDescriptorResolver.setSemanticServices(javaSemanticServices);
  this.javaDescriptorResolver.setTrace(bindingTrace);
  this.psiClassFinder.setProject(project);
  javaTypeTransformer.setJavaSemanticServices(javaSemanticServices);
  javaTypeTransformer.setResolver(javaDescriptorResolver);
  javaDescriptorSignatureResolver.setJavaDescriptorResolver(javaDescriptorResolver);
  javaDescriptorSignatureResolver.setJavaSemanticServices(javaSemanticServices);
  javaBridgeConfiguration.init();
  psiClassFinder.initialize();
}
