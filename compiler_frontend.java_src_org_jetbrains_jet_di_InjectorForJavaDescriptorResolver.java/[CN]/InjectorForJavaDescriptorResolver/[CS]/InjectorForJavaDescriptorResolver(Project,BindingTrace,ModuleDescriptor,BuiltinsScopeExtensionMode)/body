{
  this.project=project;
  this.bindingTrace=bindingTrace;
  this.moduleDescriptor=moduleDescriptor;
  this.builtinsScopeExtensionMode=builtinsScopeExtensionMode;
  this.javaBridgeConfiguration=new JavaBridgeConfiguration();
  this.javaSemanticServices=new JavaSemanticServices();
  this.javaDescriptorResolver=new JavaDescriptorResolver();
  this.psiClassFinder=new PsiClassFinderImpl();
  this.javaTypeTransformer=new JavaTypeTransformer();
  this.classResolver=new ClassResolver();
  this.javaAnnotationResolver=new JavaAnnotationResolver();
  this.compileTimeConstResolver=new CompileTimeConstResolver();
  this.namespaceResolver=new NamespaceResolver();
  this.javaDescriptorSignatureResolver=new JavaDescriptorSignatureResolver();
  this.constructorResolver=new ConstructorResolver();
  this.valueParameterResolver=new ValueParameterResolver();
  this.functionResolver=new FunctionResolver();
  this.innerClassResolver=new InnerClassResolver();
  this.propertiesResolver=new PropertiesResolver();
  javaBridgeConfiguration.setBuiltinsScopeExtensionMode(builtinsScopeExtensionMode);
  javaBridgeConfiguration.setJavaSemanticServices(javaSemanticServices);
  javaBridgeConfiguration.setProject(project);
  this.javaSemanticServices.setDescriptorResolver(javaDescriptorResolver);
  this.javaSemanticServices.setPsiClassFinder(psiClassFinder);
  this.javaSemanticServices.setTrace(bindingTrace);
  this.javaSemanticServices.setTypeTransformer(javaTypeTransformer);
  this.javaDescriptorResolver.setClassResolver(classResolver);
  this.javaDescriptorResolver.setConstructorResolver(constructorResolver);
  this.javaDescriptorResolver.setFunctionResolver(functionResolver);
  this.javaDescriptorResolver.setInnerClassResolver(innerClassResolver);
  this.javaDescriptorResolver.setNamespaceResolver(namespaceResolver);
  this.javaDescriptorResolver.setProject(project);
  this.javaDescriptorResolver.setPropertiesResolver(propertiesResolver);
  this.javaDescriptorResolver.setSemanticServices(javaSemanticServices);
  this.javaDescriptorResolver.setTrace(bindingTrace);
  this.psiClassFinder.setProject(project);
  javaTypeTransformer.setJavaSemanticServices(javaSemanticServices);
  javaTypeTransformer.setResolver(javaDescriptorResolver);
  classResolver.setAnnotationResolver(javaAnnotationResolver);
  classResolver.setJavaDescriptorResolver(javaDescriptorResolver);
  classResolver.setNamespaceResolver(namespaceResolver);
  classResolver.setPsiClassFinder(psiClassFinder);
  classResolver.setSemanticServices(javaSemanticServices);
  classResolver.setSignatureResolver(javaDescriptorSignatureResolver);
  classResolver.setTrace(bindingTrace);
  classResolver.setTypeTransformer(javaTypeTransformer);
  javaAnnotationResolver.setClassResolver(classResolver);
  javaAnnotationResolver.setCompileTimeConstResolver(compileTimeConstResolver);
  compileTimeConstResolver.setAnnotationResolver(javaAnnotationResolver);
  compileTimeConstResolver.setClassResolver(classResolver);
  namespaceResolver.setJavaSemanticServices(javaSemanticServices);
  namespaceResolver.setPsiClassFinder(psiClassFinder);
  namespaceResolver.setTrace(bindingTrace);
  javaDescriptorSignatureResolver.setJavaSemanticServices(javaSemanticServices);
  constructorResolver.setTrace(bindingTrace);
  constructorResolver.setTypeTransformer(javaTypeTransformer);
  constructorResolver.setValueParameterResolver(valueParameterResolver);
  valueParameterResolver.setTypeTransformer(javaTypeTransformer);
  functionResolver.setAnnotationResolver(javaAnnotationResolver);
  functionResolver.setParameterResolver(valueParameterResolver);
  functionResolver.setSignatureResolver(javaDescriptorSignatureResolver);
  functionResolver.setTrace(bindingTrace);
  functionResolver.setTypeTransformer(javaTypeTransformer);
  innerClassResolver.setClassResolver(classResolver);
  propertiesResolver.setAnnotationResolver(javaAnnotationResolver);
  propertiesResolver.setClassResolver(classResolver);
  propertiesResolver.setJavaDescriptorSignatureResolver(javaDescriptorSignatureResolver);
  propertiesResolver.setSemanticServices(javaSemanticServices);
  propertiesResolver.setTrace(bindingTrace);
  javaBridgeConfiguration.init();
  psiClassFinder.initialize();
}
