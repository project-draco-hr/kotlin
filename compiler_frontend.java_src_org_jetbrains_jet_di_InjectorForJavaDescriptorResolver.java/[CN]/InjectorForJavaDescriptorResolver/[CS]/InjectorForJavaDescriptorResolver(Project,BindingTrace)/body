{
  this.project=project;
  this.bindingTrace=bindingTrace;
  this.javaClassFinder=new JavaClassFinderImpl();
  this.traceBasedExternalSignatureResolver=new TraceBasedExternalSignatureResolver();
  this.traceBasedJavaResolverCache=new TraceBasedJavaResolverCache();
  this.fakeOverrideVisibilityResolver=new FakeOverrideVisibilityResolverImpl();
  this.traceBasedErrorReporter=new TraceBasedErrorReporter();
  this.javaDescriptorResolver=new JavaDescriptorResolver();
  this.psiClassFinder=new PsiClassFinderImpl();
  this.virtualFileFinder=com.intellij.openapi.components.ServiceManager.getService(project,VirtualFileFinder.class);
  this.javaClassResolver=new JavaClassResolver();
  this.javaAnnotationResolver=new JavaAnnotationResolver();
  this.javaAnnotationArgumentResolver=new JavaAnnotationArgumentResolver();
  this.deserializedDescriptorResolver=new DeserializedDescriptorResolver();
  this.annotationDescriptorDeserializer=new AnnotationDescriptorDeserializer();
  this.javaNamespaceResolver=new JavaNamespaceResolver();
  this.javaFunctionResolver=new JavaFunctionResolver();
  this.javaTypeParameterResolver=new JavaTypeParameterResolver();
  this.javaTypeTransformer=new JavaTypeTransformer();
  this.javaValueParameterResolver=new JavaValueParameterResolver();
  this.javaSupertypeResolver=new JavaSupertypeResolver();
  this.javaConstructorResolver=new JavaConstructorResolver();
  this.javaPropertyResolver=new JavaPropertyResolver();
  javaClassFinder.setPsiClassFinder(psiClassFinder);
  traceBasedExternalSignatureResolver.setTrace(bindingTrace);
  traceBasedJavaResolverCache.setTrace(bindingTrace);
  fakeOverrideVisibilityResolver.setTrace(bindingTrace);
  traceBasedErrorReporter.setTrace(bindingTrace);
  this.javaDescriptorResolver.setClassResolver(javaClassResolver);
  this.javaDescriptorResolver.setConstructorResolver(javaConstructorResolver);
  this.javaDescriptorResolver.setFunctionResolver(javaFunctionResolver);
  this.javaDescriptorResolver.setNamespaceResolver(javaNamespaceResolver);
  this.javaDescriptorResolver.setPropertiesResolver(javaPropertyResolver);
  this.psiClassFinder.setProject(project);
  javaClassResolver.setAnnotationResolver(javaAnnotationResolver);
  javaClassResolver.setCache(traceBasedJavaResolverCache);
  javaClassResolver.setDeserializedDescriptorResolver(deserializedDescriptorResolver);
  javaClassResolver.setFunctionResolver(javaFunctionResolver);
  javaClassResolver.setJavaClassFinder(javaClassFinder);
  javaClassResolver.setJavaDescriptorResolver(javaDescriptorResolver);
  javaClassResolver.setNamespaceResolver(javaNamespaceResolver);
  javaClassResolver.setSupertypesResolver(javaSupertypeResolver);
  javaClassResolver.setTypeParameterResolver(javaTypeParameterResolver);
  javaClassResolver.setVirtualFileFinder(virtualFileFinder);
  javaAnnotationResolver.setArgumentResolver(javaAnnotationArgumentResolver);
  javaAnnotationResolver.setClassResolver(javaClassResolver);
  javaAnnotationArgumentResolver.setAnnotationResolver(javaAnnotationResolver);
  javaAnnotationArgumentResolver.setClassResolver(javaClassResolver);
  deserializedDescriptorResolver.setAnnotationDeserializer(annotationDescriptorDeserializer);
  deserializedDescriptorResolver.setErrorReporter(traceBasedErrorReporter);
  deserializedDescriptorResolver.setJavaClassResolver(javaClassResolver);
  deserializedDescriptorResolver.setJavaNamespaceResolver(javaNamespaceResolver);
  annotationDescriptorDeserializer.setJavaClassResolver(javaClassResolver);
  annotationDescriptorDeserializer.setPsiClassFinder(psiClassFinder);
  annotationDescriptorDeserializer.setVirtualFileFinder(virtualFileFinder);
  javaNamespaceResolver.setCache(traceBasedJavaResolverCache);
  javaNamespaceResolver.setDeserializedDescriptorResolver(deserializedDescriptorResolver);
  javaNamespaceResolver.setJavaClassFinder(javaClassFinder);
  javaNamespaceResolver.setJavaDescriptorResolver(javaDescriptorResolver);
  javaNamespaceResolver.setVirtualFileFinder(virtualFileFinder);
  javaFunctionResolver.setAnnotationResolver(javaAnnotationResolver);
  javaFunctionResolver.setCache(traceBasedJavaResolverCache);
  javaFunctionResolver.setExternalSignatureResolver(traceBasedExternalSignatureResolver);
  javaFunctionResolver.setFakeOverrideVisibilityResolver(fakeOverrideVisibilityResolver);
  javaFunctionResolver.setTypeParameterResolver(javaTypeParameterResolver);
  javaFunctionResolver.setTypeTransformer(javaTypeTransformer);
  javaFunctionResolver.setValueParameterResolver(javaValueParameterResolver);
  javaTypeParameterResolver.setTypeTransformer(javaTypeTransformer);
  javaTypeTransformer.setClassResolver(javaClassResolver);
  javaValueParameterResolver.setTypeTransformer(javaTypeTransformer);
  javaSupertypeResolver.setClassResolver(javaClassResolver);
  javaSupertypeResolver.setTrace(bindingTrace);
  javaSupertypeResolver.setTypeTransformer(javaTypeTransformer);
  javaConstructorResolver.setCache(traceBasedJavaResolverCache);
  javaConstructorResolver.setExternalSignatureResolver(traceBasedExternalSignatureResolver);
  javaConstructorResolver.setTypeTransformer(javaTypeTransformer);
  javaConstructorResolver.setValueParameterResolver(javaValueParameterResolver);
  javaPropertyResolver.setAnnotationResolver(javaAnnotationResolver);
  javaPropertyResolver.setCache(traceBasedJavaResolverCache);
  javaPropertyResolver.setExternalSignatureResolver(traceBasedExternalSignatureResolver);
  javaPropertyResolver.setFakeOverrideVisibilityResolver(fakeOverrideVisibilityResolver);
  javaPropertyResolver.setTypeTransformer(javaTypeTransformer);
  psiClassFinder.initialize();
}
