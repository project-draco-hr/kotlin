{
  this.project=project;
  this.bindingTrace=bindingTrace;
  this.globalContext=org.jetbrains.jet.context.ContextPackage.GlobalContext();
  this.lockBasedStorageManager=globalContext.getStorageManager();
  this.module=org.jetbrains.jet.lang.resolve.java.AnalyzerFacadeForJVM.createJavaModule("<fake-jdr-module>");
  this.javaClassFinder=new JavaClassFinderImpl();
  this.virtualFileFinder=org.jetbrains.jet.lang.resolve.kotlin.VirtualFileFinder.SERVICE.getInstance(project);
  this.deserializedDescriptorResolver=new DeserializedDescriptorResolver();
  this.psiBasedExternalAnnotationResolver=new PsiBasedExternalAnnotationResolver();
  this.traceBasedExternalSignatureResolver=new TraceBasedExternalSignatureResolver();
  this.traceBasedErrorReporter=new TraceBasedErrorReporter();
  this.psiBasedMethodSignatureChecker=new PsiBasedMethodSignatureChecker();
  this.traceBasedJavaResolverCache=new TraceBasedJavaResolverCache();
  this.javaPropertyInitializerEvaluator=new JavaPropertyInitializerEvaluatorImpl();
  this.javaSourceElementFactory=new JavaSourceElementFactoryImpl();
  this.globalJavaResolverContext=new GlobalJavaResolverContext(lockBasedStorageManager,getJavaClassFinder(),virtualFileFinder,deserializedDescriptorResolver,psiBasedExternalAnnotationResolver,traceBasedExternalSignatureResolver,traceBasedErrorReporter,psiBasedMethodSignatureChecker,traceBasedJavaResolverCache,javaPropertyInitializerEvaluator,javaSourceElementFactory);
  this.lazyJavaPackageFragmentProvider=new LazyJavaPackageFragmentProvider(globalJavaResolverContext,getModule());
  this.javaDescriptorResolver=new JavaDescriptorResolver(lazyJavaPackageFragmentProvider,getModule());
  this.javaClassDataFinder=new JavaClassDataFinder(virtualFileFinder,deserializedDescriptorResolver);
  this.annotationDescriptorLoader=new AnnotationDescriptorLoader();
  this.constantDescriptorLoader=new ConstantDescriptorLoader();
  this.deserializationGlobalContextForJava=new DeserializationGlobalContextForJava(lockBasedStorageManager,getModule(),javaClassDataFinder,annotationDescriptorLoader,constantDescriptorLoader,lazyJavaPackageFragmentProvider);
  this.descriptorLoadersStorage=new DescriptorLoadersStorage(lockBasedStorageManager);
  this.javaClassFinder.setProject(project);
  traceBasedExternalSignatureResolver.setExternalAnnotationResolver(psiBasedExternalAnnotationResolver);
  traceBasedExternalSignatureResolver.setProject(project);
  traceBasedExternalSignatureResolver.setTrace(bindingTrace);
  traceBasedJavaResolverCache.setTrace(bindingTrace);
  traceBasedErrorReporter.setTrace(bindingTrace);
  psiBasedMethodSignatureChecker.setExternalAnnotationResolver(psiBasedExternalAnnotationResolver);
  psiBasedMethodSignatureChecker.setExternalSignatureResolver(traceBasedExternalSignatureResolver);
  deserializedDescriptorResolver.setContext(deserializationGlobalContextForJava);
  deserializedDescriptorResolver.setErrorReporter(traceBasedErrorReporter);
  annotationDescriptorLoader.setErrorReporter(traceBasedErrorReporter);
  annotationDescriptorLoader.setKotlinClassFinder(virtualFileFinder);
  annotationDescriptorLoader.setModule(module);
  annotationDescriptorLoader.setStorage(descriptorLoadersStorage);
  descriptorLoadersStorage.setErrorReporter(traceBasedErrorReporter);
  descriptorLoadersStorage.setModule(module);
  constantDescriptorLoader.setErrorReporter(traceBasedErrorReporter);
  constantDescriptorLoader.setKotlinClassFinder(virtualFileFinder);
  constantDescriptorLoader.setStorage(descriptorLoadersStorage);
  javaClassFinder.initialize();
}
