{
  AnnotationArgumentVisitor argumentVisitor=new AnnotationArgumentVisitor<Void,Void>(){
    @Override public Void visitLongValue(    @NotNull LongValue value,    Void data){
      return visitSimpleValue(value);
    }
    @Override public Void visitIntValue(    IntValue value,    Void data){
      return visitSimpleValue(value);
    }
    @Override public Void visitShortValue(    ShortValue value,    Void data){
      return visitSimpleValue(value);
    }
    @Override public Void visitByteValue(    ByteValue value,    Void data){
      return visitSimpleValue(value);
    }
    @Override public Void visitDoubleValue(    DoubleValue value,    Void data){
      return visitSimpleValue(value);
    }
    @Override public Void visitFloatValue(    FloatValue value,    Void data){
      return visitSimpleValue(value);
    }
    @Override public Void visitBooleanValue(    BooleanValue value,    Void data){
      return visitSimpleValue(value);
    }
    @Override public Void visitCharValue(    CharValue value,    Void data){
      return visitSimpleValue(value);
    }
    @Override public Void visitStringValue(    StringValue value,    Void data){
      return visitSimpleValue(value);
    }
    @Override public Void visitEnumValue(    EnumValue value,    Void data){
      String propertyName=value.getValue().getName().asString();
      annotationVisitor.visitEnum(name,typeMapper.mapType(value.getType(KotlinBuiltIns.getInstance())).getDescriptor(),propertyName);
      return null;
    }
    @Override public Void visitArrayValue(    ArrayValue value,    Void data){
      AnnotationVisitor visitor=annotationVisitor.visitArray(name);
      for (      CompileTimeConstant<?> argument : value.getValue()) {
        genCompileTimeValue(null,argument,value.getType(KotlinBuiltIns.getInstance()),visitor);
      }
      visitor.visitEnd();
      return null;
    }
    @Override public Void visitAnnotationValue(    AnnotationValue value,    Void data){
      String internalAnnName=typeMapper.mapType(value.getValue().getType()).getDescriptor();
      AnnotationVisitor visitor=annotationVisitor.visitAnnotation(name,internalAnnName);
      genAnnotationArguments(value.getValue(),visitor);
      visitor.visitEnd();
      return null;
    }
    @Override public Void visitJavaClassValue(    JavaClassValue value,    Void data){
      annotationVisitor.visit(name,typeMapper.mapType(value.getValue()));
      return null;
    }
    @Override public Void visitNumberTypeValue(    IntegerValueTypeConstant value,    Void data){
      Object numberType=value.getValue(expectedType);
      annotationVisitor.visit(name,numberType);
      return null;
    }
    private Void visitSimpleValue(    CompileTimeConstant value){
      annotationVisitor.visit(name,value.getValue());
      return null;
    }
    @Override public Void visitErrorValue(    ErrorValue value,    Void data){
      return visitUnsupportedValue(value);
    }
    @Override public Void visitNullValue(    NullValue value,    Void data){
      return visitUnsupportedValue(value);
    }
    private Void visitUnsupportedValue(    CompileTimeConstant value){
      throw new IllegalStateException("Don't know how to compile annotation value " + value);
    }
  }
;
  value.accept(argumentVisitor,null);
}
