{
  CompileTimeConstant<?> compileTimeConstant=bindingContext.get(BindingContext.COMPILE_TIME_VALUE,expression);
  if (compileTimeConstant != null) {
    Object value=compileTimeConstant.getValue();
    annotationVisitor.visit(keyName,value);
    return;
  }
  if (expression instanceof JetDotQualifiedExpression) {
    JetDotQualifiedExpression qualifiedExpression=(JetDotQualifiedExpression)expression;
    ResolvedCall<? extends CallableDescriptor> call=bindingContext.get(BindingContext.RESOLVED_CALL,qualifiedExpression.getSelectorExpression());
    if (call != null) {
      if (call.getResultingDescriptor() instanceof PropertyDescriptor) {
        PropertyDescriptor descriptor=(PropertyDescriptor)call.getResultingDescriptor();
        annotationVisitor.visitEnum(keyName,typeMapper.mapType(descriptor).getDescriptor(),descriptor.getName().getName());
        return;
      }
    }
  }
 else {
    if (expression instanceof JetCallExpression) {
      JetCallExpression callExpression=(JetCallExpression)expression;
      ResolvedCall<? extends CallableDescriptor> call=bindingContext.get(BindingContext.RESOLVED_CALL,callExpression.getCalleeExpression());
      if (call != null) {
        List<AnnotationDescriptor> annotations=call.getResultingDescriptor().getOriginal().getAnnotations();
        String value=null;
        if (annotations != null) {
          for (          AnnotationDescriptor annotation : annotations) {
            if ("Intrinsic".equals(annotation.getType().getConstructor().getDeclarationDescriptor().getName().getName())) {
              value=(String)annotation.getAllValueArguments().values().iterator().next().getValue();
              break;
            }
          }
        }
        if (IntrinsicMethods.KOTLIN_JAVA_CLASS_FUNCTION.equals(value)) {
          annotationVisitor.visit(keyName,typeMapper.mapType(call.getResultingDescriptor().getReturnType().getArguments().get(0).getType()));
          return;
        }
 else         if (IntrinsicMethods.KOTLIN_ARRAYS_ARRAY.equals(value)) {
          AnnotationVisitor visitor=annotationVisitor.visitArray(keyName);
          VarargValueArgument next=(VarargValueArgument)call.getValueArguments().values().iterator().next();
          for (          ValueArgument argument : next.getArguments()) {
            genAnnotationExpressionValue(visitor,null,argument.getArgumentExpression());
          }
          visitor.visitEnd();
          return;
        }
 else         if (call.getResultingDescriptor() instanceof ConstructorDescriptor) {
          ConstructorDescriptor descriptor=(ConstructorDescriptor)call.getResultingDescriptor();
          AnnotationVisitor visitor=annotationVisitor.visitAnnotation(keyName,typeMapper.mapType(descriptor.getContainingDeclaration()).getDescriptor());
          getAnnotation(call,visitor);
          visitor.visitEnd();
          return;
        }
      }
    }
  }
  throw new IllegalStateException("Don't know how to compile annotation value");
}
