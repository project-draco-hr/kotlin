{
  return new FunctionGroup(){
    @NotNull @Override public String getName(){
      return functionGroup.getName();
    }
    @NotNull @Override public OverloadResolutionResult getPossiblyApplicableFunctions(    @NotNull List<JetType> typeArguments,    @NotNull List<JetType> positionedValueArgumentTypes){
      OverloadResolutionResult possiblyApplicableFunctions=functionGroup.getPossiblyApplicableFunctions(typeArguments,positionedValueArgumentTypes);
      List<FunctionDescriptor> functionDescriptors=Lists.newArrayList(possiblyApplicableFunctions.getFunctionDescriptors());
      for (Iterator<FunctionDescriptor> iterator=functionDescriptors.iterator(); iterator.hasNext(); ) {
        FunctionDescriptor functionDescriptor=iterator.next();
        if (!criterion.apply(functionDescriptor)) {
          iterator.remove();
        }
      }
      if (functionDescriptors.isEmpty()) {
        return OverloadResolutionResult.nameNotFound();
      }
      if (possiblyApplicableFunctions.isSuccess() || possiblyApplicableFunctions.isAmbiguity()) {
        if (functionDescriptors.size() == 1) {
          return OverloadResolutionResult.success(functionDescriptors.get(0));
        }
        return OverloadResolutionResult.ambiguity(functionDescriptors);
      }
      if (functionDescriptors.size() == 1) {
        return OverloadResolutionResult.singleFunctionArgumentMismatch(functionDescriptors.get(0));
      }
      return OverloadResolutionResult.ambiguity(functionDescriptors);
    }
    @Override public boolean isEmpty(){
      return false;
    }
    @NotNull @Override public Set<FunctionDescriptor> getFunctionDescriptors(){
      return null;
    }
  }
;
}
