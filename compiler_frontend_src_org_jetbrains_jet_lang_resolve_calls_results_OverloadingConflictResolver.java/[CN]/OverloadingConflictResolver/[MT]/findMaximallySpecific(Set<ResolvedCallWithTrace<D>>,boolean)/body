{
  Set<ResolvedCallWithTrace<D>> maximallySpecific=new THashSet<ResolvedCallWithTrace<D>>(new TObjectHashingStrategy<ResolvedCallWithTrace<D>>(){
    @Override public boolean equals(    ResolvedCallWithTrace<D> o1,    ResolvedCallWithTrace<D> o2){
      return o1 == null ? o2 == null : o1.getResultingDescriptor().equals(o2.getResultingDescriptor());
    }
    @Override public int computeHashCode(    ResolvedCallWithTrace<D> object){
      return object == null ? 0 : object.getResultingDescriptor().hashCode();
    }
  }
);
  for (  ResolvedCallWithTrace<D> candidateCall : candidates) {
    if (isMaximallySpecific(candidateCall,candidates,discriminateGenericDescriptors)) {
      maximallySpecific.add(candidateCall);
    }
  }
  return maximallySpecific.size() == 1 ? maximallySpecific.iterator().next() : null;
}
