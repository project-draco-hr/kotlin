{
  super(new BorderLayout());
  myProject=project;
  this.toolWindow=toolWindow;
  myEditor=EditorFactory.getInstance().createEditor(EditorFactory.getInstance().createDocument(""),project,JavaFileType.INSTANCE,true);
  add(myEditor.getComponent());
  JPanel optionPanel=new JPanel(new FlowLayout());
  add(optionPanel,BorderLayout.NORTH);
  decompile=new JButton("Decompile");
  if (KotlinDecompilerService.Companion.getInstance() != null) {
    optionPanel.add(decompile);
    decompile.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        Location location=Location.fromEditor(FileEditorManager.getInstance(myProject).getSelectedTextEditor(),myProject);
        KtFile file=location.getKFile();
        if (file != null) {
          try {
            KotlinDecompilerAdapterKt.showDecompiledCode(file);
          }
 catch (          IdeaLogger.InternalException ex) {
            LOG.info(ex);
            Messages.showErrorDialog(myProject,"Failed to decompile " + file.getName() + ": "+ ex,"Kotlin Bytecode Decompiler");
          }
        }
      }
    }
);
  }
  enableInline=new JCheckBox("Inline",true);
  enableOptimization=new JCheckBox("Optimization",true);
  enableAssertions=new JCheckBox("Assertions",true);
  optionPanel.add(enableInline);
  optionPanel.add(enableOptimization);
  optionPanel.add(enableAssertions);
  new InfinitePeriodicalTask(UPDATE_DELAY,Alarm.ThreadToUse.SWING_THREAD,this,new Computable<LongRunningReadTask>(){
    @Override public LongRunningReadTask compute(){
      return new UpdateBytecodeToolWindowTask();
    }
  }
).start();
  setText(DEFAULT_TEXT);
}
