{
  GenerationState state;
  try {
    ResolutionFacade resolutionFacade=ResolvePackage.getResolutionFacade(jetFile);
    Ref<Set<JetElement>> ref=Ref.create();
    BindingContext bindingContext=processInlinedDeclarations(jetFile.getProject(),resolutionFacade,Collections.<JetElement>singleton(jetFile),1,ref,!enableInline);
    Set<JetFile> toProcess=new LinkedHashSet<JetFile>();
    toProcess.add(jetFile);
    if (ref.get() != null) {
      for (      JetElement element : ref.get()) {
        JetFile file=element.getContainingJetFile();
        toProcess.add(file);
      }
    }
    GenerationState.GenerateClassFilter generateClassFilter=new GenerationState.GenerateClassFilter(){
      @Override public boolean shouldGeneratePackagePart(      JetFile file){
        return file == jetFile;
      }
      @Override public boolean shouldAnnotateClass(      JetClassOrObject classOrObject){
        return true;
      }
      @Override public boolean shouldGenerateClass(      JetClassOrObject classOrObject){
        return classOrObject.getContainingJetFile() == jetFile;
      }
      @Override public boolean shouldGenerateScript(      JetScript script){
        return script.getContainingJetFile() == jetFile;
      }
    }
;
    ModuleDescriptor moduleDescriptor=resolutionFacade.findModuleDescriptor(jetFile);
    state=new GenerationState(jetFile.getProject(),ClassBuilderFactories.TEST,Progress.DEAF,moduleDescriptor,bindingContext,new ArrayList<JetFile>(toProcess),!enableAssertions,!enableAssertions,generateClassFilter,!enableInline,!enableOptimization,null,null,DiagnosticSink.DO_NOTHING,null);
    KotlinCodegenFacade.compileCorrectFiles(state,CompilationErrorHandler.THROW_EXCEPTION);
  }
 catch (  ProcessCanceledException e) {
    throw e;
  }
catch (  Exception e) {
    return printStackTraceToString(e);
  }
  StringBuilder answer=new StringBuilder();
  OutputFileCollection outputFiles=state.getFactory();
  for (  OutputFile outputFile : outputFiles.asList()) {
    answer.append("// ================");
    answer.append(outputFile.getRelativePath());
    answer.append(" =================\n");
    answer.append(outputFile.asText()).append("\n\n");
  }
  return answer.toString();
}
