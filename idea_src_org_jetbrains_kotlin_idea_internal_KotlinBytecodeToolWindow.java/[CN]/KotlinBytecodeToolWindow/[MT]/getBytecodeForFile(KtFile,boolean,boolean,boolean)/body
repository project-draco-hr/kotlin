{
  GenerationState state;
  try {
    ResolutionFacade resolutionFacade=ResolutionUtils.getResolutionFacade(jetFile);
    BindingContext bindingContextForFile=resolutionFacade.analyzeFullyAndGetResult(Collections.singletonList(jetFile)).getBindingContext();
    kotlin.Pair<BindingContext,List<KtFile>> result=(kotlin.Pair)DebuggerUtils.INSTANCE.analyzeInlinedFunctions(resolutionFacade,bindingContextForFile,jetFile,!enableInline);
    BindingContext bindingContext=result.getFirst();
    List<? extends KtFile> toProcess=result.getSecond();
    GenerationState.GenerateClassFilter generateClassFilter=new GenerationState.GenerateClassFilter(){
      @Override public boolean shouldGeneratePackagePart(      @NotNull KtFile file){
        return file == jetFile;
      }
      @Override public boolean shouldAnnotateClass(      @NotNull KtClassOrObject classOrObject){
        return true;
      }
      @Override public boolean shouldGenerateClass(      @NotNull KtClassOrObject classOrObject){
        return classOrObject.getContainingKtFile() == jetFile;
      }
      @Override public boolean shouldGenerateScript(      @NotNull KtScript script){
        return script.getContainingKtFile() == jetFile;
      }
    }
;
    state=new GenerationState(jetFile.getProject(),ClassBuilderFactories.TEST,resolutionFacade.getModuleDescriptor(),bindingContext,toProcess,!enableAssertions,!enableAssertions,generateClassFilter,!enableInline,!enableOptimization,false);
    KotlinCodegenFacade.compileCorrectFiles(state,CompilationErrorHandler.THROW_EXCEPTION);
  }
 catch (  ProcessCanceledException e) {
    throw e;
  }
catch (  Exception e) {
    return printStackTraceToString(e);
  }
  StringBuilder answer=new StringBuilder();
  Collection<Diagnostic> diagnostics=state.getCollectedExtraJvmDiagnostics().all();
  if (!diagnostics.isEmpty()) {
    answer.append("// Backend Errors: \n");
    answer.append("// ================\n");
    for (    Diagnostic diagnostic : diagnostics) {
      answer.append("// Error at ").append(diagnostic.getPsiFile().getName()).append(StringsKt.join(diagnostic.getTextRanges(),",")).append(": ").append(DefaultErrorMessages.render(diagnostic)).append("\n");
    }
    answer.append("// ================\n\n");
  }
  OutputFileCollection outputFiles=state.getFactory();
  for (  OutputFile outputFile : outputFiles.asList()) {
    answer.append("// ================");
    answer.append(outputFile.getRelativePath());
    answer.append(" =================\n");
    answer.append(outputFile.asText()).append("\n\n");
  }
  return answer.toString();
}
