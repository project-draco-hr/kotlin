{
  String tag=element.getTagName();
  Node parentNode=element.getParentNode();
  boolean isReceiver=tag.equals(TAG_RECEIVER);
  if (isReceiver) {
    checkDeviceAdmin(context,element);
  }
  if (tag.equals(TAG_USES_LIBRARY) || tag.equals(TAG_ACTIVITY) || tag.equals(TAG_SERVICE)|| tag.equals(TAG_PROVIDER)|| isReceiver) {
    if (!TAG_APPLICATION.equals(parentNode.getNodeName()) && context.isEnabled(WRONG_PARENT)) {
      context.report(WRONG_PARENT,element,context.getLocation(element),String.format("The `<%1$s>` element must be a direct child of the <application> element",tag));
    }
    if (tag.equals(TAG_ACTIVITY)) {
      Attr nameNode=element.getAttributeNodeNS(ANDROID_URI,ATTR_NAME);
      if (nameNode != null) {
        String name=nameNode.getValue();
        if (!name.isEmpty()) {
          String pkg=context.getMainProject().getPackage();
          if (name.charAt(0) == '.') {
            name=pkg + name;
          }
 else           if (name.indexOf('.') == -1) {
            name=pkg + '.' + name;
          }
          if (mActivities.contains(name)) {
            String message=String.format("Duplicate registration for activity `%1$s`",name);
            context.report(DUPLICATE_ACTIVITY,element,context.getLocation(nameNode),message);
          }
 else {
            mActivities.add(name);
          }
        }
      }
      checkMipmapIcon(context,element);
    }
    return;
  }
  if (parentNode != element.getOwnerDocument().getDocumentElement() && context.isEnabled(WRONG_PARENT)) {
    context.report(WRONG_PARENT,element,context.getLocation(element),String.format("The `<%1$s>` element must be a direct child of the " + "`<manifest>` root element",tag));
  }
  if (tag.equals(TAG_USES_SDK)) {
    mSeenUsesSdk++;
    if (mSeenUsesSdk == 2) {
      Location location=context.getLocation(element);
      NodeList elements=element.getOwnerDocument().getElementsByTagName(TAG_USES_SDK);
      Location secondary=null;
      for (int i=elements.getLength() - 1; i >= 0; i--) {
        Element e=(Element)elements.item(i);
        if (e != element) {
          Location l=context.getLocation(e);
          l.setSecondary(secondary);
          l.setMessage("Also appears here");
          secondary=l;
        }
      }
      location.setSecondary(secondary);
      if (context.isEnabled(MULTIPLE_USES_SDK)) {
        context.report(MULTIPLE_USES_SDK,element,location,"There should only be a single `<uses-sdk>` element in the manifest:" + " merge these together");
      }
      return;
    }
    if (!element.hasAttributeNS(ANDROID_URI,ATTR_MIN_SDK_VERSION)) {
      if (context.isEnabled(USES_SDK) && !context.getMainProject().isGradleProject()) {
        context.report(USES_SDK,element,context.getLocation(element),"`<uses-sdk>` tag should specify a minimum API level with " + "`android:minSdkVersion=\"?\"`");
      }
    }
 else {
      Attr codeNode=element.getAttributeNodeNS(ANDROID_URI,ATTR_MIN_SDK_VERSION);
      if (codeNode != null && codeNode.getValue().startsWith(PREFIX_RESOURCE_REF) && context.isEnabled(ILLEGAL_REFERENCE)) {
        context.report(ILLEGAL_REFERENCE,element,context.getLocation(codeNode),"The `android:minSdkVersion` cannot be a resource url, it must be " + "a literal integer (or string if a preview codename)");
      }
      checkOverride(context,element,ATTR_MIN_SDK_VERSION);
    }
    if (!element.hasAttributeNS(ANDROID_URI,ATTR_TARGET_SDK_VERSION)) {
      if (context.isEnabled(USES_SDK) && !context.getMainProject().isGradleProject()) {
        context.report(USES_SDK,element,context.getLocation(element),"`<uses-sdk>` tag should specify a target API level (the " + "highest verified version; when running on later versions, " + "compatibility behaviors may be enabled) with "+ "`android:targetSdkVersion=\"?\"`");
      }
    }
 else {
      checkOverride(context,element,ATTR_TARGET_SDK_VERSION);
      if (context.isEnabled(TARGET_NEWER)) {
        Attr targetSdkVersionNode=element.getAttributeNodeNS(ANDROID_URI,ATTR_TARGET_SDK_VERSION);
        if (targetSdkVersionNode != null) {
          String target=targetSdkVersionNode.getValue();
          try {
            int api=Integer.parseInt(target);
            if (api < context.getClient().getHighestKnownApiLevel()) {
              context.report(TARGET_NEWER,element,context.getLocation(targetSdkVersionNode),"Not targeting the latest versions of Android; compatibility " + "modes apply. Consider testing and updating this version. " + "Consult the `android.os.Build.VERSION_CODES` javadoc for details.");
            }
          }
 catch (          NumberFormatException nufe) {
          }
        }
      }
    }
    Attr nameNode=element.getAttributeNodeNS(ANDROID_URI,ATTR_TARGET_SDK_VERSION);
    if (nameNode != null && nameNode.getValue().startsWith(PREFIX_RESOURCE_REF) && context.isEnabled(ILLEGAL_REFERENCE)) {
      context.report(ILLEGAL_REFERENCE,element,context.getLocation(nameNode),"The `android:targetSdkVersion` cannot be a resource url, it must be " + "a literal integer (or string if a preview codename)");
    }
  }
  if (tag.equals(TAG_PERMISSION)) {
    Attr nameNode=element.getAttributeNodeNS(ANDROID_URI,ATTR_NAME);
    if (nameNode != null) {
      String name=nameNode.getValue();
      String base=name.substring(name.lastIndexOf('.') + 1);
      if (mPermissionNames == null) {
        mPermissionNames=Maps.newHashMap();
      }
 else       if (mPermissionNames.containsKey(base)) {
        String prevName=mPermissionNames.get(base);
        Location location=context.getLocation(nameNode);
        NodeList siblings=element.getParentNode().getChildNodes();
        for (int i=0, n=siblings.getLength(); i < n; i++) {
          Node node=siblings.item(i);
          if (node == element) {
            break;
          }
 else           if (node.getNodeType() == Node.ELEMENT_NODE) {
            Element sibling=(Element)node;
            String suffix='.' + base;
            if (sibling.getTagName().equals(TAG_PERMISSION)) {
              String b=element.getAttributeNS(ANDROID_URI,ATTR_NAME);
              if (b.endsWith(suffix)) {
                Location prevLocation=context.getLocation(node);
                prevLocation.setMessage("Previous permission here");
                location.setSecondary(prevLocation);
                break;
              }
            }
          }
        }
        String message=String.format("Permission name `%1$s` is not unique " + "(appears in both `%2$s` and `%3$s`)",base,prevName,name);
        context.report(UNIQUE_PERMISSION,element,location,message);
      }
      mPermissionNames.put(base,name);
    }
  }
  if (tag.equals(TAG_USES_PERMISSION)) {
    Attr name=element.getAttributeNodeNS(ANDROID_URI,ATTR_NAME);
    if (name != null && name.getValue().equals(MOCK_LOCATION_PERMISSION) && context.getMainProject().isGradleProject() && !isDebugOrTestManifest(context,context.file) && context.isEnabled(MOCK_LOCATION)) {
      String message="Mock locations should only be requested in a test or " + "debug-specific manifest file (typically `src/debug/AndroidManifest.xml`)";
      Location location=context.getLocation(name);
      context.report(MOCK_LOCATION,element,location,message);
    }
  }
  if (tag.equals(TAG_APPLICATION)) {
    mSeenApplication=true;
    boolean recordLocation=false;
    if (element.hasAttributeNS(ANDROID_URI,ATTR_ALLOW_BACKUP) || context.getDriver().isSuppressed(context,ALLOW_BACKUP,element)) {
      mSeenAllowBackup=true;
    }
 else {
      recordLocation=true;
    }
    if (element.hasAttributeNS(ANDROID_URI,ATTR_ICON) || context.getDriver().isSuppressed(context,APPLICATION_ICON,element)) {
      checkMipmapIcon(context,element);
      mSeenAppIcon=true;
    }
 else {
      recordLocation=true;
    }
    if (recordLocation && !context.getProject().isLibrary() && (mApplicationTagHandle == null || isMainManifest(context,context.file))) {
      mApplicationTagHandle=context.createLocationHandle(element);
    }
    Attr fullBackupNode=element.getAttributeNodeNS(ANDROID_URI,"fullBackupContent");
    if (fullBackupNode != null && fullBackupNode.getValue().startsWith(PREFIX_RESOURCE_REF) && context.getClient().supportsProjectResources()) {
      AbstractResourceRepository resources=context.getClient().getProjectResources(context.getProject(),true);
      ResourceUrl url=ResourceUrl.parse(fullBackupNode.getValue());
      if (url != null && !url.framework && resources != null && !resources.hasResourceItem(url.type,url.name)) {
        Location location=context.getValueLocation(fullBackupNode);
        context.report(ALLOW_BACKUP,location,"Missing `<full-backup-content>` resource");
      }
    }
 else     if (fullBackupNode == null && context.getMainProject().getTargetSdk() >= 23) {
      Location location=context.getLocation(element);
      context.report(ALLOW_BACKUP,location,"Should explicitly set `android:fullBackupContent` to `true` or `false` " + "to opt-in to or out of full app data back-up and restore, or " + "alternatively to an `@xml` resource which specifies which "+ "files to backup");
    }
 else     if (fullBackupNode == null && hasGcmReceiver(element)) {
      Location location=context.getLocation(element);
      context.report(ALLOW_BACKUP,location,"Should explicitly set `android:fullBackupContent` to avoid backing up " + "the GCM device specific regId.");
    }
  }
 else   if (mSeenApplication) {
    if (context.isEnabled(ORDER)) {
      context.report(ORDER,element,context.getLocation(element),String.format("`<%1$s>` tag appears after `<application>` tag",tag));
    }
    mSeenApplication=false;
  }
  if (tag.equals(TAG_USES_FEATURE)) {
    Attr nameNode=element.getAttributeNodeNS(ANDROID_URI,ATTR_NAME);
    if (nameNode != null) {
      String name=nameNode.getValue();
      if (!name.isEmpty()) {
        if (mUsesFeatures.contains(name)) {
          String message=String.format("Duplicate declaration of uses-feature `%1$s`",name);
          context.report(DUPLICATE_USES_FEATURE,element,context.getLocation(nameNode),message);
        }
 else {
          mUsesFeatures.add(name);
        }
      }
    }
  }
}
