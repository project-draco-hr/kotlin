{
  if (functionElement.getValueParameterList() == null) {
    return Collections.emptyList();
  }
  FunctionDescriptor functionDescriptor=(FunctionDescriptor)ResolvePackage.resolveToDescriptor(functionElement);
  List<FunctionDescriptor> superFunctions=getPossibleSuperFunctionsDescriptors(functionDescriptor);
  final Map<String,FunctionDescriptor> possibleSignatures=Maps.newHashMap();
  for (  FunctionDescriptor superFunction : superFunctions) {
    if (!superFunction.getKind().isReal())     continue;
    FunctionDescriptor signature=changeSignatureToMatch(functionDescriptor,superFunction);
    possibleSignatures.put(SIGNATURE_RENDERER.render(signature),signature);
  }
  List<String> keys=new ArrayList<String>(possibleSignatures.keySet());
  Collections.sort(keys);
  return new ArrayList<FunctionDescriptor>(Collections2.transform(keys,new Function<String,FunctionDescriptor>(){
    @Override public FunctionDescriptor apply(    String key){
      return possibleSignatures.get(key);
    }
  }
));
}
