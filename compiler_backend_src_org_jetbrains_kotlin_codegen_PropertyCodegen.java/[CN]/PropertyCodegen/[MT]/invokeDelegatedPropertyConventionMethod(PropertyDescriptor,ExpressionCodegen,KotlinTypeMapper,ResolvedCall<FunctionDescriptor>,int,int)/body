{
  CodegenContext<? extends ClassOrPackageFragmentDescriptor> ownerContext=codegen.getContext().getClassOrPackageParentContext();
  final Type owner;
  if (ownerContext instanceof ClassContext) {
    owner=typeMapper.mapClass(((ClassContext)ownerContext).getContextDescriptor());
  }
 else   if (ownerContext instanceof PackageContext) {
    owner=((PackageContext)ownerContext).getPackagePartType();
  }
 else   if (ownerContext instanceof MultifileClassContextBase) {
    owner=((MultifileClassContextBase)ownerContext).getFilePartType();
  }
 else {
    throw new UnsupportedOperationException("Unknown context: " + ownerContext);
  }
  codegen.tempVariables.put(resolvedCall.getCall().getValueArguments().get(propertyMetadataArgumentIndex).asElement(),new StackValue(K_PROPERTY_TYPE){
    @Override public void putSelector(    @NotNull Type type,    @NotNull InstructionAdapter v){
      Field array=StackValue.field(Type.getType("[" + K_PROPERTY_TYPE),owner,JvmAbi.DELEGATED_PROPERTIES_ARRAY_NAME,true,StackValue.none());
      StackValue.arrayElement(K_PROPERTY_TYPE,array,StackValue.constant(indexInPropertyMetadataArray,Type.INT_TYPE)).put(type,v);
    }
  }
);
  StackValue delegatedProperty=codegen.intermediateValueForProperty(propertyDescriptor,true,null,StackValue.LOCAL_0);
  return codegen.invokeFunction(resolvedCall,delegatedProperty);
}
