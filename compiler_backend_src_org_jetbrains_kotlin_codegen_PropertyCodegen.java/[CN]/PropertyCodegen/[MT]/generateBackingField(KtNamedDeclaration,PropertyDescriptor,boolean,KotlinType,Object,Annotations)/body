{
  int modifiers=getDeprecatedAccessFlag(propertyDescriptor);
  for (  AnnotationCodegen.JvmFlagAnnotation flagAnnotation : AnnotationCodegen.FIELD_FLAGS) {
    if (flagAnnotation.hasAnnotation(propertyDescriptor.getOriginal())) {
      modifiers|=flagAnnotation.getJvmFlag();
    }
  }
  if (kind == OwnerKind.PACKAGE) {
    modifiers|=ACC_STATIC;
  }
  if (!propertyDescriptor.isLateInit() && (!propertyDescriptor.isVar() || isDelegate)) {
    modifiers|=ACC_FINAL;
  }
  if (AnnotationUtilKt.hasJvmSyntheticAnnotation(propertyDescriptor)) {
    modifiers|=ACC_SYNTHETIC;
  }
  Type type=typeMapper.mapType(kotlinType);
  ClassBuilder builder=v;
  FieldOwnerContext backingFieldContext=context;
  if (AsmUtil.isInstancePropertyWithStaticBackingField(propertyDescriptor)) {
    modifiers|=ACC_STATIC;
    if (JvmAbi.isPropertyWithBackingFieldInOuterClass(propertyDescriptor)) {
      ImplementationBodyCodegen codegen=(ImplementationBodyCodegen)memberCodegen.getParentCodegen();
      builder=codegen.v;
      backingFieldContext=codegen.context;
    }
  }
  modifiers|=getVisibilityForBackingField(propertyDescriptor,isDelegate);
  if (AsmUtil.isPropertyWithBackingFieldCopyInOuterClass(propertyDescriptor)) {
    ImplementationBodyCodegen parentBodyCodegen=(ImplementationBodyCodegen)memberCodegen.getParentCodegen();
    parentBodyCodegen.addCompanionObjectPropertyToCopy(propertyDescriptor,defaultValue);
  }
  String name=backingFieldContext.getFieldName(propertyDescriptor,isDelegate);
  v.getSerializationBindings().put(FIELD_FOR_PROPERTY,propertyDescriptor,Pair.create(type,name));
  FieldVisitor fv=builder.newField(JvmDeclarationOriginKt.OtherOrigin(element,propertyDescriptor),modifiers,name,type.getDescriptor(),isDelegate ? null : typeMapper.mapFieldSignature(kotlinType,propertyDescriptor),defaultValue);
  Annotated fieldAnnotated=new AnnotatedWithFakeAnnotations(propertyDescriptor,annotations);
  AnnotationCodegen.forField(fv,typeMapper).genAnnotations(fieldAnnotated,type,isDelegate ? AnnotationUseSiteTarget.PROPERTY_DELEGATE_FIELD : AnnotationUseSiteTarget.FIELD);
}
