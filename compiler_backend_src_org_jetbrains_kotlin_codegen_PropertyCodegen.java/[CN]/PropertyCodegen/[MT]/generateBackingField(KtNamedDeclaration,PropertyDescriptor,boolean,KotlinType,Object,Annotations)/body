{
  int modifiers=getDeprecatedAccessFlag(propertyDescriptor);
  for (  AnnotationCodegen.JvmFlagAnnotation flagAnnotation : AnnotationCodegen.FIELD_FLAGS) {
    if (flagAnnotation.hasAnnotation(propertyDescriptor.getOriginal())) {
      modifiers|=flagAnnotation.getJvmFlag();
    }
  }
  if (kind == OwnerKind.PACKAGE) {
    modifiers|=ACC_STATIC;
  }
  if (!propertyDescriptor.isLateInit() && (!propertyDescriptor.isVar() || isDelegate)) {
    modifiers|=ACC_FINAL;
  }
  if (AnnotationUtilKt.hasJvmSyntheticAnnotation(propertyDescriptor)) {
    modifiers|=ACC_SYNTHETIC;
  }
  Type type=typeMapper.mapType(jetType);
  ClassBuilder builder=v;
  boolean hasJvmFieldAnnotation=hasJvmFieldAnnotation(propertyDescriptor);
  FieldOwnerContext backingFieldContext=context;
  boolean takeVisibilityFromDescriptor=propertyDescriptor.isLateInit() || propertyDescriptor.isConst();
  boolean takeVisibilityFromSetter=propertyDescriptor.isLateInit() && propertyDescriptor.getSetter() != null;
  if (AsmUtil.isInstancePropertyWithStaticBackingField(propertyDescriptor)) {
    modifiers|=ACC_STATIC;
    if (takeVisibilityFromDescriptor) {
      modifiers|=getVisibilityAccessFlag(propertyDescriptor);
    }
 else     if (hasJvmFieldAnnotation && !isDelegate) {
      modifiers|=getDefaultVisibilityFlag(propertyDescriptor.getVisibility());
    }
 else {
      modifiers|=getVisibilityForSpecialPropertyBackingField(propertyDescriptor,isDelegate);
    }
    if (AsmUtil.isPropertyWithBackingFieldInOuterClass(propertyDescriptor)) {
      ImplementationBodyCodegen codegen=(ImplementationBodyCodegen)memberCodegen.getParentCodegen();
      builder=codegen.v;
      backingFieldContext=codegen.context;
      v.getSerializationBindings().put(STATIC_FIELD_IN_OUTER_CLASS,propertyDescriptor);
    }
    if (isObject(propertyDescriptor.getContainingDeclaration()) && !hasJvmFieldAnnotation && !propertyDescriptor.isConst()&& (modifiers & ACC_PRIVATE) == 0) {
      modifiers|=ACC_DEPRECATED;
    }
  }
 else   if (takeVisibilityFromSetter) {
    modifiers|=getVisibilityAccessFlag(propertyDescriptor.getSetter());
  }
 else   if (takeVisibilityFromDescriptor) {
    modifiers|=getVisibilityAccessFlag(propertyDescriptor);
  }
 else   if (!isDelegate && hasJvmFieldAnnotation) {
    modifiers|=getDefaultVisibilityFlag(propertyDescriptor.getVisibility());
  }
 else {
    modifiers|=ACC_PRIVATE;
  }
  if (AsmUtil.isPropertyWithBackingFieldCopyInOuterClass(propertyDescriptor)) {
    ImplementationBodyCodegen parentBodyCodegen=(ImplementationBodyCodegen)memberCodegen.getParentCodegen();
    parentBodyCodegen.addCompanionObjectPropertyToCopy(propertyDescriptor,defaultValue);
  }
  String name=backingFieldContext.getFieldName(propertyDescriptor,isDelegate);
  v.getSerializationBindings().put(FIELD_FOR_PROPERTY,propertyDescriptor,Pair.create(type,name));
  FieldVisitor fv=builder.newField(JvmDeclarationOriginKt.OtherOrigin(element,propertyDescriptor),modifiers,name,type.getDescriptor(),typeMapper.mapFieldSignature(jetType,propertyDescriptor),defaultValue);
  Annotated fieldAnnotated=new AnnotatedWithFakeAnnotations(propertyDescriptor,annotations);
  AnnotationCodegen.forField(fv,typeMapper).genAnnotations(fieldAnnotated,type,AnnotationUseSiteTarget.FIELD);
}
