{
  int modifiers=getDeprecatedAccessFlag(propertyDescriptor);
  for (  AnnotationCodegen.JvmFlagAnnotation flagAnnotation : AnnotationCodegen.FIELD_FLAGS) {
    if (flagAnnotation.hasAnnotation(propertyDescriptor.getOriginal())) {
      modifiers|=flagAnnotation.getJvmFlag();
    }
  }
  if (kind == OwnerKind.PACKAGE) {
    modifiers|=ACC_STATIC;
  }
  if (!propertyDescriptor.isVar() || isDelegate) {
    modifiers|=ACC_FINAL;
  }
  Type type=typeMapper.mapType(jetType);
  ClassBuilder builder=v;
  FieldOwnerContext backingFieldContext=context;
  if (AsmUtil.isInstancePropertyWithStaticBackingField(propertyDescriptor)) {
    modifiers|=ACC_STATIC | getVisibilityForSpecialPropertyBackingField(propertyDescriptor,isDelegate);
    if (AsmUtil.isPropertyWithBackingFieldInOuterClass(propertyDescriptor)) {
      ImplementationBodyCodegen codegen=(ImplementationBodyCodegen)memberCodegen.getParentCodegen();
      builder=codegen.v;
      backingFieldContext=codegen.context;
      v.getSerializationBindings().put(STATIC_FIELD_IN_OUTER_CLASS,propertyDescriptor);
    }
  }
 else   if (kind != OwnerKind.PACKAGE || isDelegate) {
    modifiers|=ACC_PRIVATE;
  }
  if (AsmUtil.isPropertyWithBackingFieldCopyInOuterClass(propertyDescriptor)) {
    ImplementationBodyCodegen parentBodyCodegen=(ImplementationBodyCodegen)memberCodegen.getParentCodegen();
    parentBodyCodegen.addDefaultObjectPropertyToCopy(propertyDescriptor,defaultValue);
  }
  String name=backingFieldContext.getFieldName(propertyDescriptor,isDelegate);
  v.getSerializationBindings().put(FIELD_FOR_PROPERTY,propertyDescriptor,Pair.create(type,name));
  FieldVisitor fv=builder.newField(OtherOrigin(element,propertyDescriptor),modifiers,name,type.getDescriptor(),typeMapper.mapFieldSignature(jetType),defaultValue);
  AnnotationCodegen.forField(fv,typeMapper).genAnnotations(propertyDescriptor,type);
}
