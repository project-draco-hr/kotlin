{
  boolean hasBackingField=hasBackingField(declaration,descriptor);
  boolean hasDelegate=declaration instanceof KtProperty && ((KtProperty)declaration).hasDelegate();
  AnnotationSplitter annotationSplitter=AnnotationSplitter.create(LockBasedStorageManager.NO_LOCKS,descriptor.getAnnotations(),AnnotationSplitter.getTargetSet(isParameter,descriptor.isVar(),hasBackingField,hasDelegate));
  Annotations propertyAnnotations=annotationSplitter.getAnnotationsForTarget(AnnotationUseSiteTarget.PROPERTY);
  boolean isBackingFieldOwner=descriptor.isConst() ? !(context instanceof MultifileClassPartContext) : CodegenContextUtil.isImplClassOwner(context);
  if (isBackingFieldOwner) {
    Annotations fieldAnnotations=annotationSplitter.getAnnotationsForTarget(AnnotationUseSiteTarget.FIELD);
    Annotations delegateAnnotations=annotationSplitter.getAnnotationsForTarget(AnnotationUseSiteTarget.PROPERTY_DELEGATE_FIELD);
    generateBackingField(declaration,descriptor,fieldAnnotations,delegateAnnotations);
    generateSyntheticMethodIfNeeded(descriptor,propertyAnnotations);
  }
  if (!propertyAnnotations.getAllAnnotations().isEmpty() && kind != OwnerKind.DEFAULT_IMPLS && CodegenContextUtil.isImplClassOwner(context)) {
    v.getSerializationBindings().put(SYNTHETIC_METHOD_FOR_PROPERTY,descriptor,getSyntheticMethodSignature(descriptor));
  }
}
