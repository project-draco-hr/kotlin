{
  String content=CheckerTestUtil.parseDiagnosedRanges(contentWithDiagnosticMarkup,new ArrayList<CheckerTestUtil.DiagnosedRange>());
  JetFile file=JetTestUtils.createFile(fileName,content,project);
  List<Pair<String,String>> expectedValues=Lists.newArrayList();
  Matcher matcher=Pattern.compile("// expected: (\\S+): (.*)").matcher(content);
  while (matcher.find()) {
    String fieldName=matcher.group(1);
    String expectedValue=matcher.group(2);
    expectedValues.add(Pair.create(fieldName,expectedValue));
  }
  List<AnalyzerScriptParameter> scriptParameterTypes=Lists.newArrayList();
  List<Object> scriptParameterValues=Lists.newArrayList();
  if (file.isScript()) {
    Pattern scriptParametersPattern=Pattern.compile("param: (\\S+): (\\S+): (\\S.*)");
    Matcher scriptParametersMatcher=scriptParametersPattern.matcher(file.getText());
    while (scriptParametersMatcher.find()) {
      String name=scriptParametersMatcher.group(1);
      String type=scriptParametersMatcher.group(2);
      String valueString=scriptParametersMatcher.group(3);
      Object value;
      JetType jetType;
      KotlinBuiltIns builtIns=KotlinBuiltIns.getInstance();
      if (type.equals("kotlin.String")) {
        value=valueString;
        jetType=builtIns.getStringType();
      }
 else       if (type.equals("kotlin.Long")) {
        value=Long.parseLong(valueString);
        jetType=builtIns.getLongType();
      }
 else       if (type.equals("kotlin.Int")) {
        value=Integer.parseInt(valueString);
        jetType=builtIns.getIntType();
      }
 else       if (type.equals("kotlin.Array<kotlin.String>")) {
        value=valueString.split(" ");
        jetType=builtIns.getArrayType(builtIns.getStringType());
      }
 else {
        throw new AssertionError("TODO: " + type);
      }
      scriptParameterTypes.add(new AnalyzerScriptParameter(Name.identifier(name),jetType));
      scriptParameterValues.add(value);
    }
    JetScriptDefinitionProvider.getInstance(project).addScriptDefinition(new JetScriptDefinition(".kts",scriptParameterTypes));
  }
  return new CodegenTestFiles(Collections.singletonList(file),expectedValues,scriptParameterValues);
}
