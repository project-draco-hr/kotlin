{
  final VirtualFileSystem localFileSystem=VirtualFileManager.getInstance().getFileSystem(StandardFileSystems.FILE_PROTOCOL);
  final Set<VirtualFile> processedFiles=Sets.newHashSet();
  final List<KtFile> result=Lists.newArrayList();
  for (  String sourceRootPath : sourceRoots) {
    if (sourceRootPath == null) {
      continue;
    }
    VirtualFile vFile=localFileSystem.findFileByPath(sourceRootPath);
    if (vFile == null) {
      reportError.invoke("Source file or directory not found: " + sourceRootPath);
      continue;
    }
    if (!vFile.isDirectory() && vFile.getFileType() != KotlinFileType.INSTANCE) {
      reportError.invoke("Source entry is not a Kotlin file: " + sourceRootPath);
      continue;
    }
    FilesKt.recurse(new File(sourceRootPath),new Function1<File,Unit>(){
      @Override public Unit invoke(      File file){
        if (file.isFile()) {
          VirtualFile virtualFile=localFileSystem.findFileByPath(file.getAbsolutePath());
          if (virtualFile != null && !processedFiles.contains(virtualFile)) {
            processedFiles.add(virtualFile);
            PsiFile psiFile=PsiManager.getInstance(project).findFile(virtualFile);
            if (psiFile instanceof KtFile) {
              result.add((KtFile)psiFile);
            }
          }
        }
        return Unit.INSTANCE$;
      }
    }
);
  }
  return result;
}
