{
  final VirtualFileSystem localFileSystem=VirtualFileManager.getInstance().getFileSystem(StandardFileSystems.FILE_PROTOCOL);
  final Set<VirtualFile> processedFiles=Sets.newHashSet();
  final List<KtFile> result=Lists.newArrayList();
  for (  String sourceRootPath : sourceRoots) {
    if (sourceRootPath == null) {
      continue;
    }
    VirtualFile vFile=localFileSystem.findFileByPath(sourceRootPath);
    if (vFile == null) {
      String message="Source file or directory not found: " + sourceRootPath;
      File moduleFilePath=configuration.get(JVMConfigurationKeys.MODULE_XML_FILE);
      if (moduleFilePath != null) {
        String moduleFileContent=FileUtil.loadFile(moduleFilePath);
        LOG.warn(message + "\n\nmodule file path: " + moduleFilePath+ "\ncontent:\n"+ moduleFileContent);
      }
      reportError.invoke(message);
      continue;
    }
    if (!vFile.isDirectory() && vFile.getFileType() != KotlinFileType.INSTANCE) {
      reportError.invoke("Source entry is not a Kotlin file: " + sourceRootPath);
      continue;
    }
    SequencesKt.forEach(FilesKt.walkTopDown(new File(sourceRootPath)),new Function1<File,Unit>(){
      @Override public Unit invoke(      File file){
        if (file.isFile()) {
          VirtualFile virtualFile=localFileSystem.findFileByPath(file.getAbsolutePath());
          if (virtualFile != null && !processedFiles.contains(virtualFile)) {
            processedFiles.add(virtualFile);
            PsiFile psiFile=PsiManager.getInstance(project).findFile(virtualFile);
            if (psiFile instanceof KtFile) {
              result.add((KtFile)psiFile);
            }
          }
        }
        return Unit.INSTANCE;
      }
    }
);
  }
  return result;
}
