{
  DeserializedCallableMemberDescriptor deserializedCallableContainer=DescriptorUtils.getParentOfType(referencedDescriptor,DeserializedCallableMemberDescriptor.class,true);
  if (deserializedCallableContainer != null) {
    return getContainerClassId(project,deserializedCallableContainer);
  }
  ClassOrPackageFragmentDescriptor containerDescriptor=DescriptorUtils.getParentOfType(referencedDescriptor,ClassOrPackageFragmentDescriptor.class,false);
  if (containerDescriptor instanceof PackageFragmentDescriptor) {
    FqName packageFQN=((PackageFragmentDescriptor)containerDescriptor).getFqName();
    if (referencedDescriptor instanceof DeserializedCallableMemberDescriptor) {
      Name partClassName=JvmFileClassUtil.getImplClassName((DeserializedCallableMemberDescriptor)referencedDescriptor);
      if (partClassName != null) {
        FqName partFQN=packageFQN.child(partClassName);
        Collection<KtFile> multifileFacadeJetFiles=StaticFacadeIndexUtil.getMultifileClassForPart(partFQN,GlobalSearchScope.allScope(project),project);
        if (multifileFacadeJetFiles.isEmpty()) {
          return new ClassId(packageFQN,partClassName);
        }
 else {
          KtFile multifileFacade=multifileFacadeJetFiles.iterator().next();
          String multifileFacadeName=multifileFacade.getVirtualFile().getNameWithoutExtension();
          return new ClassId(packageFQN,Name.identifier(multifileFacadeName));
        }
      }
    }
    return getPackageClassId(packageFQN);
  }
  if (containerDescriptor instanceof ClassDescriptor) {
    if (containerDescriptor.getContainingDeclaration() instanceof ClassDescriptor || ExpressionTypingUtils.isLocal(containerDescriptor.getContainingDeclaration(),containerDescriptor)) {
      return getContainerClassId(project,containerDescriptor.getContainingDeclaration());
    }
    return DescriptorUtilsKt.getClassId((ClassDescriptor)containerDescriptor);
  }
  return null;
}
