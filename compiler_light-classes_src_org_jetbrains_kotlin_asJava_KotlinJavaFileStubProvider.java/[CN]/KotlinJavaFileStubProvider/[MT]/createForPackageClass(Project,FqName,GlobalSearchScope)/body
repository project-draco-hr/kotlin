{
  return new KotlinJavaFileStubProvider<KotlinFacadeLightClassData>(project,false,new StubGenerationStrategy<KotlinFacadeLightClassData>(){
    @NotNull @Override public LightClassConstructionContext getContext(    @NotNull Collection<KtFile> files){
      return LightClassGenerationSupport.getInstance(project).getContextForPackage(files);
    }
    @NotNull @Override public Collection<KtFile> getFiles(){
      return LightClassGenerationSupport.getInstance(project).findFilesForPackage(packageFqName,searchScope);
    }
    @NotNull @Override public KotlinFacadeLightClassData createLightClassData(    PsiJavaFileStub javaFileStub,    BindingContext bindingContext,    Diagnostics extraDiagnostics){
      return new KotlinFacadeLightClassData(javaFileStub,extraDiagnostics);
    }
    @NotNull @Override public FqName getPackageFqName(){
      return packageFqName;
    }
    @Override public GenerationState.GenerateClassFilter getGenerateClassFilter(){
      return new GenerationState.GenerateClassFilter(){
        @Override public boolean shouldGeneratePackagePart(        KtFile jetFile){
          return true;
        }
        @Override public boolean shouldAnnotateClass(        KtClassOrObject classOrObject){
          return shouldGenerateClass(classOrObject);
        }
        @Override public boolean shouldGenerateClass(        KtClassOrObject classOrObject){
          return KtPsiUtil.isLocal(classOrObject);
        }
        @Override public boolean shouldGenerateScript(        KtScript script){
          return false;
        }
      }
;
    }
    @Override public void generate(    @NotNull GenerationState state,    @NotNull Collection<KtFile> files){
      KotlinCodegenFacade.doGenerateFiles(files,state,CompilationErrorHandler.THROW_EXCEPTION);
    }
    @Override public String toString(){
      return StubGenerationStrategy.class.getName() + " for package class";
    }
  }
);
}
