{
  return new KotlinJavaFileStubProvider<KotlinFacadeLightClassData>(project,false,new StubGenerationStrategy<KotlinFacadeLightClassData>(){
    @NotNull @Override public Collection<KtFile> getFiles(){
      return LightClassGenerationSupport.getInstance(project).findFilesForFacade(facadeFqName,searchScope);
    }
    @NotNull @Override public FqName getPackageFqName(){
      return facadeFqName.parent();
    }
    @NotNull @Override public LightClassConstructionContext getContext(    @NotNull Collection<KtFile> files){
      return LightClassGenerationSupport.getInstance(project).getContextForFacade(files);
    }
    @NotNull @Override public KotlinFacadeLightClassData createLightClassData(    PsiJavaFileStub javaFileStub,    BindingContext bindingContext,    Diagnostics extraDiagnostics){
      return new KotlinFacadeLightClassData(javaFileStub,extraDiagnostics);
    }
    @Override public GenerationState.GenerateClassFilter getGenerateClassFilter(){
      return new GenerationState.GenerateClassFilter(){
        @Override public boolean shouldAnnotateClass(        KtClassOrObject classOrObject){
          return shouldGenerateClass(classOrObject);
        }
        @Override public boolean shouldGenerateClass(        KtClassOrObject classOrObject){
          return KtPsiUtil.isLocal(classOrObject);
        }
        @Override public boolean shouldGeneratePackagePart(        KtFile jetFile){
          return true;
        }
        @Override public boolean shouldGenerateScript(        KtScript script){
          return false;
        }
      }
;
    }
    @Override public void generate(    @NotNull GenerationState state,    @NotNull Collection<KtFile> files){
      if (!files.isEmpty()) {
        KtFile representativeFile=files.iterator().next();
        JvmFileClassInfo fileClassInfo=NoResolveFileClassesProvider.INSTANCE.getFileClassInfo(representativeFile);
        if (!fileClassInfo.getWithJvmMultifileClass()) {
          PackageCodegen codegen=state.getFactory().forPackage(representativeFile.getPackageFqName(),files);
          codegen.generate(CompilationErrorHandler.THROW_EXCEPTION);
          state.getFactory().asList();
          return;
        }
      }
      MultifileClassCodegen codegen=state.getFactory().forMultifileClass(facadeFqName,files);
      codegen.generate(CompilationErrorHandler.THROW_EXCEPTION);
      state.getFactory().asList();
    }
    @Override public String toString(){
      return StubGenerationStrategy.class.getName() + " for facade class";
    }
  }
);
}
