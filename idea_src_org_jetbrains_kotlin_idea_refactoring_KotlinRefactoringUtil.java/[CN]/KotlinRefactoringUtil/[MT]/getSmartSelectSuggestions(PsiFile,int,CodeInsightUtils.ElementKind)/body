{
  if (offset < 0) {
    return new ArrayList<KtElement>();
  }
  PsiElement element=file.findElementAt(offset);
  if (element == null) {
    return new ArrayList<KtElement>();
  }
  if (element instanceof PsiWhiteSpace) {
    return getSmartSelectSuggestions(file,offset - 1,elementKind);
  }
  List<KtElement> elements=new ArrayList<KtElement>();
  while (element != null && !(element instanceof KtBlockExpression && !(element.getParent() instanceof KtFunctionLiteral)) && !(element instanceof KtNamedFunction) && !(element instanceof KtClassBody)) {
    boolean addElement=false;
    boolean keepPrevious=true;
    if (element instanceof KtTypeElement) {
      addElement=elementKind == CodeInsightUtils.ElementKind.TYPE_ELEMENT;
      if (!addElement) {
        keepPrevious=false;
      }
    }
 else     if (element instanceof KtExpression && !(element instanceof KtStatementExpression)) {
      addElement=elementKind == CodeInsightUtils.ElementKind.EXPRESSION;
      if (addElement) {
        if (element instanceof KtParenthesizedExpression) {
          addElement=false;
        }
 else         if (KtPsiUtil.isLabelIdentifierExpression(element)) {
          addElement=false;
        }
 else         if (element.getParent() instanceof KtQualifiedExpression) {
          KtQualifiedExpression qualifiedExpression=(KtQualifiedExpression)element.getParent();
          if (qualifiedExpression.getReceiverExpression() != element) {
            addElement=false;
          }
        }
 else         if (element.getParent() instanceof KtCallElement || element.getParent() instanceof KtThisExpression || PsiTreeUtil.getParentOfType(element,KtSuperExpression.class) != null) {
          addElement=false;
        }
 else         if (element.getParent() instanceof KtOperationExpression) {
          KtOperationExpression operationExpression=(KtOperationExpression)element.getParent();
          if (operationExpression.getOperationReference() == element) {
            addElement=false;
          }
        }
        if (addElement) {
          KtExpression expression=(KtExpression)element;
          BindingContext bindingContext=ResolutionUtils.analyze(expression,BodyResolveMode.FULL);
          KotlinType expressionType=bindingContext.getType(expression);
          if (expressionType != null && KotlinBuiltIns.isUnit(expressionType)) {
            addElement=false;
          }
        }
      }
    }
    if (addElement) {
      elements.add((KtElement)element);
    }
    if (!keepPrevious) {
      elements.clear();
    }
    element=element.getParent();
  }
  return elements;
}
