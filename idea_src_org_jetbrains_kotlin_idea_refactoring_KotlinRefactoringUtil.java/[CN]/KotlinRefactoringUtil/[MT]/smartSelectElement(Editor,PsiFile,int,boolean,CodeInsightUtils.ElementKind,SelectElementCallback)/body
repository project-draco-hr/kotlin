{
  List<KtElement> elements=getSmartSelectSuggestions(file,offset,elementKind);
  if (elements.size() == 0) {
    if (failOnEmptySuggestion)     throw new IntroduceRefactoringException(KotlinRefactoringBundle.message("cannot.refactor.not.expression"));
    callback.run(null);
    return;
  }
  if (elements.size() == 1 || ApplicationManager.getApplication().isUnitTestMode()) {
    callback.run(elements.get(0));
    return;
  }
  final DefaultListModel model=new DefaultListModel();
  for (  PsiElement element : elements) {
    model.addElement(element);
  }
  final ScopeHighlighter highlighter=new ScopeHighlighter(editor);
  final JList list=new JBList(model);
  list.setCellRenderer(new DefaultListCellRenderer(){
    @Override public Component getListCellRendererComponent(    @NotNull JList list,    Object value,    int index,    boolean isSelected,    boolean cellHasFocus){
      Component rendererComponent=super.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
      KtElement element=(KtElement)value;
      if (element.isValid()) {
        setText(getExpressionShortText(element));
      }
      return rendererComponent;
    }
  }
);
  list.addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    @NotNull ListSelectionEvent e){
      highlighter.dropHighlight();
      int selectedIndex=list.getSelectedIndex();
      if (selectedIndex < 0)       return;
      KtElement expression=(KtElement)model.get(selectedIndex);
      List<PsiElement> toExtract=new ArrayList<PsiElement>();
      toExtract.add(expression);
      highlighter.highlight(expression,toExtract);
    }
  }
);
  JBPopupFactory.getInstance().createListPopupBuilder(list).setTitle(KotlinRefactoringBundle.message("expressions.title")).setMovable(false).setResizable(false).setRequestFocus(true).setItemChoosenCallback(new Runnable(){
    @Override public void run(){
      callback.run((KtElement)list.getSelectedValue());
    }
  }
).addListener(new JBPopupAdapter(){
    @Override public void onClosed(    LightweightWindowEvent event){
      highlighter.dropHighlight();
    }
  }
).createPopup().showInBestPositionFor(editor);
}
