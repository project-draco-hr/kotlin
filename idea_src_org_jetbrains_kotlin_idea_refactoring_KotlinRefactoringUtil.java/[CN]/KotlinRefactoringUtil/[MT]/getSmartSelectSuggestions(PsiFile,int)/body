{
  if (offset < 0) {
    return new ArrayList<KtExpression>();
  }
  PsiElement element=file.findElementAt(offset);
  if (element == null) {
    return new ArrayList<KtExpression>();
  }
  if (element instanceof PsiWhiteSpace) {
    return getSmartSelectSuggestions(file,offset - 1);
  }
  List<KtExpression> expressions=new ArrayList<KtExpression>();
  while (element != null && !(element instanceof KtBlockExpression && !(element.getParent() instanceof KtFunctionLiteral)) && !(element instanceof KtNamedFunction) && !(element instanceof KtClassBody)) {
    if (element instanceof KtExpression && !(element instanceof KtStatementExpression)) {
      boolean addExpression=true;
      if (element instanceof KtParenthesizedExpression) {
        addExpression=false;
      }
 else       if (KtPsiUtil.isLabelIdentifierExpression(element)) {
        addExpression=false;
      }
 else       if (element.getParent() instanceof KtQualifiedExpression) {
        KtQualifiedExpression qualifiedExpression=(KtQualifiedExpression)element.getParent();
        if (qualifiedExpression.getReceiverExpression() != element) {
          addExpression=false;
        }
      }
 else       if (element.getParent() instanceof KtCallElement || element.getParent() instanceof KtThisExpression || PsiTreeUtil.getParentOfType(element,KtSuperExpression.class) != null) {
        addExpression=false;
      }
 else       if (element.getParent() instanceof KtOperationExpression) {
        KtOperationExpression operationExpression=(KtOperationExpression)element.getParent();
        if (operationExpression.getOperationReference() == element) {
          addExpression=false;
        }
      }
      if (addExpression) {
        KtExpression expression=(KtExpression)element;
        BindingContext bindingContext=ResolutionUtils.analyze(expression,BodyResolveMode.FULL);
        KotlinType expressionType=bindingContext.getType(expression);
        if (expressionType == null || !KotlinBuiltIns.isUnit(expressionType)) {
          expressions.add(expression);
        }
      }
    }
 else     if (element instanceof KtTypeElement) {
      expressions.clear();
    }
    element=element.getParent();
  }
  return expressions;
}
