{
  BytecodeCompiler compiler=new BytecodeCompiler();
  String stdlibPath=(this.stdlib != null ? getPath(this.stdlib) : null);
  String[] classpath=(this.compileClasspath != null ? this.compileClasspath.list() : null);
  String[] externalAnnotationsPath=(this.externalAnnotations != null) ? this.externalAnnotations.list() : null;
  List<String> args=new ArrayList<String>();
  for (  Commandline.Argument argument : additionalArguments) {
    args.addAll(Arrays.asList(argument.getParts()));
  }
  if (this.src != null) {
    if ((this.output == null) && (this.jar == null)) {
      throw new CompileEnvironmentException("\"output\" or \"jar\" should be specified");
    }
    String[] source=Util.getPaths(this.src.list());
    String destination=getPath(this.output != null ? this.output : this.jar);
    log(String.format("Compiling [%s] => [%s]",Arrays.toString(source),destination));
    if (this.output != null) {
      compiler.sourcesToDir(source,destination,stdlibPath,classpath,externalAnnotationsPath,args);
    }
 else {
      compiler.sourcesToJar(source,destination,this.includeRuntime,stdlibPath,classpath,externalAnnotationsPath,args);
    }
  }
 else   if (this.module != null) {
    if (this.output != null) {
      throw new CompileEnvironmentException("Module compilation is only supported for jar destination");
    }
    String modulePath=getPath(this.module);
    String jarPath=(this.jar != null ? getPath(this.jar) : null);
    log(jarPath != null ? String.format("Compiling [%s] => [%s]",modulePath,jarPath) : String.format("Compiling [%s]",modulePath));
    compiler.moduleToJar(modulePath,jarPath,this.includeRuntime,stdlibPath,classpath,externalAnnotationsPath,args);
  }
 else {
    throw new CompileEnvironmentException("\"src\" or \"module\" should be specified");
  }
}
