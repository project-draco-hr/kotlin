{
  BytecodeCompiler compiler=new BytecodeCompiler();
  String stdlibPath=(stdlib != null ? getPath(stdlib) : null);
  String[] classpath=(compileClasspath != null ? compileClasspath.list() : null);
  String[] externalAnnotationsPath=(externalAnnotations != null) ? externalAnnotations.list() : null;
  List<String> args=new ArrayList<String>();
  for (  Commandline.Argument argument : additionalArguments) {
    args.addAll(Arrays.asList(argument.getParts()));
  }
  if (output == null) {
    throw new BuildException("\"output\" should be specified");
  }
  if (src != null) {
    String[] source=Util.getPaths(src.list());
    String destination=getPath(output);
    log(String.format("Compiling [%s] => [%s]",Arrays.toString(source),destination));
    compiler.compileSources(source,destination,includeRuntime,stdlibPath,classpath,externalAnnotationsPath,args);
  }
 else   if (module != null) {
    if (!output.toString().endsWith(".jar")) {
      throw new BuildException("Module compilation is only supported for jar destination");
    }
    String modulePath=getPath(module);
    String jarPath=getPath(output);
    log(String.format("Compiling [%s] => [%s]",modulePath,jarPath));
    compiler.compileModule(modulePath,jarPath,includeRuntime,stdlibPath,classpath,externalAnnotationsPath,args);
  }
 else {
    throw new BuildException("\"src\" or \"module\" should be specified");
  }
}
