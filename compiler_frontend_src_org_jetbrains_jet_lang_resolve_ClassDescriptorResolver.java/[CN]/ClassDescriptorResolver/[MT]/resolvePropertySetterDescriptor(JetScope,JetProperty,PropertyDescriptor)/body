{
  JetPropertyAccessor setter=property.getSetter();
  PropertySetterDescriptor setterDescriptor=null;
  if (setter != null) {
    List<AnnotationDescriptor> annotations=annotationResolver.resolveAnnotations(scope,setter.getModifierList());
    JetParameter parameter=setter.getParameter();
    setterDescriptor=new PropertySetterDescriptor(resolveModalityFromModifiers(setter.getModifierList()),propertyDescriptor,annotations,setter.getBodyExpression() != null,false);
    if (parameter != null) {
      if (parameter.isRef()) {
        trace.getErrorHandler().genericError(parameter.getRefNode(),"Setter parameters can not be 'ref'");
      }
      JetExpression defaultValue=parameter.getDefaultValue();
      if (defaultValue != null) {
        trace.getErrorHandler().genericError(defaultValue.getNode(),"Setter parameters can not have default values");
      }
      JetType type;
      JetTypeReference typeReference=parameter.getTypeReference();
      if (typeReference == null) {
        type=propertyDescriptor.getInType();
      }
 else {
        type=typeResolver.resolveType(scope,typeReference);
        JetType inType=propertyDescriptor.getInType();
        if (inType != null) {
          if (!semanticServices.getTypeChecker().isSubtypeOf(type,inType)) {
            trace.getErrorHandler().genericError(typeReference.getNode(),"Setter parameter type must be a subtype of the type of the property, i.e. " + inType);
          }
        }
 else {
        }
      }
      MutableValueParameterDescriptor valueParameterDescriptor=resolveValueParameterDescriptor(setterDescriptor,parameter,0,type);
      setterDescriptor.initialize(valueParameterDescriptor);
    }
    trace.record(BindingContext.PROPERTY_ACCESSOR,setter,setterDescriptor);
  }
 else   if (property.isVar()) {
    setterDescriptor=new PropertySetterDescriptor(propertyDescriptor.getModality(),propertyDescriptor,Collections.<AnnotationDescriptor>emptyList(),false,true);
  }
  if (!property.isVar()) {
    if (setter != null) {
      trace.getErrorHandler().genericError(setter.asElement().getNode(),"A 'val'-property cannot have a setter");
    }
  }
  return setterDescriptor;
}
