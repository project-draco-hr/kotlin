{
  List<JetTypeParameter> typeParameters=declaration.getTypeParameters();
  Map<String,TypeParameterDescriptor> parameterByName=Maps.newHashMap();
  for (int i=0, typeParametersSize=typeParameters.size(); i < typeParametersSize; i++) {
    JetTypeParameter jetTypeParameter=typeParameters.get(i);
    TypeParameterDescriptor typeParameterDescriptor=parameters.get(i);
    parameterByName.put(typeParameterDescriptor.getName(),typeParameterDescriptor);
    JetTypeReference extendsBound=jetTypeParameter.getExtendsBound();
    if (extendsBound != null) {
      typeParameterDescriptor.addUpperBound(resolveAndCheckUpperBoundType(extendsBound,scope,false));
    }
  }
  for (  JetTypeConstraint constraint : declaration.getTypeConstaints()) {
    JetSimpleNameExpression subjectTypeParameterName=constraint.getSubjectTypeParameterName();
    if (subjectTypeParameterName == null) {
      continue;
    }
    String referencedName=subjectTypeParameterName.getReferencedName();
    if (referencedName == null) {
      continue;
    }
    TypeParameterDescriptor typeParameterDescriptor=parameterByName.get(referencedName);
    JetTypeReference boundTypeReference=constraint.getBoundTypeReference();
    JetType bound=boundTypeReference != null ? resolveAndCheckUpperBoundType(boundTypeReference,scope,constraint.isClassObjectContraint()) : null;
    if (typeParameterDescriptor == null) {
      ClassifierDescriptor classifier=scope.getClassifier(referencedName);
      if (classifier != null) {
        trace.getErrorHandler().genericError(subjectTypeParameterName.getNode(),referencedName + " does not refer to a type parameter of " + declaration.getName());
        trace.record(BindingContext.REFERENCE_TARGET,subjectTypeParameterName,classifier);
      }
 else {
        trace.getErrorHandler().unresolvedReference(subjectTypeParameterName);
      }
    }
 else {
      trace.record(BindingContext.REFERENCE_TARGET,subjectTypeParameterName,typeParameterDescriptor);
      if (bound != null) {
        if (constraint.isClassObjectContraint()) {
          typeParameterDescriptor.addClassObjectBound(bound);
        }
 else {
          typeParameterDescriptor.addUpperBound(bound);
        }
      }
    }
  }
  for (  TypeParameterDescriptor parameter : parameters) {
    if (parameter.getUpperBounds().isEmpty()) {
      parameter.addUpperBound(JetStandardClasses.getDefaultBound());
    }
    if (JetStandardClasses.isNothing(parameter.getBoundsAsType())) {
      PsiElement nameIdentifier=typeParameters.get(parameter.getIndex()).getNameIdentifier();
      if (nameIdentifier != null) {
        trace.getErrorHandler().genericError(nameIdentifier.getNode(),"Upper bounds of " + parameter.getName() + " have empty intersection");
      }
    }
    JetType classObjectType=parameter.getClassObjectType();
    if (classObjectType != null && JetStandardClasses.isNothing(classObjectType)) {
      PsiElement nameIdentifier=typeParameters.get(parameter.getIndex()).getNameIdentifier();
      if (nameIdentifier != null) {
        trace.getErrorHandler().genericError(nameIdentifier.getNode(),"Class object upper bounds of " + parameter.getName() + " have empty intersection");
      }
    }
  }
}
