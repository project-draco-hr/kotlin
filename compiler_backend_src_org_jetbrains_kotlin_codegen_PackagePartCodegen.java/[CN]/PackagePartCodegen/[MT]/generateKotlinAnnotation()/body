{
  if (state.getClassBuilderMode() != ClassBuilderMode.FULL) {
    return;
  }
  List<DeclarationDescriptor> members=new ArrayList<DeclarationDescriptor>();
  for (  JetDeclaration declaration : element.getDeclarations()) {
    if (declaration instanceof JetNamedFunction) {
      SimpleFunctionDescriptor functionDescriptor=bindingContext.get(BindingContext.FUNCTION,declaration);
      members.add(functionDescriptor);
    }
 else     if (declaration instanceof JetProperty) {
      VariableDescriptor property=bindingContext.get(BindingContext.VARIABLE,declaration);
      members.add(property);
    }
  }
  AnnotationVisitor av=v.newAnnotation(Type.getObjectType(KotlinSyntheticClass.CLASS_NAME.getInternalName()).getDescriptor(),true);
  av.visit(ABI_VERSION_FIELD_NAME,JvmAbi.VERSION);
  av.visitEnum(JvmAnnotationNames.KIND_FIELD_NAME,Type.getObjectType(KotlinSyntheticClass.KIND_INTERNAL_NAME).getDescriptor(),KotlinSyntheticClass.Kind.PACKAGE_PART.toString());
  JvmSerializationBindings bindings=v.getSerializationBindings();
  DescriptorSerializer serializer=DescriptorSerializer.createTopLevel(new JvmSerializerExtension(bindings,state.getTypeMapper()));
  Collection<PackageFragmentDescriptor> packageFragments=Lists.newArrayList();
  ProtoBuf.Package packageProto=serializer.packagePartProto(members,new Function1<DeclarationDescriptor,Boolean>(){
    @Override public Boolean invoke(    DeclarationDescriptor descriptor){
      return false;
    }
  }
).build();
  if (packageProto.getMemberCount() == 0)   return;
  StringTable strings=serializer.getStringTable();
  NameResolver nameResolver=new NameResolver(strings.serializeSimpleNames(),strings.serializeQualifiedNames());
  PackageData data=new PackageData(nameResolver,packageProto);
  AnnotationVisitor array=av.visitArray(JvmAnnotationNames.DATA_FIELD_NAME);
  for (  String string : BitEncoding.encodeBytes(SerializationUtil.serializePackageData(data))) {
    array.visit(null,string);
  }
  array.visitEnd();
  av.visitEnd();
}
