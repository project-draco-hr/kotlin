{
  List<DeclarationDescriptor> members=new ArrayList<DeclarationDescriptor>();
  for (  KtDeclaration declaration : element.getDeclarations()) {
    if (declaration instanceof KtNamedFunction) {
      SimpleFunctionDescriptor functionDescriptor=bindingContext.get(BindingContext.FUNCTION,declaration);
      members.add(functionDescriptor);
    }
 else     if (declaration instanceof KtProperty) {
      VariableDescriptor property=bindingContext.get(BindingContext.VARIABLE,declaration);
      members.add(property);
    }
  }
  final DescriptorSerializer serializer=DescriptorSerializer.createTopLevel(new JvmSerializerExtension(v.getSerializationBindings(),state));
  final ProtoBuf.Package packageProto=serializer.packagePartProto(members).build();
  WriteAnnotationUtilKt.writeKotlinMetadata(v,KotlinClassHeader.Kind.FILE_FACADE,new Function1<AnnotationVisitor,Unit>(){
    @Override public Unit invoke(    AnnotationVisitor av){
      writeAnnotationData(av,serializer,packageProto,false);
      return Unit.INSTANCE;
    }
  }
);
  AnnotationVisitor av=v.newAnnotation(asmDescByFqNameWithoutInnerClasses(JvmAnnotationNames.KOTLIN_FILE_FACADE),true);
  writeAbiVersion(av);
  writeAnnotationData(av,serializer,packageProto,true);
  av.visitEnd();
}
