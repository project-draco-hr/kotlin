{
  Type[] argTypes=new Type[0];
  if (descriptor != null) {
    Method method=typeMapper.mapConstructorSignature(descriptor,kind);
    argTypes=method.getArgumentTypes();
  }
  enterTemp();
  ClassDescriptor classDescriptor=null;
  if (descriptor != null) {
    classDescriptor=descriptor.getContainingDeclaration();
    if (classDescriptor.getContainingDeclaration() instanceof ClassDescriptor) {
      myOuterThisIndex=enterTemp();
      myFirstExplicitArgument++;
    }
  }
  if (kind == OwnerKind.DELEGATING_IMPLEMENTATION) {
    myDelegateThisIndex=enterTemp();
    myFirstExplicitArgument++;
  }
  if (myFirstExplicitArgument > 0) {
    int explicitArgCount=argTypes.length - myFirstExplicitArgument;
    myExplicitArgTypes=new Type[explicitArgCount];
    System.arraycopy(argTypes,myFirstExplicitArgument,myExplicitArgTypes,0,explicitArgCount);
  }
 else {
    myExplicitArgTypes=argTypes;
  }
  List<ValueParameterDescriptor> paramDescrs=descriptor != null ? descriptor.getUnsubstitutedValueParameters() : Collections.<ValueParameterDescriptor>emptyList();
  for (int i=0; i < paramDescrs.size(); i++) {
    ValueParameterDescriptor parameter=paramDescrs.get(i);
    enter(parameter,myExplicitArgTypes[i].getSize());
  }
  if (classDescriptor != null) {
    myTypeParameterCount=classDescriptor.getTypeConstructor().getParameters().size();
    if (kind == OwnerKind.IMPLEMENTATION) {
      if (myTypeParameterCount > 0) {
        myFirstTypeParameter=enterTemp();
        for (int i=1; i < myTypeParameterCount; i++) {
          enterTemp();
        }
      }
    }
  }
}
