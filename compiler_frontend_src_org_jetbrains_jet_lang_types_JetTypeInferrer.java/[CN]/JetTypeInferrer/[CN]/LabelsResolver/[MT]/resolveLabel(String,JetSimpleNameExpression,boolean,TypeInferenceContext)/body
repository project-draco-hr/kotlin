{
  Collection<DeclarationDescriptor> declarationsByLabel=context.scope.getDeclarationsByLabel(labelName);
  int size=declarationsByLabel.size();
  if (size == 1) {
    DeclarationDescriptor declarationDescriptor=declarationsByLabel.iterator().next();
    JetElement element;
    if (declarationDescriptor instanceof ClassDescriptor) {
      ClassDescriptor classDescriptor=(ClassDescriptor)declarationDescriptor;
      element=(JetElement)context.trace.get(BindingContext.DESCRIPTOR_TO_DECLARATION,classDescriptor);
    }
 else     if (declarationDescriptor instanceof FunctionDescriptor) {
      FunctionDescriptor functionDescriptor=(FunctionDescriptor)declarationDescriptor;
      element=(JetElement)context.trace.get(BindingContext.DESCRIPTOR_TO_DECLARATION,functionDescriptor);
    }
 else {
      throw new UnsupportedOperationException();
    }
    context.trace.record(LABEL_TARGET,labelExpression,element);
    return element;
  }
  Stack<JetElement> stack=labeledElements.get(labelName);
  if (stack == null || stack.isEmpty()) {
    if (reportUnresolved) {
      context.trace.report(UNRESOLVED_REFERENCE.on(labelExpression));
    }
    return null;
  }
 else   if (stack.size() > 1) {
    context.trace.report(LABEL_NAME_CLASH.on(labelExpression));
  }
  JetElement result=stack.peek();
  context.trace.record(BindingContext.LABEL_TARGET,labelExpression,result);
  return result;
}
