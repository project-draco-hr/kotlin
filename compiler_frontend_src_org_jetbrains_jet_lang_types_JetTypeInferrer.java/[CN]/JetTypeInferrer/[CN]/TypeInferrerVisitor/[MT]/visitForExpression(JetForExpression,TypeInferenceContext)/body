{
  TypeInferenceContext context=contextWithExpectedType.replaceExpectedType(NO_EXPECTED_TYPE);
  JetParameter loopParameter=expression.getLoopParameter();
  JetExpression loopRange=expression.getLoopRange();
  JetType loopRangeType=null;
  if (loopRange != null) {
    loopRangeType=getType(loopRange,context.replaceScope(context.scope));
  }
  JetType expectedParameterType=null;
  if (loopRangeType != null) {
    expectedParameterType=checkIterableConvention(loopRangeType,loopRange,context);
  }
  WritableScope loopScope=newWritableScopeImpl(context.scope,context.trace).setDebugName("Scope with for-loop index");
  if (loopParameter != null) {
    JetTypeReference typeReference=loopParameter.getTypeReference();
    VariableDescriptor variableDescriptor;
    if (typeReference != null) {
      variableDescriptor=context.classDescriptorResolver.resolveLocalVariableDescriptor(context.scope.getContainingDeclaration(),context.scope,loopParameter);
      JetType actualParameterType=variableDescriptor.getOutType();
      if (expectedParameterType != null && actualParameterType != null && !semanticServices.getTypeChecker().isSubtypeOf(expectedParameterType,actualParameterType)) {
        context.trace.report(TYPE_MISMATCH_IN_FOR_LOOP.on(typeReference,expectedParameterType,actualParameterType));
      }
    }
 else {
      if (expectedParameterType == null) {
        expectedParameterType=ErrorUtils.createErrorType("Error");
      }
      variableDescriptor=context.classDescriptorResolver.resolveLocalVariableDescriptor(context.scope.getContainingDeclaration(),loopParameter,expectedParameterType);
    }
    loopScope.addVariableDescriptor(variableDescriptor);
  }
  JetExpression body=expression.getBody();
  if (body != null) {
    getType(body,context.replaceScope(loopScope));
  }
  return context.services.checkType(JetStandardClasses.getUnitType(),expression,contextWithExpectedType);
}
