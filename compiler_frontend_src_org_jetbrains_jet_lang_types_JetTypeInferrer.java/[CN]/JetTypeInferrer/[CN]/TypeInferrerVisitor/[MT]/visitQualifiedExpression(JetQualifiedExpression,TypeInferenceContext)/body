{
  TypeInferenceContext context=contextWithExpectedType.replaceExpectedType(NO_EXPECTED_TYPE);
  JetExpression selectorExpression=expression.getSelectorExpression();
  JetExpression receiverExpression=expression.getReceiverExpression();
  JetType receiverType=context.services.typeInferrerVisitorWithNamespaces.getType(receiverExpression,context.replaceExpectedTypes(NO_EXPECTED_TYPE,NO_EXPECTED_TYPE));
  if (selectorExpression == null)   return null;
  if (receiverType == null)   receiverType=ErrorUtils.createErrorType("Type for " + expression.getText());
  if (selectorExpression instanceof JetSimpleNameExpression) {
    propagateConstantValues(expression,context,(JetSimpleNameExpression)selectorExpression);
  }
  JetType selectorReturnType=getSelectorReturnType(new ExpressionReceiver(receiverExpression,receiverType),selectorExpression,context);
  if (expression.getOperationSign() == JetTokens.SAFE_ACCESS) {
    if (selectorReturnType != null && !selectorReturnType.isNullable() && !JetStandardClasses.isUnit(selectorReturnType)) {
      selectorReturnType=TypeUtils.makeNullable(selectorReturnType);
    }
  }
  JetType result;
  if (expression.getOperationSign() == JetTokens.QUEST) {
    if (selectorReturnType != null && !isBoolean(selectorReturnType)) {
      context.trace.report(TYPE_MISMATCH.on(selectorExpression,semanticServices.getStandardLibrary().getBooleanType(),selectorReturnType));
    }
    result=TypeUtils.makeNullable(receiverType);
  }
 else {
    result=selectorReturnType;
  }
  if (result != null) {
    context.trace.record(BindingContext.EXPRESSION_TYPE,selectorExpression,result);
  }
  if (selectorReturnType != null) {
  }
  return context.services.checkType(result,expression,contextWithExpectedType);
}
