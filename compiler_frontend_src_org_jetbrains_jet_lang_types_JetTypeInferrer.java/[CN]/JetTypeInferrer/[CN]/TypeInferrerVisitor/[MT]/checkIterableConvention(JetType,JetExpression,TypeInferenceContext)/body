{
  ASTNode reportErrorsOn=loopRange.getNode();
  OverloadResolutionResult<FunctionDescriptor> iteratorResolutionResult=callResolver.resolveExactSignature(context.scope,type,"iterator",Collections.<JetType>emptyList());
  if (iteratorResolutionResult.isSuccess()) {
    FunctionDescriptor iteratorFunction=iteratorResolutionResult.getDescriptor();
    context.trace.record(LOOP_RANGE_ITERATOR,loopRange,iteratorFunction);
    JetType iteratorType=iteratorFunction.getReturnType();
    FunctionDescriptor hasNextFunction=checkHasNextFunctionSupport(loopRange,iteratorType,context);
    boolean hasNextFunctionSupported=hasNextFunction != null;
    VariableDescriptor hasNextProperty=checkHasNextPropertySupport(loopRange,iteratorType,context);
    boolean hasNextPropertySupported=hasNextProperty != null;
    if (hasNextFunctionSupported && hasNextPropertySupported && !ErrorUtils.isErrorType(iteratorType)) {
      context.trace.report(HAS_NEXT_PROPERTY_AND_FUNCTION_AMBIGUITY.on(reportErrorsOn));
    }
 else     if (!hasNextFunctionSupported && !hasNextPropertySupported) {
      context.trace.report(HAS_NEXT_MISSING.on(reportErrorsOn));
    }
 else {
      context.trace.record(LOOP_RANGE_HAS_NEXT,loopRange,hasNextFunctionSupported ? hasNextFunction : hasNextProperty);
    }
    OverloadResolutionResult<FunctionDescriptor> nextResolutionResult=callResolver.resolveExactSignature(context.scope,iteratorType,"next",Collections.<JetType>emptyList());
    if (nextResolutionResult.isAmbiguity()) {
      context.trace.report(NEXT_AMBIGUITY.on(reportErrorsOn));
    }
 else     if (nextResolutionResult.isNothing()) {
      context.trace.report(NEXT_MISSING.on(reportErrorsOn));
    }
 else {
      FunctionDescriptor nextFunction=nextResolutionResult.getDescriptor();
      context.trace.record(LOOP_RANGE_NEXT,loopRange,nextFunction);
      return nextFunction.getReturnType();
    }
  }
 else {
    if (iteratorResolutionResult.isAmbiguity()) {
      context.trace.report(ITERATOR_AMBIGUITY.on(reportErrorsOn,iteratorResolutionResult.getDescriptors()));
    }
 else {
      context.trace.report(ITERATOR_MISSING.on(reportErrorsOn));
    }
  }
  return null;
}
