{
  JetExpression baseExpression=expression.getBaseExpression();
  if (baseExpression == null)   return null;
  JetSimpleNameExpression operationSign=expression.getOperationSign();
  if (JetTokens.LABELS.contains(operationSign.getReferencedNameElementType())) {
    return context.services.checkType(getType(baseExpression,context.replaceExpectedReturnType(context.expectedType)),expression,context);
  }
  IElementType operationType=operationSign.getReferencedNameElementType();
  String name=unaryOperationNames.get(operationType);
  if (name == null) {
    context.trace.getErrorHandler().genericError(operationSign.getNode(),"Unknown unary operation");
    return null;
  }
  JetType receiverType=getType(baseExpression,context.replaceExpectedType(NO_EXPECTED_TYPE).replaceScope(context.scope));
  if (receiverType == null)   return null;
  FunctionDescriptor functionDescriptor=callResolver.resolveCallWithGivenName(context.trace,context.scope,CallMaker.makeCall(expression),expression.getOperationSign(),name,receiverType,context.expectedType);
  if (functionDescriptor == null)   return null;
  JetType returnType=functionDescriptor.getReturnType();
  JetType result;
  if (operationType == JetTokens.PLUSPLUS || operationType == JetTokens.MINUSMINUS) {
    if (semanticServices.getTypeChecker().isSubtypeOf(returnType,JetStandardClasses.getUnitType())) {
      result=JetStandardClasses.getUnitType();
    }
 else {
      if (!semanticServices.getTypeChecker().isSubtypeOf(returnType,receiverType)) {
        context.trace.getErrorHandler().genericError(operationSign.getNode(),name + " must return " + receiverType+ " but returns "+ returnType);
      }
 else {
        context.trace.record(BindingContext.VARIABLE_REASSIGNMENT,expression);
      }
      result=receiverType;
    }
  }
 else {
    result=returnType;
  }
  return context.services.checkType(result,expression,context);
}
