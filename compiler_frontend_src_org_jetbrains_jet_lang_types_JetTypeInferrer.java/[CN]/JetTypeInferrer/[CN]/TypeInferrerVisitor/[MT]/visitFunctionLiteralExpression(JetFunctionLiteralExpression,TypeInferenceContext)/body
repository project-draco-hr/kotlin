{
  JetFunctionLiteral functionLiteral=expression.getFunctionLiteral();
  JetTypeReference receiverTypeRef=functionLiteral.getReceiverTypeRef();
  final JetType receiverType;
  if (receiverTypeRef != null) {
    receiverType=context.typeResolver.resolveType(context.scope,receiverTypeRef);
  }
 else {
    ReceiverDescriptor implicitReceiver=context.scope.getImplicitReceiver();
    receiverType=implicitReceiver.exists() ? implicitReceiver.getType() : null;
  }
  FunctionDescriptorImpl functionDescriptor=new FunctionDescriptorImpl(context.scope.getContainingDeclaration(),Collections.<AnnotationDescriptor>emptyList(),"<anonymous>");
  List<JetType> parameterTypes=new ArrayList<JetType>();
  List<ValueParameterDescriptor> valueParameterDescriptors=Lists.newArrayList();
  List<JetParameter> declaredValueParameters=functionLiteral.getValueParameters();
  JetType expectedType=context.expectedType;
  boolean functionTypeExpected=expectedType != NO_EXPECTED_TYPE && JetStandardClasses.isFunctionType(expectedType);
  List<ValueParameterDescriptor> expectedValueParameters=(functionTypeExpected) ? JetStandardClasses.getValueParameters(functionDescriptor,expectedType) : null;
  if (functionTypeExpected && declaredValueParameters.isEmpty() && expectedValueParameters.size() == 1) {
    ValueParameterDescriptor valueParameterDescriptor=expectedValueParameters.get(0);
    ValueParameterDescriptor it=new ValueParameterDescriptorImpl(functionDescriptor,0,Collections.<AnnotationDescriptor>emptyList(),"it",valueParameterDescriptor.getInType(),valueParameterDescriptor.getOutType(),valueParameterDescriptor.hasDefaultValue(),valueParameterDescriptor.isVararg());
    valueParameterDescriptors.add(it);
    parameterTypes.add(it.getOutType());
    context.trace.record(AUTO_CREATED_IT,it);
  }
 else {
    for (int i=0; i < declaredValueParameters.size(); i++) {
      JetParameter declaredParameter=declaredValueParameters.get(i);
      JetTypeReference typeReference=declaredParameter.getTypeReference();
      JetType type;
      if (typeReference != null) {
        type=context.typeResolver.resolveType(context.scope,typeReference);
      }
 else {
        if (expectedValueParameters != null && i < expectedValueParameters.size()) {
          type=expectedValueParameters.get(i).getOutType();
        }
 else {
          context.trace.report(CANNOT_INFER_PARAMETER_TYPE.on(declaredParameter));
          type=ErrorUtils.createErrorType("Cannot be inferred");
        }
      }
      ValueParameterDescriptor valueParameterDescriptor=context.classDescriptorResolver.resolveValueParameterDescriptor(functionDescriptor,declaredParameter,i,type);
      parameterTypes.add(valueParameterDescriptor.getOutType());
      valueParameterDescriptors.add(valueParameterDescriptor);
    }
  }
  JetType effectiveReceiverType;
  if (receiverTypeRef == null) {
    if (functionTypeExpected) {
      effectiveReceiverType=JetStandardClasses.getReceiverType(expectedType);
    }
 else {
      effectiveReceiverType=null;
    }
  }
 else {
    effectiveReceiverType=receiverType;
  }
  functionDescriptor.initialize(effectiveReceiverType,Collections.<TypeParameterDescriptor>emptyList(),valueParameterDescriptors,null,Modality.FINAL);
  context.trace.record(BindingContext.FUNCTION,expression,functionDescriptor);
  JetType returnType=NO_EXPECTED_TYPE;
  JetScope functionInnerScope=FunctionDescriptorUtil.getFunctionInnerScope(context.scope,functionDescriptor,context.trace);
  JetTypeReference returnTypeRef=functionLiteral.getReturnTypeRef();
  if (returnTypeRef != null) {
    returnType=context.typeResolver.resolveType(context.scope,returnTypeRef);
    context.services.checkFunctionReturnType(functionInnerScope,expression,returnType,context.dataFlowInfo);
  }
 else {
    if (functionTypeExpected) {
      returnType=JetStandardClasses.getReturnType(expectedType);
    }
    returnType=context.services.getBlockReturnedType(functionInnerScope,functionLiteral.getBodyExpression(),CoercionStrategy.COERCION_TO_UNIT,context.replaceExpectedType(returnType));
  }
  JetType safeReturnType=returnType == null ? ErrorUtils.createErrorType("<return type>") : returnType;
  functionDescriptor.setReturnType(safeReturnType);
  if (functionTypeExpected) {
    JetType expectedReturnType=JetStandardClasses.getReturnType(expectedType);
    if (JetStandardClasses.isUnit(expectedReturnType)) {
      return context.services.checkType(JetStandardClasses.getFunctionType(Collections.<AnnotationDescriptor>emptyList(),effectiveReceiverType,parameterTypes,expectedReturnType),expression,context);
    }
  }
  return context.services.checkType(JetStandardClasses.getFunctionType(Collections.<AnnotationDescriptor>emptyList(),effectiveReceiverType,parameterTypes,safeReturnType),expression,context);
}
