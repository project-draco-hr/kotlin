{
  boolean isAnnotation=origin instanceof JetClass && ((JetClass)origin).isAnnotation();
  OwnerKind kind=context.getContextKind();
  for (  JetParameter p : getPrimaryConstructorParameters()) {
    if (p.getValOrVarNode() != null) {
      PropertyDescriptor propertyDescriptor=state.getBindingContext().get(BindingContext.PRIMARY_CONSTRUCTOR_PARAMETER,p);
      if (propertyDescriptor != null) {
        if (!isAnnotation) {
          int accessModifiers=JetTypeMapper.getAccessModifiers(propertyDescriptor,0);
          if ((accessModifiers & ACC_PRIVATE) == 0) {
            propertyCodegen.generateDefaultGetter(propertyDescriptor,accessModifiers,p);
            if (propertyDescriptor.isVar()) {
              propertyCodegen.generateDefaultSetter(propertyDescriptor,accessModifiers,origin);
            }
          }
          if (!(kind instanceof OwnerKind.DelegateKind) && state.getBindingContext().get(BindingContext.BACKING_FIELD_REQUIRED,propertyDescriptor)) {
            int modifiers=accessModifiers;
            if (!propertyDescriptor.isVar()) {
              modifiers|=Opcodes.ACC_FINAL;
            }
            if (JetStandardLibrary.isVolatile(propertyDescriptor)) {
              modifiers|=Opcodes.ACC_VOLATILE;
            }
            Type type=state.getInjector().getJetTypeMapper().mapType(propertyDescriptor.getType(),MapTypeMode.VALUE);
            v.newField(p,modifiers,p.getName(),type.getDescriptor(),null,null);
          }
        }
 else {
          Type type=state.getInjector().getJetTypeMapper().mapType(propertyDescriptor.getType(),MapTypeMode.VALUE);
          v.newMethod(p,ACC_PUBLIC | ACC_ABSTRACT,p.getName(),"()" + type.getDescriptor(),null,null);
        }
      }
    }
  }
}
