{
  USimpleReferenceExpression classReference=node.getClassReference();
  if (classReference == null) {
    return;
  }
  String typeName=null;
  if (mCheckMaps) {
    UClass clazz=classReference.resolveClass(mContext);
    if (clazz != null) {
      typeName=clazz.getName();
      if (clazz.matchesName(HASH_MAP)) {
        checkHashMap(node);
      }
 else       if (clazz.matchesName(SPARSE_ARRAY)) {
        checkSparseArray(node);
      }
    }
  }
  if (mCheckValueOf) {
    UType type=UastErrorType.INSTANCE;
    if (typeName == null) {
      UDeclaration resolvedDeclaration=classReference.resolve(mContext);
      if (resolvedDeclaration instanceof UClass) {
        type=((UClass)resolvedDeclaration).getDefaultType();
        typeName=type.getName();
      }
    }
    if ((type.isInt() || type.isBoolean() || type.isFloat()|| type.isChar()|| type.isLong()|| type.isDouble()|| type.isShort()|| type.isByte()) && node.getValueArgumentCount() == 1) {
      String argument=node.getValueArguments().get(0).renderString();
      mContext.report(USE_VALUE_OF,node,mContext.getLocation(node),getUseValueOfErrorMessage(typeName,argument));
    }
  }
  if (mFlagAllocations && !(node.getParent() instanceof UThrowExpression) && mCheckAllocations) {
    UElement method=node;
    while (method != null) {
      if (method instanceof UFunction) {
        break;
      }
      method=method.getParent();
    }
    if (method != null && isBlockedAllocationMethod(((UFunction)method)) && !isLazilyInitialized(node)) {
      reportAllocation(node);
    }
  }
}
