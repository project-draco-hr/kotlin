{
  List<UType> types=node.getTypeArguments();
  if (types.size() == 2) {
    UType first=types.get(0);
    Project mainProject=mContext.getLintContext().getMainProject();
    int minSdk=mainProject.getMinSdk();
    if (first.isInt() || first.isByte()) {
      UType valueType=types.get(1);
      String valueTypeText=valueType.getName();
      if (valueType.isInt()) {
        mContext.report(USE_SPARSE_ARRAY,node,mContext.getLocation(node),"Use new `SparseIntArray(...)` instead for better performance");
      }
 else       if (valueType.isLong() && minSdk >= 18) {
        mContext.report(USE_SPARSE_ARRAY,node,mContext.getLocation(node),"Use `new SparseLongArray(...)` instead for better performance");
      }
 else       if (valueType.isBoolean()) {
        mContext.report(USE_SPARSE_ARRAY,node,mContext.getLocation(node),"Use `new SparseBooleanArray(...)` instead for better performance");
      }
 else {
        mContext.report(USE_SPARSE_ARRAY,node,mContext.getLocation(node),String.format("Use `new SparseArray<%1$s>(...)` instead for better performance",valueTypeText));
      }
    }
 else     if (first.isLong() && (minSdk >= 16 || Boolean.TRUE == mainProject.dependsOn(SUPPORT_LIB_ARTIFACT))) {
      boolean useBuiltin=minSdk >= 16;
      String message=useBuiltin ? "Use `new LongSparseArray(...)` instead for better performance" : "Use `new android.support.v4.util.LongSparseArray(...)` instead for better performance";
      mContext.report(USE_SPARSE_ARRAY,node,mContext.getLocation(node),message);
    }
  }
}
