{
  StrictListAccessor<TypeReference,TypeReference> types=reference.getTypeArguments();
  if (types != null && types.size() == 2) {
    TypeReference first=types.first();
    String typeName=first.getTypeName();
    int minSdk=mContext.getMainProject().getMinSdk();
    if (typeName.equals(INTEGER) || typeName.equals(BYTE)) {
      String valueType=types.last().getTypeName();
      if (valueType.equals(INTEGER)) {
        mContext.report(USE_SPARSE_ARRAY,node,mContext.getLocation(node),"Use new `SparseIntArray(...)` instead for better performance");
      }
 else       if (valueType.equals(LONG) && minSdk >= 18) {
        mContext.report(USE_SPARSE_ARRAY,node,mContext.getLocation(node),"Use `new SparseLongArray(...)` instead for better performance");
      }
 else       if (valueType.equals(BOOLEAN)) {
        mContext.report(USE_SPARSE_ARRAY,node,mContext.getLocation(node),"Use `new SparseBooleanArray(...)` instead for better performance");
      }
 else {
        mContext.report(USE_SPARSE_ARRAY,node,mContext.getLocation(node),String.format("Use `new SparseArray<%1$s>(...)` instead for better performance",valueType));
      }
    }
 else     if (typeName.equals(LONG) && (minSdk >= 16 || Boolean.TRUE == mContext.getMainProject().dependsOn(SUPPORT_LIB_ARTIFACT))) {
      boolean useBuiltin=minSdk >= 16;
      String message=useBuiltin ? "Use `new LongSparseArray(...)` instead for better performance" : "Use `new android.support.v4.util.LongSparseArray(...)` instead for better performance";
      mContext.report(USE_SPARSE_ARRAY,node,mContext.getLocation(node),message);
    }
  }
}
