{
  TestSuite suite=new TestSuite("CodeTransformationTestGenerated");
  suite.addTestSuite(DoubleBangToIfThen.class);
  suite.addTestSuite(IfThenToDoubleBang.class);
  suite.addTestSuite(ElvisToIfThen.class);
  suite.addTest(IfThenToElvis.innerSuite());
  suite.addTestSuite(SafeAccessToIfThen.class);
  suite.addTest(IfThenToSafeAccess.innerSuite());
  suite.addTestSuite(IfToAssignment.class);
  suite.addTestSuite(IfToReturn.class);
  suite.addTestSuite(IfToReturnAsymmetrically.class);
  suite.addTestSuite(WhenToAssignment.class);
  suite.addTestSuite(WhenToReturn.class);
  suite.addTestSuite(AssignmentToIf.class);
  suite.addTestSuite(AssignmentToWhen.class);
  suite.addTestSuite(PropertyToIf.class);
  suite.addTestSuite(PropertyToWhen.class);
  suite.addTestSuite(ReturnToIf.class);
  suite.addTestSuite(ReturnToWhen.class);
  suite.addTestSuite(IfToWhen.class);
  suite.addTestSuite(WhenToIf.class);
  suite.addTestSuite(Flatten.class);
  suite.addTestSuite(Merge.class);
  suite.addTestSuite(IntroduceSubject.class);
  suite.addTestSuite(EliminateSubject.class);
  suite.addTestSuite(Split.class);
  suite.addTestSuite(Join.class);
  suite.addTestSuite(ConvertMemberToExtension.class);
  suite.addTestSuite(ReconstructedType.class);
  suite.addTestSuite(RemoveUnnecessaryParentheses.class);
  suite.addTestSuite(ReplaceWithDotQualifiedMethodCall.class);
  suite.addTestSuite(ReplaceWithInfixFunctionCall.class);
  suite.addTestSuite(RemoveCurlyBracesFromTemplate.class);
  suite.addTestSuite(MoveLambdaInsideParentheses.class);
  suite.addTestSuite(MoveLambdaOutsideParentheses.class);
  suite.addTestSuite(ReplaceExplicitFunctionLiteralParamWithIt.class);
  suite.addTestSuite(ReplaceItWithExplicitFunctionLiteralParam.class);
  suite.addTestSuite(RemoveBraces.class);
  suite.addTestSuite(AddBraces.class);
  suite.addTest(ReplaceGetIntention.innerSuite());
  suite.addTestSuite(ReplaceContainsIntention.class);
  suite.addTestSuite(ReplaceBinaryInfixIntention.class);
  suite.addTestSuite(ReplaceUnaryPrefixIntention.class);
  suite.addTestSuite(ReplaceInvokeIntention.class);
  suite.addTest(SimplifyNegatedBinaryExpressionIntention.innerSuite());
  suite.addTestSuite(ConvertNegatedBooleanSequence.class);
  suite.addTestSuite(ConvertNegatedExpressionWithDemorgansLaw.class);
  suite.addTestSuite(SwapBinaryExpression.class);
  suite.addTestSuite(SplitIf.class);
  suite.addTestSuite(ReplaceWithOperatorAssign.class);
  suite.addTestSuite(ReplaceWithTraditionalAssignment.class);
  suite.addTestSuite(SimplifyBooleanWithConstants.class);
  suite.addTestSuite(InsertExplicitTypeArguments.class);
  suite.addTest(RemoveExplicitTypeArguments.innerSuite());
  suite.addTestSuite(ConvertAssertToIf.class);
  suite.addTestSuite(ConvertIfToAssert.class);
  suite.addTestSuite(MakeTypeExplicitInLambda.class);
  suite.addTestSuite(MakeTypeImplicitInLambda.class);
  suite.addTestSuite(InvertIfCondition.class);
  suite.addTestSuite(ConvertToForEachLoop.class);
  suite.addTestSuite(ConvertToForEachFunctionCall.class);
  return suite;
}
