{
  JetParameterList parameterList;
  JetPsiFactory psiFactory=JetPsiFactory(element.getProject());
  if (element instanceof JetFunction) {
    JetFunction function=(JetFunction)element;
    parameterList=function.getValueParameterList();
    if (changeInfo.isNameChanged()) {
      PsiElement identifier=function.getNameIdentifier();
      if (identifier != null) {
        identifier.replace(psiFactory.createIdentifier(changeInfo.getNewName()));
      }
    }
    boolean returnTypeIsNeeded=changeInfo.isRefactoringTarget(originalFunctionDescriptor) || !(function instanceof JetFunctionLiteral) || function.getTypeReference() != null;
    if (changeInfo.isReturnTypeChanged() && returnTypeIsNeeded) {
      function.setTypeReference(null);
      String returnTypeText=changeInfo.renderReturnType((JetFunctionDefinitionUsage<PsiElement>)this);
      if (!KotlinBuiltIns.getInstance().getUnitType().toString().equals(returnTypeText)) {
        ShortenPackage.addToShorteningWaitSet(function.setTypeReference(JetPsiFactory(function).createType(returnTypeText)));
      }
    }
  }
 else {
    parameterList=((JetClass)element).getPrimaryConstructorParameterList();
  }
  if (changeInfo.isParameterSetOrOrderChanged()) {
    int parametersCount=changeInfo.getNewParametersCount();
    boolean isLambda=element instanceof JetFunctionLiteral;
    JetParameterList newParameterList=null;
    if (isLambda) {
      if (parametersCount == 0 && ((JetFunctionLiteral)element).getTypeReference() == null) {
        if (parameterList != null) {
          parameterList.delete();
          ASTNode arrowNode=((JetFunctionLiteral)element).getArrowNode();
          if (arrowNode != null) {
            arrowNode.getPsi().delete();
          }
        }
      }
 else {
        newParameterList=psiFactory.createFunctionLiteralParameterList(changeInfo.getNewParametersSignature((JetFunctionDefinitionUsage<PsiElement>)this,0));
      }
    }
 else {
      newParameterList=psiFactory.createParameterList(changeInfo.getNewParametersSignature((JetFunctionDefinitionUsage<PsiElement>)this,0));
    }
    if (newParameterList != null) {
      if (parameterList != null) {
        newParameterList=(JetParameterList)parameterList.replace(newParameterList);
      }
 else {
        if (element instanceof JetClass) {
          PsiElement anchor=((JetClass)element).getTypeParameterList();
          if (anchor == null) {
            anchor=((JetClass)element).getNameIdentifier();
          }
          if (anchor != null) {
            newParameterList=(JetParameterList)element.addAfter(newParameterList,anchor);
          }
        }
 else         if (isLambda) {
          JetFunctionLiteral functionLiteral=(JetFunctionLiteral)element;
          PsiElement anchor=functionLiteral.getLBrace();
          newParameterList=(JetParameterList)element.addAfter(newParameterList,anchor);
          if (functionLiteral.getArrowNode() == null) {
            Pair<PsiElement,PsiElement> whitespaceAndArrow=psiFactory.createWhitespaceAndArrow();
            element.addRangeAfter(whitespaceAndArrow.getFirst(),whitespaceAndArrow.getSecond(),newParameterList);
          }
        }
      }
    }
    if (newParameterList != null) {
      ShortenPackage.addToShorteningWaitSet(newParameterList);
    }
  }
 else   if (parameterList != null) {
    int paramIndex=0;
    for (    JetParameter parameter : parameterList.getParameters()) {
      JetParameterInfo parameterInfo=changeInfo.getNewParameters()[paramIndex];
      changeParameter(paramIndex,parameter,parameterInfo);
      paramIndex++;
    }
    ShortenPackage.addToShorteningWaitSet(parameterList);
  }
  if (changeInfo.isVisibilityChanged() && !JetPsiUtil.isLocal((JetDeclaration)element)) {
    changeVisibility(changeInfo,element);
  }
  return true;
}
