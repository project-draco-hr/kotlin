{
  InputStream stream=JetStandardClasses.class.getClassLoader().getResourceAsStream("jet/Library.jet");
  try {
    JetFile file=(JetFile)PsiFileFactory.getInstance(project).createFileFromText("Library.jet",JetFileType.INSTANCE,FileUtil.loadTextAndClose(new InputStreamReader(stream)));
    JetSemanticServices bootstrappingSemanticServices=JetSemanticServices.createSemanticServices(this);
    BindingTraceContext bindingTraceContext=new BindingTraceContext();
    TopDownAnalyzer bootstrappingTDA=new TopDownAnalyzer(bootstrappingSemanticServices,bindingTraceContext);
    this.libraryScope=bootstrappingTDA.process(JetStandardClasses.STANDARD_CLASSES,file.getRootNamespace().getDeclarations());
    this.byteClass=(ClassDescriptor)libraryScope.getClassifier("Byte");
    this.charClass=(ClassDescriptor)libraryScope.getClassifier("Char");
    this.shortClass=(ClassDescriptor)libraryScope.getClassifier("Short");
    this.intClass=(ClassDescriptor)libraryScope.getClassifier("Int");
    this.longClass=(ClassDescriptor)libraryScope.getClassifier("Long");
    this.floatClass=(ClassDescriptor)libraryScope.getClassifier("Float");
    this.doubleClass=(ClassDescriptor)libraryScope.getClassifier("Double");
    this.booleanClass=(ClassDescriptor)libraryScope.getClassifier("Boolean");
    this.stringClass=(ClassDescriptor)libraryScope.getClassifier("String");
    this.arrayClass=(ClassDescriptor)libraryScope.getClassifier("Array");
    this.iterableClass=(ClassDescriptor)libraryScope.getClassifier("Iterable");
    this.typeInfoClass=(ClassDescriptor)libraryScope.getClassifier("TypeInfo");
    this.byteType=new JetTypeImpl(getByte());
    this.charType=new JetTypeImpl(getChar());
    this.shortType=new JetTypeImpl(getShort());
    this.intType=new JetTypeImpl(getInt());
    this.longType=new JetTypeImpl(getLong());
    this.floatType=new JetTypeImpl(getFloat());
    this.doubleType=new JetTypeImpl(getDouble());
    this.booleanType=new JetTypeImpl(getBoolean());
    this.stringType=new JetTypeImpl(getString());
    this.nullableStringType=TypeUtils.makeNullable(stringType);
  }
 catch (  IOException e) {
    throw new IllegalStateException(e);
  }
}
