{
  InputStream stream=JetStandardClasses.class.getClassLoader().getResourceAsStream("jet/lang/Library.jet");
  try {
    JetFile file=(JetFile)PsiFileFactory.getInstance(project).createFileFromText("Library.jet",JetFileType.INSTANCE,FileUtil.loadTextAndClose(new InputStreamReader(stream)));
    JetSemanticServices bootstrappingSemanticServices=JetSemanticServices.createSemanticServices(this,ErrorHandler.DO_NOTHING);
    BindingTraceContext bindingTraceContext=new BindingTraceContext();
    TopDownAnalyzer bootstrappingTDA=new TopDownAnalyzer(bootstrappingSemanticServices,bindingTraceContext);
    bootstrappingTDA.process(JetStandardClasses.STANDARD_CLASSES,file.getRootNamespace().getDeclarations());
    BindingContext bindingContext=bindingTraceContext;
    this.libraryScope=bindingContext.getTopLevelScope();
    this.byteClass=libraryScope.getClass("Byte");
    this.charClass=libraryScope.getClass("Char");
    this.shortClass=libraryScope.getClass("Short");
    this.intClass=libraryScope.getClass("Int");
    this.longClass=libraryScope.getClass("Long");
    this.floatClass=libraryScope.getClass("Float");
    this.doubleClass=libraryScope.getClass("Double");
    this.booleanClass=libraryScope.getClass("Boolean");
    this.stringClass=libraryScope.getClass("String");
    this.arrayClass=libraryScope.getClass("Array");
    this.iterableClass=libraryScope.getClass("Iterable");
    this.byteType=new JetTypeImpl(getByte());
    this.charType=new JetTypeImpl(getChar());
    this.shortType=new JetTypeImpl(getShort());
    this.intType=new JetTypeImpl(getInt());
    this.longType=new JetTypeImpl(getLong());
    this.floatType=new JetTypeImpl(getFloat());
    this.doubleType=new JetTypeImpl(getDouble());
    this.booleanType=new JetTypeImpl(getBoolean());
    this.stringType=new JetTypeImpl(getString());
    this.nullableStringType=TypeUtils.makeNullable(stringType);
  }
 catch (  IOException e) {
    throw new IllegalStateException(e);
  }
}
