{
  final Map<JetReferenceExpression,DiagnosticFactory<?>> markedWithErrorElements=Maps.newHashMap();
  for (  Diagnostic diagnostic : bindingContext.getDiagnostics()) {
    DiagnosticFactory<?> factory=diagnostic.getFactory();
    if (Errors.UNRESOLVED_REFERENCE_DIAGNOSTICS.contains(diagnostic.getFactory())) {
      markedWithErrorElements.put((JetReferenceExpression)diagnostic.getPsiElement(),factory);
    }
 else     if (factory == Errors.SUPER_IS_NOT_AN_EXPRESSION || factory == Errors.SUPER_NOT_AVAILABLE) {
      JetSuperExpression superExpression=(JetSuperExpression)diagnostic.getPsiElement();
      markedWithErrorElements.put(superExpression.getInstanceReference(),factory);
    }
 else     if (factory == Errors.EXPRESSION_EXPECTED_PACKAGE_FOUND) {
      markedWithErrorElements.put((JetSimpleNameExpression)diagnostic.getPsiElement(),factory);
    }
 else     if (factory == Errors.UNSUPPORTED) {
      for (      JetReferenceExpression reference : PsiTreeUtil.findChildrenOfType(diagnostic.getPsiElement(),JetReferenceExpression.class)) {
        markedWithErrorElements.put(reference,factory);
      }
    }
  }
  root.acceptChildren(new JetTreeVisitorVoid(){
    @Override public void visitForExpression(    @NotNull JetForExpression expression){
      JetExpression range=expression.getLoopRange();
      reportIfDynamicCall(range,range,LOOP_RANGE_ITERATOR_RESOLVED_CALL);
      reportIfDynamicCall(range,range,LOOP_RANGE_HAS_NEXT_RESOLVED_CALL);
      reportIfDynamicCall(range,range,LOOP_RANGE_NEXT_RESOLVED_CALL);
      super.visitForExpression(expression);
    }
    @Override public void visitMultiDeclaration(    @NotNull JetMultiDeclaration multiDeclaration){
      for (      JetMultiDeclarationEntry entry : multiDeclaration.getEntries()) {
        reportIfDynamicCall(entry,entry,COMPONENT_RESOLVED_CALL);
      }
      super.visitMultiDeclaration(multiDeclaration);
    }
    @Override public void visitProperty(    @NotNull JetProperty property){
      VariableDescriptor descriptor=bindingContext.get(VARIABLE,property);
      if (descriptor instanceof PropertyDescriptor && property.getDelegate() != null) {
        PropertyDescriptor propertyDescriptor=(PropertyDescriptor)descriptor;
        reportIfDynamicCall(property.getDelegate(),propertyDescriptor.getGetter(),DELEGATED_PROPERTY_RESOLVED_CALL);
        reportIfDynamicCall(property.getDelegate(),propertyDescriptor.getSetter(),DELEGATED_PROPERTY_RESOLVED_CALL);
        reportIfDynamicCall(property.getDelegate(),propertyDescriptor,DELEGATED_PROPERTY_PD_RESOLVED_CALL);
      }
      super.visitProperty(property);
    }
    @Override public void visitThisExpression(    @NotNull JetThisExpression expression){
      ResolvedCall<? extends CallableDescriptor> resolvedCall=CallUtilPackage.getResolvedCall(expression,bindingContext);
      if (resolvedCall != null) {
        reportIfDynamic(expression,resolvedCall.getResultingDescriptor(),debugInfoReporter);
      }
      super.visitThisExpression(expression);
    }
    @Override public void visitReferenceExpression(    @NotNull JetReferenceExpression expression){
      super.visitReferenceExpression(expression);
      if (!BindingContextUtils.isExpressionWithValidReference(expression,bindingContext)) {
        return;
      }
      IElementType referencedNameElementType=null;
      if (expression instanceof JetSimpleNameExpression) {
        JetSimpleNameExpression nameExpression=(JetSimpleNameExpression)expression;
        IElementType elementType=expression.getNode().getElementType();
        if (elementType == JetNodeTypes.OPERATION_REFERENCE) {
          referencedNameElementType=nameExpression.getReferencedNameElementType();
          if (EXCLUDED.contains(referencedNameElementType)) {
            return;
          }
        }
        if (elementType == JetNodeTypes.LABEL || nameExpression.getReferencedNameElementType() == JetTokens.THIS_KEYWORD) {
          return;
        }
      }
      debugInfoReporter.preProcessReference(expression);
      String target=null;
      DeclarationDescriptor declarationDescriptor=bindingContext.get(REFERENCE_TARGET,expression);
      if (declarationDescriptor != null) {
        target=declarationDescriptor.toString();
        reportIfDynamic(expression,declarationDescriptor,debugInfoReporter);
      }
      if (target == null) {
        PsiElement labelTarget=bindingContext.get(LABEL_TARGET,expression);
        if (labelTarget != null) {
          target=labelTarget.getText();
        }
      }
      if (target == null) {
        Collection<? extends DeclarationDescriptor> declarationDescriptors=bindingContext.get(AMBIGUOUS_REFERENCE_TARGET,expression);
        if (declarationDescriptors != null) {
          target="[" + declarationDescriptors.size() + " descriptors]";
        }
      }
      if (target == null) {
        Collection<? extends PsiElement> labelTargets=bindingContext.get(AMBIGUOUS_LABEL_TARGET,expression);
        if (labelTargets != null) {
          target="[" + labelTargets.size() + " elements]";
        }
      }
      if (MAY_BE_UNRESOLVED.contains(referencedNameElementType)) {
        return;
      }
      boolean resolved=target != null;
      boolean markedWithError=markedWithErrorElements.containsKey(expression);
      if (expression instanceof JetArrayAccessExpression && markedWithErrorElements.containsKey(((JetArrayAccessExpression)expression).getArrayExpression())) {
        markedWithError=true;
      }
      JetType expressionType=bindingContext.getType(expression);
      DiagnosticFactory<?> factory=markedWithErrorElements.get(expression);
      if (declarationDescriptor != null && (ErrorUtils.isError(declarationDescriptor) || ErrorUtils.containsErrorType(expressionType))) {
        if (factory != Errors.EXPRESSION_EXPECTED_PACKAGE_FOUND) {
          debugInfoReporter.reportElementWithErrorType(expression);
        }
      }
      if (resolved && markedWithError) {
        if (Errors.UNRESOLVED_REFERENCE_DIAGNOSTICS.contains(factory)) {
          debugInfoReporter.reportUnresolvedWithTarget(expression,target);
        }
      }
 else       if (!resolved && !markedWithError) {
        debugInfoReporter.reportMissingUnresolved(expression);
      }
    }
    private <E extends JetElement,K,D extends CallableDescriptor>boolean reportIfDynamicCall(    E element,    K key,    WritableSlice<K,ResolvedCall<D>> slice){
      ResolvedCall<D> resolvedCall=bindingContext.get(slice,key);
      if (resolvedCall != null) {
        return reportIfDynamic(element,resolvedCall.getResultingDescriptor(),debugInfoReporter);
      }
      return false;
    }
  }
);
}
