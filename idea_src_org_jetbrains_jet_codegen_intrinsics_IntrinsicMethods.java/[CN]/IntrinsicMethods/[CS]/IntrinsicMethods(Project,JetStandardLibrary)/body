{
  myProject=project;
  myStdLib=stdlib;
  List<String> primitiveCastMethods=ImmutableList.of("dbl","flt","lng","int","chr","sht","byt");
  for (  String method : primitiveCastMethods) {
    declareIntrinsicProperty("Number",method,NUMBER_CAST);
  }
  declareIntrinsicProperty("Array","size",new ArraySize());
  for (  String type : PRIMITIVE_NUMBER_TYPES) {
    declareIntrinsicFunction(type,"minus",0,UNARY_MINUS);
    declareIntrinsicFunction(type,"inv",0,INV);
    declareIntrinsicFunction(type,"rangeTo",1,RANGE_TO);
  }
  final FunctionGroup typeInfoFunctionGroup=stdlib.getTypeInfoFunctionGroup();
  declareOverload(typeInfoFunctionGroup,0,TYPEINFO);
  declareOverload(typeInfoFunctionGroup,1,VALUE_TYPEINFO);
  declareBinaryOp("plus",Opcodes.IADD);
  declareBinaryOp("minus",Opcodes.ISUB);
  declareBinaryOp("times",Opcodes.IMUL);
  declareBinaryOp("div",Opcodes.IDIV);
  declareBinaryOp("mod",Opcodes.IREM);
  declareBinaryOp("shl",Opcodes.ISHL);
  declareBinaryOp("shr",Opcodes.ISHR);
  declareBinaryOp("ushr",Opcodes.IUSHR);
  declareBinaryOp("and",Opcodes.IAND);
  declareBinaryOp("or",Opcodes.IOR);
  declareBinaryOp("xor",Opcodes.IXOR);
  declareIntrinsicFunction("Boolean","not",0,new Not());
  declareIntrinsicFunction("String","plus",1,new Concat());
  declareIntrinsicStringMethods();
}
