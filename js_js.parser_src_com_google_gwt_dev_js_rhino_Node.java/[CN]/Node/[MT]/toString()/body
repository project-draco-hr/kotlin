{
  if (Context.printTrees) {
    StringBuffer sb=new StringBuffer(TokenStream.tokenToName(type));
    if (this instanceof StringNode) {
      sb.append(' ');
      sb.append(getString());
    }
 else {
switch (type) {
case TokenStream.TARGET:
        sb.append(' ');
      sb.append(hashCode());
    break;
case TokenStream.NUMBER:
  sb.append(' ');
sb.append(getDouble());
break;
case TokenStream.FUNCTION:
sb.append(' ');
sb.append(first.getString());
break;
}
}
if (intDatum != -1) {
sb.append(' ');
sb.append(intDatum);
}
if (props == null) return sb.toString();
int[] keys=props.getKeys();
for (int i=0; i != keys.length; ++i) {
int key=keys[i];
sb.append(" [");
sb.append(propToString(key));
sb.append(": ");
switch (key) {
case FIXUPS_PROP:
sb.append("fixups property");
break;
case SOURCE_PROP:
sb.append("source property");
break;
case TARGETBLOCK_PROP:
sb.append("target block property");
break;
case LASTUSE_PROP:
sb.append("last use property");
break;
default :
Object obj=props.getObject(key);
if (obj != null) {
sb.append(obj.toString());
}
 else {
sb.append(props.getExistingInt(key));
}
break;
}
sb.append(']');
}
return sb.toString();
}
return null;
}
