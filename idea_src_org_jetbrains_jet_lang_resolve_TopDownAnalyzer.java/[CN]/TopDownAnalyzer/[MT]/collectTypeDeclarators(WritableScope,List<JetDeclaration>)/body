{
  for (  JetDeclaration declaration : declarations) {
    declaration.accept(new JetVisitor(){
      @Override public void visitClass(      JetClass klass){
        WritableScope classScope=processClass(declaringScope,klass);
        collectTypeDeclarators(classScope,klass.getDeclarations());
      }
      @Override public void visitNamespace(      JetNamespace namespace){
        List<JetImportDirective> importDirectives=namespace.getImportDirectives();
        ScopeWithImports scopeWithImports=new ScopeWithImports(declaringScope);
        for (        JetImportDirective importDirective : importDirectives) {
          if (importDirective.isAbsoluteInRootNamespace()) {
            throw new UnsupportedOperationException();
          }
          if (importDirective.isAllUnder()) {
            JetExpression importedReference=importDirective.getImportedReference();
            Type type=semanticServices.getTypeInferrer(trace).getType(scopeWithImports,importedReference,false);
            if (type != null) {
              scopeWithImports.importScope(type.getMemberScope());
            }
          }
 else {
            throw new UnsupportedOperationException();
          }
        }
        WritableScope namespaceScope=new WritableScope(scopeWithImports);
        collectTypeDeclarators(namespaceScope,namespace.getDeclarations());
      }
      @Override public void visitTypedef(      JetTypedef typedef){
        processTypeDef(typedef);
      }
      @Override public void visitDeclaration(      JetDeclaration dcl){
        throw new UnsupportedOperationException();
      }
    }
);
  }
}
