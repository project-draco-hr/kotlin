{
  for (  JetDeclaration declaration : declarations) {
    declaration.accept(new JetVisitor(){
      @Override public void visitClass(      JetClass klass){
        WritableScope classScope=processClass(declaringScope,klass);
        collectTypeDeclarators(classScope,klass.getDeclarations());
      }
      @Override public void visitNamespace(      JetNamespace namespace){
        List<JetImportDirective> importDirectives=namespace.getImportDirectives();
        String name=namespace.getName();
        if (name == null) {
          name="<no name provided>";
        }
        NamespaceDescriptor namespaceDescriptor=declaringScope.getDeclaredNamespace(name);
        if (namespaceDescriptor == null) {
          namespaceDescriptor=new NamespaceDescriptor(declaringScope.getContainingDeclaration(),Collections.<Annotation>emptyList(),name);
          namespaceDescriptor.initialize(new WritableScopeImpl(JetScope.EMPTY,namespaceDescriptor,trace.getErrorHandler(),null));
          declaringScope.addNamespace(namespaceDescriptor);
          trace.recordDeclarationResolution(namespace,namespaceDescriptor);
        }
        WritableScope namespaceScope=new WriteThroughScope(declaringScope,(WritableScope)namespaceDescriptor.getMemberScope());
        namespaceScopes.put(namespace,namespaceScope);
        for (        JetImportDirective importDirective : importDirectives) {
          if (importDirective.isAbsoluteInRootNamespace()) {
            throw new UnsupportedOperationException();
          }
          if (importDirective.isAllUnder()) {
            JetExpression importedReference=importDirective.getImportedReference();
            if (importedReference != null) {
              JetType type=semanticServices.getTypeInferrer(trace,JetFlowInformationProvider.THROW_EXCEPTION).getTypeWithNamespaces(namespaceScope,importedReference,false);
              if (type != null) {
                namespaceScope.importScope(type.getMemberScope());
              }
            }
          }
 else {
            throw new UnsupportedOperationException();
          }
        }
        collectTypeDeclarators(namespaceScope,namespace.getDeclarations());
      }
      @Override public void visitTypedef(      JetTypedef typedef){
        processTypeDef(typedef);
      }
      @Override public void visitDeclaration(      JetDeclaration dcl){
      }
    }
);
  }
}
