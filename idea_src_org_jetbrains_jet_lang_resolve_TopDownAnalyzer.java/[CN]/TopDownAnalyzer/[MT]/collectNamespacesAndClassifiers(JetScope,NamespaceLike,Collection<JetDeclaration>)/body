{
  for (  JetDeclaration declaration : declarations) {
    declaration.accept(new JetVisitor(){
      @Override public void visitNamespace(      JetNamespace namespace){
        String name=namespace.getName();
        if (name == null) {
          name="<no name provided>";
        }
        NamespaceDescriptorImpl namespaceDescriptor=owner.getNamespace(name);
        if (namespaceDescriptor == null) {
          namespaceDescriptor=new NamespaceDescriptorImpl(owner.getOriginal(),Collections.<Annotation>emptyList(),name);
          namespaceDescriptor.initialize(new WritableScopeImpl(JetScope.EMPTY,namespaceDescriptor,trace.getErrorHandler()));
          owner.addNamespace(namespaceDescriptor);
          trace.recordDeclarationResolution(namespace,namespaceDescriptor);
        }
        namespaceDescriptors.put(namespace,namespaceDescriptor);
        WriteThroughScope namespaceScope=new WriteThroughScope(outerScope,namespaceDescriptor.getMemberScope(),trace.getErrorHandler());
        namespaceScopes.put(namespace,namespaceScope);
        processImports(namespace,namespaceScope,outerScope);
        collectNamespacesAndClassifiers(namespaceScope,namespaceDescriptor,namespace.getDeclarations());
      }
      @Override public void visitClass(      JetClass klass){
        MutableClassDescriptor mutableClassDescriptor=new MutableClassDescriptor(trace,owner,outerScope);
        mutableClassDescriptor.setName(JetPsiUtil.safeName(klass.getName()));
        owner.addClassifierDescriptor(mutableClassDescriptor);
        classes.put(klass,mutableClassDescriptor);
        declaringScopes.put(klass,outerScope);
        JetScope classScope=mutableClassDescriptor.getScopeForMemberResolution();
        collectNamespacesAndClassifiers(classScope,mutableClassDescriptor,klass.getDeclarations());
      }
      @Override public void visitTypedef(      JetTypedef typedef){
        trace.getErrorHandler().genericError(typedef.getNode(),"Unsupported [TopDownAnalyzer]");
      }
      @Override public void visitExtension(      JetExtension extension){
        trace.getErrorHandler().genericError(extension.getNode(),"Unsupported [TopDownAnalyzer]");
      }
    }
);
  }
}
