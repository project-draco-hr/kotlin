{
  for (  JetDeclaration declaration : declarations) {
    declaration.accept(new JetVisitor(){
      @Override public void visitNamespace(      JetNamespace namespace){
        List<JetImportDirective> importDirectives=namespace.getImportDirectives();
        String name=namespace.getName();
        if (name == null) {
          name="<no name provided>";
        }
        NamespaceDescriptorImpl namespaceDescriptor=owner.getNamespace(name);
        if (namespaceDescriptor == null) {
          namespaceDescriptor=new NamespaceDescriptorImpl(owner.getOriginal(),Collections.<Annotation>emptyList(),name);
          namespaceDescriptor.initialize(new WritableScopeImpl(JetScope.EMPTY,namespaceDescriptor,trace.getErrorHandler(),null));
          owner.addNamespace(namespaceDescriptor);
          trace.recordDeclarationResolution(namespace,namespaceDescriptor);
        }
        namespaceDescriptors.put(namespace,namespaceDescriptor);
        WritableScope namespaceScope=new WriteThroughScope(outerScope,(WritableScope)namespaceDescriptor.getMemberScope());
        namespaceScopes.put(namespace,namespaceScope);
        for (        JetImportDirective importDirective : importDirectives) {
          if (importDirective.isAbsoluteInRootNamespace()) {
            throw new UnsupportedOperationException();
          }
          if (importDirective.isAllUnder()) {
            JetExpression importedReference=importDirective.getImportedReference();
            if (importedReference != null) {
              JetType type=semanticServices.getTypeInferrer(trace,JetFlowInformationProvider.THROW_EXCEPTION).getTypeWithNamespaces(namespaceScope,importedReference,false);
              if (type != null) {
                namespaceScope.importScope(type.getMemberScope());
              }
            }
          }
 else {
            throw new UnsupportedOperationException();
          }
        }
        collectNamespacesAndClassifiers(namespaceScope,namespaceDescriptor,namespace.getDeclarations());
      }
      @Override public void visitClass(      JetClass klass){
        MutableClassDescriptor mutableClassDescriptor=new MutableClassDescriptor(trace,owner,outerScope);
        mutableClassDescriptor.setName(JetPsiUtil.safeName(klass.getName()));
        owner.addClassifierDescriptor(mutableClassDescriptor);
        classes.put(klass,mutableClassDescriptor);
        declaringScopes.put(klass,outerScope);
        WritableScope classScope=mutableClassDescriptor.getScopeForMemberResolution();
        collectNamespacesAndClassifiers(classScope,mutableClassDescriptor,klass.getDeclarations());
      }
      @Override public void visitTypedef(      JetTypedef typedef){
        trace.getErrorHandler().genericError(typedef.getNode(),"Unsupported [TopDownAnalyzer]");
      }
      @Override public void visitExtension(      JetExtension extension){
        trace.getErrorHandler().genericError(extension.getNode(),"Unsupported [TopDownAnalyzer]");
      }
    }
);
  }
}
