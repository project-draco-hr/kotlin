{
  JetFlowInformationProvider flowInformationProvider=computeFlowData(property,initializer);
  JetTypeInferrer typeInferrer=semanticServices.getTypeInferrer(trace,flowInformationProvider);
  JetType type=typeInferrer.getType(scope,initializer,false);
  JetType expectedType;
  PropertySetterDescriptor setter=propertyDescriptor.getSetter();
  if (setter != null) {
    expectedType=setter.getUnsubstitutedReturnType();
  }
 else {
    expectedType=propertyDescriptor.getInType();
    if (expectedType == null) {
      expectedType=propertyDescriptor.getOutType();
    }
  }
  if (type != null && expectedType != null && !semanticServices.getTypeChecker().isConvertibleTo(type,expectedType)) {
    semanticServices.getErrorHandler().typeMismatch(initializer,expectedType,type);
  }
}
