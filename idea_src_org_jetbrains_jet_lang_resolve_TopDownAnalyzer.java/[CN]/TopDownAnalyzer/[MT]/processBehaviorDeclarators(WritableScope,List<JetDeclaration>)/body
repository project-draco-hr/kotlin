{
  for (  JetDeclaration declaration : declarations) {
    declaration.accept(new JetVisitor(){
      @Override public void visitClass(      JetClass klass){
        MutableClassDescriptor mutableClassDescriptor=classes.get(klass);
        processPrimaryConstructor(mutableClassDescriptor,klass);
        processBehaviorDeclarators(mutableClassDescriptor.getUnsubstitutedMemberScope(),klass.getDeclarations());
      }
      @Override public void visitClassObject(      JetClassObject classObject){
        processClassObject(classObject);
        processBehaviorDeclarators(declaringScope,classObject.getObject().getDeclarations());
      }
      @Override public void visitNamespace(      JetNamespace namespace){
        WritableScope namespaceScope=namespaceScopes.get(namespace);
        processBehaviorDeclarators(namespaceScope,namespace.getDeclarations());
      }
      @Override public void visitFunction(      JetFunction function){
        processFunction(declaringScope,function);
      }
      @Override public void visitProperty(      JetProperty property){
        processProperty(declaringScope,property);
      }
      @Override public void visitConstructor(      JetConstructor constructor){
        DeclarationDescriptor containingDeclaration=declaringScope.getContainingDeclaration();
        if (containingDeclaration instanceof ClassDescriptor) {
          processConstructor((MutableClassDescriptor)containingDeclaration,constructor);
        }
 else {
          semanticServices.getErrorHandler().genericError(constructor.getNode(),"Constructors are only allowed inside classes");
        }
      }
      @Override public void visitDeclaration(      JetDeclaration dcl){
        semanticServices.getErrorHandler().genericError(dcl.getNode(),"Unsupported declaration: " + dcl);
      }
    }
);
  }
}
