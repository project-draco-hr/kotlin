{
  semanticServices.getTypeInferrer(new BindingTrace(){
    @Override public void recordExpressionType(    @NotNull JetExpression expression,    @NotNull Type type){
      expressionTypes.put(expression,type);
    }
    @Override public void recordReferenceResolution(    @NotNull JetReferenceExpression expression,    @NotNull DeclarationDescriptor descriptor){
      resolutionResults.put(expression,descriptor);
    }
    @Override public void recordTypeResolution(    @NotNull JetTypeReference typeReference,    @NotNull Type type){
      types.put(typeReference,type);
    }
    @Override public void recordDeclarationResolution(    @NotNull JetDeclaration declaration,    @NotNull DeclarationDescriptor descriptor){
      throw new IllegalStateException();
    }
  }
).getType(scope,expression,preferBlock);
}
