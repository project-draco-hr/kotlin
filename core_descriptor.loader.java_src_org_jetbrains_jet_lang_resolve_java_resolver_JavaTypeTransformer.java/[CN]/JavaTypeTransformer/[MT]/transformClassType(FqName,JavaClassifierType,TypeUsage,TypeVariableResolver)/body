{
  boolean nullable=!EnumSet.of(TYPE_ARGUMENT,SUPERTYPE_ARGUMENT,SUPERTYPE).contains(howThisTypeIsUsed);
  ClassDescriptor classData=JavaToKotlinClassMap.getInstance().mapKotlinClass(fqName,howThisTypeIsUsed);
  if (classData == null) {
    classData=classResolver.resolveClass(fqName,INCLUDE_KOTLIN_SOURCES);
  }
  if (classData == null) {
    return null;
  }
  List<TypeProjection> arguments=new ArrayList<TypeProjection>();
  List<TypeParameterDescriptor> parameters=classData.getTypeConstructor().getParameters();
  if (isRaw(classifierType,!parameters.isEmpty())) {
    for (    TypeParameterDescriptor parameter : parameters) {
      Variance projectionKind=parameter.getVariance() == OUT_VARIANCE || howThisTypeIsUsed == SUPERTYPE ? INVARIANT : OUT_VARIANCE;
      arguments.add(new TypeProjectionImpl(projectionKind,KotlinBuiltIns.getInstance().getNullableAnyType()));
    }
  }
 else {
    List<JavaType> javaTypeArguments=classifierType.getTypeArguments();
    if (parameters.size() != javaTypeArguments.size()) {
      for (      TypeParameterDescriptor parameter : parameters) {
        arguments.add(new TypeProjectionImpl(ErrorUtils.createErrorType(parameter.getName().asString())));
      }
    }
 else {
      for (int i=0, size=javaTypeArguments.size(); i < size; i++) {
        JavaType typeArgument=javaTypeArguments.get(i);
        TypeParameterDescriptor typeParameterDescriptor=parameters.get(i);
        TypeUsage howTheProjectionIsUsed=howThisTypeIsUsed == SUPERTYPE ? SUPERTYPE_ARGUMENT : TYPE_ARGUMENT;
        TypeProjection typeProjection=transformToTypeProjection(typeArgument,typeParameterDescriptor,typeVariableResolver,howTheProjectionIsUsed);
        if (typeProjection.getProjectionKind() == typeParameterDescriptor.getVariance()) {
          arguments.add(new TypeProjectionImpl(INVARIANT,typeProjection.getType()));
        }
 else {
          arguments.add(typeProjection);
        }
      }
    }
  }
  return new JetTypeImpl(Collections.<AnnotationDescriptor>emptyList(),classData.getTypeConstructor(),nullable,arguments,classData.getMemberScope(arguments));
}
