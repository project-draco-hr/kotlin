{
  Pair<DoubleColonLHS,OverloadResolutionResults<?>> pair=doubleColonExpressionResolver.resolveCallableReference(callableReferenceExpression,ExpressionTypingContext.newContext(context),SHAPE_FUNCTION_ARGUMENTS);
  DoubleColonLHS lhs=pair.getFirst();
  OverloadResolutionResults<?> overloadResolutionResults=pair.getSecond();
  if (overloadResolutionResults == null)   return null;
  if (overloadResolutionResults.isSingleResult()) {
    ResolvedCall<?> resolvedCall=OverloadResolutionResultsUtil.getResultingCall(overloadResolutionResults,context.contextDependency);
    if (resolvedCall == null)     return null;
    return DoubleColonExpressionResolver.Companion.createKCallableTypeForReference(resolvedCall.getResultingDescriptor(),lhs,reflectionTypes,context.scope.getOwnerDescriptor());
  }
  if (expectedTypeIsUnknown) {
    return functionPlaceholders.createFunctionPlaceholderType(Collections.<KotlinType>emptyList(),false);
  }
  return FunctionTypeResolveUtilsKt.createFunctionType(builtIns,Annotations.Companion.getEMPTY(),null,Collections.<KotlinType>emptyList(),TypeUtils.DONT_CARE);
}
