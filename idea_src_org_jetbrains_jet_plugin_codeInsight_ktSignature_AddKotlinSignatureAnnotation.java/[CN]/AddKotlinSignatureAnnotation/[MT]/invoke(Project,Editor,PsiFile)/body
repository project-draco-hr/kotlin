{
  final PsiMethod method=findMethod(file,editor.getCaretModel().getOffset());
  String signature=getDefaultSignature(project,(PsiMethod)method.getOriginalElement());
  final MessageBusConnection busConnection=project.getMessageBus().connect();
  busConnection.subscribe(ExternalAnnotationsManager.TOPIC,new ExternalAnnotationsListener.Adapter(){
    @Override public void afterExternalAnnotationChanging(    @NotNull PsiModifierListOwner owner,    @NotNull String annotationFQName,    boolean successful){
      busConnection.disconnect();
      if (successful && owner == method && KOTLIN_SIGNATURE_ANNOTATION.equals(annotationFQName)) {
        ApplicationManager.getApplication().invokeLater(new Runnable(){
          @Override public void run(){
            refreshMarkers(project);
            EditSignatureBalloon.invokeEditSignature(method,editor,null);
          }
        }
,ModalityState.NON_MODAL);
      }
    }
  }
);
  createFix(method,signature).invoke(project,editor,file);
}
