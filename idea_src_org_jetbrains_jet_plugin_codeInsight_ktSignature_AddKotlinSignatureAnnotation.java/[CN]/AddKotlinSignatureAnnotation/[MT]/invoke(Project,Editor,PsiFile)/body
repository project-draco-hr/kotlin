{
  final PsiMember annotatedElement=findAnnotationOwner(file,editor);
  assert(annotatedElement != null);
  String signature=getDefaultSignature(project,(PsiMember)annotatedElement.getOriginalElement());
  final MessageBusConnection busConnection=project.getMessageBus().connect();
  busConnection.subscribe(ExternalAnnotationsManager.TOPIC,new ExternalAnnotationsListener.Adapter(){
    @Override public void afterExternalAnnotationChanging(    @NotNull PsiModifierListOwner owner,    @NotNull String annotationFQName,    boolean successful){
      busConnection.disconnect();
      if (successful && owner == annotatedElement && KOTLIN_SIGNATURE_ANNOTATION.equals(annotationFQName)) {
        ApplicationManager.getApplication().invokeLater(new Runnable(){
          @Override public void run(){
            refreshMarkers(project);
            EditSignatureAction.invokeEditSignature(annotatedElement,editor,null);
          }
        }
,ModalityState.NON_MODAL);
      }
    }
  }
);
  createFix(annotatedElement,signature).invoke(project,editor,file);
}
