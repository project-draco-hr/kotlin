{
  KtType known=knownProjection.getType();
  KtType withVariables=projectWithVariables.getType();
  Variance knownProjectionKind=knownProjection.getProjectionKind();
  Variance withVariablesProjectionKind=projectWithVariables.getProjectionKind();
  if (knownProjectionKind == withVariablesProjectionKind && knownProjectionKind != Variance.INVARIANT) {
    doUnify(new TypeProjectionImpl(known),new TypeProjectionImpl(withVariables),isVariable,result);
    return;
  }
  if (known.isMarkedNullable() && withVariables.isMarkedNullable()) {
    doUnify(new TypeProjectionImpl(knownProjectionKind,TypeUtils.makeNotNullable(known)),new TypeProjectionImpl(withVariablesProjectionKind,TypeUtils.makeNotNullable(withVariables)),isVariable,result);
    return;
  }
  if (knownProjectionKind != withVariablesProjectionKind && withVariablesProjectionKind != Variance.INVARIANT) {
    result.fail();
    return;
  }
  if (!known.isMarkedNullable() && withVariables.isMarkedNullable()) {
    result.fail();
    return;
  }
  TypeConstructor maybeVariable=withVariables.getConstructor();
  if (isVariable.apply(maybeVariable)) {
    result.put(maybeVariable,new TypeProjectionImpl(knownProjectionKind,known));
    return;
  }
  boolean structuralMismatch=known.isMarkedNullable() != withVariables.isMarkedNullable() || knownProjectionKind != withVariablesProjectionKind || !known.getConstructor().equals(withVariables.getConstructor());
  if (structuralMismatch) {
    result.fail();
    return;
  }
  if (known.getArguments().size() != withVariables.getArguments().size()) {
    result.fail();
    return;
  }
  if (known.getArguments().isEmpty()) {
    return;
  }
  List<TypeProjection> knownArguments=known.getArguments();
  List<TypeProjection> withVariablesArguments=withVariables.getArguments();
  for (int i=0; i < knownArguments.size(); i++) {
    TypeProjection knownArg=knownArguments.get(i);
    TypeProjection withVariablesArg=withVariablesArguments.get(i);
    doUnify(knownArg,withVariablesArg,isVariable,result);
  }
}
