{
  PropertyDescriptorImpl substitutedDescriptor=createSubstitutedCopy(newOwner,newModality,newVisibility,original,kind);
  List<TypeParameterDescriptor> originalTypeParameters=getTypeParameters();
  List<TypeParameterDescriptor> substitutedTypeParameters=new ArrayList<TypeParameterDescriptor>(originalTypeParameters.size());
  TypeSubstitutor substitutor=DescriptorSubstitutor.substituteTypeParameters(originalTypeParameters,originalSubstitutor.getSubstitution(),substitutedDescriptor,substitutedTypeParameters);
  KotlinType originalOutType=getType();
  KotlinType outType=substitutor.substitute(originalOutType,Variance.OUT_VARIANCE);
  if (outType == null) {
    return null;
  }
  ReceiverParameterDescriptor substitutedDispatchReceiver;
  ReceiverParameterDescriptor dispatchReceiver=getDispatchReceiverParameter();
  if (dispatchReceiver != null) {
    substitutedDispatchReceiver=dispatchReceiver.substitute(substitutor);
    if (substitutedDispatchReceiver == null)     return null;
  }
 else {
    substitutedDispatchReceiver=null;
  }
  KotlinType substitutedReceiverType;
  if (extensionReceiverParameter != null) {
    substitutedReceiverType=substitutor.substitute(extensionReceiverParameter.getType(),Variance.IN_VARIANCE);
    if (substitutedReceiverType == null)     return null;
  }
 else {
    substitutedReceiverType=null;
  }
  substitutedDescriptor.setType(outType,substitutedTypeParameters,substitutedDispatchReceiver,substitutedReceiverType);
  PropertyGetterDescriptorImpl newGetter=getter == null ? null : new PropertyGetterDescriptorImpl(substitutedDescriptor,getter.getAnnotations(),newModality,getter.getVisibility(),getter.hasBody(),getter.isDefault(),getter.isExternal(),kind,original == null ? null : original.getGetter(),SourceElement.NO_SOURCE);
  if (newGetter != null) {
    KotlinType returnType=getter.getReturnType();
    newGetter.setInitialSignatureDescriptor(getSubstitutedInitialSignatureDescriptor(substitutor,getter));
    newGetter.initialize(returnType != null ? substitutor.substitute(returnType,Variance.OUT_VARIANCE) : null);
  }
  PropertySetterDescriptorImpl newSetter=setter == null ? null : new PropertySetterDescriptorImpl(substitutedDescriptor,setter.getAnnotations(),newModality,setter.getVisibility(),setter.hasBody(),setter.isDefault(),setter.isExternal(),kind,original == null ? null : original.getSetter(),SourceElement.NO_SOURCE);
  if (newSetter != null) {
    List<ValueParameterDescriptor> substitutedValueParameters=FunctionDescriptorImpl.getSubstitutedValueParameters(newSetter,setter.getValueParameters(),substitutor,false);
    if (substitutedValueParameters == null) {
      substitutedDescriptor.setSetterProjectedOut(true);
      substitutedValueParameters=Collections.<ValueParameterDescriptor>singletonList(PropertySetterDescriptorImpl.createSetterParameter(newSetter,getBuiltIns(newOwner).getNothingType()));
    }
    if (substitutedValueParameters.size() != 1) {
      throw new IllegalStateException();
    }
    newSetter.setInitialSignatureDescriptor(getSubstitutedInitialSignatureDescriptor(substitutor,setter));
    newSetter.initialize(substitutedValueParameters.get(0));
  }
  substitutedDescriptor.initialize(newGetter,newSetter);
  if (copyOverrides) {
    Collection<CallableMemberDescriptor> overridden=SmartSet.create();
    for (    PropertyDescriptor propertyDescriptor : getOverriddenDescriptors()) {
      overridden.add(propertyDescriptor.substitute(substitutor));
    }
    substitutedDescriptor.setOverriddenDescriptors(overridden);
  }
  return substitutedDescriptor;
}
