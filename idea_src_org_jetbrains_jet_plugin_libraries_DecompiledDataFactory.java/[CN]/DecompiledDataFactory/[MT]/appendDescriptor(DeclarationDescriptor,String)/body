{
  int startOffset=builder.length();
  String renderedDescriptor=DESCRIPTOR_RENDERER.render(descriptor);
  renderedDescriptor=renderedDescriptor.replace("= ...","= " + DECOMPILED_COMMENT);
  builder.append(renderedDescriptor);
  int endOffset=builder.length();
  if (descriptor instanceof FunctionDescriptor || descriptor instanceof PropertyDescriptor) {
    if (((CallableMemberDescriptor)descriptor).getModality() != Modality.ABSTRACT) {
      if (descriptor instanceof FunctionDescriptor) {
        builder.append(" { ").append(DECOMPILED_COMMENT).append(" }");
        endOffset=builder.length();
      }
 else {
        if (((PropertyDescriptor)descriptor).getModality() != Modality.ABSTRACT) {
          builder.append(" ").append(DECOMPILED_COMMENT);
        }
      }
    }
  }
 else   if (descriptor instanceof ClassDescriptor) {
    builder.append(" {\n");
    ClassDescriptor classDescriptor=(ClassDescriptor)descriptor;
    boolean firstPassed=false;
    String subindent=indent + "    ";
    ClassDescriptor classObjectDescriptor=classDescriptor.getClassObjectDescriptor();
    if (classObjectDescriptor != null) {
      firstPassed=true;
      builder.append(subindent);
      appendDescriptor(classObjectDescriptor,subindent);
    }
    for (    DeclarationDescriptor member : sortDeclarations(classDescriptor.getDefaultType().getMemberScope().getAllDescriptors())) {
      if (member.getContainingDeclaration() != descriptor) {
        continue;
      }
      if (member instanceof CallableMemberDescriptor && ((CallableMemberDescriptor)member).getKind() != CallableMemberDescriptor.Kind.DECLARATION) {
        continue;
      }
      if (isNamedObjectProperty(member)) {
        continue;
      }
      if (firstPassed) {
        builder.append("\n");
      }
 else {
        firstPassed=true;
      }
      builder.append(subindent);
      appendDescriptor(member,subindent);
    }
    builder.append(indent).append("}");
    endOffset=builder.length();
  }
  builder.append("\n");
  saveDescriptorToRange(descriptor,startOffset,endOffset);
  if (descriptor instanceof ClassDescriptor) {
    ConstructorDescriptor primaryConstructor=((ClassDescriptor)descriptor).getUnsubstitutedPrimaryConstructor();
    if (primaryConstructor != null) {
      saveDescriptorToRange(primaryConstructor,startOffset,endOffset);
    }
  }
}
