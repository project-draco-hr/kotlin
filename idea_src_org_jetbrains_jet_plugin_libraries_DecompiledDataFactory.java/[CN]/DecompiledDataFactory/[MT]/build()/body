{
  FqName packageFqName=classFqName.parent();
  appendDecompiledTextAndPackageName(packageFqName);
  SerializedDataHeader.Kind kind=classFileHeader.getKind();
  if (kind == SerializedDataHeader.Kind.PACKAGE) {
    NamespaceDescriptor nd=javaDescriptorResolver.resolveNamespace(packageFqName,INCLUDE_KOTLIN_SOURCES);
    if (nd != null) {
      for (      DeclarationDescriptor member : sortDeclarations(nd.getMemberScope().getAllDescriptors())) {
        if (member instanceof ClassDescriptor || member instanceof NamespaceDescriptor || isNamedObjectProperty(member)) {
          continue;
        }
        appendDescriptor(member,"");
        builder.append("\n");
      }
    }
  }
 else   if (kind == SerializedDataHeader.Kind.CLASS) {
    ClassDescriptor cd=javaDescriptorResolver.resolveClass(classFqName,INCLUDE_KOTLIN_SOURCES);
    if (cd != null) {
      appendDescriptor(cd,"");
    }
  }
 else {
    throw new UnsupportedOperationException("Unknown header kind: " + kind);
  }
  JetFile jetFile=JetDummyClassFileViewProvider.createJetFile(PsiManager.getInstance(project),classFile,builder.toString());
  return new JetDecompiledData(jetFile,renderedDescriptorsToRange);
}
