{
  FqName packageFqName=classFqName.parent();
  appendDecompiledTextAndPackageName(packageFqName);
  KotlinClassHeader.Kind kind=classFileHeader.getKind();
  if (kind == KotlinClassHeader.Kind.PACKAGE_FACADE) {
    PackageFragmentDescriptor pf=javaDescriptorResolver.getPackageFragment(packageFqName);
    if (pf != null) {
      for (      DeclarationDescriptor member : sortDeclarations(pf.getMemberScope().getAllDescriptors())) {
        if (!(member instanceof ClassDescriptor)) {
          appendDescriptor(member,"");
          builder.append("\n");
        }
      }
    }
  }
 else   if (kind == KotlinClassHeader.Kind.CLASS) {
    ClassDescriptor cd=javaDescriptorResolver.resolveClass(classFqName);
    if (cd != null) {
      appendDescriptor(cd,"");
    }
  }
 else {
    throw new UnsupportedOperationException("Unknown header kind: " + kind);
  }
  JetFile jetFile=JetDummyClassFileViewProvider.createJetFile(PsiManager.getInstance(project),classFile,builder.toString());
  return new JetDecompiledData(jetFile,renderedDescriptorsToRange);
}
