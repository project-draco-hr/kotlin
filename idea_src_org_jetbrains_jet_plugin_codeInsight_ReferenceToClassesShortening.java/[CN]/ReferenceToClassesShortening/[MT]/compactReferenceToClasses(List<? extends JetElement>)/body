{
  if (elementsToCompact.isEmpty()) {
    return;
  }
  final JetFile file=(JetFile)elementsToCompact.get(0).getContainingFile();
  final BindingContext bc=WholeProjectAnalyzerFacade.analyzeProjectWithCacheOnAFile(file).getBindingContext();
  for (  JetElement element : elementsToCompact) {
    element.accept(new JetVisitorVoid(){
      @Override public void visitJetElement(      JetElement element){
        element.acceptChildren(this);
      }
      @Override public void visitTypeReference(      JetTypeReference typeReference){
        super.visitTypeReference(typeReference);
        JetTypeElement typeElement=typeReference.getTypeElement();
        if (typeElement instanceof JetNullableType) {
          typeElement=((JetNullableType)typeElement).getInnerType();
        }
        if (typeElement instanceof JetUserType) {
          JetUserType userType=(JetUserType)typeElement;
          DeclarationDescriptor target=bc.get(BindingContext.REFERENCE_TARGET,userType.getReferenceExpression());
          if (target instanceof ClassDescriptor) {
            ClassDescriptor targetClass=(ClassDescriptor)target;
            ClassDescriptor targetTopLevelClass=ImportInsertHelper.getTopLevelClass(targetClass);
            JetScope scope=bc.get(BindingContext.TYPE_RESOLUTION_SCOPE,typeReference);
            ClassifierDescriptor classifier=scope.getClassifier(targetTopLevelClass.getName());
            if (targetTopLevelClass == classifier) {
              compactReferenceToClass(userType,targetClass);
            }
 else             if (classifier == null) {
              ImportInsertHelper.addImportDirective(DescriptorUtils.getFQName(targetTopLevelClass).toSafe(),file);
              compactReferenceToClass(userType,targetClass);
            }
 else {
            }
          }
        }
      }
      private void compactReferenceToClass(      JetUserType userType,      ClassDescriptor targetClass){
        if (targetClass == JetStandardClasses.getUnitType().getConstructor().getDeclarationDescriptor()) {
          return;
        }
        String name=targetClass.getName();
        DeclarationDescriptor parent=targetClass.getContainingDeclaration();
        while (parent instanceof ClassDescriptor) {
          name=parent.getName() + "." + name;
          parent=parent.getContainingDeclaration();
        }
        JetTypeArgumentList typeArgumentList=userType.getTypeArgumentList();
        userType.replace(JetPsiFactory.createType(userType.getProject(),name + (typeArgumentList == null ? "" : typeArgumentList.getText())));
      }
    }
);
  }
}
