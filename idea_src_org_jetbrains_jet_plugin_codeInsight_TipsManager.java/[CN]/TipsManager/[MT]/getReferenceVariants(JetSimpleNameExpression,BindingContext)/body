{
  JetExpression receiverExpression=PsiUtilPackage.getReceiverExpression(expression);
  PsiElement parent=expression.getParent();
  boolean inPositionForCompletionWithReceiver=parent instanceof JetCallExpression || parent instanceof JetQualifiedExpression;
  if (receiverExpression != null && inPositionForCompletionWithReceiver) {
    JetScope resolutionScope=context.get(BindingContext.RESOLUTION_SCOPE,expression);
    QualifierReceiver qualifierReceiver=context.get(BindingContext.QUALIFIER_RECEIVER,receiverExpression);
    if (qualifierReceiver != null && resolutionScope != null) {
      return includeExternalCallableExtensions(excludePrivateDescriptors(qualifierReceiver.getScope().getAllDescriptors()),resolutionScope,qualifierReceiver);
    }
    JetType expressionType=context.get(BindingContext.EXPRESSION_TYPE,receiverExpression);
    if (expressionType != null && resolutionScope != null && !expressionType.isError()) {
      ExpressionReceiver receiverValue=new ExpressionReceiver(receiverExpression,expressionType);
      Set<DeclarationDescriptor> descriptors=new HashSet<DeclarationDescriptor>();
      DataFlowInfo info=context.get(BindingContext.NON_DEFAULT_EXPRESSION_DATA_FLOW,expression);
      if (info == null) {
        info=DataFlowInfo.EMPTY;
      }
      List<JetType> variantsForExplicitReceiver=AutoCastUtils.getAutoCastVariants(receiverValue,context,info);
      for (      JetType variant : variantsForExplicitReceiver) {
        descriptors.addAll(includeExternalCallableExtensions(excludePrivateDescriptors(variant.getMemberScope().getAllDescriptors()),resolutionScope,receiverValue));
      }
      return descriptors;
    }
    return Collections.emptyList();
  }
 else {
    return getVariantsNoReceiver(expression,context);
  }
}
