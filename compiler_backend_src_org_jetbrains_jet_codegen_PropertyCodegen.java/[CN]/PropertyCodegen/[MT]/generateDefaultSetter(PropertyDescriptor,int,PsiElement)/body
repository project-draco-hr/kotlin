{
  if (kind == OwnerKind.TRAIT_IMPL) {
    return;
  }
  if (kind == OwnerKind.NAMESPACE) {
    flags|=Opcodes.ACC_STATIC;
  }
  PsiElement psiElement=state.getBindingContext().get(BindingContext.DESCRIPTOR_TO_DECLARATION,propertyDescriptor.getContainingDeclaration());
  boolean isTrait=psiElement instanceof JetClass && ((JetClass)psiElement).isTrait();
  if (isTrait && !(kind instanceof OwnerKind.DelegateKind))   flags|=Opcodes.ACC_ABSTRACT;
  JvmPropertyAccessorSignature signature=state.getTypeMapper().mapSetterSignature(propertyDescriptor,kind);
  final String descriptor=signature.getJvmMethodSignature().getAsmMethod().getDescriptor();
  MethodVisitor mv=v.newMethod(origin,flags,setterName(propertyDescriptor.getName()),descriptor,null,null);
  generateJetPropertyAnnotation(mv,signature.getPropertyTypeKotlinSignature(),signature.getJvmMethodSignature().getKotlinTypeParameter());
  if (v.generateCode() && (!isTrait || kind instanceof OwnerKind.DelegateKind)) {
    mv.visitCode();
    InstructionAdapter iv=new InstructionAdapter(mv);
    final Type type=state.getTypeMapper().mapType(propertyDescriptor.getOutType());
    int paramCode=0;
    if (kind != OwnerKind.NAMESPACE) {
      iv.load(0,JetTypeMapper.TYPE_OBJECT);
      paramCode=1;
    }
    if (kind instanceof OwnerKind.DelegateKind) {
      OwnerKind.DelegateKind dk=(OwnerKind.DelegateKind)kind;
      iv.load(0,JetTypeMapper.TYPE_OBJECT);
      dk.getDelegate().put(JetTypeMapper.TYPE_OBJECT,iv);
      iv.load(paramCode,type);
      iv.invokeinterface(dk.getOwnerClass(),setterName(propertyDescriptor.getName()),descriptor);
    }
 else {
      iv.load(paramCode,type);
      iv.visitFieldInsn(kind == OwnerKind.NAMESPACE ? Opcodes.PUTSTATIC : Opcodes.PUTFIELD,state.getTypeMapper().getOwner(propertyDescriptor,kind),propertyDescriptor.getName(),type.getDescriptor());
    }
    iv.visitInsn(Opcodes.RETURN);
    FunctionCodegen.endVisit(mv,"setter",origin);
    mv.visitEnd();
  }
}
