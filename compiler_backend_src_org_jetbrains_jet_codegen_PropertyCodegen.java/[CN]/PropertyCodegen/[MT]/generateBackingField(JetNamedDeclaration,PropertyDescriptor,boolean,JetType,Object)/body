{
  int modifiers=getDeprecatedAccessFlag(propertyDescriptor);
  if (KotlinBuiltIns.getInstance().isVolatile(propertyDescriptor)) {
    modifiers|=ACC_VOLATILE;
  }
  if (kind == OwnerKind.PACKAGE) {
    modifiers|=ACC_STATIC;
  }
  if (!propertyDescriptor.isVar() || isDelegate) {
    modifiers|=ACC_FINAL;
  }
  Type type=typeMapper.mapType(jetType);
  ClassBuilder builder=v;
  FieldOwnerContext backingFieldContext=context;
  if (AsmUtil.isPropertyWithBackingFieldInOuterClass(propertyDescriptor)) {
    modifiers|=ACC_STATIC | getVisibilityForSpecialPropertyBackingField(propertyDescriptor,isDelegate);
    ImplementationBodyCodegen codegen=getParentBodyCodegen(classBodyCodegen);
    builder=codegen.v;
    backingFieldContext=codegen.context;
    v.getSerializationBindings().put(STATIC_FIELD_IN_OUTER_CLASS,propertyDescriptor);
  }
 else {
    if (kind != OwnerKind.PACKAGE || isDelegate) {
      modifiers|=ACC_PRIVATE;
    }
  }
  if (AsmUtil.isPropertyWithBackingFieldCopyInOuterClass(propertyDescriptor)) {
    ImplementationBodyCodegen parentBodyCodegen=getParentBodyCodegen(classBodyCodegen);
    parentBodyCodegen.addClassObjectPropertyToCopy(propertyDescriptor,defaultValue);
  }
  String name=backingFieldContext.getFieldName(propertyDescriptor,isDelegate);
  v.getSerializationBindings().put(FIELD_FOR_PROPERTY,propertyDescriptor,Pair.create(type,name));
  return builder.newField(element,modifiers,name,type.getDescriptor(),typeMapper.mapFieldSignature(jetType),defaultValue);
}
