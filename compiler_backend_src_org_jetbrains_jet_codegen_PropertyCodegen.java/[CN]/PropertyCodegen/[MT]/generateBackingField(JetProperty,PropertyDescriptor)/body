{
  if (state.getBindingContext().get(BindingContext.BACKING_FIELD_REQUIRED,propertyDescriptor)) {
    DeclarationDescriptor containingDeclaration=propertyDescriptor.getContainingDeclaration();
    if (CodegenUtil.isInterface(containingDeclaration))     return;
    Object value=null;
    final JetExpression initializer=p.getInitializer();
    if (initializer != null) {
      if (initializer instanceof JetConstantExpression) {
        CompileTimeConstant<?> compileTimeValue=state.getBindingContext().get(BindingContext.COMPILE_TIME_VALUE,initializer);
        value=compileTimeValue != null ? compileTimeValue.getValue() : null;
      }
    }
    int modifiers;
    if (kind == OwnerKind.NAMESPACE) {
      int access=JetTypeMapper.getAccessModifiers(propertyDescriptor,0);
      modifiers=access | Opcodes.ACC_STATIC;
    }
 else {
      modifiers=JetTypeMapper.getAccessModifiers(propertyDescriptor,0);
    }
    if (!propertyDescriptor.isVar()) {
      modifiers|=Opcodes.ACC_FINAL;
    }
    if (state.getStandardLibrary().isVolatile(propertyDescriptor)) {
      modifiers|=Opcodes.ACC_VOLATILE;
    }
    FieldVisitor fieldVisitor=v.newField(p,modifiers,p.getName(),state.getTypeMapper().mapType(propertyDescriptor.getOutType()).getDescriptor(),null,value);
    AnnotationCodegen.forField(fieldVisitor).genAnnotations(propertyDescriptor,state.getTypeMapper());
  }
}
