{
  List<IntentionAction> actions=new LinkedList<IntentionAction>();
  DiagnosticWithParameters2<JetExpression,JetType,JetType> diagnosticWithParameters=Errors.TYPE_MISMATCH.cast(diagnostic);
  JetExpression expression=diagnosticWithParameters.getPsiElement();
  JetType expectedType=diagnosticWithParameters.getA();
  JetType expressionType=diagnosticWithParameters.getB();
  BindingContext context=ResolvePackage.getBindingContext((JetFile)diagnostic.getPsiFile());
  if (!(expression instanceof JetBinaryExpressionWithTypeRHS) && !(expression.getParent() instanceof JetBinaryExpressionWithTypeRHS)) {
    actions.add(new CastExpressionFix(expression,expectedType));
  }
  JetProperty property=PsiTreeUtil.getParentOfType(expression,JetProperty.class);
  if (property != null) {
    JetPropertyAccessor getter=property.getGetter();
    if (QuickFixUtil.canEvaluateTo(property.getInitializer(),expression) || (getter != null && QuickFixUtil.canFunctionOrGetterReturnExpression(property.getGetter(),expression))) {
      actions.add(new ChangeVariableTypeFix(property,expressionType));
    }
  }
  JetFunction function=PsiTreeUtil.getParentOfType(expression,JetFunction.class,true);
  if (function != null && QuickFixUtil.canFunctionOrGetterReturnExpression(function,expression)) {
    actions.add(new ChangeFunctionReturnTypeFix(function,expressionType));
  }
  if (expression instanceof JetOperationExpression) {
    ResolvedCall<?> resolvedCall=CallUtilPackage.getResolvedCall(expression,context);
    if (resolvedCall != null) {
      JetFunction declaration=getFunctionDeclaration(resolvedCall);
      if (declaration != null) {
        actions.add(new ChangeFunctionReturnTypeFix(declaration,expectedType));
      }
    }
  }
  if (expression.getParent() instanceof JetBinaryExpression) {
    JetBinaryExpression parentBinary=(JetBinaryExpression)expression.getParent();
    if (parentBinary.getRight() == expression) {
      ResolvedCall<?> resolvedCall=CallUtilPackage.getResolvedCall(parentBinary,context);
      if (resolvedCall != null) {
        JetFunction declaration=getFunctionDeclaration(resolvedCall);
        if (declaration != null) {
          JetParameter binaryOperatorParameter=declaration.getValueParameterList().getParameters().get(0);
          actions.add(new ChangeParameterTypeFix(binaryOperatorParameter,expressionType));
        }
      }
    }
  }
  if (expression instanceof JetCallExpression) {
    ResolvedCall<?> resolvedCall=CallUtilPackage.getResolvedCall(expression,context);
    if (resolvedCall != null) {
      JetFunction declaration=getFunctionDeclaration(resolvedCall);
      if (declaration != null) {
        actions.add(new ChangeFunctionReturnTypeFix(declaration,expectedType));
      }
    }
  }
  JetFunctionLiteralExpression functionLiteralExpression=QuickFixUtil.getParentElementOfType(diagnostic,JetFunctionLiteralExpression.class);
  if (functionLiteralExpression != null && functionLiteralExpression.getBodyExpression() == expression) {
    JetParameter correspondingParameter=QuickFixUtil.getParameterCorrespondingToFunctionLiteralPassedOutsideArgumentList(functionLiteralExpression);
    JetType functionLiteralExpressionType=context.get(BindingContext.EXPRESSION_TYPE,functionLiteralExpression);
    if (correspondingParameter != null && functionLiteralExpressionType != null) {
      actions.add(new ChangeParameterTypeFix(correspondingParameter,functionLiteralExpressionType));
    }
  }
 else {
    JetValueArgument valueArgument=QuickFixUtil.getParentElementOfType(diagnostic,JetValueArgument.class);
    if (valueArgument != null && QuickFixUtil.canEvaluateTo(valueArgument.getArgumentExpression(),expression)) {
      JetParameter correspondingParameter=QuickFixUtil.getParameterCorrespondingToValueArgumentPassedInCall(valueArgument);
      JetType valueArgumentType=context.get(BindingContext.EXPRESSION_TYPE,valueArgument.getArgumentExpression());
      if (correspondingParameter != null && valueArgumentType != null) {
        actions.add(new ChangeParameterTypeFix(correspondingParameter,valueArgumentType));
      }
    }
  }
  return actions;
}
