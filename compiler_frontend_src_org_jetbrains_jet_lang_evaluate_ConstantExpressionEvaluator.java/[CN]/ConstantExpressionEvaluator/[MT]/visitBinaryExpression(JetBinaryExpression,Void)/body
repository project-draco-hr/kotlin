{
  JetExpression leftExpression=expression.getLeft();
  if (leftExpression == null) {
    return null;
  }
  IElementType operationToken=expression.getOperationToken();
  if (OperatorConventions.BOOLEAN_OPERATIONS.containsKey(operationToken)) {
    JetType booleanType=KotlinBuiltIns.getInstance().getBooleanType();
    CompileTimeConstant<?> leftConstant=leftExpression.accept(new ConstantExpressionEvaluator(trace,booleanType),null);
    if (leftConstant == null) {
      return null;
    }
    JetExpression rightExpression=expression.getRight();
    if (rightExpression == null) {
      return null;
    }
    CompileTimeConstant<?> rightConstant=rightExpression.accept(new ConstantExpressionEvaluator(trace,booleanType),null);
    if (rightConstant == null) {
      return null;
    }
    Name operationName=operationToken == JetTokens.ANDAND ? Name.identifier("andand") : Name.identifier("oror");
    Object result=EvaluatePackage.evaluateBinaryExpression(leftConstant,rightConstant,operationName);
    if (result == null) {
      return null;
    }
    return createCompileTimeConstant(result,expectedType);
  }
 else {
    Object result=evaluateCall(expression.getOperationReference(),leftExpression);
    if (result == null) {
      return null;
    }
    if (OperatorConventions.COMPARISON_OPERATIONS.contains(operationToken)) {
      return createCompileTimeConstantForCompareTo(result,operationToken);
    }
 else     if (OperatorConventions.EQUALS_OPERATIONS.contains(operationToken)) {
      return createCompileTimeConstantForEquals(result,operationToken);
    }
 else {
      return createCompileTimeConstant(result,expectedType);
    }
  }
}
