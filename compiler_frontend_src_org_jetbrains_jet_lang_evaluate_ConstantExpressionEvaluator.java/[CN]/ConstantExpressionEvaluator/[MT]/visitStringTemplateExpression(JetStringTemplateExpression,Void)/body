{
  JetStringTemplateEntry[] stringTemplateEntries=expression.getEntries();
  if (stringTemplateEntries.length == 1) {
    CompileTimeConstant singleEntry=stringTemplateEntries[0].accept(this,null);
    if (!(singleEntry instanceof StringValue) && singleEntry != null) {
      return new StringValue(singleEntry.getValue().toString());
    }
 else {
      return singleEntry;
    }
  }
 else   if (stringTemplateEntries.length > 1) {
    CompileTimeConstant<?> first=stringTemplateEntries[0].accept(this,null);
    if (first == null) {
      return null;
    }
    CompileTimeConstant<?> second;
    String tmpResult=null;
    for (int i=1; i < stringTemplateEntries.length; i++) {
      second=stringTemplateEntries[i].accept(this,null);
      if (second == null) {
        return null;
      }
      Object object=EvaluatePackage.evaluateBinaryExpression(first,second,Name.identifier("plus"));
      if (object instanceof String) {
        tmpResult=(String)object;
      }
 else {
        tmpResult=object.toString();
      }
      first=new StringValue(tmpResult);
    }
    return new StringValue(tmpResult);
  }
  return null;
}
