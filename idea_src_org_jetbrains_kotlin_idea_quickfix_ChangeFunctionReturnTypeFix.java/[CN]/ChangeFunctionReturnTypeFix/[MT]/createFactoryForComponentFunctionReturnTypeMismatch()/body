{
  return new KotlinSingleIntentionActionFactory(){
    @Nullable @Override public IntentionAction createAction(    @NotNull Diagnostic diagnostic){
      KtMultiDeclarationEntry entry=getMultiDeclarationEntryThatTypeMismatchComponentFunction(diagnostic);
      BindingContext context=ResolutionUtils.analyze(entry);
      ResolvedCall<FunctionDescriptor> resolvedCall=context.get(BindingContext.COMPONENT_RESOLVED_CALL,entry);
      if (resolvedCall == null)       return null;
      KtFunction componentFunction=(KtFunction)DescriptorToSourceUtils.descriptorToDeclaration(resolvedCall.getCandidateDescriptor());
      KotlinType expectedType=context.get(BindingContext.TYPE,entry.getTypeReference());
      if (componentFunction != null && expectedType != null) {
        return new ChangeFunctionReturnTypeFix(componentFunction,expectedType);
      }
 else       return null;
    }
  }
;
}
