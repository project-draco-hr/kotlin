{
  PsiAnonymousClass anonymousClass=expression.getAnonymousClass();
  PsiMethod constructor=expression.resolveMethod();
  PsiJavaCodeReferenceElement classReference=expression.getClassOrAnonymousClassReference();
  boolean isNotConvertedClass=classReference != null && !getConverter().getClassIdentifiers().contains(classReference.getQualifiedName());
  PsiExpressionList argumentList=expression.getArgumentList();
  PsiExpression[] arguments=argumentList != null ? argumentList.getExpressions() : new PsiExpression[]{};
  if (constructor == null || isConstructorPrimary(constructor) || isNotConvertedClass) {
    return new NewClassExpression(getConverter().expressionToExpression(expression.getQualifier()),getConverter().elementToElement(classReference),getConverter().expressionsToExpressionList(arguments),getConverter().createConversions(expression),anonymousClass != null ? getConverter().anonymousClassToAnonymousClass(anonymousClass) : null);
  }
  PsiJavaCodeReferenceElement reference=expression.getClassReference();
  List<Type> typeParameters=reference != null ? getConverter().typesToTypeList(reference.getTypeParameters()) : Collections.<Type>emptyList();
  return new CallChainExpression(new IdentifierImpl(constructor.getName(),false),new MethodCallExpression(new IdentifierImpl("init"),getConverter().expressionsToExpressionList(arguments),typeParameters));
}
