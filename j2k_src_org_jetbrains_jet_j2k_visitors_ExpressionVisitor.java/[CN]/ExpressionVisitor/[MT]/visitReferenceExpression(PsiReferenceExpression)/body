{
  super.visitReferenceExpression(expression);
  boolean isFieldReference=isFieldReference(expression,getContainingClass(expression));
  boolean insideSecondaryConstructor=isInsideSecondaryConstructor(expression);
  boolean hasReceiver=isFieldReference && insideSecondaryConstructor;
  boolean isThis=isThisExpression(expression);
  boolean notNull=isResolvedToNotNull(expression);
  boolean isNullable=getConverter().typeToType(expression.getType(),notNull).isNullable();
  String className=getClassNameWithConstructor(expression);
  Expression identifier=new IdentifierImpl(expression.getReferenceName(),isNullable);
  String __="__";
  if (hasReceiver) {
    identifier=new CallChainExpression(new IdentifierImpl(__,false),new IdentifierImpl(expression.getReferenceName(),isNullable));
  }
 else   if (insideSecondaryConstructor && isThis) {
    identifier=new IdentifierImpl("val __ = " + className);
  }
  myResult=new CallChainExpression(getConverter().expressionToExpression(expression.getQualifierExpression()),identifier);
}
