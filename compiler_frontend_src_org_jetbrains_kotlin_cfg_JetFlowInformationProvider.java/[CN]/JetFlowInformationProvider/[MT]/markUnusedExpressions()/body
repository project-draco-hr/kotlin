{
  final Map<Instruction,DiagnosticFactory<?>> reportedDiagnosticMap=Maps.newHashMap();
  PseudocodeTraverserPackage.traverse(pseudocode,FORWARD,new JetFlowInformationProvider.FunctionVoid1<Instruction>(){
    @Override public void execute(    @NotNull Instruction instruction){
      if (!(instruction instanceof JetElementInstruction))       return;
      JetElement element=((JetElementInstruction)instruction).getElement();
      if (!(element instanceof JetExpression))       return;
      if (BindingContextUtilPackage.isUsedAsStatement((JetExpression)element,trace.getBindingContext()) && PseudocodePackage.getSideEffectFree(instruction)) {
        VariableContext ctxt=new VariableContext(instruction,reportedDiagnosticMap);
        report(element instanceof JetFunctionLiteralExpression ? Errors.UNUSED_FUNCTION_LITERAL.on((JetFunctionLiteralExpression)element) : Errors.UNUSED_EXPRESSION.on(element),ctxt);
      }
    }
  }
);
}
