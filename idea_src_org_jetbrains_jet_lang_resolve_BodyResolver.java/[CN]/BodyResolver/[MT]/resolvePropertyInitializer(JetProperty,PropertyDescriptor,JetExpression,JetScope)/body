{
  JetFlowInformationProvider flowInformationProvider=classDescriptorResolver.computeFlowData(property,initializer);
  JetTypeInferrer.Services typeInferrer=semanticServices.getTypeInferrerServices(traceForConstructors,flowInformationProvider);
  JetType type=typeInferrer.getType(getPropertyDeclarationInnerScope(scope,propertyDescriptor),initializer,NO_EXPECTED_TYPE);
  JetType expectedType=propertyDescriptor.getInType();
  if (expectedType == null) {
    expectedType=propertyDescriptor.getOutType();
  }
  if (type != null && expectedType != null && !semanticServices.getTypeChecker().isSubtypeOf(type,expectedType)) {
    trace.getErrorHandler().typeMismatch(initializer,expectedType,type);
  }
}
