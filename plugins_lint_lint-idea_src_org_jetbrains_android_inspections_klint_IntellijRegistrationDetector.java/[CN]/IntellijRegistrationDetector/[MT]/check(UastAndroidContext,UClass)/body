{
  for (UClass current=clz.getSuperClass(context); current != null; current=current.getSuperClass(context)) {
    if (clz.hasModifier(UastModifier.ABSTRACT) || clz.isObject() || clz.isInterface()|| clz.isEnum()|| clz.isAnnotation()) {
      continue;
    }
    String fqcn=current.getFqName();
    if (fqcn == null) {
      continue;
    }
    if (CLASS_ACTIVITY.equals(fqcn) || CLASS_SERVICE.equals(fqcn) || CLASS_CONTENTPROVIDER.equals(fqcn)) {
      String internalName=clz.getInternalName();
      if (internalName == null) {
        internalName=IntellijLintUtils.getInternalName(clz);
      }
      if (internalName == null) {
        continue;
      }
      String frameworkClass=ClassContext.getInternalName(fqcn);
      Collection<String> registered=mManifestRegistrations != null ? mManifestRegistrations.get(frameworkClass) : null;
      if (registered == null || !registered.contains(internalName)) {
        report(context,clz,frameworkClass);
      }
      break;
    }
  }
  for (  UClass innerClass : clz.getNestedClasses()) {
    check(context,innerClass);
  }
}
