{
  JetType varargElementType=parameterDescriptor.getVarargElementType();
  boolean argumentsAsVararg=varargElementType != null && !hasSpread(resolvedArgument);
  final JetType constantType=argumentsAsVararg ? varargElementType : parameterDescriptor.getType();
  List<CompileTimeConstant<?>> compileTimeConstants=resolveValueArguments(resolvedArgument,constantType,trace);
  List<ConstantValue<?>> constants=KotlinPackage.map(compileTimeConstants,new Function1<CompileTimeConstant<?>,ConstantValue<?>>(){
    @Override public ConstantValue<?> invoke(    CompileTimeConstant<?> constant){
      return constant.toConstantValue(constantType);
    }
  }
);
  if (argumentsAsVararg) {
    if (parameterDescriptor.declaresDefaultValue() && compileTimeConstants.isEmpty())     return null;
    return new ArrayValue(constants,parameterDescriptor.getType());
  }
 else {
    return KotlinPackage.lastOrNull(constants);
  }
}
