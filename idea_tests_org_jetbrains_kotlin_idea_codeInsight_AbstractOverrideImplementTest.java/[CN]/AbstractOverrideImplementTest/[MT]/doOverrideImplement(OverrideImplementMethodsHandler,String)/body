{
  PsiElement elementAtCaret=myFixture.getFile().findElementAt(myFixture.getEditor().getCaretModel().getOffset());
  JetClassOrObject classOrObject=PsiTreeUtil.getParentOfType(elementAtCaret,JetClassOrObject.class);
  assertNotNull("Caret should be inside class or object",classOrObject);
  JetFile jetFile=classOrObject.getContainingJetFile();
  Set<CallableMemberDescriptor> descriptors=handler.collectMethodsToGenerate(classOrObject);
  CallableMemberDescriptor singleToOverride;
  if (memberToOverride == null) {
    List<CallableMemberDescriptor> filtered=KotlinPackage.filter(descriptors,new Function1<CallableMemberDescriptor,Boolean>(){
      @Override public Boolean invoke(      CallableMemberDescriptor descriptor){
        ClassDescriptor any=KotlinBuiltIns.getInstance().getAny();
        for (        CallableMemberDescriptor overridden : OverrideResolver.getOverriddenDeclarations(descriptor)) {
          if (overridden.getContainingDeclaration().equals(any)) {
            return false;
          }
        }
        return true;
      }
    }
);
    assertEquals("Invalid number of available descriptors for override",1,filtered.size());
    singleToOverride=filtered.iterator().next();
  }
 else {
    CallableMemberDescriptor candidateToOverride=null;
    for (    CallableMemberDescriptor callable : descriptors) {
      if (callable.getName().asString().equals(memberToOverride)) {
        if (candidateToOverride != null) {
          throw new IllegalStateException("more then one descriptor with name " + memberToOverride);
        }
        candidateToOverride=callable;
      }
    }
    if (candidateToOverride == null) {
      throw new IllegalStateException("no descriptors to override with name " + memberToOverride + " found");
    }
    singleToOverride=candidateToOverride;
  }
  performGenerateCommand(classOrObject,OverrideImplementMethodsHandler.membersFromDescriptors(jetFile,Collections.singletonList(singleToOverride)));
}
