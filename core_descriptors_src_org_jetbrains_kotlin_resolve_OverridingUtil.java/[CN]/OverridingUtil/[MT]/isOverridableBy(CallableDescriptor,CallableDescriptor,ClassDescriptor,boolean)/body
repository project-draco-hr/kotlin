{
  OverrideCompatibilityInfo basicResult=isOverridableByWithoutExternalConditions(superDescriptor,subDescriptor,checkReturnType);
  boolean wasSuccess=basicResult.getResult() == OVERRIDABLE;
  for (  ExternalOverridabilityCondition externalCondition : EXTERNAL_CONDITIONS) {
    if (externalCondition.getContract() == ExternalOverridabilityCondition.Contract.CONFLICTS_ONLY)     continue;
    if (wasSuccess && externalCondition.getContract() == ExternalOverridabilityCondition.Contract.SUCCESS_ONLY)     continue;
    ExternalOverridabilityCondition.Result result=externalCondition.isOverridable(superDescriptor,subDescriptor,subClassDescriptor);
switch (result) {
case OVERRIDABLE:
      wasSuccess=true;
    break;
case CONFLICT:
  return OverrideCompatibilityInfo.conflict("External condition failed");
case INCOMPATIBLE:
return OverrideCompatibilityInfo.incompatible("External condition");
case UNKNOWN:
}
}
if (!wasSuccess) {
return basicResult;
}
for (ExternalOverridabilityCondition externalCondition : EXTERNAL_CONDITIONS) {
if (externalCondition.getContract() != ExternalOverridabilityCondition.Contract.CONFLICTS_ONLY) continue;
ExternalOverridabilityCondition.Result result=externalCondition.isOverridable(superDescriptor,subDescriptor,subClassDescriptor);
switch (result) {
case CONFLICT:
return OverrideCompatibilityInfo.conflict("External condition failed");
case INCOMPATIBLE:
return OverrideCompatibilityInfo.incompatible("External condition");
case OVERRIDABLE:
throw new IllegalStateException("Contract violation in " + externalCondition.getClass().getName() + " condition. It's not supposed to end with success");
case UNKNOWN:
}
}
return OverrideCompatibilityInfo.success();
}
