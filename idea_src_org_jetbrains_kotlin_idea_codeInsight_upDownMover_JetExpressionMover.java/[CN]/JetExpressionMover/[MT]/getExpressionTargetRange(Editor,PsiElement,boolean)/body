{
  if (sibling instanceof JetIfExpression && !down) {
    JetExpression elseBranch=((JetIfExpression)sibling).getElse();
    if (elseBranch instanceof JetBlockExpression) {
      sibling=elseBranch;
    }
  }
  PsiElement start=sibling;
  PsiElement end=sibling;
  if (sibling.getNode().getElementType() == (down ? JetTokens.RBRACE : JetTokens.LBRACE)) {
    PsiElement parent=sibling.getParent();
    if (!(parent instanceof JetBlockExpression || parent instanceof JetFunctionLiteral))     return null;
    JetBlockExpression newBlock;
    if (parent instanceof JetFunctionLiteral) {
      newBlock=findClosestBlock(((JetFunctionLiteral)parent).getBodyExpression(),down,false);
      if (!down) {
        PsiElement arrow=((JetFunctionLiteral)parent).getArrow();
        if (arrow != null) {
          end=arrow;
        }
      }
    }
 else {
      newBlock=findClosestBlock(sibling,down,true);
    }
    if (newBlock == null)     return null;
    if (PsiTreeUtil.isAncestor(newBlock,parent,true)) {
      PsiElement outermostParent=JetPsiUtil.getOutermostParent(parent,newBlock,true);
      if (down) {
        end=outermostParent;
      }
 else {
        start=outermostParent;
      }
    }
 else {
      if (down) {
        end=newBlock.getLBrace();
      }
 else {
        start=newBlock.getRBrace();
      }
    }
  }
 else {
    PsiElement blockLikeElement;
    JetBlockExpression dslBlock=getDSLLambdaBlock(sibling,down);
    if (dslBlock != null) {
      blockLikeElement=dslBlock.getParent();
    }
 else {
      blockLikeElement=JetPsiUtil.getOutermostDescendantElement(sibling,down,CHECK_BLOCK_LIKE_ELEMENT);
    }
    if (blockLikeElement != null) {
      if (down) {
        end=JetPsiUtil.findChildByType(blockLikeElement,JetTokens.LBRACE);
        if (blockLikeElement instanceof JetFunctionLiteral) {
          PsiElement arrow=((JetFunctionLiteral)blockLikeElement).getArrow();
          if (arrow != null) {
            end=arrow;
          }
        }
      }
 else {
        start=JetPsiUtil.findChildByType(blockLikeElement,JetTokens.RBRACE);
      }
    }
  }
  return start != null && end != null ? new LineRange(start,end,editor.getDocument()) : null;
}
