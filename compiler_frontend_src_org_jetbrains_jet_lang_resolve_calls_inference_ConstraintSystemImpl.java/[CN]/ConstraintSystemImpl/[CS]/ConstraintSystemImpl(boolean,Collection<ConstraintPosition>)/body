{
  this.typeConstructorMismatch=typeConstructorMismatch;
  this.errorConstraintPositions=errorConstraintPositions;
  this.typeSubstitutor=TypeSubstitutor.create(new TypeSubstitution(){
    @Override public TypeProjection get(    TypeConstructor key){
      DeclarationDescriptor declarationDescriptor=key.getDeclarationDescriptor();
      if (declarationDescriptor instanceof TypeParameterDescriptor) {
        TypeParameterDescriptor descriptor=(TypeParameterDescriptor)declarationDescriptor;
        JetType value=getValue(descriptor);
        if (value != null && !dependsOnTypeParameter(value,DONT_CARE.getConstructor())) {
          return new TypeProjection(value);
        }
        return new TypeProjection(DONT_CARE);
      }
      return null;
    }
    @Override public boolean isEmpty(){
      return false;
    }
    @Override public String toString(){
      return typeParameterBounds.toString();
    }
  }
);
}
