{
  TypeCheckingProcedure typeCheckingProcedure=new TypeCheckingProcedure(new TypingConstraints(){
    @Override public boolean assertEqualTypes(    @NotNull JetType a,    @NotNull JetType b,    @NotNull TypeCheckingProcedure typeCheckingProcedure){
      doAddConstraint(EQUAL,a,b,constraintPosition,typeCheckingProcedure);
      return true;
    }
    @Override public boolean assertEqualTypeConstructors(    @NotNull TypeConstructor a,    @NotNull TypeConstructor b){
      throw new IllegalStateException("'assertEqualTypeConstructors' shouldn't be invoked inside 'isSubtypeOf'");
    }
    @Override public boolean assertSubtype(    @NotNull JetType subtype,    @NotNull JetType supertype,    @NotNull TypeCheckingProcedure typeCheckingProcedure){
      doAddConstraint(SUB_TYPE,subtype,supertype,constraintPosition,typeCheckingProcedure);
      return true;
    }
    @Override public boolean noCorrespondingSupertype(    @NotNull JetType subtype,    @NotNull JetType supertype){
      errorConstraintPositions.add(constraintPosition);
      return true;
    }
  }
);
  doAddConstraint(constraintKind,subType,superType,constraintPosition,typeCheckingProcedure);
}
