{
  if (method.isStatic())   return true;
  HierarchicalMethodSignature methodSignature=method.getPsi().getHierarchicalMethodSignature();
  List<HierarchicalMethodSignature> superSignatures=methodSignature.getSuperSignatures();
  PsiType returnType=methodSignature.getSubstitutor().substitute(method.getPsi().getReturnType());
  if (returnType == null)   return true;
  for (  MethodSignatureBackedByPsiMethod superMethodSignature : superSignatures) {
    PsiMethod superMethod=superMethodSignature.getMethod();
    PsiType declaredReturnType=superMethod.getReturnType();
    PsiType superReturnType=superMethodSignature.isRaw() ? TypeConversionUtil.erasure(declaredReturnType) : declaredReturnType;
    if (superReturnType == null || method == superMethod || superMethod.getContainingClass() == null)     continue;
    if (!areMethodsReturnTypesCompatible(superMethodSignature,superReturnType,methodSignature,returnType)) {
      return false;
    }
  }
  return true;
}
