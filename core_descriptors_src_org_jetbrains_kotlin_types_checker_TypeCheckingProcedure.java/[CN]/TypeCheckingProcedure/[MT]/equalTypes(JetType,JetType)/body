{
  if (type1 == type2)   return true;
  if (TypesPackage.isFlexible(type1)) {
    if (TypesPackage.isFlexible(type2)) {
      return !type1.isError() && !type2.isError() && isSubtypeOf(type1,type2)&& isSubtypeOf(type2,type1);
    }
    return heterogeneousEquivalence(type2,type1);
  }
 else   if (TypesPackage.isFlexible(type2)) {
    return heterogeneousEquivalence(type1,type2);
  }
  if (type1.isMarkedNullable() != type2.isMarkedNullable()) {
    return false;
  }
  if (type1.isMarkedNullable()) {
    return constraints.assertEqualTypes(TypeUtils.makeNotNullable(type1),TypeUtils.makeNotNullable(type2),this);
  }
  TypeConstructor constructor1=type1.getConstructor();
  TypeConstructor constructor2=type2.getConstructor();
  if (!constraints.assertEqualTypeConstructors(constructor1,constructor2)) {
    return false;
  }
  List<TypeProjection> type1Arguments=type1.getArguments();
  List<TypeProjection> type2Arguments=type2.getArguments();
  if (type1Arguments.size() != type2Arguments.size()) {
    return false;
  }
  for (int i=0; i < type1Arguments.size(); i++) {
    TypeParameterDescriptor typeParameter1=constructor1.getParameters().get(i);
    TypeProjection typeProjection1=type1Arguments.get(i);
    TypeParameterDescriptor typeParameter2=constructor2.getParameters().get(i);
    TypeProjection typeProjection2=type2Arguments.get(i);
    if (typeProjection1.isStarProjection() && typeProjection2.isStarProjection()) {
      continue;
    }
    if (capture(typeProjection1,typeProjection2,typeParameter1)) {
      continue;
    }
    if (getEffectiveProjectionKind(typeParameter1,typeProjection1) != getEffectiveProjectionKind(typeParameter2,typeProjection2)) {
      return false;
    }
    if (!constraints.assertEqualTypes(typeProjection1.getType(),typeProjection2.getType(),this)) {
      return false;
    }
  }
  return true;
}
