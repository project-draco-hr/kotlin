{
  generateTest("compiler/tests/","JetDiagnosticsTestGenerated",AbstractDiagnosticsTestWithEagerResolve.class,testModel("compiler/testData/diagnostics/tests"),testModel("compiler/testData/diagnostics/tests/script",true,"ktscript","doTest"));
  generateTest("compiler/tests/","JetResolveTestGenerated",AbstractResolveTest.class,testModel("compiler/testData/resolve",true,"resolve","doTest"));
  GenerateRangesCodegenTestData.main(args);
  generateTest("compiler/tests/","BlackBoxCodegenTestGenerated",AbstractBlackBoxCodegenTest.class,testModel("compiler/testData/codegen/box","doTest"));
  generateTest("compiler/tests/","BlackBoxMultiFileCodegenTestGenerated",AbstractBlackBoxCodegenTest.class,testModelWithDirectories(("compiler/testData/codegen/boxMultiFile"),"doTestMultiFile"));
  generateTest("compiler/tests/","BlackBoxWithJavaCodegenTestGenerated",AbstractBlackBoxCodegenTest.class,testModel("compiler/testData/codegen/boxWithJava","doTestWithJava"));
  generateTest("compiler/tests/","BlackBoxWithStdlibCodegenTestGenerated",AbstractBlackBoxCodegenTest.class,testModel("compiler/testData/codegen/boxWithStdlib","doTestWithStdlib"));
  generateTest("compiler/tests/","BytecodeTextTestGenerated",AbstractBytecodeTextTest.class,testModel("compiler/testData/codegen/bytecodeText"));
  generateTest("compiler/tests/","TopLevelMembersInvocationTestGenerated",AbstractTopLevelMembersInvocationTest.class,testModelWithDirectories("compiler/testData/codegen/topLevelMemberInvocation","doTest"));
  generateTest("compiler/tests/","CheckLocalVariablesTableTestGenerated",AbstractCheckLocalVariablesTableTest.class,testModel("compiler/testData/checkLocalVariablesTable","doTest"));
  generateTest("compiler/tests/","WriteFlagsTestGenerated",AbstractWriteFlagsTest.class,testModel("compiler/testData/writeFlags"));
  generateTest("compiler/tests/","DefaultArgumentsReflectionTestGenerated",AbstractDefaultConstructorCodegenTest.class,testModel("compiler/testData/codegen/defaultArguments/reflection"));
  generateTest("compiler/tests/","LoadCompiledKotlinTestGenerated",AbstractLoadCompiledKotlinTest.class,testModel("compiler/testData/loadKotlin","doTestWithAccessors"));
  generateTest("compiler/tests/","LoadJavaTestGenerated",AbstractLoadJavaTest.class,testModel("compiler/testData/loadJava/compiledJavaCompareWithKotlin",true,"java","doTest"),testModel("compiler/testData/loadJava/compiledJavaIncludeObjectMethods",true,"java","doTestCompiledJavaIncludeObjectMethods"),testModel("compiler/testData/loadJava/compiledJava",true,"java","doTestCompiledJava"),testModel("compiler/testData/loadJava/sourceJava",true,"java","doTestSourceJava"),testModel("compiler/testData/loadJava/javaAgainstKotlin",true,"txt","doTestJavaAgainstKotlin"));
  generateTest("compiler/tests/","CompileJavaAgainstKotlinTestGenerated",AbstractCompileJavaAgainstKotlinTest.class,testModel("compiler/testData/compileJavaAgainstKotlin","doTest"));
  generateTest("compiler/tests/","CompileKotlinAgainstKotlinTestGenerated",AbstractCompileKotlinAgainstKotlinTest.class,testModel("compiler/testData/compileKotlinAgainstKotlin",true,"A.kt","doTest"));
  generateTest("compiler/tests/","CompileKotlinAgainstCustomJavaGenerated",AbstractCompileKotlinAgainstCustomJavaTest.class,testModel("compiler/testData/compileKotlinAgainstCustomJava"));
  generateTest("compiler/tests/","LazyResolveDescriptorRendererTestGenerated",AbstractLazyResolveDescriptorRendererTest.class,testModel("compiler/testData/renderer"));
  generateTest("compiler/tests","LazyResolveTestGenerated",AbstractLazyResolveTest.class,testModel("compiler/testData/resolve/imports",false,"resolve","doTest"));
  generateTest("compiler/tests/","LazyResolveNamespaceComparingTestGenerated",AbstractLazyResolveNamespaceComparingTest.class,testModel("compiler/testData/loadKotlin","doTestCheckingPrimaryConstructorsAndAccessors"),testModel("compiler/testData/loadJava/compiledJavaCompareWithKotlin","doTestNotCheckingPrimaryConstructors"),testModel("compiler/testData/lazyResolve/namespaceComparator","doTestCheckingPrimaryConstructors"));
  generateTest("compiler/tests/","ModuleXmlParserTestGenerated",AbstractModuleXmlParserTest.class,testModel("compiler/testData/modules.xml",true,"xml","doTest"));
  generateTest("idea/tests/","JetPsiMatcherTest",AbstractJetPsiMatcherTest.class,testModel("idea/testData/jetPsiMatcher/expressions","doTestExpressions"),testModel("idea/testData/jetPsiMatcher/types","doTestTypes"));
  generateTest("idea/tests/","JetPsiCheckerTestGenerated",AbstractJetPsiCheckerTest.class,testModel("idea/testData/checker",false,"kt","doTest"),testModel("idea/testData/checker/regression"),testModel("idea/testData/checker/rendering"),testModel("idea/testData/checker/infos",false,"kt","doTestWithInfos"));
  generateTest("idea/tests/","JetJsCheckerTestGenerated",AbstractJetJsCheckerTest.class,testModel("idea/testData/checker/js",false,"kt","doTest"));
  generateTest("idea/tests/","QuickFixTestGenerated",AbstractQuickFixTest.class,new SimpleTestClassModel(new File("idea/testData/quickfix"),true,Pattern.compile("^before(\\w+)\\.kt$"),"doTest"));
  generateTest("idea/tests/","JetBasicJSCompletionTestGenerated",AbstractJetJSCompletionTest.class,testModel("idea/testData/completion/basic/common"),testModel("idea/testData/completion/basic/js"));
  generateTest("idea/tests/","JetBasicJavaCompletionTestGenerated",AbstractJavaCompletionTest.class,testModel("idea/testData/completion/basic/common"),testModel("idea/testData/completion/basic/java"));
  generateTest("idea/tests/","JetKeywordCompletionTestGenerated",AbstractKeywordCompletionTest.class,testModel("idea/testData/completion/keywords",false,"doTest"));
  generateTest("idea/tests","JetJavaLibCompletionTestGenerated",AbstractJavaWithLibCompletionTest.class,testModel("idea/testData/completion/basic/custom",false,"doTestWithJar"));
  generateTest("idea/tests","JetGotoSuperTestGenerated",JetAbstractGotoSuperTest.class,testModel("idea/testData/navigation/gotoSuper",false,"test","doTest"));
  generateTest("idea/tests/","QuickFixMultiFileTestGenerated",AbstractQuickFixMultiFileTest.class,new SimpleTestClassModel(new File("idea/testData/quickfix"),true,Pattern.compile("^(\\w+)\\.before\\.Main\\.kt$"),"doTestWithExtraFile"));
  generateTest("idea/tests/","DeprecatedHighlightingTestGenerated",AbstractDeprecatedHighlightingTest.class,testModel("idea/testData/highlighter/deprecated"));
  generateTest("idea/tests/","KotlinFoldingTestGenerated",AbstractKotlinFoldingTest.class,testModel("idea/testData/folding"));
  generateTest("idea/tests/","SurroundWithTestGenerated",AbstractSurroundWithTest.class,testModel("idea/testData/codeInsight/surroundWith/if","doTestWithIfSurrounder"),testModel("idea/testData/codeInsight/surroundWith/ifElse","doTestWithIfElseSurrounder"),testModel("idea/testData/codeInsight/surroundWith/not","doTestWithNotSurrounder"),testModel("idea/testData/codeInsight/surroundWith/parentheses","doTestWithParenthesesSurrounder"),testModel("idea/testData/codeInsight/surroundWith/stringTemplate","doTestWithStringTemplateSurrounder"),testModel("idea/testData/codeInsight/surroundWith/when","doTestWithWhenSurrounder"),testModel("idea/testData/codeInsight/surroundWith/tryCatch","doTestWithTryCatchSurrounder"),testModel("idea/testData/codeInsight/surroundWith/tryCatchFinally","doTestWithTryCatchFinallySurrounder"),testModel("idea/testData/codeInsight/surroundWith/tryFinally","doTestWithTryFinallySurrounder"),testModel("idea/testData/codeInsight/surroundWith/functionLiteral","doTestWithFunctionLiteralSurrounder"));
  generateTest("idea/tests/","CodeTransformationsTestGenerated",AbstractCodeTransformationTest.class,testModel("idea/testData/intentions/branched/folding/ifToAssignment","doTestFoldIfToAssignment"),testModel("idea/testData/intentions/branched/folding/ifToReturn","doTestFoldIfToReturn"),testModel("idea/testData/intentions/branched/folding/ifToReturnAsymmetrically","doTestFoldIfToReturnAsymmetrically"),testModel("idea/testData/intentions/branched/folding/whenToAssignment","doTestFoldWhenToAssignment"),testModel("idea/testData/intentions/branched/folding/whenToReturn","doTestFoldWhenToReturn"),testModel("idea/testData/intentions/branched/unfolding/assignmentToIf","doTestUnfoldAssignmentToIf"),testModel("idea/testData/intentions/branched/unfolding/assignmentToWhen","doTestUnfoldAssignmentToWhen"),testModel("idea/testData/intentions/branched/unfolding/propertyToIf","doTestUnfoldPropertyToIf"),testModel("idea/testData/intentions/branched/unfolding/propertyToWhen","doTestUnfoldPropertyToWhen"),testModel("idea/testData/intentions/branched/unfolding/returnToIf","doTestUnfoldReturnToIf"),testModel("idea/testData/intentions/branched/unfolding/returnToWhen","doTestUnfoldReturnToWhen"),testModel("idea/testData/intentions/branched/ifWhen/ifToWhen","doTestIfToWhen"),testModel("idea/testData/intentions/branched/ifWhen/whenToIf","doTestWhenToIf"),testModel("idea/testData/intentions/branched/when/flatten","doTestFlattenWhen"),testModel("idea/testData/intentions/branched/when/introduceSubject","doTestIntroduceWhenSubject"),testModel("idea/testData/intentions/branched/when/eliminateSubject","doTestEliminateWhenSubject"),testModel("idea/testData/intentions/declarations/split","doTestSplitProperty"),testModel("idea/testData/intentions/declarations/join","doTestJoinProperty"),testModel("idea/testData/intentions/removeUnnecessaryParentheses","doTestRemoveUnnecessaryParentheses"));
  generateTest("idea/tests/","HierarchyTestGenerated",AbstractHierarchyTest.class,testModelWithDirectories("idea/testData/hierarchy/class/type","doTypeClassHierarchyTest"),testModelWithDirectories("idea/testData/hierarchy/class/super","doSuperClassHierarchyTest"),testModelWithDirectories("idea/testData/hierarchy/class/sub","doSubClassHierarchyTest"));
  generateTest("idea/tests/","CodeMoverTestGenerated",AbstractCodeMoverTest.class,testModel("idea/testData/codeInsight/moveUpDown/classBodyDeclarations","doTestClassBodyDeclaration"),testModel("idea/testData/codeInsight/moveUpDown/closingBraces","doTestExpression"),testModel("idea/testData/codeInsight/moveUpDown/expressions","doTestExpression"));
}
