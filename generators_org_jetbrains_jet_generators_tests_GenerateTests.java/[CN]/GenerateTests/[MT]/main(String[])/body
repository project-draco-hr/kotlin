{
  generateTest("compiler/tests/","JetDiagnosticsTestGenerated",AbstractDiagnosticsTestWithEagerResolve.class,testModel("compiler/testData/diagnostics/tests"),testModel("compiler/testData/diagnostics/tests/script",true,"ktscript","doTest"));
  GenerateRangesCodegenTestData.main(args);
  generateTest("compiler/tests/","BlackBoxCodegenTestGenerated",AbstractBlackBoxCodegenTest.class,testModel("compiler/testData/codegen/box","doTest"));
  generateTest("compiler/tests/","BlackBoxMultiFileCodegenTestGenerated",AbstractBlackBoxCodegenTest.class,new SimpleTestClassModel(new File("compiler/testData/codegen/boxMultiFile"),false,Pattern.compile("^(.+)$"),"doTestMultiFile"));
  generateTest("compiler/tests/","BlackBoxWithJavaCodegenTestGenerated",AbstractBlackBoxCodegenTest.class,testModel("compiler/testData/codegen/boxWithJava","doTestWithJava"));
  generateTest("compiler/tests/","BlackBoxWithStdlibCodegenTestGenerated",AbstractBlackBoxCodegenTest.class,testModel("compiler/testData/codegen/boxWithStdlib","doTestWithStdlib"));
  generateTest("compiler/tests/","BytecodeTextTestGenerated",AbstractBytecodeTextTest.class,testModel("compiler/testData/codegen/bytecodeText"));
  generateTest("compiler/tests/","CheckLocalVariablesTableTestGenerated",AbstractCheckLocalVariablesTableTest.class,testModel("compiler/testData/checkLocalVariablesTable","doTest"));
  generateTest("compiler/tests/","WriteFlagsTestGenerated",AbstractWriteFlagsTest.class,testModel("compiler/testData/writeFlags"));
  generateTest("compiler/tests/","DefaultArgumentsReflectionTestGenerated",AbstractDefaultConstructorCodegenTest.class,testModel("compiler/testData/codegen/defaultArguments/reflection"));
  generateTest("compiler/tests/","LoadCompiledKotlinTestGenerated",AbstractLoadCompiledKotlinTest.class,testModel("compiler/testData/loadKotlin"));
  generateTest("compiler/tests/","LoadJavaTestGenerated",AbstractLoadJavaTest.class,testModel("compiler/testData/loadJava",true,"java","doTest"));
  generateTest("compiler/tests/","CompileJavaAgainstKotlinTestGenerated",AbstractCompileJavaAgainstKotlinTest.class,testModel("compiler/testData/compileJavaAgainstKotlin","doTest"));
  generateTest("compiler/tests/","CompileKotlinAgainstKotlinTestGenerated",AbstractCompileKotlinAgainstKotlinTest.class,testModel("compiler/testData/compileKotlinAgainstKotlin",true,"A.kt","doTest"));
  generateTest("compiler/tests/","CompileKotlinAgainstCustomJavaGenerated",AbstractCompileKotlinAgainstCustomJavaTest.class,testModel("compiler/testData/compileKotlinAgainstCustomJava"));
  generateTest("compiler/tests/","LazyResolveDescriptorRendererTestGenerated",AbstractLazyResolveDescriptorRendererTest.class,testModel("compiler/testData/renderer"));
  generateTest("compiler/tests","LazyResolveTestGenerated",AbstractLazyResolveTest.class,testModel("compiler/testData/resolve/imports",false,"resolve","doTest"));
  generateTest("compiler/tests/","LazyResolveNamespaceComparingTestGenerated",AbstractLazyResolveNamespaceComparingTest.class,testModel("compiler/testData/loadKotlin","doTestCheckingPrimaryConstructors"),testModel("compiler/testData/loadJava","doTestNotCheckingPrimaryConstructors"),testModel("compiler/testData/lazyResolve/namespaceComparator","doTestCheckingPrimaryConstructors"));
  generateTest("idea/tests/","JetPsiCheckerTestGenerated",AbstractJetPsiCheckerTest.class,testModel("idea/testData/checker",false,"kt","doTest"),testModel("idea/testData/checker/regression"),testModel("idea/testData/checker/rendering"),testModel("idea/testData/checker/infos",false,"kt","doTestWithInfos"));
  generateTest("idea/tests/","QuickFixTestGenerated",AbstractQuickFixTest.class,new SimpleTestClassModel(new File("idea/testData/quickfix"),true,Pattern.compile("^before(\\w+)\\.kt$"),"doTest"));
  generateTest("idea/tests/","QuickFixMultiFileTestGenerated",AbstractQuickFixMultiFileTest.class,new SimpleTestClassModel(new File("idea/testData/quickfix"),true,Pattern.compile("^(\\w+)\\.before\\.Main\\.kt$"),"doTestWithExtraFile"));
  generateTest("idea/tests/","DeprecatedHighlightingTestGenerated",AbstractDeprecatedHighlightingTest.class,testModel("idea/testData/highlighter/deprecated"));
  generateTest("idea/tests/","SurroundWithIfTestGenerated",AbstractSurroundWithTest.class,testModel("idea/testData/codeInsight/surroundWith/if","doTestWithIfSurrounder"));
  generateTest("idea/tests/","SurroundWithIfElseTestGenerated",AbstractSurroundWithTest.class,testModel("idea/testData/codeInsight/surroundWith/ifElse","doTestWithIfElseSurrounder"));
}
