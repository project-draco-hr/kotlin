{
  if (!diagnostic.isValid())   return false;
  String render;
  if (diagnostic instanceof MyDiagnostic) {
    render=((MyDiagnostic)diagnostic).message;
  }
 else {
    render=DefaultErrorMessages.render(diagnostic);
  }
  if (incompatibleFilesFound && Errors.UNRESOLVED_REFERENCE_DIAGNOSTICS.contains(diagnostic.getFactory())) {
    render+="\n(note: this may be caused by the fact that some classes compiled with an incompatible version of Kotlin " + "were found in the classpath. Such classes cannot be loaded properly by this version of Kotlin compiler. " + "See below for more information)";
  }
  PsiFile file=diagnostic.getPsiFile();
  messageCollector.report(convertSeverity(diagnostic.getSeverity()),render,MessageUtil.psiFileToMessageLocation(file,file.getName(),DiagnosticUtils.getLineAndColumn(diagnostic)));
  return diagnostic.getSeverity() == Severity.ERROR;
}
