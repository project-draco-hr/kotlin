{
  return typeInfoPerfCounter.time(new Function0<KotlinTypeInfo>(){
    @Override public KotlinTypeInfo invoke(){
      try {
        KotlinTypeInfo recordedTypeInfo=BindingContextUtils.getRecordedTypeInfo(expression,context.trace.getBindingContext());
        if (recordedTypeInfo != null) {
          return recordedTypeInfo;
        }
        KotlinTypeInfo result;
        try {
          result=expression.accept(visitor,context);
          if (context.trace.get(BindingContext.PROCESSED,expression) == Boolean.TRUE) {
            KotlinType type=context.trace.getBindingContext().getType(expression);
            return result.replaceType(type);
          }
          if (result.getType() instanceof DeferredType) {
            result=result.replaceType(((DeferredType)result.getType()).getDelegate());
          }
          context.trace.record(BindingContext.EXPRESSION_TYPE_INFO,expression,result);
        }
 catch (        ReenteringLazyValueComputationException e) {
          context.trace.report(TYPECHECKER_HAS_RUN_INTO_RECURSIVE_PROBLEM.on(expression));
          result=TypeInfoFactoryKt.noTypeInfo(context);
        }
        context.trace.record(BindingContext.PROCESSED,expression);
        BindingContextUtilsKt.recordScope(context.trace,context.scope,expression);
        BindingContextUtilsKt.recordDataFlowInfo(context.replaceDataFlowInfo(result.getDataFlowInfo()),expression);
        try {
          recordTypeInfo(expression,result);
        }
 catch (        ReenteringLazyValueComputationException e) {
          context.trace.report(TYPECHECKER_HAS_RUN_INTO_RECURSIVE_PROBLEM.on(expression));
          return TypeInfoFactoryKt.noTypeInfo(context);
        }
        return result;
      }
 catch (      ProcessCanceledException e) {
        throw e;
      }
catch (      KotlinFrontEndException e) {
        throw e;
      }
catch (      Throwable e) {
        context.trace.report(Errors.EXCEPTION_FROM_ANALYZER.on(expression,e));
        logOrThrowException(expression,e);
        return TypeInfoFactoryKt.createTypeInfo(ErrorUtils.createErrorType(e.getClass().getSimpleName() + " from analyzer"),context);
      }
    }
  }
);
}
