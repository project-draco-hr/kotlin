{
  try {
    JetTypeInfo recordedTypeInfo=BindingContextUtils.getRecordedTypeInfo(expression,context.trace.getBindingContext());
    if (recordedTypeInfo != null) {
      return recordedTypeInfo;
    }
    JetTypeInfo result;
    try {
      result=expression.accept(visitor,context);
      if (Boolean.TRUE.equals(context.trace.get(BindingContext.PROCESSED,expression))) {
        JetType type=context.trace.getBindingContext().getType(expression);
        return result.replaceType(type);
      }
      if (result.getType() instanceof DeferredType) {
        result=result.replaceType(((DeferredType)result.getType()).getDelegate());
      }
      context.trace.record(BindingContext.EXPRESSION_TYPE_INFO,expression,result);
    }
 catch (    ReenteringLazyValueComputationException e) {
      context.trace.report(TYPECHECKER_HAS_RUN_INTO_RECURSIVE_PROBLEM.on(expression));
      result=TypeInfoFactoryPackage.createTypeInfo(context);
    }
    context.trace.record(BindingContext.PROCESSED,expression);
    recordScopeAndDataFlowInfo(context.replaceDataFlowInfo(result.getDataFlowInfo()),expression);
    return result;
  }
 catch (  ProcessCanceledException e) {
    throw e;
  }
catch (  KotlinFrontEndException e) {
    throw e;
  }
catch (  Throwable e) {
    context.trace.report(Errors.EXCEPTION_FROM_ANALYZER.on(expression,e));
    logOrThrowException(expression,e);
    return TypeInfoFactoryPackage.createTypeInfo(ErrorUtils.createErrorType(e.getClass().getSimpleName() + " from analyzer"),context);
  }
}
