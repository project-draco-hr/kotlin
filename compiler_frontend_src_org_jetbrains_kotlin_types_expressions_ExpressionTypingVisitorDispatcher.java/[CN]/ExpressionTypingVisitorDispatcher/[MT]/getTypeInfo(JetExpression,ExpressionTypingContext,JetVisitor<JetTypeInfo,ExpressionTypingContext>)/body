{
  try {
    JetTypeInfo recordedTypeInfo=BindingContextUtils.getRecordedTypeInfo(expression,context.trace.getBindingContext());
    if (recordedTypeInfo != null) {
      return recordedTypeInfo;
    }
    JetTypeInfo result;
    try {
      result=expression.accept(visitor,context);
      if (context.trace.get(BindingContext.PROCESSED,expression)) {
        JetType type=context.trace.getBindingContext().get(BindingContext.EXPRESSION_TYPE,expression);
        if (result instanceof TypeInfoWithJumpInfo) {
          TypeInfoWithJumpInfo jumpTypeInfo=(TypeInfoWithJumpInfo)result;
          return jumpTypeInfo.replaceType(type);
        }
 else {
          return JetTypeInfo.create(type,result.getDataFlowInfo());
        }
      }
      if (result.getType() instanceof DeferredType) {
        result=JetTypeInfo.create(((DeferredType)result.getType()).getDelegate(),result.getDataFlowInfo());
      }
      if (result.getType() != null) {
        context.trace.record(BindingContext.EXPRESSION_TYPE,expression,result.getType());
      }
      if (result instanceof TypeInfoWithJumpInfo) {
        TypeInfoWithJumpInfo jumpTypeInfo=(TypeInfoWithJumpInfo)result;
        if (jumpTypeInfo.getJumpOutPossible()) {
          context.trace.record(BindingContext.EXPRESSION_JUMP_OUT_POSSIBLE,expression,true);
        }
      }
    }
 catch (    ReenteringLazyValueComputationException e) {
      context.trace.report(TYPECHECKER_HAS_RUN_INTO_RECURSIVE_PROBLEM.on(expression));
      result=JetTypeInfo.create(null,context.dataFlowInfo);
    }
    context.trace.record(BindingContext.PROCESSED,expression);
    recordScopeAndDataFlowInfo(context.replaceDataFlowInfo(result.getDataFlowInfo()),expression);
    return result;
  }
 catch (  ProcessCanceledException e) {
    throw e;
  }
catch (  KotlinFrontEndException e) {
    throw e;
  }
catch (  Throwable e) {
    context.trace.report(Errors.EXCEPTION_FROM_ANALYZER.on(expression,e));
    logOrThrowException(expression,e);
    return JetTypeInfo.create(ErrorUtils.createErrorType(e.getClass().getSimpleName() + " from analyzer"),context.dataFlowInfo);
  }
}
