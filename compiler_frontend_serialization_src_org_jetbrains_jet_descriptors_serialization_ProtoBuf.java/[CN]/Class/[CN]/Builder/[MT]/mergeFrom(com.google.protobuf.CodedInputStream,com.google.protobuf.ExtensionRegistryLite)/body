{
  while (true) {
    int tag=input.readTag();
switch (tag) {
case 0:
      return this;
default :
{
      if (!parseUnknownField(input,extensionRegistry,tag)) {
        return this;
      }
      break;
    }
case 8:
{
    bitField0_|=0x00000001;
    flags_=input.readInt32();
    break;
  }
case 18:
{
  bitField0_|=0x00000002;
  extraVisibility_=input.readBytes();
  break;
}
case 32:
{
bitField0_|=0x00000004;
name_=input.readInt32();
break;
}
case 42:
{
org.jetbrains.jet.descriptors.serialization.ProtoBuf.TypeParameter.Builder subBuilder=org.jetbrains.jet.descriptors.serialization.ProtoBuf.TypeParameter.newBuilder();
input.readMessage(subBuilder,extensionRegistry);
addTypeParameter(subBuilder.buildPartial());
break;
}
case 50:
{
org.jetbrains.jet.descriptors.serialization.ProtoBuf.Type.Builder subBuilder=org.jetbrains.jet.descriptors.serialization.ProtoBuf.Type.newBuilder();
input.readMessage(subBuilder,extensionRegistry);
addSupertype(subBuilder.buildPartial());
break;
}
case 56:
{
ensureNestedClassNameIsMutable();
nestedClassName_.add(input.readInt32());
break;
}
case 58:
{
int length=input.readRawVarint32();
int limit=input.pushLimit(length);
while (input.getBytesUntilLimit() > 0) {
addNestedClassName(input.readInt32());
}
input.popLimit(limit);
break;
}
case 64:
{
ensureNestedObjectNameIsMutable();
nestedObjectName_.add(input.readInt32());
break;
}
case 66:
{
int length=input.readRawVarint32();
int limit=input.pushLimit(length);
while (input.getBytesUntilLimit() > 0) {
addNestedObjectName(input.readInt32());
}
input.popLimit(limit);
break;
}
case 72:
{
bitField0_|=0x00000080;
classObjectPresent_=input.readBool();
break;
}
case 82:
{
org.jetbrains.jet.descriptors.serialization.ProtoBuf.Callable.Builder subBuilder=org.jetbrains.jet.descriptors.serialization.ProtoBuf.Callable.newBuilder();
if (hasPrimaryConstructor()) {
subBuilder.mergeFrom(getPrimaryConstructor());
}
input.readMessage(subBuilder,extensionRegistry);
setPrimaryConstructor(subBuilder.buildPartial());
break;
}
case 90:
{
org.jetbrains.jet.descriptors.serialization.ProtoBuf.Callable.Builder subBuilder=org.jetbrains.jet.descriptors.serialization.ProtoBuf.Callable.newBuilder();
input.readMessage(subBuilder,extensionRegistry);
addMember(subBuilder.buildPartial());
break;
}
case 96:
{
ensureEnumEntryIsMutable();
enumEntry_.add(input.readInt32());
break;
}
case 98:
{
int length=input.readRawVarint32();
int limit=input.pushLimit(length);
while (input.getBytesUntilLimit() > 0) {
addEnumEntry(input.readInt32());
}
input.popLimit(limit);
break;
}
}
}
}
