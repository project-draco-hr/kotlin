{
  String[] filePaths;
  if (withJava) {
    filePaths=new String[]{path,path.endsWith(".java") ? path.replace(".java",".kt") : path.replace(".kt",".java")};
  }
 else {
    filePaths=new String[]{path};
  }
  Editor[] editors=new Editor[filePaths.length];
  int i=0;
  for (  String filePath : filePaths) {
    myFixture.configureByFile(filePath);
    editors[i++]=myFixture.getEditor();
  }
  PsiElement elementAtCaret=null;
  for (  Editor editor : editors) {
    elementAtCaret=TargetElementUtilBase.findTargetElement(editor,TargetElementUtilBase.REFERENCED_ELEMENT_ACCEPTED | TargetElementUtilBase.ELEMENT_NAME_ACCEPTED);
    if (elementAtCaret != null)     break;
  }
  assertNotNull("Couldn't find element at caret position",elementAtCaret);
  T element=PsiTreeUtil.getParentOfType(elementAtCaret,elementClass,false);
  try {
    SafeDeleteHandler.invoke(getProject(),new PsiElement[]{element},null,true,null);
    for (int j=0; j < filePaths.length; j++) {
      assertSameLinesWithFile(new File(filePaths[j] + ".after").getAbsolutePath(),editors[j].getDocument().getText());
    }
  }
 catch (  BaseRefactoringProcessor.ConflictsInTestsException e) {
    List<String> messages=new ArrayList<String>(e.getMessages());
    Collections.sort(messages);
    File messageFile=new File(path + ".messages");
    assertSameLinesWithFile(messageFile.getAbsolutePath(),StringUtil.join(messages,"\n"));
  }
}
