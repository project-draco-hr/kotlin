{
  double[] u=new double[n];
  double[] v=new double[n];
  double[] tmp=new double[n];
  for (int i=0; i < n; i++)   u[i]=1.0;
  int nthread=Runtime.getRuntime().availableProcessors();
  Approximate.barrier=new CyclicBarrier(nthread);
  int chunk=n / nthread;
  Approximate[] ap=new Approximate[nthread];
  for (int i=0; i < nthread; i++) {
    int r1=i * chunk;
    int r2=(i < (nthread - 1)) ? r1 + chunk : n;
    ap[i]=new Approximate(u,v,tmp,r1,r2);
  }
  double vBv=0, vv=0;
  for (int i=0; i < nthread; i++) {
    try {
      ap[i].join();
      vBv+=ap[i].m_vBv;
      vv+=ap[i].m_vv;
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  return Math.sqrt(vBv / vv);
}
