{
  generateTest("compiler/tests/","JetDiagnosticsTestGenerated",AbstractDiagnosticsTestWithEagerResolve.class,new SimpleTestClassModel(new File("compiler/testData/diagnostics/tests"),true,"kt","doTest"),new SimpleTestClassModel(new File("compiler/testData/diagnostics/tests/script"),true,"ktscript","doTest"));
  generateTest("compiler/tests/","DataClassCodegenTestGenerated",AbstractDataClassCodegenTest.class,new SimpleTestClassModel(new File("compiler/testData/codegen/dataClasses"),true,"kt","blackBoxFileByFullPath"));
  generateTest("compiler/tests/","IntrinsicsTestGenerated",AbstractIntrinsicsTestCase.class,new SimpleTestClassModel(new File("compiler/testData/codegen/intrinsics"),true,"kt","blackBoxFileByFullPath"));
  generateTest("compiler/tests/","MultiDeclTestGenerated",AbstractMultiDeclTestCase.class,new SimpleTestClassModel(new File("compiler/testData/codegen/multiDecl"),true,"kt","blackBoxFileByFullPath"));
  generateTest("compiler/tests/","WriteFlagsTestGenerated",AbstractWriteFlagsTest.class,new SimpleTestClassModel(new File("compiler/testData/writeFlags"),true,"kt","doTest"));
  generateTest("compiler/tests/","LabelGenTestGenerated",AbstractLabelGenTest.class,new SimpleTestClassModel(new File("compiler/testData/codegen/label"),true,"kt","doTest"));
  generateTest("compiler/tests/","LoadCompiledKotlinTestGenerated",AbstractLoadCompiledKotlinTest.class,new SimpleTestClassModel(new File("compiler/testData/loadKotlin"),true,"kt","doTest"));
  generateTest("compiler/tests/","LoadJavaTestGenerated",AbstractLoadJavaTest.class,new SimpleTestClassModel(new File("compiler/testData/loadJava"),true,"java","doTest"));
  generateTest("compiler/tests/","LazyResolveDescriptorRendererTestGenerated",AbstractLazyResolveDescriptorRendererTest.class,new SimpleTestClassModel(new File("compiler/testData/renderer"),true,"kt","doTest"),new SimpleTestClassModel(new File("compiler/testData/lazyResolve/descriptorRenderer"),true,"kt","doTest"));
  generateTest("compiler/tests/","LazyResolveNamespaceComparingTestGenerated",AbstractLazyResolveNamespaceComparingTest.class,new SimpleTestClassModel(new File("compiler/testData/loadKotlin"),true,"kt","doTestSinglePackage"),new SimpleTestClassModel(new File("compiler/testData/loadJava"),true,"kt","doTestSinglePackage"),new SimpleTestClassModel(new File("compiler/testData/lazyResolve/namespaceComparator"),true,"kt","doTestSinglePackage"));
  generateTest("idea/tests/","JetPsiCheckerTestGenerated",AbstractJetPsiCheckerTest.class,new SimpleTestClassModel(new File("idea/testData/checker"),false,"kt","doTest"),new SimpleTestClassModel(new File("idea/testData/checker/regression"),true,"kt","doTest"),new SimpleTestClassModel(new File("idea/testData/checker/rendering"),true,"kt","doTest"),new SimpleTestClassModel(new File("idea/testData/checker/infos"),true,"kt","doTestWithInfos"));
  generateTest("idea/tests/","DeprecatedHighlightingTestGenerated",AbstractDeprecatedHighlightingTest.class,new SimpleTestClassModel(new File("idea/testData/highlighter/deprecated"),true,"kt","doTest"));
}
