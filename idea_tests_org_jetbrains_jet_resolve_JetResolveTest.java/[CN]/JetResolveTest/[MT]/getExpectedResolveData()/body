{
  Project project=getProject();
  JetStandardLibrary lib=JetStandardLibrary.getJetStandardLibrary(project);
  Map<String,DeclarationDescriptor> nameToDescriptor=new HashMap<String,DeclarationDescriptor>();
  nameToDescriptor.put("std::Int.plus(Int)",standardFunction(lib.getInt(),"plus",lib.getIntType()));
  Map<String,PsiElement> nameToDeclaration=new HashMap<String,PsiElement>();
  nameToDeclaration.put("java::java.util.Collections.emptyList()",findMethod(findClass("java.util.Collections"),"emptyList"));
  nameToDeclaration.put("java::java.util.Collections",findClass("java.util.Collections"));
  nameToDeclaration.put("java::java.util.List",findClass("java.util.List"));
  nameToDeclaration.put("java::java",findPackage("java"));
  nameToDeclaration.put("java::java.util",findPackage("java.util"));
  nameToDeclaration.put("java::java.lang",findPackage("java.lang"));
  nameToDeclaration.put("java::java.lang.Object",findClass("java.lang.Object"));
  nameToDeclaration.put("java::java.lang.System",findClass("java.lang.System"));
  PsiMethod[] methods=findClass("java.io.PrintStream").findMethodsByName("print",true);
  nameToDeclaration.put("java::java.io.PrintStream.print(Object)",methods[8]);
  nameToDeclaration.put("java::java.io.PrintStream.print(Int)",methods[2]);
  nameToDeclaration.put("java::java.lang.System.out",findClass("java.lang.System").findFieldByName("out",true));
  return new ExpectedResolveData(nameToDescriptor,nameToDeclaration);
}
