{
  FunctionGroup functionGroup=classDescriptor.getMemberScope(Collections.<TypeProjection>emptyList()).getFunctionGroup(name);
  Collection<FunctionDescriptor> functions=functionGroup.getPossiblyApplicableFunctions(Collections.<Type>emptyList(),Collections.singletonList(parameterType));
  for (  FunctionDescriptor function : functions) {
    if (function.getUnsubstitutedValueParameters().get(0).getType().equals(parameterType)) {
      return function;
    }
  }
  throw new IllegalArgumentException("Not found: std::" + classDescriptor.getName() + "."+ name+ "("+ parameterType+ ")");
}
