{
  FunctionGroup functionGroup=classDescriptor.getMemberScope(typeArguments).getFunctionGroup(name);
  List<JetType> parameterTypeList=Arrays.asList(parameterType);
  Collection<FunctionDescriptor> functions=functionGroup.getPossiblyApplicableFunctions(Collections.<JetType>emptyList(),parameterTypeList);
  for (  FunctionDescriptor function : functions) {
    List<ValueParameterDescriptor> unsubstitutedValueParameters=function.getUnsubstitutedValueParameters();
    for (int i=0, unsubstitutedValueParametersSize=unsubstitutedValueParameters.size(); i < unsubstitutedValueParametersSize; i++) {
      ValueParameterDescriptor unsubstitutedValueParameter=unsubstitutedValueParameters.get(i);
      if (unsubstitutedValueParameter.getType().equals(parameterType[i])) {
        return function;
      }
    }
  }
  throw new IllegalArgumentException("Not found: std::" + classDescriptor.getName() + "."+ name+ "("+ parameterTypeList+ ")");
}
