{
  JetPropertyAccessor getter=jetProperty.getGetter();
  if (getter != null) {
    trace.report(ACCESSOR_FOR_DELEGATED_PROPERTY.on(getter));
  }
  JetPropertyAccessor setter=jetProperty.getSetter();
  if (setter != null) {
    trace.report(ACCESSOR_FOR_DELEGATED_PROPERTY.on(setter));
  }
  JetScope propertyScope=getScopeForProperty(jetProperty);
  JetScope propertyDeclarationInnerScope=descriptorResolver.getPropertyDeclarationInnerScopeForInitializer(propertyScope,propertyDescriptor.getTypeParameters(),NO_RECEIVER_PARAMETER,trace);
  JetType delegateType=expressionTypingServices.safeGetType(propertyDeclarationInnerScope,delegateExpression,NO_EXPECTED_TYPE,DataFlowInfo.EMPTY,trace);
  JetScope accessorScope=JetScopeUtils.makeScopeForPropertyAccessor(propertyDescriptor,parentScopeForAccessor,descriptorResolver,trace);
  DelegatedPropertyUtils.resolveDelegatedPropertyGetMethod(propertyDescriptor,delegateExpression,delegateType,expressionTypingServices,trace,accessorScope);
  if (jetProperty.isVar()) {
    DelegatedPropertyUtils.resolveDelegatedPropertySetMethod(propertyDescriptor,delegateExpression,delegateType,expressionTypingServices,trace,accessorScope);
  }
}
