{
  JetTypeInferrer.Services typeInferrer=context.getSemanticServices().getTypeInferrerServices(traceForConstructors);
  JetType type=typeInferrer.getType(getPropertyDeclarationInnerScope(scope,propertyDescriptor),initializer,NO_EXPECTED_TYPE);
  JetType expectedType=propertyDescriptor.getInType();
  if (expectedType == null) {
    expectedType=propertyDescriptor.getOutType();
  }
  if (type != null && expectedType != null && !context.getSemanticServices().getTypeChecker().isSubtypeOf(type,expectedType)) {
    context.getTrace().report(TYPE_MISMATCH.on(initializer,expectedType,type));
  }
}
