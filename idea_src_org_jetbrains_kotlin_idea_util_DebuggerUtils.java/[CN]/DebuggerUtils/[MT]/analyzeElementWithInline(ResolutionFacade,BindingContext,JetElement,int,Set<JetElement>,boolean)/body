{
  final Project project=element.getProject();
  final Set<JetNamedFunction> collectedElements=new HashSet<JetNamedFunction>();
  element.accept(new JetTreeVisitorVoid(){
    @Override public void visitExpression(    @NotNull JetExpression expression){
      super.visitExpression(expression);
      Call call=bindingContext.get(BindingContext.CALL,expression);
      if (call == null)       return;
      ResolvedCall<?> resolvedCall=bindingContext.get(BindingContext.RESOLVED_CALL,call);
      checkResolveCall(resolvedCall);
    }
    @Override public void visitMultiDeclaration(    @NotNull JetMultiDeclaration multiDeclaration){
      super.visitMultiDeclaration(multiDeclaration);
      for (      JetMultiDeclarationEntry entry : multiDeclaration.getEntries()) {
        ResolvedCall<FunctionDescriptor> resolvedCall=bindingContext.get(BindingContext.COMPONENT_RESOLVED_CALL,entry);
        checkResolveCall(resolvedCall);
      }
    }
    @Override public void visitForExpression(    @NotNull JetForExpression expression){
      super.visitForExpression(expression);
      checkResolveCall(bindingContext.get(BindingContext.LOOP_RANGE_ITERATOR_RESOLVED_CALL,expression.getLoopRange()));
      checkResolveCall(bindingContext.get(BindingContext.LOOP_RANGE_HAS_NEXT_RESOLVED_CALL,expression.getLoopRange()));
      checkResolveCall(bindingContext.get(BindingContext.LOOP_RANGE_NEXT_RESOLVED_CALL,expression.getLoopRange()));
    }
    private void checkResolveCall(    ResolvedCall<?> resolvedCall){
      if (resolvedCall == null)       return;
      CallableDescriptor descriptor=resolvedCall.getResultingDescriptor();
      if (descriptor instanceof DeserializedSimpleFunctionDescriptor)       return;
      if (InlineUtil.isInline(descriptor) && (analyzeInlineFunctions || hasReifiedTypeParameters(descriptor))) {
        PsiElement declaration=DescriptorToSourceUtilsIde.INSTANCE$.getAnyDeclaration(project,descriptor);
        if (declaration != null && declaration instanceof JetNamedFunction && !analyzedElements.contains(declaration)) {
          collectedElements.add((JetNamedFunction)declaration);
        }
      }
    }
  }
);
  analyzedElements.add(element);
  if (!collectedElements.isEmpty() && deep < 10) {
    List<BindingContext> innerContexts=new ArrayList<BindingContext>();
    for (    JetNamedFunction inlineFunctions : collectedElements) {
      JetExpression body=inlineFunctions.getBodyExpression();
      if (body != null) {
        BindingContext bindingContextForFunction=resolutionFacade.analyze(body,BodyResolveMode.FULL);
        innerContexts.add(analyzeElementWithInline(resolutionFacade,bindingContextForFunction,inlineFunctions,deep + 1,analyzedElements,analyzeInlineFunctions));
      }
    }
    innerContexts.add(bindingContext);
    analyzedElements.addAll(collectedElements);
    return CompositeBindingContext.Companion.create(innerContexts);
  }
  return bindingContext;
}
