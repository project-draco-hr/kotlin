{
  URL url=KotlinCompiler.class.getClassLoader().getResource("jet/JetObject.class");
  if (url == null) {
    System.out.println("Couldn't find runtime library");
    return;
  }
  final String protocol=url.getProtocol();
  final String path=url.getPath();
  if (protocol.equals("file")) {
    final File stdlibDir=new File(path).getParentFile().getParentFile();
    FileUtil.processFilesRecursively(stdlibDir,new Processor<File>(){
      @Override public boolean process(      File file){
        if (file.isDirectory())         return true;
        final String relativePath=FileUtil.getRelativePath(stdlibDir,file);
        try {
          stream.putNextEntry(new JarEntry(FileUtil.toSystemIndependentName(relativePath)));
          FileInputStream fis=new FileInputStream(file);
          try {
            FileUtil.copy(fis,stream);
          }
  finally {
            fis.close();
          }
        }
 catch (        IOException e) {
          throw new RuntimeException(e);
        }
        return true;
      }
    }
);
  }
 else   if (protocol.equals("jar")) {
    File jar=new File(path.substring(path.indexOf(":") + 1,path.indexOf("!/")));
    JarInputStream jis=new JarInputStream(new FileInputStream(jar));
    try {
      while (true) {
        JarEntry e=jis.getNextJarEntry();
        if (e == null) {
          break;
        }
        stream.putNextEntry(e);
        FileUtil.copy(jis,stream);
      }
    }
  finally {
      jis.close();
    }
  }
 else {
    System.out.println("Couldn't copy runtime library from " + url + ", protocol "+ protocol);
  }
}
