{
  System.setProperty("java.awt.headless","true");
  Arguments arguments=new Arguments();
  try {
    Args.parse(arguments,args);
  }
 catch (  Throwable t) {
    System.out.println("Usage: KotlinCompiler -output <outputDir> -src <filename or dirname>");
    t.printStackTrace();
    return;
  }
  Disposable root=new Disposable(){
    @Override public void dispose(){
    }
  }
;
  JavaCoreEnvironment environment=new JavaCoreEnvironment(root);
  File rtJar=initJdk();
  if (rtJar == null)   return;
  environment.addToClasspath(rtJar);
  environment.registerFileType(JetFileType.INSTANCE,"kt");
  environment.registerParserDefinition(new JetParserDefinition());
  VirtualFile vFile=environment.getLocalFileSystem().findFileByPath(arguments.src);
  if (vFile == null) {
    System.out.print("File/directory not found: " + arguments.src);
    return;
  }
  Project project=environment.getProject();
  GenerationState generationState=new GenerationState(project,false);
  List<JetNamespace> namespaces=Lists.newArrayList();
  if (vFile.isDirectory()) {
    File dir=new File(vFile.getPath());
    addFiles(environment,project,namespaces,dir);
  }
 else {
    PsiFile psiFile=PsiManager.getInstance(project).findFile(vFile);
    if (psiFile instanceof JetFile) {
      namespaces.add(((JetFile)psiFile).getRootNamespace());
    }
 else {
      System.out.print("Not a Kotlin file: " + vFile.getPath());
      return;
    }
  }
  BindingContext bindingContext=AnalyzingUtils.getInstance(JavaDefaultImports.JAVA_DEFAULT_IMPORTS).analyzeNamespaces(project,namespaces,JetControlFlowDataTraceFactory.EMPTY);
  ErrorCollector errorCollector=new ErrorCollector(bindingContext);
  errorCollector.report();
  if (!errorCollector.hasErrors) {
    generationState.compileCorrectNamespaces(bindingContext,namespaces);
    final ClassFileFactory factory=generationState.getFactory();
    if (arguments.outputDir == null) {
      System.out.println("Output directory is not specified - no files will be saved to the disk");
    }
 else {
      List<String> files=factory.files();
      for (      String file : files) {
        File target=new File(arguments.outputDir,file);
        try {
          FileUtil.writeToFile(target,factory.asBytes(file));
          System.out.println("Generated classfile: " + target);
        }
 catch (        IOException e) {
          System.out.println(e.getMessage());
        }
      }
    }
  }
}
