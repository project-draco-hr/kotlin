{
  System.setProperty("java.awt.headless","true");
  Arguments arguments=new Arguments();
  try {
    Args.parse(arguments,args);
  }
 catch (  Throwable t) {
    System.out.println("Usage: KotlinCompiler [-output <outputDir>|-jar <jarFileName>] -src <filename or dirname>");
    t.printStackTrace();
    return;
  }
  Disposable root=new Disposable(){
    @Override public void dispose(){
    }
  }
;
  JetCoreEnvironment environment=new JetCoreEnvironment(root);
  File rtJar=initJdk();
  if (rtJar == null)   return;
  environment.addToClasspath(rtJar);
  final File unpackedRuntimePath=getUnpackedRuntimePath();
  if (unpackedRuntimePath != null) {
    environment.addToClasspath(unpackedRuntimePath);
  }
  if (arguments.module != null) {
    compileModule(environment,arguments.module);
    return;
  }
  CompileSession session=new CompileSession(environment);
  session.addSources(arguments.src);
  String mainClass=null;
  for (  JetNamespace namespace : session.getSourceFileNamespaces()) {
    if (JetMainDetector.hasMain(namespace.getDeclarations())) {
      mainClass=namespace.getFQName() + ".namespace";
      break;
    }
  }
  if (!session.analyze()) {
    return;
  }
  ClassFileFactory factory=session.generate();
  if (arguments.jar != null) {
    writeToJar(factory,arguments.jar,mainClass,true);
  }
 else   if (arguments.outputDir != null) {
    writeToOutputDirectory(factory,arguments.outputDir);
  }
 else {
    System.out.println("Output directory or jar file is not specified - no files will be saved to the disk");
  }
}
