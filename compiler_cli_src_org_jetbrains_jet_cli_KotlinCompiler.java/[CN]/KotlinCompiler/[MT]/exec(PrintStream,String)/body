{
  System.setProperty("java.awt.headless","true");
  Arguments arguments=new Arguments();
  try {
    Args.parse(arguments,args);
  }
 catch (  IllegalArgumentException e) {
    usage(System.err);
    return 1;
  }
catch (  Throwable t) {
    errStream.println(MessageRenderer.TAGS.renderException(t));
    return 1;
  }
  if (arguments.help) {
    usage(errStream);
    return 0;
  }
  FileNameTransformer fileNameTransformer=arguments.transformNamesToJava ? ANY_EXTENSION_TO_JAVA : FileNameTransformer.IDENTITY;
  MessageRenderer messageRenderer=arguments.tags ? MessageRenderer.TAGS : MessageRenderer.PLAIN;
  CompileEnvironment environment=new CompileEnvironment(fileNameTransformer,messageRenderer);
  try {
    environment.setIgnoreErrors(false);
    environment.setErrorStream(errStream);
    environment.setStubs(arguments.stubs);
    if (arguments.docOutputDir != null) {
      KDocLoader factory=new KDocLoader(arguments.docOutputDir);
      CompilerPlugin processor=factory.createCompilerPlugin();
      if (processor != null) {
        environment.getMyEnvironment().getCompilerPlugins().add(processor);
      }
    }
    if (arguments.stdlib != null) {
      environment.setStdlib(arguments.stdlib);
    }
    if (arguments.classpath != null) {
      environment.addToClasspath(arguments.classpath);
    }
    boolean ok;
    if (arguments.module != null) {
      ok=environment.compileModuleScript(arguments.module,arguments.jar,arguments.outputDir,arguments.includeRuntime);
    }
 else {
      ok=environment.compileBunchOfSources(arguments.src,arguments.jar,arguments.outputDir,arguments.includeRuntime);
    }
    return ok ? 0 : 1;
  }
 catch (  Throwable t) {
    errStream.println(messageRenderer.renderException(t));
    return 1;
  }
 finally {
    environment.dispose();
  }
}
