{
  System.setProperty("java.awt.headless","true");
  Arguments arguments=new Arguments();
  try {
    Args.parse(arguments,args);
  }
 catch (  IllegalArgumentException e) {
    usage(System.err);
    return 1;
  }
catch (  Throwable t) {
    t.printStackTrace();
    return 1;
  }
  if (arguments.help) {
    usage(errStream);
    return 0;
  }
  CompileEnvironment environment=new CompileEnvironment(arguments.transformNamesToJava ? ANY_EXTENSION_TO_JAVA : FileNameTransformer.IDENTITY);
  try {
    environment.setIgnoreErrors(arguments.ignoreErrors);
    if (arguments.ignoreErrors) {
      environment.setErrorStream(new PrintStream(new ByteArrayOutputStream()));
    }
 else {
      environment.setErrorStream(errStream);
    }
    if (arguments.docOutputDir != null) {
      KDocProcessor factory=new KDocProcessor(arguments.docOutputDir);
      CompilerPlugin processor=factory.createCompilerPlugin();
      if (processor != null) {
        environment.getMyEnvironment().getCompilerPlugins().add(processor);
      }
    }
    if (arguments.stdlib != null) {
      environment.setStdlib(arguments.stdlib);
    }
    if (arguments.module != null) {
      environment.compileModuleScript(arguments.module,arguments.jar,arguments.outputDir,arguments.includeRuntime);
      return 0;
    }
 else {
      if (!environment.compileBunchOfSources(arguments.src,arguments.jar,arguments.outputDir,arguments.includeRuntime)) {
        return 1;
      }
    }
    return 0;
  }
  finally {
    environment.dispose();
  }
}
