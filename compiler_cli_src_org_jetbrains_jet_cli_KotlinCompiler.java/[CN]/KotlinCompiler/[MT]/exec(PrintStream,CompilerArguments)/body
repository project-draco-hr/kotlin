{
  if (arguments.help) {
    usage(errStream);
    return OK;
  }
  System.setProperty("java.awt.headless","true");
  final MessageRenderer messageRenderer=arguments.tags ? MessageRenderer.TAGS : MessageRenderer.PLAIN;
  if (arguments.version) {
    errStream.println(messageRenderer.render(CompilerMessageSeverity.INFO,"Kotlin Compiler version " + CompilerVersion.VERSION,CompilerMessageLocation.NO_LOCATION));
  }
  CompilerSpecialMode mode=parseCompilerSpecialMode(arguments);
  File jdkHeadersJar;
  if (mode.includeJdkHeaders()) {
    if (arguments.jdkHeaders != null) {
      jdkHeadersJar=new File(arguments.jdkHeaders);
    }
 else {
      jdkHeadersJar=PathUtil.getAltHeadersPath();
    }
  }
 else {
    jdkHeadersJar=null;
  }
  File runtimeJar;
  if (mode.includeKotlinRuntime()) {
    if (arguments.stdlib != null) {
      runtimeJar=new File(arguments.stdlib);
    }
 else {
      runtimeJar=PathUtil.getDefaultRuntimePath();
    }
  }
 else {
    runtimeJar=null;
  }
  CompilerDependencies dependencies=new CompilerDependencies(mode,jdkHeadersJar,runtimeJar);
  PrintingMessageCollector messageCollector=new PrintingMessageCollector(errStream,messageRenderer,arguments.verbose);
  CompileEnvironment environment=new CompileEnvironment(messageCollector,dependencies);
  try {
    configureEnvironment(environment,arguments);
    boolean noErrors;
    if (arguments.module != null) {
      noErrors=environment.compileModuleScript(arguments.module,arguments.jar,arguments.outputDir,arguments.includeRuntime);
    }
 else {
      if (arguments.getSourceDirs() != null) {
        noErrors=environment.compileBunchOfSourceDirectories(arguments.getSourceDirs(),arguments.jar,arguments.outputDir,arguments.includeRuntime);
      }
 else {
        noErrors=environment.compileBunchOfSources(arguments.src,arguments.jar,arguments.outputDir,arguments.includeRuntime);
      }
    }
    return noErrors ? OK : COMPILATION_ERROR;
  }
 catch (  Throwable t) {
    errStream.println(messageRenderer.renderException(t));
    return INTERNAL_ERROR;
  }
 finally {
    environment.dispose();
    messageCollector.printToErrStream();
  }
}
