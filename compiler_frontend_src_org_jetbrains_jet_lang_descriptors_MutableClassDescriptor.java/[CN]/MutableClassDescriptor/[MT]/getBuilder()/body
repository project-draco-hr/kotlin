{
  if (builder == null) {
    final NamespaceLikeBuilder superBuilder=super.getBuilder();
    builder=new NamespaceLikeBuilderDummy(){
      @NotNull @Override public DeclarationDescriptor getOwnerForChildren(){
        return superBuilder.getOwnerForChildren();
      }
      @Override public void addObjectDescriptor(      @NotNull MutableClassDescriptorLite objectDescriptor){
        superBuilder.addObjectDescriptor(objectDescriptor);
      }
      @Override public void addClassifierDescriptor(      @NotNull MutableClassDescriptorLite classDescriptor){
        superBuilder.addClassifierDescriptor(classDescriptor);
        scopeForMemberResolution.addClassifierDescriptor(classDescriptor);
      }
      @Override public void addFunctionDescriptor(      @NotNull SimpleFunctionDescriptor functionDescriptor){
        superBuilder.addFunctionDescriptor(functionDescriptor);
        functions.add(functionDescriptor);
        if (functionDescriptor.getKind().isReal()) {
          declaredCallableMembers.add(functionDescriptor);
        }
        allCallableMembers.add(functionDescriptor);
        scopeForMemberResolution.addFunctionDescriptor(functionDescriptor);
      }
      @Override public ClassObjectStatus setClassObjectDescriptor(      @NotNull final MutableClassDescriptorLite classObjectDescriptor){
        ClassObjectStatus r=superBuilder.setClassObjectDescriptor(classObjectDescriptor);
        if (r != ClassObjectStatus.OK) {
          return r;
        }
        scopeForMemberResolution.importScope(new AbstractScopeAdapter(){
          @NotNull @Override protected JetScope getWorkerScope(){
            return classObjectDescriptor.getDefaultType().getMemberScope();
          }
          @NotNull @Override public ReceiverDescriptor getImplicitReceiver(){
            return classObjectDescriptor.getImplicitReceiver();
          }
        }
);
        return ClassObjectStatus.OK;
      }
      @Override public void addPropertyDescriptor(      @NotNull PropertyDescriptor propertyDescriptor){
        superBuilder.addPropertyDescriptor(propertyDescriptor);
        properties.add(propertyDescriptor);
        if (propertyDescriptor.getKind().isReal()) {
          declaredCallableMembers.add(propertyDescriptor);
        }
        allCallableMembers.add(propertyDescriptor);
        scopeForMemberResolution.addPropertyDescriptor(propertyDescriptor);
      }
    }
;
  }
  return builder;
}
