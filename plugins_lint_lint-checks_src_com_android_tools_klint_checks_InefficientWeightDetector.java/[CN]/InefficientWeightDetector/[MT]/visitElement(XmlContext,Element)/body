{
  List<Element> children=LintUtils.getChildren(element);
  boolean multipleWeights=false;
  Element weightChild=null;
  boolean checkNesting=context.isEnabled(NESTED_WEIGHTS);
  for (  Element child : children) {
    if (child.hasAttributeNS(ANDROID_URI,ATTR_LAYOUT_WEIGHT)) {
      if (weightChild != null) {
        multipleWeights=true;
      }
 else       if (!multipleWeights) {
        weightChild=child;
      }
      if (checkNesting) {
        mInsideWeight.put(child,Boolean.TRUE);
        Boolean inside=mInsideWeight.get(element);
        if (inside == null) {
          mInsideWeight.put(element,Boolean.FALSE);
        }
 else         if (inside) {
          Attr sizeNode=child.getAttributeNodeNS(ANDROID_URI,ATTR_LAYOUT_WEIGHT);
          context.report(NESTED_WEIGHTS,sizeNode,context.getLocation(sizeNode),"Nested weights are bad for performance");
          checkNesting=false;
        }
      }
    }
  }
  String orientation=element.getAttributeNS(ANDROID_URI,ATTR_ORIENTATION);
  if (children.size() >= 2 && (orientation == null || orientation.isEmpty()) && context.isEnabled(ORIENTATION)) {
    boolean maxWidthSet=false;
    Iterator<Element> iterator=children.iterator();
    while (iterator.hasNext()) {
      Element child=iterator.next();
      if (!iterator.hasNext()) {
        break;
      }
      String width=child.getAttributeNS(ANDROID_URI,ATTR_LAYOUT_WIDTH);
      if (VALUE_MATCH_PARENT.equals(width) || VALUE_FILL_PARENT.equals(width)) {
        if (!child.hasAttributeNS(ANDROID_URI,ATTR_LAYOUT_WEIGHT)) {
          maxWidthSet=true;
          break;
        }
      }
    }
    if (maxWidthSet && !element.hasAttribute(ATTR_STYLE)) {
      String message="Wrong orientation? No orientation specified, and the default " + "is horizontal, yet this layout has multiple children where at " + "least one has `layout_width=\"match_parent\"`";
      context.report(ORIENTATION,element,context.getLocation(element),message);
    }
  }
 else   if (children.isEmpty() && (orientation == null || orientation.isEmpty()) && context.isEnabled(ORIENTATION)&& element.hasAttributeNS(ANDROID_URI,ATTR_ID)) {
    boolean ignore;
    if (element.hasAttribute(ATTR_STYLE)) {
      if (context.getClient().supportsProjectResources()) {
        List<ResourceValue> values=LintUtils.getStyleAttributes(context.getMainProject(),context.getClient(),element.getAttribute(ATTR_STYLE),ANDROID_URI,ATTR_ORIENTATION);
        ignore=values != null && !values.isEmpty();
      }
 else {
        ignore=true;
      }
    }
 else {
      ignore=false;
    }
    if (!ignore) {
      String message="No orientation specified, and the default is horizontal. " + "This is a common source of bugs when children are added dynamically.";
      context.report(ORIENTATION,element,context.getLocation(element),message);
    }
  }
  if (context.isEnabled(BASELINE_WEIGHTS) && weightChild != null && !VALUE_VERTICAL.equals(orientation) && !element.hasAttributeNS(ANDROID_URI,ATTR_BASELINE_ALIGNED)) {
    boolean allChildrenAreLayouts=!children.isEmpty();
    SdkInfo sdkInfo=context.getClient().getSdkInfo(context.getProject());
    for (    Element child : children) {
      String tagName=child.getTagName();
      if (!(sdkInfo.isLayout(tagName) && !tagName.equals(RADIO_GROUP) || VIEW_FRAGMENT.equals(tagName) || VIEW_INCLUDE.equals(tagName))) {
        allChildrenAreLayouts=false;
      }
    }
    if (allChildrenAreLayouts) {
      context.report(BASELINE_WEIGHTS,element,context.getLocation(element),"Set `android:baselineAligned=\"false\"` on this element for better performance");
    }
  }
  if (context.isEnabled(INEFFICIENT_WEIGHT) && weightChild != null && !multipleWeights) {
    String dimension;
    if (VALUE_VERTICAL.equals(orientation)) {
      dimension=ATTR_LAYOUT_HEIGHT;
    }
 else {
      dimension=ATTR_LAYOUT_WIDTH;
    }
    Attr sizeNode=weightChild.getAttributeNodeNS(ANDROID_URI,dimension);
    String size=sizeNode != null ? sizeNode.getValue() : "(undefined)";
    if (sizeNode == null && weightChild.hasAttribute(ATTR_STYLE)) {
      String style=weightChild.getAttribute(ATTR_STYLE);
      List<ResourceValue> sizes=LintUtils.getStyleAttributes(context.getMainProject(),context.getClient(),style,ANDROID_URI,dimension);
      if (sizes != null) {
        for (        ResourceValue value : sizes) {
          String v=value.getValue();
          if (v != null) {
            size=v;
            if (v.startsWith("0")) {
              break;
            }
          }
        }
      }
    }
    if (!size.startsWith("0")) {
      String msg=String.format("Use a `%1$s` of `0dp` instead of `%2$s` for better performance",dimension,size);
      context.report(INEFFICIENT_WEIGHT,weightChild,context.getLocation(sizeNode != null ? sizeNode : weightChild),msg);
    }
  }
  if (context.isEnabled(WRONG_0DP)) {
    checkWrong0Dp(context,element,children);
  }
}
