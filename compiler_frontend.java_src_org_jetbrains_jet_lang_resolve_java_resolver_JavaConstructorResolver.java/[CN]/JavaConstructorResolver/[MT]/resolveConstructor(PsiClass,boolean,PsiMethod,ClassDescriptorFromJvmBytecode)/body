{
  PsiMethodWrapper constructor=new PsiMethodWrapper(psiConstructor);
  if (constructor.getJetConstructorAnnotation().hidden()) {
    return null;
  }
  if (trace.get(BindingContext.CONSTRUCTOR,psiConstructor) != null) {
    return trace.get(BindingContext.CONSTRUCTOR,psiConstructor);
  }
  ConstructorDescriptorImpl constructorDescriptor=new ConstructorDescriptorImpl(classDescriptor,Collections.<AnnotationDescriptor>emptyList(),false);
  String context="constructor of class " + psiClass.getQualifiedName();
  JavaDescriptorResolver.ValueParameterDescriptors valueParameterDescriptors=valueParameterResolver.resolveParameterDescriptors(constructorDescriptor,constructor.getParameters(),TypeVariableResolvers.classTypeVariableResolver(classDescriptor,context));
  if (valueParameterDescriptors.getReceiverType() != null) {
    throw new IllegalStateException();
  }
  AlternativeMethodSignatureData alternativeMethodSignatureData=new AlternativeMethodSignatureData(constructor,valueParameterDescriptors,null,Collections.<TypeParameterDescriptor>emptyList());
  if (alternativeMethodSignatureData.isAnnotated() && !alternativeMethodSignatureData.hasErrors()) {
    valueParameterDescriptors=alternativeMethodSignatureData.getValueParameters();
  }
 else   if (alternativeMethodSignatureData.hasErrors()) {
    trace.record(BindingContext.ALTERNATIVE_SIGNATURE_DATA_ERROR,constructorDescriptor,alternativeMethodSignatureData.getError());
  }
  constructorDescriptor.initialize(classDescriptor.getTypeConstructor().getParameters(),valueParameterDescriptors.getDescriptors(),DescriptorResolverUtils.resolveVisibility(psiConstructor,constructor.getJetConstructorAnnotation()),aStatic);
  trace.record(BindingContext.CONSTRUCTOR,psiConstructor,constructorDescriptor);
  return constructorDescriptor;
}
