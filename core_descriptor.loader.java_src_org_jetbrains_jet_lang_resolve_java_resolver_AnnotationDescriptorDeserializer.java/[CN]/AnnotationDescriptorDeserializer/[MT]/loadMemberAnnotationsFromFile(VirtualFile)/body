{
  final Map<MemberSignature,List<AnnotationDescriptor>> memberAnnotations=new HashMap<MemberSignature,List<AnnotationDescriptor>>();
  new ClassReader(file.getInputStream()).accept(new ClassVisitor(Opcodes.ASM4){
    @Override public MethodVisitor visitMethod(    int access,    String name,    String desc,    String signature,    String[] exceptions){
      final MemberSignature methodSignature=MemberSignature.fromMethodNameAndDesc(name,desc);
      final List<AnnotationDescriptor> result=new ArrayList<AnnotationDescriptor>();
      return new MethodVisitor(Opcodes.ASM4){
        @Override public AnnotationVisitor visitAnnotation(        String desc,        boolean visible){
          return resolveAnnotation(desc,result);
        }
        @Override public void visitEnd(){
          if (!result.isEmpty()) {
            memberAnnotations.put(methodSignature,result);
          }
        }
      }
;
    }
    @Override public FieldVisitor visitField(    int access,    String name,    String desc,    String signature,    Object value){
      final MemberSignature fieldSignature=MemberSignature.fromFieldNameAndDesc(name,desc);
      final List<AnnotationDescriptor> result=new ArrayList<AnnotationDescriptor>();
      return new FieldVisitor(Opcodes.ASM4){
        @Override public AnnotationVisitor visitAnnotation(        String desc,        boolean visible){
          return resolveAnnotation(desc,result);
        }
        @Override public void visitEnd(){
          if (!result.isEmpty()) {
            memberAnnotations.put(fieldSignature,result);
          }
        }
      }
;
    }
  }
,SKIP_CODE | SKIP_DEBUG | SKIP_FRAMES);
  return memberAnnotations;
}
