{
switch (kind) {
case FUNCTION:
    if (proto.hasExtension(JavaProtoBuf.methodSignature)) {
      JavaProtoBuf.JavaMethodSignature signature=proto.getExtension(JavaProtoBuf.methodSignature);
      return new SignatureDeserializer(nameResolver).methodSignature(signature);
    }
  break;
case PROPERTY_GETTER:
if (proto.hasExtension(JavaProtoBuf.propertySignature)) {
  JavaProtoBuf.JavaPropertySignature propertySignature=proto.getExtension(JavaProtoBuf.propertySignature);
  return new SignatureDeserializer(nameResolver).methodSignature(propertySignature.getGetter());
}
break;
case PROPERTY_SETTER:
if (proto.hasExtension(JavaProtoBuf.propertySignature)) {
JavaProtoBuf.JavaPropertySignature propertySignature=proto.getExtension(JavaProtoBuf.propertySignature);
return new SignatureDeserializer(nameResolver).methodSignature(propertySignature.getSetter());
}
break;
case PROPERTY:
if (proto.hasExtension(JavaProtoBuf.propertySignature)) {
JavaProtoBuf.JavaPropertySignature propertySignature=proto.getExtension(JavaProtoBuf.propertySignature);
if (propertySignature.hasField()) {
JavaProtoBuf.JavaFieldSignature field=propertySignature.getField();
Type type=new SignatureDeserializer(nameResolver).type(field.getType());
Name name=nameResolver.getName(field.getName());
return MemberSignature.fromFieldNameAndDesc(name.asString(),type.getDescriptor());
}
 else if (propertySignature.hasSyntheticMethodName()) {
Name name=nameResolver.getName(propertySignature.getSyntheticMethodName());
return MemberSignature.fromMethodNameAndDesc(name.asString(),JvmAbi.ANNOTATED_PROPERTY_METHOD_SIGNATURE);
}
}
break;
}
return null;
}
