{
  if (keys != null) {
    int hash=key.hashCode();
    int fraction=hash * A;
    int index=fraction >>> (32 - power);
    Object test=keys[index];
    if (test != null) {
      int N=1 << power;
      if (test == key || (values[N + index] == hash && test.equals(key))) {
        return index;
      }
      int mask=N - 1;
      int step=tableLookupStep(fraction,mask,power);
      int n=0;
      for (; ; ) {
        if (check) {
          if (n >= occupiedCount)           Context.codeBug();
          ++n;
        }
        index=(index + step) & mask;
        test=keys[index];
        if (test == null) {
          break;
        }
        if (test == key || (values[N + index] == hash && test.equals(key))) {
          return index;
        }
      }
    }
  }
  return -1;
}
