{
  final List<JsPropertyInitializer> properties=new SmartList<JsPropertyInitializer>();
  final List<JsPropertyInitializer> staticProperties=new SmartList<JsPropertyInitializer>();
  boolean isTopLevelDeclaration=context() == declarationContext;
  final JsNameRef qualifiedReference;
  if (!isTopLevelDeclaration) {
    qualifiedReference=null;
  }
 else   if (descriptor.getKind().isObject()) {
    qualifiedReference=null;
    declarationContext.literalFunctionTranslator().setDefinitionPlace(new NotNullLazyValue<Trinity<List<JsPropertyInitializer>,LabelGenerator,JsExpression>>(){
      @Override @NotNull public Trinity<List<JsPropertyInitializer>,LabelGenerator,JsExpression> compute(){
        return createPlace(properties,context().getThisObject(descriptor));
      }
    }
);
  }
 else {
    qualifiedReference=getQualifiedReference(declarationContext,descriptor);
    declarationContext.literalFunctionTranslator().setDefinitionPlace(new NotNullLazyValue<Trinity<List<JsPropertyInitializer>,LabelGenerator,JsExpression>>(){
      @Override @NotNull public Trinity<List<JsPropertyInitializer>,LabelGenerator,JsExpression> compute(){
        return createPlace(staticProperties,qualifiedReference);
      }
    }
);
  }
  if (!isTrait()) {
    JsFunction initializer=new ClassInitializerTranslator(classDeclaration,declarationContext).generateInitializeMethod();
    if (context().isEcma5()) {
      invocationArguments.add(initializer.getBody().getStatements().isEmpty() ? JsLiteral.NULL : initializer);
    }
 else {
      properties.add(new JsPropertyInitializer(Namer.initializeMethodReference(),initializer));
    }
  }
  translatePropertiesAsConstructorParameters(declarationContext,properties);
  new DeclarationBodyVisitor(properties,staticProperties).traverseContainer(classDeclaration,declarationContext);
  if (isTopLevelDeclaration) {
    declarationContext.literalFunctionTranslator().setDefinitionPlace(null);
  }
  boolean hasStaticProperties=!staticProperties.isEmpty();
  if (!properties.isEmpty() || hasStaticProperties) {
    if (properties.isEmpty()) {
      invocationArguments.add(JsLiteral.NULL);
    }
 else {
      if (qualifiedReference != null) {
        invocationArguments.add(new JsDocComment("lends",new JsNameRef("prototype",qualifiedReference)));
      }
      invocationArguments.add(new JsObjectLiteral(properties,true));
    }
  }
  if (hasStaticProperties) {
    invocationArguments.add(new JsDocComment("lends",qualifiedReference));
    invocationArguments.add(new JsObjectLiteral(staticProperties,true));
  }
}
