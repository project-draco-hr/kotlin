{
  List<JsExpression> invocationArguments=new ArrayList<JsExpression>();
  List<JsPropertyInitializer> properties=new SmartList<JsPropertyInitializer>();
  List<JsPropertyInitializer> staticProperties=new SmartList<JsPropertyInitializer>();
  boolean isTopLevelDeclaration=context() == declarationContext;
  JsNameRef qualifiedReference=null;
  if (isTopLevelDeclaration) {
    DefinitionPlace definitionPlace=null;
    if (!descriptor.getKind().isSingleton() && !isAnonymousObject(descriptor)) {
      qualifiedReference=declarationContext.getQualifiedReference(descriptor);
      JsScope scope=context().getScopeForDescriptor(descriptor);
      definitionPlace=new DefinitionPlace((JsObjectScope)scope,qualifiedReference,staticProperties);
    }
    declarationContext=declarationContext.newDeclaration(descriptor,definitionPlace);
  }
  declarationContext=fixContextForClassObjectAccessing(declarationContext);
  invocationArguments.add(getSuperclassReferences(declarationContext));
  DelegationTranslator delegationTranslator=new DelegationTranslator(classDeclaration,context());
  if (!isTrait()) {
    JsFunction initializer=new ClassInitializerTranslator(classDeclaration,declarationContext).generateInitializeMethod(delegationTranslator);
    invocationArguments.add(initializer.getBody().getStatements().isEmpty() ? JsLiteral.NULL : initializer);
  }
  translatePropertiesAsConstructorParameters(declarationContext,properties);
  DeclarationBodyVisitor bodyVisitor=new DeclarationBodyVisitor(properties,staticProperties);
  bodyVisitor.traverseContainer(classDeclaration,declarationContext);
  delegationTranslator.generateDelegated(properties);
  if (KotlinBuiltIns.getInstance().isData(descriptor)) {
    new JsDataClassGenerator(classDeclaration,declarationContext,properties).generate();
  }
  if (isEnumClass(descriptor)) {
    JsObjectLiteral enumEntries=new JsObjectLiteral(bodyVisitor.getEnumEntryList(),true);
    JsFunction function=simpleReturnFunction(declarationContext.getScopeForDescriptor(descriptor),enumEntries);
    invocationArguments.add(function);
  }
  if (!DescriptorUtils.isTrait(descriptor)) {
    for (    DeclarationDescriptor memberDescriptor : descriptor.getDefaultType().getMemberScope().getAllDescriptors()) {
      if (memberDescriptor instanceof FunctionDescriptor) {
        generateBridges((FunctionDescriptor)memberDescriptor,properties);
      }
    }
  }
  boolean hasStaticProperties=!staticProperties.isEmpty();
  if (!properties.isEmpty() || hasStaticProperties) {
    if (properties.isEmpty()) {
      invocationArguments.add(JsLiteral.NULL);
    }
 else {
      if (qualifiedReference != null) {
        invocationArguments.add(new JsDocComment(JsAstUtils.LENDS_JS_DOC_TAG,new JsNameRef("prototype",qualifiedReference)));
      }
      invocationArguments.add(new JsObjectLiteral(properties,true));
    }
  }
  if (hasStaticProperties) {
    invocationArguments.add(new JsDocComment(JsAstUtils.LENDS_JS_DOC_TAG,qualifiedReference));
    invocationArguments.add(new JsObjectLiteral(staticProperties,true));
  }
  return invocationArguments;
}
