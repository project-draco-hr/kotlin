{
  List<JsExpression> invocationArguments=new ArrayList<JsExpression>();
  List<JsPropertyInitializer> properties=new SmartList<JsPropertyInitializer>();
  List<JsPropertyInitializer> staticProperties=new SmartList<JsPropertyInitializer>();
  boolean isTopLevelDeclaration=context() == declarationContext;
  JsNameRef qualifiedReference;
  if (!isTopLevelDeclaration) {
    qualifiedReference=null;
  }
 else {
    DefinitionPlace definitionPlace;
    if (descriptor.getKind().isSingleton() || isAnonymousObject(descriptor)) {
      qualifiedReference=null;
      definitionPlace=new DefinitionPlace(properties,context().getThisObject(descriptor));
    }
 else {
      qualifiedReference=declarationContext.getQualifiedReference(descriptor);
      definitionPlace=new DefinitionPlace(staticProperties,qualifiedReference);
    }
    declarationContext=declarationContext.newDeclaration(descriptor,definitionPlace);
  }
  invocationArguments.add(getSuperclassReferences(declarationContext));
  if (!isTrait()) {
    JsFunction initializer=new ClassInitializerTranslator(classDeclaration,declarationContext).generateInitializeMethod();
    invocationArguments.add(initializer.getBody().getStatements().isEmpty() ? JsLiteral.NULL : initializer);
  }
  translatePropertiesAsConstructorParameters(declarationContext,properties);
  DeclarationBodyVisitor bodyVisitor=new DeclarationBodyVisitor(properties,staticProperties);
  bodyVisitor.traverseContainer(classDeclaration,declarationContext);
  mayBeAddEnumEntry(bodyVisitor.getEnumEntryList(),staticProperties,declarationContext);
  boolean hasStaticProperties=!staticProperties.isEmpty();
  if (!properties.isEmpty() || hasStaticProperties) {
    if (properties.isEmpty()) {
      invocationArguments.add(JsLiteral.NULL);
    }
 else {
      if (qualifiedReference != null) {
        invocationArguments.add(new JsDocComment(JsAstUtils.LENDS_JS_DOC_TAG,new JsNameRef("prototype",qualifiedReference)));
      }
      invocationArguments.add(new JsObjectLiteral(properties,true));
    }
  }
  if (hasStaticProperties) {
    invocationArguments.add(new JsDocComment(JsAstUtils.LENDS_JS_DOC_TAG,qualifiedReference));
    invocationArguments.add(new JsObjectLiteral(staticProperties,true));
  }
  return invocationArguments;
}
