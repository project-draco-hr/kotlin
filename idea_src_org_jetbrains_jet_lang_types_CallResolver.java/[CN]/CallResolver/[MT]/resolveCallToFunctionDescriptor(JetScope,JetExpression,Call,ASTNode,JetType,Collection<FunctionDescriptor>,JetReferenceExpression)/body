{
  ResolutionTask task=new ResolutionTask(candidates,receiver,call.getTypeArguments(),call.getValueArguments()){
    @Override public void bindFunctionReference(    @NotNull BindingTrace trace,    @NotNull FunctionDescriptor functionDescriptor){
      trace.record(BindingContext.REFERENCE_TARGET,functionReference,functionDescriptor);
    }
    @Override public void reportOverallResolutionError(    @NotNull BindingTrace trace,    @NotNull String message){
      trace.getErrorHandler().genericError(callNode,message);
    }
    @Override public void reportWrongTypeArguments(    @NotNull BindingTrace trace,    @NotNull String message){
      JetTypeArgumentList typeArgumentList=call.getTypeArgumentList();
      if (typeArgumentList != null) {
        trace.getErrorHandler().genericError(typeArgumentList.getNode(),message);
      }
 else {
        reportOverallResolutionError(trace,message);
      }
    }
    @Override public void reportWrongValueArguments(    @NotNull BindingTrace trace,    @NotNull String message){
      ASTNode node;
      JetValueArgumentList valueArgumentList=call.getValueArgumentList();
      if (valueArgumentList != null) {
        node=valueArgumentList.getNode();
      }
 else       if (!call.getFunctionLiteralArguments().isEmpty()) {
        node=call.getFunctionLiteralArguments().get(0).getNode();
      }
 else {
        node=callNode;
      }
      trace.getErrorHandler().genericError(node,message);
    }
    @Override public void reportUnresolvedFunctionReference(    @NotNull BindingTrace trace){
      trace.getErrorHandler().unresolvedReference(functionReference);
    }
  }
;
  return performResolution(scope,expectedType,task);
}
