{
  K2JSTranslator translator=new K2JSTranslator(config);
  TextOutputImpl output=new TextOutputImpl();
  SourceMapBuilder sourceMapBuilder=config.isSourcemap() ? new SourceMap3Builder(outputFile,output,new SourceMapBuilderConsumer()) : null;
  String programCode=translator.generateProgramCode(files,mainCall,output,sourceMapBuilder);
  String prefix=FileUtilsPackage.readTextOrEmpty(outputPrefixFile);
  String postfix=FileUtilsPackage.readTextOrEmpty(outputPostfixFile);
  StringBuilder outBuilder=new StringBuilder(programCode.length() + prefix.length() + postfix.length());
  outBuilder.append(prefix).append(programCode).append(postfix);
  List<File> sourceFiles=ContainerUtil.map(files,new Function<JetFile,File>(){
    @Override public File fun(    JetFile file){
      VirtualFile virtualFile=file.getOriginalFile().getVirtualFile();
      if (virtualFile == null)       return new File(file.getName());
      return VfsUtilCore.virtualToIoFile(virtualFile);
    }
  }
);
  SimpleOutputFile jsFile=new SimpleOutputFile(sourceFiles,outputFile.getName(),outBuilder.toString());
  List<SimpleOutputFile> outputFiles=new SmartList<SimpleOutputFile>(jsFile);
  if (sourceMapBuilder != null) {
    sourceMapBuilder.skipLinesInBegin(StringUtil.getLineBreakCount(prefix));
    SimpleOutputFile sourcemapFile=new SimpleOutputFile(sourceFiles,sourceMapBuilder.getOutFile().getName(),sourceMapBuilder.build());
    outputFiles.add(sourcemapFile);
  }
  return new SimpleOutputFileCollection(outputFiles);
}
