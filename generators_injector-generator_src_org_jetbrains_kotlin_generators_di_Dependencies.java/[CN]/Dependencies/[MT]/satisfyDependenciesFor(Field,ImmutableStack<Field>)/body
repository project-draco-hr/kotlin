{
  if (!satisfied.add(field))   return;
  Expression initialization=field.getInitialization();
  if (initialization instanceof InstantiateType) {
    initializeByConstructorCall(field,neededFor);
  }
  DiType typeToInitialize=InjectorGeneratorUtil.getEffectiveFieldType(field);
  List<Method> declaredMethods=Lists.newArrayList(typeToInitialize.getClazz().getDeclaredMethods());
  Collections.sort(declaredMethods,new Comparator<Method>(){
    @Override public int compare(    @NotNull Method o1,    @NotNull Method o2){
      return o1.getName().compareTo(o2.getName());
    }
  }
);
  for (  Method method : declaredMethods) {
    if (method.getAnnotation(Inject.class) == null || !method.getName().startsWith("set") || method.getParameterTypes().length != 1) {
      continue;
    }
    Type parameterType=method.getGenericParameterTypes()[0];
    Field dependency=findDependencyOfType(DiType.fromReflectionType(parameterType),field + ": " + method+ ": "+ allFields,neededFor.prepend(field));
    used.add(dependency);
    field.getDependencies().add(new SetterDependency(field,method.getName(),dependency));
  }
}
