{
  Solution solution=new Solution();
  for (  Map.Entry<TypeParameterDescriptor,TypeValue> entry : Sets.newHashSet(unknownTypes.entrySet())) {
    TypeParameterDescriptor typeParameterDescriptor=entry.getKey();
    TypeValue typeValue=entry.getValue();
    for (    JetType upperBound : typeParameterDescriptor.getUpperBounds()) {
      addSubtypingConstraint(PARAMETER_BOUND.assertSubtyping(typeValue.getOriginalType(),getTypeValueFor(upperBound).getOriginalType()));
    }
    for (    JetType lowerBound : typeParameterDescriptor.getLowerBounds()) {
      addSubtypingConstraint(PARAMETER_BOUND.assertSubtyping(getTypeValueFor(lowerBound).getOriginalType(),typeValue.getOriginalType()));
    }
  }
  while (!constraintQueue.isEmpty()) {
    SubtypingConstraint constraint=constraintQueue.poll();
    TypeValue lower=getTypeValueFor(constraint.getSubtype());
    TypeValue upper=getTypeValueFor(constraint.getSupertype());
    boolean success=expandSubtypingConstraint(lower,upper);
    if (!success) {
      solution.registerError(constraint.getErrorMessage());
      break;
    }
    if (unsolvedUnknowns.isEmpty())     break;
  }
  for (  TypeValue unknownType : unknownTypes.values()) {
    listener.constraintsForUnknown(unknownType.getTypeParameterDescriptor(),unknownType);
  }
  for (  TypeValue knownType : knownTypes.values()) {
    listener.constraintsForKnownType(knownType.getType(),knownType);
  }
  for (  TypeValue unknownType : unknownTypes.values()) {
    check(unknownType,solution);
  }
  for (  TypeValue knownType : knownTypes.values()) {
    check(knownType,solution);
  }
  listener.done(solution,unknownTypes.keySet());
  return solution;
}
