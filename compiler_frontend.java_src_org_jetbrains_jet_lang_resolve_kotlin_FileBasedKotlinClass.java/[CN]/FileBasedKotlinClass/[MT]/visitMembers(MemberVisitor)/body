{
  new ClassReader(getFileContents()).accept(new ClassVisitor(ASM5){
    @Override public FieldVisitor visitField(    int access,    @NotNull String name,    @NotNull String desc,    String signature,    Object value){
      final AnnotationVisitor v=memberVisitor.visitField(Name.guess(name),desc,value);
      if (v == null)       return null;
      return new FieldVisitor(ASM5){
        @Override public org.jetbrains.org.objectweb.asm.AnnotationVisitor visitAnnotation(        @NotNull String desc,        boolean visible){
          return convertAnnotationVisitor(v,desc,innerClasses);
        }
        @Override public void visitEnd(){
          v.visitEnd();
        }
      }
;
    }
    @Override public MethodVisitor visitMethod(    int access,    @NotNull String name,    @NotNull String desc,    String signature,    String[] exceptions){
      final MethodAnnotationVisitor v=memberVisitor.visitMethod(Name.guess(name),desc);
      if (v == null)       return null;
      return new MethodVisitor(ASM5){
        @Override public org.jetbrains.org.objectweb.asm.AnnotationVisitor visitAnnotation(        @NotNull String desc,        boolean visible){
          return convertAnnotationVisitor(v,desc,innerClasses);
        }
        @Override public org.jetbrains.org.objectweb.asm.AnnotationVisitor visitParameterAnnotation(        int parameter,        @NotNull String desc,        boolean visible){
          AnnotationArgumentVisitor av=v.visitParameterAnnotation(parameter,JvmClassName.byClassId(resolveNameByDesc(desc,innerClasses)));
          return av == null ? null : convertAnnotationVisitor(av,innerClasses);
        }
        @Override public void visitEnd(){
          v.visitEnd();
        }
      }
;
    }
  }
,SKIP_CODE | SKIP_DEBUG | SKIP_FRAMES);
}
