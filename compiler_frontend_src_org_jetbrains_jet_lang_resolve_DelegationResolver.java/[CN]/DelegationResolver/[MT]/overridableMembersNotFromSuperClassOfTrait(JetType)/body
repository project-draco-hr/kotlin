{
  final Collection<T> membersToSkip=getMembersFromClassSupertypeOfTrait(trait);
  return Collections2.filter(memberExtractor.getMembersByType(trait),new Predicate<CallableMemberDescriptor>(){
    @Override public boolean apply(    CallableMemberDescriptor descriptor){
      if (!descriptor.getModality().isOverridable()) {
        return false;
      }
      for (      CallableMemberDescriptor memberToSkip : membersToSkip) {
        if (haveSameSignatures(memberToSkip,descriptor)) {
          return false;
        }
      }
      return true;
    }
  }
);
}
