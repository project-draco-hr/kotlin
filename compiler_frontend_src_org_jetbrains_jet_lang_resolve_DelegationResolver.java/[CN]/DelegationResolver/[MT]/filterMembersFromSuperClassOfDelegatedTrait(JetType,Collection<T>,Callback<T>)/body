{
  final Collection<T> membersToSkip=getMembersFromClassSupertypeOfTrait(delegatedTraitType,callback);
  return Collections2.filter(membersFromTrait,new Predicate<CallableMemberDescriptor>(){
    @Override public boolean apply(    @Nullable CallableMemberDescriptor descriptor){
      for (      CallableMemberDescriptor memberToSkip : membersToSkip) {
        if (haveSameSignatures(memberToSkip,descriptor)) {
          return false;
        }
      }
      return true;
    }
  }
);
}
