{
  String owner=call.owner;
  if (!owner.equals(STRING_OWNER)) {
    return;
  }
  String desc=call.desc;
  String name=call.name;
  if (name.equals(FORMAT_METHOD)) {
    if (!desc.equals("(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;")) {
      return;
    }
    Analyzer analyzer=new Analyzer(new SourceInterpreter(){
      @Override public SourceValue newOperation(      AbstractInsnNode insn){
        if (insn.getOpcode() == Opcodes.LDC) {
          Object cst=((LdcInsnNode)insn).cst;
          if (cst instanceof String) {
            return new StringValue(1,(String)cst);
          }
        }
        return super.newOperation(insn);
      }
    }
);
    try {
      Frame[] frames=analyzer.analyze(classNode.name,method);
      InsnList instructions=method.instructions;
      Frame frame=frames[instructions.indexOf(call)];
      if (frame.getStackSize() == 0) {
        return;
      }
      SourceValue stackValue=(SourceValue)frame.getStack(0);
      if (stackValue instanceof StringValue) {
        String format=((StringValue)stackValue).getString();
        if (format != null && StringFormatDetector.isLocaleSpecific(format)) {
          Location location=context.getLocation(call);
          String message="Implicitly using the default locale is a common source of bugs: " + "Use `String.format(Locale, ...)` instead";
          context.report(STRING_LOCALE,method,call,location,message);
        }
      }
    }
 catch (    AnalyzerException e) {
      context.log(e,null);
    }
  }
 else {
    if (desc.equals("()Ljava/lang/String;")) {
      Location location=context.getLocation(call);
      String message=String.format("Implicitly using the default locale is a common source of bugs: " + "Use `%1$s(Locale)` instead",name);
      context.report(STRING_LOCALE,method,call,location,message);
    }
  }
}
