{
  ScriptDescriptor scriptDescriptor=(ScriptDescriptor)state.getBindingContext().get(BindingContext.SCRIPT,scriptDeclaration);
  ClassBuilder classBuilder=classFileFactory.newVisitor("Script.class");
  classBuilder.defineClass(scriptDeclaration,Opcodes.V1_6,Opcodes.ACC_PUBLIC,"Script",null,JdkNames.JL_OBJECT.getInternalName(),new String[0]);
  Type blockType=jetTypeMapper.mapType(scriptDescriptor.getReturnType(),MapTypeMode.VALUE);
  classBuilder.newField(null,Opcodes.ACC_PUBLIC,LAST_EXPRESSION_VALUE_FIELD_NAME,blockType.getDescriptor(),null,null);
  MethodVisitor mv=classBuilder.newMethod(scriptDeclaration,Opcodes.ACC_PUBLIC,"<init>","()V",null,null);
  mv.visitCode();
  InstructionAdapter instructionAdapter=new InstructionAdapter(mv);
  instructionAdapter.load(0,Type.getObjectType("Script"));
  instructionAdapter.invokespecial(JdkNames.JL_OBJECT.getInternalName(),"<init>","()V");
  instructionAdapter.load(0,Type.getObjectType("Script"));
  StackValue stackValue=new ExpressionCodegen(mv,new FrameMap(),Type.VOID_TYPE,context,state).gen(scriptDeclaration.getBlockExpression());
  if (stackValue.type != Type.VOID_TYPE) {
    instructionAdapter.putfield("Script",LAST_EXPRESSION_VALUE_FIELD_NAME,blockType.getDescriptor());
  }
  instructionAdapter.areturn(Type.VOID_TYPE);
  mv.visitMaxs(-1,-1);
  mv.visitEnd();
  classBuilder.done();
}
