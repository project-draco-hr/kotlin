{
  String isApplicableString=InTextDirectivesUtils.findStringWithPrefixes(fileText,"// IS_APPLICABLE: ");
  boolean isApplicableExpected=isApplicableString == null || isApplicableString.equals("true");
  boolean isApplicableOnPooled=ApplicationManager.getApplication().executeOnPooledThread(new java.util.concurrent.Callable<Boolean>(){
    @Override public Boolean call() throws Exception {
      return ApplicationManager.getApplication().runReadAction(new Computable<Boolean>(){
        @Override public Boolean compute(){
          return intentionAction.isAvailable(getProject(),getEditor(),getFile());
        }
      }
);
    }
  }
).get();
  boolean isApplicableOnEdt=intentionAction.isAvailable(getProject(),getEditor(),getFile());
  Assert.assertEquals("There should not be any difference what thread isApplicable is called from",isApplicableOnPooled,isApplicableOnEdt);
  Assert.assertTrue("isAvailable() for " + intentionAction.getClass() + " should return "+ isApplicableExpected,isApplicableExpected == isApplicableOnEdt);
  String intentionTextString=InTextDirectivesUtils.findStringWithPrefixes(fileText,"// INTENTION_TEXT: ");
  if (intentionTextString != null) {
    assertEquals("Intention text mismatch.",intentionTextString,intentionAction.getText());
  }
  String shouldFailString=StringUtil.join(InTextDirectivesUtils.findListWithPrefixes(fileText,"// SHOULD_FAIL_WITH: "),", ");
  try {
    if (isApplicableExpected) {
      ApplicationUtilsKt.executeWriteCommand(getProject(),intentionAction.getText(),null,new Function0<Object>(){
        @Override public Object invoke(){
          intentionAction.invoke(getProject(),getEditor(),getFile());
          return null;
        }
      }
);
      if (shouldFailString.isEmpty()) {
        for (        Map.Entry<String,PsiFile> entry : pathToFiles.entrySet()) {
          String filePath=entry.getKey();
          String canonicalPathToExpectedFile=PathUtil.getCanonicalPath(filePath + ".after");
          if (filePath.equals(mainFilePath)) {
            try {
              checkResultByFile(canonicalPathToExpectedFile);
            }
 catch (            ComparisonFailure e) {
              KotlinTestUtils.assertEqualsToFile(new File(canonicalPathToExpectedFile),getEditor().getDocument().getText());
            }
          }
 else {
            KotlinTestUtils.assertEqualsToFile(new File(canonicalPathToExpectedFile),entry.getValue().getText());
          }
        }
      }
    }
    assertEquals("Expected test to fail.","",shouldFailString);
  }
 catch (  BaseRefactoringProcessor.ConflictsInTestsException e) {
    assertEquals("Failure message mismatch.",shouldFailString,StringUtil.join(e.getMessages(),", "));
  }
catch (  CommonRefactoringUtil.RefactoringErrorHintException e) {
    assertEquals("Failure message mismatch.",shouldFailString,e.getMessage());
  }
}
