{
  String isApplicableString=InTextDirectivesUtils.findStringWithPrefixes(fileText,"// IS_APPLICABLE: ");
  boolean isApplicableExpected=isApplicableString == null || isApplicableString.equals("true");
  Assert.assertTrue("isAvailable() for " + intentionAction.getClass() + " should return "+ isApplicableExpected,isApplicableExpected == intentionAction.isAvailable(getProject(),getEditor(),getFile()));
  String intentionTextString=InTextDirectivesUtils.findStringWithPrefixes(fileText,"// INTENTION_TEXT: ");
  if (intentionTextString != null) {
    assertEquals("Intention text mismatch.",intentionTextString,intentionAction.getText());
  }
  String shouldFailString=InTextDirectivesUtils.findStringWithPrefixes(fileText,"// SHOULD_FAIL_WITH: ");
  try {
    if (isApplicableExpected) {
      ApplicationUtilsKt.executeWriteCommand(getProject(),intentionAction.getText(),null,new Function0<Object>(){
        @Override public Object invoke(){
          intentionAction.invoke(getProject(),getEditor(),getFile());
          return null;
        }
      }
);
      if (shouldFailString == null) {
        for (        Map.Entry<String,PsiFile> entry : pathToFile.entrySet()) {
          myFile=entry.getValue();
          String canonicalPathToExpectedFile=PathUtil.getCanonicalPath(entry.getKey() + ".after");
          try {
            checkResultByFile(canonicalPathToExpectedFile);
          }
 catch (          ComparisonFailure e) {
            KotlinTestUtils.assertEqualsToFile(new File(canonicalPathToExpectedFile),getEditor().getDocument().getText());
          }
        }
      }
    }
    assertNull("Expected test to fail.",shouldFailString);
  }
 catch (  BaseRefactoringProcessor.ConflictsInTestsException e) {
    assertEquals("Failure message mismatch.",shouldFailString,StringUtil.join(e.getMessages(),", "));
  }
catch (  CommonRefactoringUtil.RefactoringErrorHintException e) {
    assertEquals("Failure message mismatch.",shouldFailString,e.getMessage());
  }
}
