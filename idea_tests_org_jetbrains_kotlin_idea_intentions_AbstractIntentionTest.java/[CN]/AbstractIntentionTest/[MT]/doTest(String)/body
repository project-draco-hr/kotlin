{
  File mainFile=new File(path);
  String mainFileName=FileUtil.getNameWithoutExtension(mainFile);
  IntentionAction intentionAction=createIntention(mainFile);
  List<String> sourceFilePaths=new ArrayList<String>();
  File parentDir=mainFile.getParentFile();
  extraFileLoop:   for (int i=1; true; i++) {
    for (    String extension : EXTENSIONS) {
      File extraFile=new File(parentDir,mainFileName + "." + i+ extension);
      if (extraFile.exists()) {
        sourceFilePaths.add(extraFile.getPath());
        continue extraFileLoop;
      }
    }
    break;
  }
  sourceFilePaths.add(path);
  Map<String,PsiFile> pathToFile=ContainerUtil.newMapFromKeys(sourceFilePaths.iterator(),new Convertor<String,PsiFile>(){
    @Override public PsiFile convert(    String path){
      try {
        configureByFile(path);
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
      return myFile;
    }
  }
);
  String fileText=FileUtil.loadFile(mainFile,true);
  String minJavaVersion=InTextDirectivesUtils.findStringWithPrefixes(fileText,"// MIN_JAVA_VERSION: ");
  if (minJavaVersion != null && !SystemInfo.isJavaVersionAtLeast(minJavaVersion))   return;
  boolean isWithRuntime=InTextDirectivesUtils.findStringWithPrefixes(fileText,"// WITH_RUNTIME") != null;
  try {
    if (isWithRuntime) {
      ConfigLibraryUtil.configureKotlinRuntimeAndSdk(getModule(),PluginTestCaseBase.mockJdk());
    }
    DirectiveBasedActionUtils.INSTANCE$.checkForUnexpectedErrors((JetFile)getFile());
    doTestFor(pathToFile,intentionAction,fileText);
  }
  finally {
    if (isWithRuntime) {
      ConfigLibraryUtil.unConfigureKotlinRuntimeAndSdk(getModule(),getTestProjectJdk());
    }
  }
}
