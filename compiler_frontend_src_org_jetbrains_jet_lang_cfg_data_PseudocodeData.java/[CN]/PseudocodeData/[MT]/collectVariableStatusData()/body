{
  Map<VariableDescriptor,VariableUseStatus> sinkInstructionData=Maps.newHashMap();
  for (  VariableDescriptor usedVariable : declarationDataMap.get(pseudocode).usedVariables) {
    sinkInstructionData.put(usedVariable,VariableUseStatus.UNUSED);
  }
  return PseudocodeTraverser.collectInformationFromInstructionGraph(true,false,pseudocode,Collections.<VariableDescriptor,VariableUseStatus>emptyMap(),sinkInstructionData,new PseudocodeTraverser.InstructionDataMergeStrategy<Map<VariableDescriptor,VariableUseStatus>>(){
    @Override public Edges<Map<VariableDescriptor,VariableUseStatus>> execute(    @NotNull Instruction instruction,    @NotNull Collection<Map<VariableDescriptor,VariableUseStatus>> incomingEdgesData){
      Map<VariableDescriptor,VariableUseStatus> enterResult=Maps.newHashMap();
      for (      Map<VariableDescriptor,VariableUseStatus> edgeData : incomingEdgesData) {
        for (        Map.Entry<VariableDescriptor,VariableUseStatus> entry : edgeData.entrySet()) {
          VariableDescriptor variableDescriptor=entry.getKey();
          VariableUseStatus variableUseStatus=entry.getValue();
          enterResult.put(variableDescriptor,variableUseStatus.merge(enterResult.get(variableDescriptor)));
        }
      }
      VariableDescriptor variableDescriptor=extractVariableDescriptorIfAny(instruction,true);
      if (variableDescriptor == null || (!(instruction instanceof ReadValueInstruction) && !(instruction instanceof WriteValueInstruction))) {
        return Edges.create(enterResult,enterResult);
      }
      Map<VariableDescriptor,VariableUseStatus> exitResult=Maps.newHashMap(enterResult);
      if (instruction instanceof ReadValueInstruction) {
        exitResult.put(variableDescriptor,VariableUseStatus.LAST_READ);
      }
 else {
        VariableUseStatus variableUseStatus=enterResult.get(variableDescriptor);
        if (variableUseStatus == null)         variableUseStatus=VariableUseStatus.UNUSED;
switch (variableUseStatus) {
case UNUSED:
case ONLY_WRITTEN_NEVER_READ:
          exitResult.put(variableDescriptor,VariableUseStatus.ONLY_WRITTEN_NEVER_READ);
        break;
case LAST_WRITTEN:
case LAST_READ:
      exitResult.put(variableDescriptor,VariableUseStatus.LAST_WRITTEN);
  }
}
return Edges.create(enterResult,exitResult);
}
}
);
}
