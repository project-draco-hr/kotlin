{
  CompilerDependencies compilerDependencies=CompileCompilerDependenciesTest.compilerDependenciesForTests(CompilerSpecialMode.JDK_HEADERS,false);
  ReplInterpreter repl=new ReplInterpreter(disposable,compilerDependencies,Collections.singletonList(new File("out/production/runtime")));
  ReplSessionTestFile file=ReplSessionTestFile.load(new File("compiler/testData/repl/" + relativePath));
  for (  ReplSessionTestFile.OneLine t : file.getLines()) {
    String code=t.getCode();
    String expected=t.getExpected().replaceFirst("\r?\n$","");
    ReplSessionTestFile.MatchType matchType=t.getMatchType();
    ReplInterpreter.LineResult lineResult=repl.eval(code);
    Object actual;
    if (lineResult.isSuccessful()) {
      actual=lineResult.getValue();
    }
 else {
      actual=lineResult.getErrorText();
    }
    String actualString=(actual != null ? actual.toString() : "null").replaceFirst("\r?\n$","");
    if (matchType == ReplSessionTestFile.MatchType.EQUALS) {
      Assert.assertEquals("after evaluation of: " + code,expected,actualString);
    }
 else     if (matchType == ReplSessionTestFile.MatchType.SUBSTRING) {
      Assert.assertTrue("must contain substring: " + expected + ", actual: "+ actualString,actualString.contains(expected));
    }
  }
}
