{
  if ((superDescriptor.getReceiverParameter() == null) != (subDescriptor.getReceiverParameter() == null)) {
    return OverrideCompatibilityInfo.receiverPresenceMismatch();
  }
  if (superDescriptor.getValueParameters().size() != subDescriptor.getValueParameters().size()) {
    return OverrideCompatibilityInfo.valueParameterNumberMismatch();
  }
  List<JetType> superValueParameters=compiledValueParameters(superDescriptor);
  List<JetType> subValueParameters=compiledValueParameters(subDescriptor);
  if (forOverride) {
    List<TypeParameterDescriptor> superTypeParameters=superDescriptor.getTypeParameters();
    List<TypeParameterDescriptor> subTypeParameters=subDescriptor.getTypeParameters();
    if (superTypeParameters.size() != subTypeParameters.size()) {
      for (int i=0; i < superValueParameters.size(); ++i) {
        JetType superValueParameterType=getUpperBound(superValueParameters.get(i));
        JetType subValueParameterType=getUpperBound(subValueParameters.get(i));
        if (!JetTypeChecker.INSTANCE.equalTypes(superValueParameterType,subValueParameterType)) {
          return OverrideCompatibilityInfo.typeParameterNumberMismatch();
        }
      }
      return OverrideCompatibilityInfo.valueParameterTypeMismatch(null,null,OverrideCompatibilityInfo.Result.CONFLICT);
    }
    final Map<TypeConstructor,TypeConstructor> matchingTypeConstructors=new HashMap<TypeConstructor,TypeConstructor>();
    for (int i=0, typeParametersSize=superTypeParameters.size(); i < typeParametersSize; i++) {
      TypeParameterDescriptor superTypeParameter=superTypeParameters.get(i);
      TypeParameterDescriptor subTypeParameter=subTypeParameters.get(i);
      matchingTypeConstructors.put(superTypeParameter.getTypeConstructor(),subTypeParameter.getTypeConstructor());
    }
    JetTypeChecker.TypeConstructorEquality localEqualityAxioms=new JetTypeChecker.TypeConstructorEquality(){
      @Override public boolean equals(      @NotNull TypeConstructor a,      @NotNull TypeConstructor b){
        if (equalityAxioms.equals(a,b))         return true;
        TypeConstructor img1=matchingTypeConstructors.get(a);
        TypeConstructor img2=matchingTypeConstructors.get(b);
        if (!(img1 != null && img1.equals(b)) && !(img2 != null && img2.equals(a))) {
          return false;
        }
        return true;
      }
    }
;
    for (int i=0, typeParametersSize=superTypeParameters.size(); i < typeParametersSize; i++) {
      TypeParameterDescriptor superTypeParameter=superTypeParameters.get(i);
      TypeParameterDescriptor subTypeParameter=subTypeParameters.get(i);
      if (!JetTypeChecker.INSTANCE.equalTypes(superTypeParameter.getUpperBoundsAsType(),subTypeParameter.getUpperBoundsAsType(),localEqualityAxioms)) {
        return OverrideCompatibilityInfo.boundsMismatch(superTypeParameter,subTypeParameter);
      }
    }
    for (int i=0, unsubstitutedValueParametersSize=superValueParameters.size(); i < unsubstitutedValueParametersSize; i++) {
      JetType superValueParameter=superValueParameters.get(i);
      JetType subValueParameter=subValueParameters.get(i);
      boolean bothErrors=superValueParameter.isError() && subValueParameter.isError();
      if (!bothErrors && !JetTypeChecker.INSTANCE.equalTypes(superValueParameter,subValueParameter,localEqualityAxioms)) {
        return OverrideCompatibilityInfo.valueParameterTypeMismatch(superValueParameter,subValueParameter,OverrideCompatibilityInfo.Result.INCOMPATIBLE);
      }
    }
    for (    ExternalOverridabilityCondition externalCondition : EXTERNAL_CONDITIONS) {
      if (!externalCondition.isOverridable(superDescriptor,subDescriptor)) {
        return OverrideCompatibilityInfo.externalConditionFailed(externalCondition.getClass());
      }
    }
  }
 else {
    for (int i=0; i < superValueParameters.size(); ++i) {
      JetType superValueParameterType=getUpperBound(superValueParameters.get(i));
      JetType subValueParameterType=getUpperBound(subValueParameters.get(i));
      if (!JetTypeChecker.INSTANCE.equalTypes(superValueParameterType,subValueParameterType)) {
        return OverrideCompatibilityInfo.valueParameterTypeMismatch(superValueParameterType,subValueParameterType,OverrideCompatibilityInfo.Result.INCOMPATIBLE);
      }
    }
    return OverrideCompatibilityInfo.success();
  }
  return OverrideCompatibilityInfo.success();
}
