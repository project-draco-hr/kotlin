{
  InputStream stream=JetStandardClasses.class.getClassLoader().getResourceAsStream("jet/Library.jet");
  try {
    JetFile file=(JetFile)PsiFileFactory.getInstance(project).createFileFromText("Library.jet",JetFileType.INSTANCE,FileUtil.loadTextAndClose(new InputStreamReader(stream)));
    JetSemanticServices bootstrappingSemanticServices=JetSemanticServices.createSemanticServices(this);
    BindingTraceContext bindingTraceContext=new BindingTraceContext();
    WritableScopeImpl writableScope=new WritableScopeImpl(JetStandardClasses.STANDARD_CLASSES,JetStandardClasses.STANDARD_CLASSES_NAMESPACE,RedeclarationHandler.THROW_EXCEPTION).setDebugName("Root bootstrap scope");
    TopDownAnalyzer.processStandardLibraryNamespace(bootstrappingSemanticServices,bindingTraceContext,writableScope,JetStandardClasses.STANDARD_CLASSES_NAMESPACE,file.getRootNamespace());
    this.libraryScope=JetStandardClasses.STANDARD_CLASSES_NAMESPACE.getMemberScope();
    AnalyzingUtils.throwExceptionOnErrors(bindingTraceContext.getBindingContext());
    this.byteClass=(ClassDescriptor)libraryScope.getClassifier("Byte");
    this.charClass=(ClassDescriptor)libraryScope.getClassifier("Char");
    this.shortClass=(ClassDescriptor)libraryScope.getClassifier("Short");
    this.intClass=(ClassDescriptor)libraryScope.getClassifier("Int");
    this.longClass=(ClassDescriptor)libraryScope.getClassifier("Long");
    this.floatClass=(ClassDescriptor)libraryScope.getClassifier("Float");
    this.doubleClass=(ClassDescriptor)libraryScope.getClassifier("Double");
    this.booleanClass=(ClassDescriptor)libraryScope.getClassifier("Boolean");
    this.stringClass=(ClassDescriptor)libraryScope.getClassifier("String");
    this.arrayClass=(ClassDescriptor)libraryScope.getClassifier("Array");
    this.iterableClass=(ClassDescriptor)libraryScope.getClassifier("Iterable");
    typeInfoNamespace=libraryScope.getNamespace("typeinfo");
    this.typeInfoClass=(ClassDescriptor)typeInfoNamespace.getMemberScope().getClassifier("TypeInfo");
    typeInfoFunction=typeInfoNamespace.getMemberScope().getFunctions("typeinfo");
    this.byteType=new JetTypeImpl(getByte());
    this.charType=new JetTypeImpl(getChar());
    this.shortType=new JetTypeImpl(getShort());
    this.intType=new JetTypeImpl(getInt());
    this.longType=new JetTypeImpl(getLong());
    this.floatType=new JetTypeImpl(getFloat());
    this.doubleType=new JetTypeImpl(getDouble());
    this.booleanType=new JetTypeImpl(getBoolean());
    this.stringType=new JetTypeImpl(getString());
    this.tuple0Type=new JetTypeImpl(JetStandardClasses.getTuple(0));
    this.byteArrayClass=(ClassDescriptor)libraryScope.getClassifier("ByteArray");
    this.charArrayClass=(ClassDescriptor)libraryScope.getClassifier("CharArray");
    this.shortArrayClass=(ClassDescriptor)libraryScope.getClassifier("ShortArray");
    this.intArrayClass=(ClassDescriptor)libraryScope.getClassifier("IntArray");
    this.longArrayClass=(ClassDescriptor)libraryScope.getClassifier("LongArray");
    this.floatArrayClass=(ClassDescriptor)libraryScope.getClassifier("FloatArray");
    this.doubleArrayClass=(ClassDescriptor)libraryScope.getClassifier("DoubleArray");
    this.booleanArrayClass=(ClassDescriptor)libraryScope.getClassifier("BooleanArray");
    this.byteArrayType=new JetTypeImpl(byteArrayClass);
    this.charArrayType=new JetTypeImpl(charArrayClass);
    this.shortArrayType=new JetTypeImpl(shortArrayClass);
    this.intArrayType=new JetTypeImpl(intArrayClass);
    this.longArrayType=new JetTypeImpl(longArrayClass);
    this.floatArrayType=new JetTypeImpl(floatArrayClass);
    this.doubleArrayType=new JetTypeImpl(doubleArrayClass);
    this.booleanArrayType=new JetTypeImpl(booleanArrayClass);
    this.nullableByteType=TypeUtils.makeNullable(byteType);
    this.nullableCharType=TypeUtils.makeNullable(charType);
    this.nullableShortType=TypeUtils.makeNullable(shortType);
    this.nullableIntType=TypeUtils.makeNullable(intType);
    this.nullableLongType=TypeUtils.makeNullable(longType);
    this.nullableFloatType=TypeUtils.makeNullable(floatType);
    this.nullableDoubleType=TypeUtils.makeNullable(doubleType);
    this.nullableBooleanType=TypeUtils.makeNullable(booleanType);
    this.nullableStringType=TypeUtils.makeNullable(stringType);
    this.nullableTuple0Type=TypeUtils.makeNullable(tuple0Type);
  }
 catch (  IOException e) {
    throw new IllegalStateException(e);
  }
}
