{
  final KtType type=originalProjection.getType();
  Variance projectionKind=originalProjection.getProjectionKind();
  if (type.getConstructor().getDeclarationDescriptor() instanceof TypeParameterDescriptor) {
    return originalProjection;
  }
  List<TypeProjection> substitutedArguments=substituteTypeArguments(type.getConstructor().getParameters(),type.getArguments(),recursionDepth);
  TypeSubstitution substitutionFilteringTypeParameters=new DelegatedTypeSubstitution(substitution){
    private final Collection<TypeConstructor> containedOrCapturedTypeParameters=TypeUtilsKt.getContainedAndCapturedTypeParameterConstructors(type);
    @Nullable @Override public TypeProjection get(    @NotNull KtType key){
      return containedOrCapturedTypeParameters.contains(key.getConstructor()) ? substitution.get(key) : null;
    }
  }
;
  KtType substitutedType=KtTypeImpl.create(type.getAnnotations(),type.getConstructor(),type.isMarkedNullable(),substitutedArguments,substitutionFilteringTypeParameters,new SubstitutingScope(type.getMemberScope(),create(substitutionFilteringTypeParameters)),type.getCapabilities());
  return new TypeProjectionImpl(projectionKind,substitutedType);
}
