{
  KotlinType type=originalProjection.getType();
  Variance projectionKind=originalProjection.getProjectionKind();
  if (type.getConstructor().getDeclarationDescriptor() instanceof TypeParameterDescriptor) {
    return originalProjection;
  }
  List<TypeProjection> substitutedArguments=substituteTypeArguments(type.getConstructor().getParameters(),type.getArguments(),recursionDepth);
  KotlinType substitutedType=TypeSubstitutionKt.replace(type,substitutedArguments,substitution.filterAnnotations(type.getAnnotations()));
  return new TypeProjectionImpl(projectionKind,substitutedType);
}
