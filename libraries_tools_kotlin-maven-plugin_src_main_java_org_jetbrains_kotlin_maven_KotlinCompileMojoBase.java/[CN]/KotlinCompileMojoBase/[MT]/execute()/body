{
  if (project.getPackaging().equals("pom")) {
    getLog().info("Skipping Kotlin execution for POM projects");
  }
  List<String> sources=getSources();
  if (sources != null && sources.size() > 0) {
    boolean sourcesExists=false;
    for (    String source : sources) {
      if (new File(source).exists()) {
        sourcesExists=true;
        break;
      }
    }
    if (!sourcesExists) {
      getLog().warn("No sources found skipping Kotlin compile");
      return;
    }
  }
  final CompilerArguments arguments=createCompilerArguments();
  configureCompilerArguments(arguments);
  final CLICompiler compiler=createCompiler();
  printCompilerArgumentsIfDebugEnabled(arguments,compiler);
  final ExitCode exitCode=compiler.exec(System.err,arguments);
switch (exitCode) {
case COMPILATION_ERROR:
    throw new MojoExecutionException("Compilation error. See log for more details");
case INTERNAL_ERROR:
  throw new MojoExecutionException("Internal compiler error. See log for more details");
}
}
