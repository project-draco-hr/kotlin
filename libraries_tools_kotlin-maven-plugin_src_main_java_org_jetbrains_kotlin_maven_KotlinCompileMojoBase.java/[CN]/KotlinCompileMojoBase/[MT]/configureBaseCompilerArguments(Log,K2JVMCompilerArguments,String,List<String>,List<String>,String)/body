{
  arguments.noStdlib=true;
  final ArrayList<String> classpathList=new ArrayList<String>();
  if (module != null) {
    log.info("Compiling Kotlin module " + module);
    arguments.setModule(module);
  }
 else {
    if (sources.size() <= 0)     throw new MojoExecutionException("No source roots to compile");
    arguments.setSourceDirs(sources);
    log.info("Compiling Kotlin sources from " + arguments.getSourceDirs());
    classpathList.addAll(sources);
  }
  classpathList.addAll(classpath);
  if (classpathList.remove(output)) {
    log.debug("Removed target directory from compiler classpath (" + output + ")");
  }
  if (classpathList.size() > 0) {
    final String classPathString=Joiner.on(File.pathSeparator).join(classpathList);
    log.info("Classpath: " + classPathString);
    arguments.setClasspath(classPathString);
  }
  log.info("Classes directory is " + output);
  arguments.setOutputDir(output);
  arguments.noJdkAnnotations=true;
  String jdkAnnotation=getJdkAnnotations().getPath();
  arguments.annotations=jdkAnnotation;
  List<String> list=new ArrayList<String>();
  if (jdkAnnotation != null && jdkAnnotation.length() > 0) {
    list.add(jdkAnnotation);
  }
  if (annotationPaths != null) {
    for (    String annotationPath : annotationPaths) {
      if (new File(annotationPath).exists()) {
        list.add(annotationPath);
      }
 else {
        log.info("annotation path " + annotationPath + " does not exist");
      }
    }
  }
  arguments.annotations=join(list,File.pathSeparator);
  log.info("Using kotlin annotations from " + arguments.annotations);
}
