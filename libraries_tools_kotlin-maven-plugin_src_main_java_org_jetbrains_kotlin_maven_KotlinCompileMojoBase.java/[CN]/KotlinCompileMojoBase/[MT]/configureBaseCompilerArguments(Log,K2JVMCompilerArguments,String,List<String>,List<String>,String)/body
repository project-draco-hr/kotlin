{
  arguments.noStdlib=true;
  final ArrayList<String> classpathList=new ArrayList<String>();
  if (module != null) {
    log.info("Compiling Kotlin module " + module);
    arguments.module=module;
  }
 else {
    if (sources.size() <= 0)     throw new MojoExecutionException("No source roots to compile");
    arguments.src=join(sources,File.pathSeparator);
    log.info("Compiling Kotlin sources from " + arguments.src);
    classpathList.addAll(sources);
  }
  classpathList.addAll(classpath);
  if (classpathList.remove(output)) {
    log.debug("Removed target directory from compiler classpath (" + output + ")");
  }
  if (classpathList.size() > 0) {
    String classPathString=join(classpathList,File.pathSeparator);
    log.info("Classpath: " + classPathString);
    arguments.classpath=classPathString;
  }
  log.info("Classes directory is " + output);
  arguments.outputDir=output;
  arguments.noJdkAnnotations=true;
  arguments.annotations=getFullAnnotationsPath(log,annotationPaths);
  log.info("Using kotlin annotations from " + arguments.annotations);
  arguments.inline=inline;
  if (!CompilerArgumentsUtil.checkOption(arguments.inline)) {
    throw new MojoExecutionException(CompilerArgumentsUtil.getWrongInlineOptionErrorMessage(arguments.inline));
  }
  log.info("Method inlining is " + CompilerArgumentsUtil.optionToBooleanFlag(arguments.inline,InlineCodegenUtil.DEFAULT_INLINE_FLAG));
}
