{
  ClassDescriptor descriptor=state.getBindingContext().get(BindingContext.CLASS,aClass);
  ClassBuilder classBuilder=state.forClassImplementation(descriptor);
  final CodegenContext contextForInners=context.intoClass(descriptor,OwnerKind.IMPLEMENTATION,state);
  if (state.getClassBuilderMode() == ClassBuilderMode.SIGNATURES) {
    generateImplementation(context,aClass,OwnerKind.IMPLEMENTATION,contextForInners.getAccessors(),classBuilder);
  }
  for (  JetDeclaration declaration : aClass.getDeclarations()) {
    if (declaration instanceof JetClass) {
      if (declaration instanceof JetEnumEntry && !state.getInjector().getClosureAnnotator().enumEntryNeedSubclass((JetEnumEntry)declaration)) {
        continue;
      }
      generate(contextForInners,(JetClass)declaration);
    }
    if (declaration instanceof JetClassObject) {
      generate(contextForInners,((JetClassObject)declaration).getObjectDeclaration());
    }
  }
  if (state.getClassBuilderMode() != ClassBuilderMode.SIGNATURES) {
    generateImplementation(context,aClass,OwnerKind.IMPLEMENTATION,contextForInners.getAccessors(),classBuilder);
  }
  classBuilder.done();
}
