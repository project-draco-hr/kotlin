{
  if (this.jetFile == null) {
    actualText.append(this.clearText);
    return true;
  }
  Set<Diagnostic> jvmSignatureDiagnostics=skipJvmSignatureDiagnostics ? Collections.<Diagnostic>emptySet() : computeJvmSignatureDiagnostics(bindingContext);
  final boolean[] ok={true};
  List<Diagnostic> diagnostics=ContainerUtil.filter(CollectionsKt.plus(CheckerTestUtil.getDiagnosticsIncludingSyntaxErrors(bindingContext,jetFile,markDynamicCalls,dynamicCallDescriptors),jvmSignatureDiagnostics),whatDiagnosticsToConsider);
  Map<Diagnostic,CheckerTestUtil.TextDiagnostic> diagnosticToExpectedDiagnostic=ContainerUtil.newHashMap();
  CheckerTestUtil.diagnosticsDiff(diagnosticToExpectedDiagnostic,diagnosedRanges,diagnostics,new CheckerTestUtil.DiagnosticDiffCallbacks(){
    @Override public void missingDiagnostic(    CheckerTestUtil.TextDiagnostic diagnostic,    int expectedStart,    int expectedEnd){
      String message="Missing " + diagnostic.getName() + DiagnosticUtils.atLocation(jetFile,new TextRange(expectedStart,expectedEnd));
      System.err.println(message);
      ok[0]=false;
    }
    @Override public void wrongParametersDiagnostic(    CheckerTestUtil.TextDiagnostic expectedDiagnostic,    CheckerTestUtil.TextDiagnostic actualDiagnostic,    int start,    int end){
      String message="Parameters of diagnostic not equal at position " + DiagnosticUtils.atLocation(jetFile,new TextRange(start,end)) + ". Expected: "+ expectedDiagnostic.asString()+ ", actual: "+ actualDiagnostic.asString();
      System.err.println(message);
      ok[0]=false;
    }
    @Override public void unexpectedDiagnostic(    CheckerTestUtil.TextDiagnostic diagnostic,    int actualStart,    int actualEnd){
      String message="Unexpected " + diagnostic.getName() + DiagnosticUtils.atLocation(jetFile,new TextRange(actualStart,actualEnd));
      System.err.println(message);
      ok[0]=false;
    }
  }
);
  actualText.append(CheckerTestUtil.addDiagnosticMarkersToText(jetFile,diagnostics,diagnosticToExpectedDiagnostic,new Function<PsiFile,String>(){
    @Override public String fun(    PsiFile file){
      return file.getText();
    }
  }
));
  stripExtras(actualText);
  return ok[0];
}
