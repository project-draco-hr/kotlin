{
  String directives=directiveMap.get(LANGUAGE_DIRECTIVE);
  if (directives == null)   return null;
  Matcher matcher=LANGUAGE_PATTERN.matcher(directives);
  if (!matcher.find()) {
    Assert.fail("Wrong syntax in the '// !LANGUAGE: ...' directive:\n" + "found: '" + directives + "'\n"+ "Must be '([+-]LanguageFeatureName)+'\n"+ "where '+' means 'enable' and '-' means 'disable'\n"+ "and language feature names are names of enum entries in LanguageFeature enum class");
  }
  final Map<LanguageFeature,Boolean> values=new HashMap<LanguageFeature,Boolean>();
  do {
    boolean enable=matcher.group(1).equals("+");
    String name=matcher.group(2);
    LanguageFeature feature=LanguageFeature.fromString(name);
    if (feature == null) {
      Assert.fail("Language feature not found, please check spelling: " + name + "\n"+ "Known features:\n    "+ StringsKt.join(Arrays.asList(LanguageFeature.values()),"\n    "));
    }
    if (values.put(feature,enable) != null) {
      Assert.fail("Duplicate entry for the language feature: " + name);
    }
  }
 while (matcher.find());
  return new LanguageVersionSettings(){
    @Override public boolean supportsFeature(    @NotNull LanguageFeature feature){
      Boolean enabled=values.get(feature);
      if (enabled != null) {
        return enabled;
      }
      return LanguageVersionSettingsImpl.DEFAULT.supportsFeature(feature);
    }
  }
;
}
