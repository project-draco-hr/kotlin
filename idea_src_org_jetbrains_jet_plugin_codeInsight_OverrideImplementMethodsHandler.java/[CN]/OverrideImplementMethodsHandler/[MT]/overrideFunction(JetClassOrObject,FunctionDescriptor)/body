{
  FunctionDescriptor newDescriptor=descriptor.copy(descriptor.getContainingDeclaration(),Modality.OPEN,descriptor.getVisibility(),descriptor.getKind(),true);
  newDescriptor.addOverriddenDescriptor(descriptor);
  boolean isAbstractFun=descriptor.getModality() == Modality.ABSTRACT;
  StringBuilder delegationBuilder=new StringBuilder();
  if (isAbstractFun) {
    delegationBuilder.append("throw UnsupportedOperationException()");
  }
 else {
    delegationBuilder.append("super");
    if (classOrObject.getDelegationSpecifiers().size() > 1) {
      delegationBuilder.append("<").append(descriptor.getContainingDeclaration().getName()).append(">");
    }
    delegationBuilder.append(".").append(descriptor.getName()).append("(");
  }
  boolean first=true;
  if (!isAbstractFun) {
    for (    ValueParameterDescriptor parameterDescriptor : descriptor.getValueParameters()) {
      if (!first) {
        delegationBuilder.append(", ");
      }
      first=false;
      delegationBuilder.append(parameterDescriptor.getName());
    }
    delegationBuilder.append(")");
  }
  JetType returnType=descriptor.getReturnType();
  KotlinBuiltIns builtIns=KotlinBuiltIns.getInstance();
  boolean returnsNotUnit=returnType != null && !builtIns.getUnitType().equals(returnType);
  String body="{" + (returnsNotUnit && !isAbstractFun ? "return " : "") + delegationBuilder.toString()+ "}";
  return JetPsiFactory(classOrObject.getProject()).createFunction(OVERRIDE_RENDERER.render(newDescriptor) + body);
}
