{
  StringBuilder bodyBuilder=new StringBuilder();
  bodyBuilder.append(displayableVisibility(descriptor));
  bodyBuilder.append("override fun ");
  List<String> whereRestrictions=new ArrayList<String>();
  if (!descriptor.getTypeParameters().isEmpty()) {
    bodyBuilder.append("<");
    boolean first=true;
    for (    TypeParameterDescriptor param : descriptor.getTypeParameters()) {
      if (!first) {
        bodyBuilder.append(", ");
      }
      bodyBuilder.append(param.getName());
      Set<JetType> upperBounds=param.getUpperBounds();
      if (!upperBounds.isEmpty()) {
        boolean firstUpperBound=true;
        for (        JetType upperBound : upperBounds) {
          String upperBoundText=" : " + renderType(upperBound);
          if (upperBound != KotlinBuiltIns.getInstance().getDefaultBound()) {
            if (firstUpperBound) {
              bodyBuilder.append(upperBoundText);
            }
 else {
              whereRestrictions.add(param.getName() + upperBoundText);
            }
          }
          firstUpperBound=false;
        }
      }
      first=false;
    }
    bodyBuilder.append("> ");
  }
  addReceiverParameter(descriptor,bodyBuilder);
  bodyBuilder.append(descriptor.getName()).append("(");
  boolean isAbstractFun=descriptor.getModality() == Modality.ABSTRACT;
  StringBuilder delegationBuilder=new StringBuilder();
  if (isAbstractFun) {
    delegationBuilder.append("throw UnsupportedOperationException()");
  }
 else {
    delegationBuilder.append("super<").append(descriptor.getContainingDeclaration().getName());
    delegationBuilder.append(">.").append(descriptor.getName()).append("(");
  }
  boolean first=true;
  for (  ValueParameterDescriptor parameterDescriptor : descriptor.getValueParameters()) {
    if (!first) {
      bodyBuilder.append(",");
      if (!isAbstractFun) {
        delegationBuilder.append(",");
      }
    }
    first=false;
    bodyBuilder.append(parameterDescriptor.getName());
    bodyBuilder.append(" : ");
    bodyBuilder.append(renderType(parameterDescriptor.getType()));
    if (!isAbstractFun) {
      delegationBuilder.append(parameterDescriptor.getName());
    }
  }
  bodyBuilder.append(")");
  if (!isAbstractFun) {
    delegationBuilder.append(")");
  }
  final JetType returnType=descriptor.getReturnType();
  final KotlinBuiltIns builtIns=KotlinBuiltIns.getInstance();
  boolean returnsNotUnit=returnType != null && !builtIns.getUnitType().equals(returnType);
  if (returnsNotUnit) {
    bodyBuilder.append(" : ").append(renderType(returnType));
  }
  if (!whereRestrictions.isEmpty()) {
    bodyBuilder.append("\n").append("where ").append(StringUtil.join(whereRestrictions,", "));
  }
  bodyBuilder.append("{").append(returnsNotUnit && !isAbstractFun ? "return " : "").append(delegationBuilder.toString()).append("}");
  return JetPsiFactory.createFunction(project,bodyBuilder.toString());
}
