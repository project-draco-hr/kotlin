{
  this.bodyResolver=new BodyResolver();
  this.project=project;
  this.topDownAnalysisParameters=topDownAnalysisParameters;
  this.bindingTrace=bindingTrace;
  this.bodiesResolveContext=bodiesResolveContext;
  this.moduleConfiguration=moduleConfiguration;
  this.callResolver=new CallResolver();
  this.candidateResolver=new CandidateResolver();
  this.expressionTypingServices=new ExpressionTypingServices();
  this.descriptorResolver=new DescriptorResolver();
  this.annotationResolver=new AnnotationResolver();
  this.typeResolver=new TypeResolver();
  this.qualifiedExpressionResolver=new QualifiedExpressionResolver();
  this.controlFlowAnalyzer=new ControlFlowAnalyzer();
  this.declarationsChecker=new DeclarationsChecker();
  this.scriptBodyResolver=new ScriptBodyResolver();
  this.topDownAnalysisContext=new TopDownAnalysisContext();
  this.bodyResolver.setCallResolver(callResolver);
  this.bodyResolver.setContext(bodiesResolveContext);
  this.bodyResolver.setControlFlowAnalyzer(controlFlowAnalyzer);
  this.bodyResolver.setDeclarationsChecker(declarationsChecker);
  this.bodyResolver.setDescriptorResolver(descriptorResolver);
  this.bodyResolver.setExpressionTypingServices(expressionTypingServices);
  this.bodyResolver.setScriptBodyResolverResolver(scriptBodyResolver);
  this.bodyResolver.setTopDownAnalysisParameters(topDownAnalysisParameters);
  this.bodyResolver.setTrace(bindingTrace);
  callResolver.setCandidateResolver(candidateResolver);
  callResolver.setExpressionTypingServices(expressionTypingServices);
  callResolver.setTypeResolver(typeResolver);
  candidateResolver.setExpressionTypingServices(expressionTypingServices);
  candidateResolver.setTypeResolver(typeResolver);
  expressionTypingServices.setCallResolver(callResolver);
  expressionTypingServices.setDescriptorResolver(descriptorResolver);
  expressionTypingServices.setProject(project);
  expressionTypingServices.setTypeResolver(typeResolver);
  descriptorResolver.setAnnotationResolver(annotationResolver);
  descriptorResolver.setExpressionTypingServices(expressionTypingServices);
  descriptorResolver.setTypeResolver(typeResolver);
  annotationResolver.setCallResolver(callResolver);
  annotationResolver.setExpressionTypingServices(expressionTypingServices);
  typeResolver.setAnnotationResolver(annotationResolver);
  typeResolver.setDescriptorResolver(descriptorResolver);
  typeResolver.setModuleConfiguration(moduleConfiguration);
  typeResolver.setQualifiedExpressionResolver(qualifiedExpressionResolver);
  controlFlowAnalyzer.setTopDownAnalysisParameters(topDownAnalysisParameters);
  controlFlowAnalyzer.setTrace(bindingTrace);
  declarationsChecker.setTrace(bindingTrace);
  scriptBodyResolver.setContext(topDownAnalysisContext);
  scriptBodyResolver.setExpressionTypingServices(expressionTypingServices);
  scriptBodyResolver.setTrace(bindingTrace);
  topDownAnalysisContext.setTopDownAnalysisParameters(topDownAnalysisParameters);
}
