{
  List<PsiClass> result=new ArrayList<PsiClass>();
  List<KotlinLightPackageClassInfo> packageClassesInfos=findPackageClassesInfos(packageFqName,scope);
  for (  KotlinLightPackageClassInfo info : packageClassesInfos) {
    List<JetFile> files=PackagePartClassUtils.getPackageFilesWithCallables(info.getFiles());
    if (files.isEmpty())     continue;
    IdeaModuleInfo moduleInfo=info.getModuleInfo();
    if (moduleInfo instanceof ModuleSourceInfo) {
      KotlinLightClassForFacade lightClass=KotlinLightClassForFacade.Factory.createForPackageFacade(psiManager,packageFqName,moduleInfo.contentScope(),files);
      if (lightClass == null)       continue;
      result.add(lightClass);
      if (files.size() > 1) {
        for (        JetFile file : files) {
          result.add(new FakeLightClassForFileOfPackage(psiManager,lightClass,file));
        }
      }
    }
 else {
      PsiClass clsClass=getLightClassForDecompiledPackage(packageFqName,files);
      if (clsClass != null) {
        result.add(clsClass);
      }
    }
  }
  return result;
}
