{
  FqName fqName=getWrapperName(file);
  Type asmType=asmTypeByFqNameWithoutInnerClasses(fqName);
  KtType functionType=samType.getKotlinFunctionType();
  ClassDescriptor classDescriptor=new ClassDescriptorImpl(samType.getJavaClassDescriptor().getContainingDeclaration(),fqName.shortName(),Modality.FINAL,Collections.singleton(samType.getType()),SourceElement.NO_SOURCE);
  SimpleFunctionDescriptor erasedInterfaceFunction=samType.getAbstractMethod().getOriginal().copy(classDescriptor,Modality.FINAL,Visibilities.PUBLIC,CallableMemberDescriptor.Kind.SYNTHESIZED,false);
  ClassBuilder cv=state.getFactory().newVisitor(JvmDeclarationOriginKt.OtherOrigin(erasedInterfaceFunction),asmType,file);
  cv.defineClass(file,V1_6,ACC_FINAL,asmType.getInternalName(),null,OBJECT_TYPE.getInternalName(),new String[]{typeMapper.mapType(samType.getType()).getInternalName()});
  cv.visitSource(file.getName(),null);
  writeKotlinSyntheticClassAnnotation(cv,state);
  Type functionAsmType=typeMapper.mapType(functionType);
  cv.newField(JvmDeclarationOriginKt.OtherOrigin(erasedInterfaceFunction),ACC_SYNTHETIC | ACC_PRIVATE | ACC_FINAL,FUNCTION_FIELD_NAME,functionAsmType.getDescriptor(),null,null);
  generateConstructor(asmType,functionAsmType,cv);
  generateMethod(asmType,functionAsmType,cv,erasedInterfaceFunction,functionType);
  cv.done();
  return asmType;
}
