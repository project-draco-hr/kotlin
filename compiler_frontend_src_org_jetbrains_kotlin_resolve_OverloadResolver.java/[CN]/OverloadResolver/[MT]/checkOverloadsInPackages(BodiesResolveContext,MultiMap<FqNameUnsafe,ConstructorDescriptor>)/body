{
  MultiMap<FqNameUnsafe,CallableMemberDescriptor> functionsByName=MultiMap.create();
  for (  SimpleFunctionDescriptor function : c.getFunctions().values()) {
    if (function.getContainingDeclaration() instanceof PackageFragmentDescriptor) {
      functionsByName.putValue(getFqName(function),function);
    }
  }
  for (  PropertyDescriptor property : c.getProperties().values()) {
    if (property.getContainingDeclaration() instanceof PackageFragmentDescriptor) {
      functionsByName.putValue(getFqName(property),property);
    }
  }
  for (  Map.Entry<FqNameUnsafe,Collection<ConstructorDescriptor>> entry : inPackages.entrySet()) {
    functionsByName.putValues(entry.getKey(),entry.getValue());
  }
  for (  Map.Entry<FqNameUnsafe,Collection<CallableMemberDescriptor>> e : functionsByName.entrySet()) {
    FqNameUnsafe fqName=e.getKey().parent();
    checkOverloadsWithSameName(e.getValue(),fqName.isRoot() ? "root package" : fqName.asString());
  }
}
