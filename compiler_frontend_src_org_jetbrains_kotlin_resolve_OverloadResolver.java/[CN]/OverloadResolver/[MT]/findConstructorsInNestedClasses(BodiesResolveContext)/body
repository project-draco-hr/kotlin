{
  MultiMap<ClassDescriptor,ConstructorDescriptor> inClasses=MultiMap.create();
  for (  ClassDescriptorWithResolutionScopes klass : c.getDeclaredClasses().values()) {
    if (klass.getKind().isSingleton() || klass.getName().isSpecial()) {
      continue;
    }
    DeclarationDescriptor containingDeclaration=klass.getContainingDeclaration();
    if (containingDeclaration instanceof ScriptDescriptor) {
    }
 else     if (containingDeclaration instanceof ClassDescriptor) {
      ClassDescriptor classDescriptor=(ClassDescriptor)containingDeclaration;
      inClasses.putValues(classDescriptor,klass.getConstructors());
    }
 else     if (!(containingDeclaration instanceof FunctionDescriptor || containingDeclaration instanceof PropertyDescriptor || containingDeclaration instanceof PackageFragmentDescriptor)) {
      throw new IllegalStateException("Illegal class container: " + containingDeclaration);
    }
  }
  return inClasses;
}
