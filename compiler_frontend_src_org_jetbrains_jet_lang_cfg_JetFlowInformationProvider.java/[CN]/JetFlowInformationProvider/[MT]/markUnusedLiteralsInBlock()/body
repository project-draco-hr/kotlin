{
  final Map<Instruction,DiagnosticFactory<?>> reportedDiagnosticMap=Maps.newHashMap();
  PseudocodeTraverserPackage.traverse(pseudocode,FORWARD,new FunctionVoid1<Instruction>(){
    @Override public void execute(    @NotNull Instruction instruction){
      if (!(instruction instanceof ReadValueInstruction || instruction instanceof MagicInstruction))       return;
      JetElement element=((JetElementInstruction)instruction).getElement();
      if (!(element instanceof JetFunctionLiteralExpression || element instanceof JetConstantExpression || element instanceof JetStringTemplateExpression|| element instanceof JetSimpleNameExpression))       return;
      if (!(element instanceof JetStringTemplateExpression || instruction instanceof ReadValueInstruction))       return;
      VariableContext ctxt=new VariableContext(instruction,reportedDiagnosticMap);
      PsiElement parent=element.getParent();
      if (parent instanceof JetBlockExpression) {
        if (!JetPsiUtil.isImplicitlyUsed(element)) {
          if (element instanceof JetFunctionLiteralExpression) {
            report(Errors.UNUSED_FUNCTION_LITERAL.on((JetFunctionLiteralExpression)element),ctxt);
          }
 else {
            report(Errors.UNUSED_EXPRESSION.on(element),ctxt);
          }
        }
      }
    }
  }
);
}
