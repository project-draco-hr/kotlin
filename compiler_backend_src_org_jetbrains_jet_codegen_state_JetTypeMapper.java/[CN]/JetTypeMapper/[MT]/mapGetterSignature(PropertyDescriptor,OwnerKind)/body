{
  final DeclarationDescriptor parentDescriptor=descriptor.getContainingDeclaration();
  boolean isAnnotation=parentDescriptor instanceof ClassDescriptor && ((ClassDescriptor)parentDescriptor).getKind() == ClassKind.ANNOTATION_CLASS;
  String name=isAnnotation ? descriptor.getName().getName() : PropertyCodegen.getterName(descriptor.getName());
  BothSignatureWriter signatureWriter=new BothSignatureWriter(BothSignatureWriter.Mode.METHOD,true);
  writeFormalTypeParameters(descriptor.getTypeParameters(),signatureWriter);
  signatureWriter.writeParametersStart();
  if (kind == OwnerKind.TRAIT_IMPL) {
    @SuppressWarnings("ConstantConditions") ClassDescriptor containingDeclaration=(ClassDescriptor)parentDescriptor;
    signatureWriter.writeParameterType(JvmMethodParameterKind.THIS);
    mapType(containingDeclaration.getDefaultType(),signatureWriter,JetTypeMapperMode.IMPL);
    signatureWriter.writeParameterTypeEnd();
  }
 else {
    if (descriptor instanceof AccessorForPropertyDescriptor) {
      signatureWriter.writeParameterType(JvmMethodParameterKind.THIS);
      mapType(((ClassifierDescriptor)descriptor.getContainingDeclaration()).getDefaultType(),signatureWriter,JetTypeMapperMode.VALUE);
      signatureWriter.writeParameterTypeEnd();
    }
  }
  if (descriptor.getReceiverParameter().exists()) {
    signatureWriter.writeParameterType(JvmMethodParameterKind.RECEIVER);
    mapType(descriptor.getReceiverParameter().getType(),signatureWriter,JetTypeMapperMode.VALUE);
    signatureWriter.writeParameterTypeEnd();
  }
  signatureWriter.writeParametersEnd();
  signatureWriter.writeReturnType();
  mapType(descriptor.getType(),signatureWriter,JetTypeMapperMode.VALUE);
  signatureWriter.writeReturnTypeEnd();
  JvmMethodSignature jvmMethodSignature=signatureWriter.makeJvmMethodSignature(name);
  return new JvmPropertyAccessorSignature(jvmMethodSignature,jvmMethodSignature.getKotlinReturnType());
}
