{
  DeclarationDescriptor functionParent=descriptor.getOriginal().getContainingDeclaration();
  FunctionDescriptor functionDescriptor=unwrapFakeOverride(descriptor.getOriginal());
  JvmMethodSignature signature;
  Type owner;
  Type ownerForDefaultImpl;
  Type ownerForDefaultParam;
  int invokeOpcode;
  Type thisClass;
  if (functionParent instanceof ClassDescriptor) {
    FunctionDescriptor declarationFunctionDescriptor=findAnyDeclaration(functionDescriptor);
    ClassDescriptor currentOwner=(ClassDescriptor)functionParent;
    ClassDescriptor declarationOwner=(ClassDescriptor)declarationFunctionDescriptor.getContainingDeclaration();
    boolean originalIsInterface=isInterface(declarationOwner);
    boolean currentIsInterface=isInterface(currentOwner);
    boolean isInterface=currentIsInterface && originalIsInterface;
    ClassDescriptor ownerForDefault=(ClassDescriptor)findBaseDeclaration(functionDescriptor).getContainingDeclaration();
    ownerForDefaultParam=mapClass(ownerForDefault);
    ownerForDefaultImpl=isInterface(ownerForDefault) ? mapTraitImpl(ownerForDefault) : ownerForDefaultParam;
    if (isInterface && superCall) {
      invokeOpcode=INVOKESTATIC;
      signature=mapSignature(functionDescriptor,OwnerKind.TRAIT_IMPL);
      owner=mapTraitImpl(currentOwner);
      thisClass=mapClass(currentOwner);
    }
 else {
      if (isStaticDeclaration(functionDescriptor) || isAccessor(functionDescriptor) || AnnotationsPackage.isPlatformStaticInObject(functionDescriptor)) {
        invokeOpcode=INVOKESTATIC;
      }
 else       if (isInterface) {
        invokeOpcode=INVOKEINTERFACE;
      }
 else {
        boolean isPrivateFunInvocation=Visibilities.isPrivate(functionDescriptor.getVisibility());
        invokeOpcode=superCall || isPrivateFunInvocation ? INVOKESPECIAL : INVOKEVIRTUAL;
      }
      signature=mapSignature(functionDescriptor.getOriginal());
      ClassDescriptor receiver=currentIsInterface && !originalIsInterface ? declarationOwner : currentOwner;
      owner=mapClass(receiver);
      thisClass=owner;
    }
  }
 else {
    signature=mapSignature(functionDescriptor.getOriginal());
    owner=mapOwner(functionDescriptor,isCallInsideSameModuleAsDeclared(functionDescriptor,context,getOutDirectory()));
    ownerForDefaultParam=owner;
    ownerForDefaultImpl=owner;
    if (functionParent instanceof PackageFragmentDescriptor) {
      invokeOpcode=INVOKESTATIC;
      thisClass=null;
    }
 else     if (functionDescriptor instanceof ConstructorDescriptor) {
      invokeOpcode=INVOKESPECIAL;
      thisClass=null;
    }
 else {
      invokeOpcode=INVOKEVIRTUAL;
      thisClass=owner;
    }
  }
  Type calleeType=isLocalNamedFun(functionDescriptor) ? owner : null;
  Type receiverParameterType;
  ReceiverParameterDescriptor receiverParameter=functionDescriptor.getOriginal().getExtensionReceiverParameter();
  if (receiverParameter != null) {
    receiverParameterType=mapType(receiverParameter.getType());
  }
 else {
    receiverParameterType=null;
  }
  return new CallableMethod(owner,ownerForDefaultImpl,ownerForDefaultParam,signature,invokeOpcode,thisClass,receiverParameterType,calleeType);
}
