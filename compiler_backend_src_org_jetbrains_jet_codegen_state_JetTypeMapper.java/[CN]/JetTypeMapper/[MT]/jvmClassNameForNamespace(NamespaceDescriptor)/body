{
  StringBuilder r=new StringBuilder();
  List<DeclarationDescriptor> path=DescriptorUtils.getPathWithoutRootNsAndModule(namespace);
  for (  DeclarationDescriptor pathElement : path) {
    NamespaceDescriptor ns=(NamespaceDescriptor)pathElement;
    if (r.length() > 0) {
      JavaNamespaceKind nsKind=getNsKind((NamespaceDescriptor)ns.getContainingDeclaration());
      if (nsKind == JavaNamespaceKind.PROPER) {
        r.append("/");
      }
 else       if (nsKind == JavaNamespaceKind.CLASS_STATICS) {
        r.append("$");
      }
    }
    r.append(ns.getName());
  }
  if (getNsKind(namespace) == JavaNamespaceKind.PROPER) {
    if (r.length() > 0) {
      r.append("/");
    }
    r.append(PackageClassUtils.getPackageClassName(namespace.getQualifiedName()));
  }
  if (r.length() == 0) {
    throw new IllegalStateException("internal error: failed to generate classname for " + namespace);
  }
  return JvmClassName.byInternalName(r.toString());
}
