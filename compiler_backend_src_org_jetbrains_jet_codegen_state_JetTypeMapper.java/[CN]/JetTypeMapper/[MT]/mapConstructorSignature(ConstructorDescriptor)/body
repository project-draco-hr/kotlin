{
  BothSignatureWriter signatureWriter=new BothSignatureWriter(BothSignatureWriter.Mode.METHOD,true);
  writeFormalTypeParameters(Collections.<TypeParameterDescriptor>emptyList(),signatureWriter);
  signatureWriter.writeParametersStart();
  CalculatedClosure closure=bindingContext.get(CodegenBinding.CLOSURE,descriptor.getContainingDeclaration());
  ClassDescriptor containingDeclaration=descriptor.getContainingDeclaration();
  ClassDescriptor captureThis=getExpectedThisObjectForConstructorCall(descriptor,closure);
  if (captureThis != null) {
    signatureWriter.writeParameterType(JvmMethodParameterKind.OUTER);
    mapType(captureThis.getDefaultType(),signatureWriter,JetTypeMapperMode.VALUE);
    signatureWriter.writeParameterTypeEnd();
  }
  JetType captureReceiverType=closure != null ? closure.getCaptureReceiverType() : null;
  if (captureReceiverType != null) {
    signatureWriter.writeParameterType(JvmMethodParameterKind.RECEIVER);
    mapType(captureReceiverType,signatureWriter,JetTypeMapperMode.VALUE);
    signatureWriter.writeParameterTypeEnd();
  }
  if (containingDeclaration.getKind() == ClassKind.ENUM_CLASS || containingDeclaration.getKind() == ClassKind.ENUM_ENTRY) {
    signatureWriter.writeParameterType(JvmMethodParameterKind.ENUM_NAME);
    mapType(KotlinBuiltIns.getInstance().getStringType(),signatureWriter,JetTypeMapperMode.VALUE);
    signatureWriter.writeParameterTypeEnd();
    signatureWriter.writeParameterType(JvmMethodParameterKind.ENUM_ORDINAL);
    mapType(KotlinBuiltIns.getInstance().getIntType(),signatureWriter,JetTypeMapperMode.VALUE);
    signatureWriter.writeParameterTypeEnd();
  }
  if (closure != null) {
    for (    Map.Entry<DeclarationDescriptor,EnclosedValueDescriptor> entry : closure.getCaptureVariables().entrySet()) {
      DeclarationDescriptor variableDescriptor=entry.getKey();
      Type type=null;
      if (variableDescriptor instanceof VariableDescriptor && !(variableDescriptor instanceof PropertyDescriptor)) {
        Type sharedVarType=getSharedVarType(variableDescriptor);
        if (sharedVarType == null) {
          sharedVarType=mapType(((VariableDescriptor)variableDescriptor).getType());
        }
        type=sharedVarType;
      }
 else       if (isLocalNamedFun(variableDescriptor)) {
        type=asmTypeForAnonymousClass(bindingContext,(FunctionDescriptor)variableDescriptor);
      }
      if (type != null) {
        signatureWriter.writeParameterType(JvmMethodParameterKind.SHARED_VAR);
        signatureWriter.writeAsmType(type);
        signatureWriter.writeParameterTypeEnd();
      }
    }
    JetDelegatorToSuperCall superCall=closure.getSuperCall();
    if (superCall != null) {
      DeclarationDescriptor superDescriptor=bindingContext.get(BindingContext.REFERENCE_TARGET,superCall.getCalleeExpression().getConstructorReferenceExpression());
      if (superDescriptor instanceof ConstructorDescriptor && isAnonymousObject(descriptor.getContainingDeclaration())) {
        List<JvmMethodParameterSignature> types=mapConstructorSignature((ConstructorDescriptor)superDescriptor).getKotlinParameterTypes();
        for (        JvmMethodParameterSignature type : types) {
          signatureWriter.writeParameterType(JvmMethodParameterKind.SUPER_CALL_PARAM);
          signatureWriter.writeAsmType(type.getAsmType());
          signatureWriter.writeParameterTypeEnd();
        }
      }
    }
  }
  for (  ValueParameterDescriptor parameter : descriptor.getOriginal().getValueParameters()) {
    writeParameter(signatureWriter,parameter.getType());
  }
  writeVoidReturn(signatureWriter);
  return signatureWriter.makeJvmMethodSignature("<init>");
}
