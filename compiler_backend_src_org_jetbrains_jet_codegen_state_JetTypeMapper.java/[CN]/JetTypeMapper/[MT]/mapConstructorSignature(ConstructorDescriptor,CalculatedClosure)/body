{
  BothSignatureWriter signatureWriter=new BothSignatureWriter(BothSignatureWriter.Mode.METHOD,true);
  writeFormalTypeParameters(Collections.<TypeParameterDescriptor>emptyList(),signatureWriter);
  signatureWriter.writeParametersStart();
  ClassDescriptor containingDeclaration=descriptor.getContainingDeclaration();
  ClassDescriptor captureThis=closure != null ? closure.getCaptureThis() : null;
  if (captureThis != null) {
    signatureWriter.writeParameterType(JvmMethodParameterKind.OUTER);
    mapType(captureThis.getDefaultType(),signatureWriter,JetTypeMapperMode.VALUE);
    signatureWriter.writeParameterTypeEnd();
  }
  ClassifierDescriptor captureReceiver=closure != null ? closure.getCaptureReceiver() : null;
  if (captureReceiver != null) {
    signatureWriter.writeParameterType(JvmMethodParameterKind.RECEIVER);
    mapType(captureReceiver.getDefaultType(),signatureWriter,JetTypeMapperMode.VALUE);
    signatureWriter.writeParameterTypeEnd();
  }
  if (containingDeclaration.getKind() == ClassKind.ENUM_CLASS || containingDeclaration.getKind() == ClassKind.ENUM_ENTRY) {
    signatureWriter.writeParameterType(JvmMethodParameterKind.ENUM_NAME);
    mapType(KotlinBuiltIns.getInstance().getStringType(),signatureWriter,JetTypeMapperMode.VALUE);
    signatureWriter.writeParameterTypeEnd();
    signatureWriter.writeParameterType(JvmMethodParameterKind.ENUM_ORDINAL);
    mapType(KotlinBuiltIns.getInstance().getIntType(),signatureWriter,JetTypeMapperMode.VALUE);
    signatureWriter.writeParameterTypeEnd();
  }
  if (closure != null) {
    for (    Map.Entry<DeclarationDescriptor,EnclosedValueDescriptor> entry : closure.getCaptureVariables().entrySet()) {
      DeclarationDescriptor variableDescriptor=entry.getKey();
      if (variableDescriptor instanceof VariableDescriptor && !(variableDescriptor instanceof PropertyDescriptor)) {
        Type sharedVarType=getSharedVarType(variableDescriptor);
        if (sharedVarType == null) {
          sharedVarType=mapType(((VariableDescriptor)variableDescriptor).getType());
        }
        signatureWriter.writeParameterType(JvmMethodParameterKind.SHARED_VAR);
        signatureWriter.writeAsmType(sharedVarType,false);
        signatureWriter.writeParameterTypeEnd();
      }
 else       if (isLocalNamedFun(variableDescriptor)) {
        Type type=classNameForAnonymousClass(bindingContext,(JetElement)BindingContextUtils.descriptorToDeclaration(bindingContext,variableDescriptor)).getAsmType();
        signatureWriter.writeParameterType(JvmMethodParameterKind.VALUE);
        signatureWriter.writeAsmType(type,false);
        signatureWriter.writeParameterTypeEnd();
      }
    }
    JetDelegatorToSuperCall superCall=closure.getSuperCall();
    if (superCall != null) {
      DeclarationDescriptor superDescriptor=bindingContext.get(BindingContext.REFERENCE_TARGET,superCall.getCalleeExpression().getConstructorReferenceExpression());
      if (superDescriptor instanceof ConstructorDescriptor) {
        ConstructorDescriptor superConstructor=(ConstructorDescriptor)superDescriptor;
        if (isObjectLiteral(bindingContext,descriptor.getContainingDeclaration())) {
          CallableMethod superCallable=mapToCallableMethod(superConstructor);
          List<JvmMethodParameterSignature> types=superCallable.getSignature().getKotlinParameterTypes();
          if (types != null) {
            for (            JvmMethodParameterSignature type : types) {
              signatureWriter.writeParameterType(JvmMethodParameterKind.SUPER_CALL_PARAM);
              signatureWriter.writeAsmType(type.getAsmType(),false);
              signatureWriter.writeParameterTypeEnd();
            }
          }
        }
      }
    }
  }
  for (  ValueParameterDescriptor parameter : descriptor.getOriginal().getValueParameters()) {
    writeParameter(signatureWriter,parameter.getType());
  }
  signatureWriter.writeParametersEnd();
  signatureWriter.writeVoidReturn();
  return signatureWriter.makeJvmMethodSignature("<init>");
}
