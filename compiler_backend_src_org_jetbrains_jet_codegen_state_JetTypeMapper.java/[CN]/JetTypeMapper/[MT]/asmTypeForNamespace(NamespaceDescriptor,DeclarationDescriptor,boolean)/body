{
  StringBuilder r=new StringBuilder();
  List<DeclarationDescriptor> path=getPathWithoutRootNsAndModule(namespace);
  for (  DeclarationDescriptor pathElement : path) {
    NamespaceDescriptor ns=(NamespaceDescriptor)pathElement;
    if (r.length() > 0) {
      JavaNamespaceKind nsKind=getNsKind((NamespaceDescriptor)ns.getContainingDeclaration());
      if (nsKind == JavaNamespaceKind.PROPER) {
        r.append("/");
      }
 else       if (nsKind == JavaNamespaceKind.CLASS_STATICS) {
        r.append("$");
      }
    }
    r.append(ns.getName());
  }
  if (getNsKind(namespace) == JavaNamespaceKind.PROPER) {
    if (r.length() > 0) {
      r.append("/");
    }
    JetFile file=BindingContextUtils.getContainingFile(bindingContext,descriptor);
    if (insideModule && file != null) {
      String internalName=NamespaceCodegen.getNamespacePartInternalName(file);
      r.append(internalName.substring(r.length()));
    }
 else {
      r.append(PackageClassUtils.getPackageClassName(namespace.getFqName()));
    }
  }
  if (r.length() == 0) {
    throw new IllegalStateException("internal error: failed to generate classname for " + namespace);
  }
  return Type.getObjectType(r.toString());
}
