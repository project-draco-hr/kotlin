{
  CalculatedClosure closure=bindingContext.get(CodegenBinding.CLOSURE,descriptor.getContainingDeclaration());
  ClassDescriptor captureThis=getExpectedThisObjectForConstructorCall(descriptor,closure);
  if (captureThis != null) {
    writeParameter(sw,JvmMethodParameterKind.OUTER,captureThis.getDefaultType());
  }
  JetType captureReceiverType=closure != null ? closure.getCaptureReceiverType() : null;
  if (captureReceiverType != null) {
    writeParameter(sw,JvmMethodParameterKind.RECEIVER,captureReceiverType);
  }
  ClassDescriptor containingDeclaration=descriptor.getContainingDeclaration();
  if (containingDeclaration.getKind() == ClassKind.ENUM_CLASS || containingDeclaration.getKind() == ClassKind.ENUM_ENTRY) {
    writeParameter(sw,JvmMethodParameterKind.ENUM_NAME,KotlinBuiltIns.getInstance().getStringType());
    writeParameter(sw,JvmMethodParameterKind.ENUM_ORDINAL,KotlinBuiltIns.getInstance().getIntType());
  }
  if (closure == null)   return;
  for (  DeclarationDescriptor variableDescriptor : closure.getCaptureVariables().keySet()) {
    Type type;
    if (variableDescriptor instanceof VariableDescriptor && !(variableDescriptor instanceof PropertyDescriptor)) {
      Type sharedVarType=getSharedVarType(variableDescriptor);
      if (sharedVarType == null) {
        sharedVarType=mapType(((VariableDescriptor)variableDescriptor).getType());
      }
      type=sharedVarType;
    }
 else     if (isLocalNamedFun(variableDescriptor)) {
      type=asmTypeForAnonymousClass(bindingContext,(FunctionDescriptor)variableDescriptor);
    }
 else {
      type=null;
    }
    if (type != null) {
      writeParameter(sw,JvmMethodParameterKind.CAPTURED_LOCAL_VARIABLE,type);
    }
  }
  ResolvedCall<ConstructorDescriptor> superCall=closure.getSuperCall();
  if (superCall != null && isAnonymousObject(descriptor.getContainingDeclaration())) {
    for (    JvmMethodParameterSignature parameter : mapSignature(superCall.getResultingDescriptor()).getValueParameters()) {
      writeParameter(sw,JvmMethodParameterKind.SUPER_OF_ANONYMOUS_CALL_PARAM,parameter.getAsmType());
    }
  }
}
