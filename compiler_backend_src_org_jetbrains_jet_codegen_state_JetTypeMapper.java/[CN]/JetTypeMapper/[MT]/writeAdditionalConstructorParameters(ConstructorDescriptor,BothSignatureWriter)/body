{
  CalculatedClosure closure=bindingContext.get(CodegenBinding.CLOSURE,descriptor.getContainingDeclaration());
  ClassDescriptor captureThis=getExpectedThisObjectForConstructorCall(descriptor,closure);
  if (captureThis != null) {
    signatureWriter.writeParameterType(JvmMethodParameterKind.OUTER);
    mapType(captureThis.getDefaultType(),signatureWriter,JetTypeMapperMode.VALUE);
    signatureWriter.writeParameterTypeEnd();
  }
  JetType captureReceiverType=closure != null ? closure.getCaptureReceiverType() : null;
  if (captureReceiverType != null) {
    signatureWriter.writeParameterType(JvmMethodParameterKind.RECEIVER);
    mapType(captureReceiverType,signatureWriter,JetTypeMapperMode.VALUE);
    signatureWriter.writeParameterTypeEnd();
  }
  ClassDescriptor containingDeclaration=descriptor.getContainingDeclaration();
  if (containingDeclaration.getKind() == ClassKind.ENUM_CLASS || containingDeclaration.getKind() == ClassKind.ENUM_ENTRY) {
    signatureWriter.writeParameterType(JvmMethodParameterKind.ENUM_NAME);
    mapType(KotlinBuiltIns.getInstance().getStringType(),signatureWriter,JetTypeMapperMode.VALUE);
    signatureWriter.writeParameterTypeEnd();
    signatureWriter.writeParameterType(JvmMethodParameterKind.ENUM_ORDINAL);
    mapType(KotlinBuiltIns.getInstance().getIntType(),signatureWriter,JetTypeMapperMode.VALUE);
    signatureWriter.writeParameterTypeEnd();
  }
  if (closure == null)   return;
  for (  DeclarationDescriptor variableDescriptor : closure.getCaptureVariables().keySet()) {
    Type type;
    if (variableDescriptor instanceof VariableDescriptor && !(variableDescriptor instanceof PropertyDescriptor)) {
      Type sharedVarType=getSharedVarType(variableDescriptor);
      if (sharedVarType == null) {
        sharedVarType=mapType(((VariableDescriptor)variableDescriptor).getType());
      }
      type=sharedVarType;
    }
 else     if (isLocalNamedFun(variableDescriptor)) {
      type=asmTypeForAnonymousClass(bindingContext,(FunctionDescriptor)variableDescriptor);
    }
 else {
      type=null;
    }
    if (type != null) {
      signatureWriter.writeParameterType(JvmMethodParameterKind.CAPTURED_LOCAL_VARIABLE);
      signatureWriter.writeAsmType(type);
      signatureWriter.writeParameterTypeEnd();
    }
  }
  JetDelegatorToSuperCall superCall=closure.getSuperCall();
  if (superCall != null) {
    DeclarationDescriptor superDescriptor=bindingContext.get(BindingContext.REFERENCE_TARGET,superCall.getCalleeExpression().getConstructorReferenceExpression());
    if (superDescriptor instanceof ConstructorDescriptor && isAnonymousObject(descriptor.getContainingDeclaration())) {
      for (      JvmMethodParameterSignature parameter : mapSignature((ConstructorDescriptor)superDescriptor).getValueParameters()) {
        signatureWriter.writeParameterType(JvmMethodParameterKind.SUPER_OF_ANONYMOUS_CALL_PARAM);
        signatureWriter.writeAsmType(parameter.getAsmType());
        signatureWriter.writeParameterTypeEnd();
      }
    }
  }
}
