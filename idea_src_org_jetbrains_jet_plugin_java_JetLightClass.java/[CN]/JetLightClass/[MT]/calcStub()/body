{
  final PsiJavaFileStubImpl answer=new PsiJavaFileStubImpl(JetPsiUtil.getFQName(file.getRootNamespace()),true);
  final Project project=getProject();
  final Stack<StubElement> stubStack=new Stack<StubElement>();
  final ClassBuilderFactory builderFactory=new ClassBuilderFactory(){
    @Override public ClassBuilder newClassBuilder(){
      return new StubClassBuilder(stubStack);
    }
    @Override public String asText(    ClassBuilder builder){
      throw new UnsupportedOperationException("asText is not implemented");
    }
    @Override public byte[] asBytes(    ClassBuilder builder){
      throw new UnsupportedOperationException("asBytes is not implemented");
    }
  }
;
  final GenerationState state=new GenerationState(project,builderFactory){
    @Override protected void generateNamespace(    JetNamespace namespace){
      PsiManager manager=PsiManager.getInstance(project);
      stubStack.push(answer);
      answer.setPsiFactory(new ClsWrapperStubPsiFactory());
      final ClsFileImpl fakeFile=new ClsFileImpl((PsiManagerImpl)manager,new ClassFileViewProvider(manager,file.getVirtualFile())){
        @NotNull @Override public PsiClassHolderFileStub getStub(){
          return answer;
        }
      }
;
      fakeFile.setPhysical(false);
      answer.setPsi(fakeFile);
      try {
        super.generateNamespace(namespace);
      }
  finally {
        final StubElement pop=stubStack.pop();
        if (pop != answer) {
          LOG.error("Unbalanced stack operations");
        }
      }
    }
  }
;
  List<PsiFile> files=Collections.<PsiFile>singletonList(file);
  final BindingContext context=AnalyzerFacade.shallowAnalyzeFiles(files);
  state.compileCorrectNamespaces(context,AnalyzerFacade.collectRootNamespaces(files));
  state.getFactory().files();
  return answer;
}
