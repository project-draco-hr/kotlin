{
  MethodNode node;
  if (functionDescriptor instanceof DeserializedSimpleFunctionDescriptor) {
    VirtualFile file=InlineCodegenUtil.getVirtualFileForCallable((DeserializedSimpleFunctionDescriptor)functionDescriptor,state);
    String methodDesc=callableMethod.getAsmMethod().getDescriptor();
    DeclarationDescriptor parentDescriptor=functionDescriptor.getContainingDeclaration();
    if (DescriptorUtils.isTrait(parentDescriptor)) {
      methodDesc="(" + typeMapper.mapType((ClassDescriptor)parentDescriptor).getDescriptor() + methodDesc.substring(1);
    }
    node=InlineCodegenUtil.getMethodNode(file.getInputStream(),functionDescriptor.getName().asString(),methodDesc);
    if (node == null) {
      throw new RuntimeException("Couldn't obtain compiled function body for " + descriptorName(functionDescriptor));
    }
  }
 else {
    PsiElement element=BindingContextUtils.descriptorToDeclaration(bindingContext,functionDescriptor);
    if (element == null) {
      throw new RuntimeException("Couldn't find declaration for function " + descriptorName(functionDescriptor));
    }
    JvmMethodSignature jvmSignature=typeMapper.mapSignature(functionDescriptor,context.getContextKind());
    Method asmMethod=jvmSignature.getAsmMethod();
    node=new MethodNode(InlineCodegenUtil.API,getMethodAsmFlags(functionDescriptor,context.getContextKind()),asmMethod.getName(),asmMethod.getDescriptor(),jvmSignature.getGenericsSignature(),null);
    MethodVisitor adapter=InlineCodegenUtil.wrapWithMaxLocalCalc(node);
    FunctionCodegen.generateMethodBody(adapter,functionDescriptor,context.getParentContext().intoFunction(functionDescriptor),jvmSignature,new FunctionGenerationStrategy.FunctionDefault(state,functionDescriptor,(JetDeclarationWithBody)element),codegen.getParentCodegen());
    adapter.visitMaxs(-1,-1);
    adapter.visitEnd();
  }
  return node;
}
