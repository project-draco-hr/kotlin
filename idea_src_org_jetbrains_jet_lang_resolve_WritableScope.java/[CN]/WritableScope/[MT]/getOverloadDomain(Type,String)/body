{
  final FunctionGroup functionGroup=getFunctionGroups().get(referencedName);
  if (functionGroup == null) {
    return OverloadDomain.EMPTY;
  }
  return new OverloadDomain(){
    @Override public Type getReturnTypeForPositionedArguments(    @NotNull List<Type> typeArguments,    @NotNull List<Type> positionedValueArgumentTypes){
      Collection<FunctionDescriptor> possiblyApplicableFunctions=functionGroup.getPossiblyApplicableFunctions(typeArguments,positionedValueArgumentTypes);
      if (possiblyApplicableFunctions.isEmpty()) {
        return null;
      }
      throw new UnsupportedOperationException();
    }
    @Override public Type getReturnTypeForNamedArguments(    @NotNull List<Type> typeArguments,    @NotNull Map<String,Type> valueArgumentTypes,    @Nullable Type functionLiteralArgumentType){
      throw new UnsupportedOperationException();
    }
  }
;
}
