{
  ExpressionCodegen codegen=new ExpressionCodegen(v,new FrameMap(),Type.VOID_TYPE,context,state);
  for (  JetEnumEntry enumConstant : myEnumConstants) {
    String intfClass=state.getTypeMapper().jvmName(descriptor,OwnerKind.INTERFACE);
    String implClass=state.getTypeMapper().jvmName(descriptor,OwnerKind.IMPLEMENTATION);
    final List<JetDelegationSpecifier> delegationSpecifiers=enumConstant.getDelegationSpecifiers();
    if (delegationSpecifiers.size() > 1) {
      throw new UnsupportedOperationException("multiple delegation specifiers for enum constant not supported");
    }
    v.anew(Type.getObjectType(implClass));
    v.dup();
    if (delegationSpecifiers.size() == 1) {
      final JetDelegationSpecifier specifier=delegationSpecifiers.get(0);
      if (specifier instanceof JetDelegatorToSuperCall) {
        final JetDelegatorToSuperCall superCall=(JetDelegatorToSuperCall)specifier;
        ConstructorDescriptor constructorDescriptor=state.getBindingContext().resolveSuperConstructor(superCall);
        CallableMethod method=state.getTypeMapper().mapToCallableMethod(constructorDescriptor,OwnerKind.IMPLEMENTATION);
        codegen.invokeMethodWithArguments(method,superCall);
      }
 else {
        throw new UnsupportedOperationException("unsupported type of enum constant initializer: " + specifier);
      }
    }
 else {
      v.invokespecial(implClass,"<init>","()V");
    }
    v.putstatic(intfClass,enumConstant.getName(),"L" + intfClass + ";");
  }
}
