{
  List<JetDelegationSpecifier> delegationSpecifiers=myClass.getDelegationSpecifiers();
  String superClassName=null;
  Set<String> superInterfaces=new LinkedHashSet<String>();
  for (  JetDelegationSpecifier specifier : delegationSpecifiers) {
    JetType superType=bindingContext.resolveTypeReference(specifier.getTypeReference());
    ClassDescriptor superClassDescriptor=(ClassDescriptor)superType.getConstructor().getDeclarationDescriptor();
    PsiElement superPsi=bindingContext.getDeclarationPsiElement(superClassDescriptor);
    if (superPsi instanceof PsiClass) {
      PsiClass psiClass=(PsiClass)superPsi;
      String fqn=psiClass.getQualifiedName();
      if (psiClass.isInterface()) {
        superInterfaces.add(fqn);
      }
 else {
        if (superClassName == null) {
          superClassName=fqn.replace('.','/');
          while (psiClass != null) {
            for (            PsiClass ifs : psiClass.getInterfaces()) {
              superInterfaces.add(ifs.getQualifiedName().replace('.','/'));
            }
            psiClass=psiClass.getSuperClass();
          }
        }
 else {
          throw new RuntimeException("Cannot determine single class to inherit from");
        }
      }
    }
 else {
      superInterfaces.add(JetTypeMapper.jvmNameForInterface(superClassDescriptor));
    }
  }
  return superInterfaces;
}
