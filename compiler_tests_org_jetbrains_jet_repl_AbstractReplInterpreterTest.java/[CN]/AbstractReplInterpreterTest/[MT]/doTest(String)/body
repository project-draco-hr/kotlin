{
  CompilerConfiguration configuration=JetTestUtils.compilerConfigurationForTests(ConfigurationKind.ALL,TestJdkKind.FULL_JDK);
  ReplInterpreter repl=new ReplInterpreter(getTestRootDisposable(),configuration);
  for (  OneLine line : loadLines(new File(path))) {
    String expected=StringUtil.convertLineSeparators(line.expected).replaceFirst("\n$","");
    ReplInterpreter.LineResult lineResult=repl.eval(line.code);
    Object actual;
    if (lineResult.getType() == ReplInterpreter.LineResultType.SUCCESS) {
      actual=lineResult.getValue();
    }
 else     if (lineResult.getType() == ReplInterpreter.LineResultType.INCOMPLETE) {
      actual="incomplete";
    }
 else {
      actual=lineResult.getErrorText();
    }
    String actualString=StringUtil.convertLineSeparators(actual != null ? actual.toString() : "").replaceFirst("\n$","");
    if (line.matchType == MatchType.EQUALS) {
      Assert.assertEquals("after evaluation of: " + line.code,expected,actualString);
    }
 else     if (line.matchType == MatchType.SUBSTRING) {
      Assert.assertTrue("must contain substring: " + expected + ", actual: "+ actualString,actualString.contains(expected));
    }
  }
}
