{
  file.getRootNamespace().accept(new JetTreeVisitor<Void>(){
    private void replaceWithLeaf(    @NotNull ASTNode toReplace,    IElementType type,    String text){
      ASTNode treeNext=toReplace.getTreeNext();
      ASTNode treeParent=toReplace.getTreeParent();
      treeParent.removeChild(toReplace);
      treeParent.addLeaf(type,text,treeNext);
    }
    @Override public Void visitNamespace(    JetNamespace namespace,    Void data){
      ASTNode namespaceNode=namespace.getHeader().getNode();
      ASTNode token=namespaceNode.findChildByType(NAMESPACE_KEYWORD);
      if (token != null) {
        replaceWithLeaf(token,NAMESPACE_KEYWORD,"package????");
      }
      return super.visitNamespace(namespace,data);
    }
    @Override public Void visitFunctionType(    JetFunctionType type,    Void data){
      ASTNode node=type.getNode();
      ASTNode funToken=node.findChildByType(FUN_KEYWORD);
      replaceWithLeaf(funToken,WHITE_SPACE,"??????");
      ASTNode colonToken=node.findChildByType(COLON);
      if (colonToken != null) {
        replaceWithLeaf(colonToken,WHITE_SPACE,"??");
      }
      return super.visitFunctionType(type,data);
    }
    @Override public Void visitFunctionLiteralExpression(    JetFunctionLiteralExpression expression,    Void data){
      ASTNode arrowNode=expression.getFunctionLiteral().getArrowNode();
      if (arrowNode != null) {
        replaceWithLeaf(arrowNode,ARROW,"->");
      }
      return super.visitFunctionLiteralExpression(expression,data);
    }
    @Override public Void visitWhenEntry(    JetWhenEntry jetWhenEntry,    Void data){
      ASTNode arrow=jetWhenEntry.getNode().findChildByType(DOUBLE_ARROW);
      if (arrow == null) {
        System.err.println(jetWhenEntry.getText());
      }
 else {
        replaceWithLeaf(arrow,ARROW,"->");
      }
      return super.visitWhenEntry(jetWhenEntry,data);
    }
    @Override public Void visitTupleExpression(    JetTupleExpression expression,    Void data){
      replaceWithLeaf(expression.getNode().getFirstChildNode(),LPAR,"??");
      return super.visitTupleExpression(expression,data);
    }
    @Override public Void visitTupleType(    JetTupleType type,    Void data){
      replaceWithLeaf(type.getNode().getFirstChildNode(),LPAR,"??");
      return super.visitTupleType(type,data);
    }
    @Override public Void visitTuplePattern(    JetTuplePattern pattern,    Void data){
      replaceWithLeaf(pattern.getNode().getFirstChildNode(),LPAR,"??");
      return super.visitTuplePattern(pattern,data);
    }
    @Override public Void visitDecomposerPattern(    JetDecomposerPattern pattern,    Void data){
      replaceWithLeaf(pattern.getNode().findChildByType(AT),WHITE_SPACE,"??");
      return super.visitDecomposerPattern(pattern,data);
    }
  }
,null);
}
