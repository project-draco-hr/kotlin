{
  JetFile file=(JetFile)getElement().getContainingFile();
  BindingContext bindingContext=WholeProjectAnalyzerFacade.analyzeProjectWithCacheOnAFile(file).getBindingContext();
  Collection<? extends DeclarationDescriptor> declarationDescriptors=bindingContext.get(AMBIGUOUS_REFERENCE_TARGET,myExpression);
  if (declarationDescriptors == null) {
    List<PsiElement> psiElements=BindingContextUtils.resolveToDeclarationPsiElements(bindingContext,myExpression);
    if (!psiElements.isEmpty()) {
      return PsiElementResolveResult.createResults(psiElements);
    }
    List<PsiElement> standardLibraryElements=resolveStandardLibrarySymbol(bindingContext);
    if (!standardLibraryElements.isEmpty()) {
      return PsiElementResolveResult.createResults(standardLibraryElements);
    }
    return ResolveResult.EMPTY_ARRAY;
  }
  List<ResolveResult> results=new ArrayList<ResolveResult>(declarationDescriptors.size());
  for (  DeclarationDescriptor descriptor : declarationDescriptors) {
    List<PsiElement> elements=BindingContextUtils.descriptorToDeclarations(bindingContext,descriptor);
    for (    PsiElement element : elements) {
      results.add(new PsiElementResolveResult(element,true));
    }
  }
  return results.toArray(new ResolveResult[results.size()]);
}
