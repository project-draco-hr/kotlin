{
  JetFile file=(JetFile)getElement().getContainingFile();
  BindingContext bindingContext=WholeProjectAnalyzerFacade.analyzeProjectWithCacheOnAFile(file).getBindingContext();
  List<PsiElement> psiElement=BindingContextUtils.resolveToDeclarationPsiElements(bindingContext,myExpression);
  if (psiElement.size() == 1) {
    return psiElement.iterator().next();
  }
  if (psiElement.size() > 1) {
    return null;
  }
  if (psiElement.isEmpty()) {
    PsiElement stdlibSymbol=myExpression.getProject().getComponent(StandardLibraryReferenceResolver.class).resolveStandardLibrarySymbol(bindingContext,myExpression);
    if (stdlibSymbol != null) {
      return stdlibSymbol;
    }
  }
  Collection<? extends DeclarationDescriptor> declarationDescriptors=bindingContext.get(AMBIGUOUS_REFERENCE_TARGET,myExpression);
  if (declarationDescriptors != null)   return null;
  return file;
}
