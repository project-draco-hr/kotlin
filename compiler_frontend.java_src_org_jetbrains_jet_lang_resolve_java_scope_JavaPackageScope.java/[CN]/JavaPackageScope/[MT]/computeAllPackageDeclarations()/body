{
  Collection<DeclarationDescriptor> result=Sets.newHashSet();
  for (  JavaPackage subPackage : javaPackage.getSubPackages()) {
    FqName fqName=new FqName(subPackage.getFqName());
    NamespaceDescriptor childNs=javaDescriptorResolver.resolveNamespace(fqName,IGNORE_KOTLIN_SOURCES);
    if (childNs != null) {
      result.add(childNs);
    }
  }
  for (  JavaClass javaClass : DescriptorResolverUtils.filterDuplicateClasses(javaPackage.getClasses())) {
    if (DescriptorResolverUtils.isCompiledKotlinPackageClass(javaClass))     continue;
    if (isKotlinLightClass(javaClass))     continue;
    if (!javaClass.getPsiClass().hasModifierProperty(PsiModifier.PUBLIC))     continue;
    ProgressIndicatorProvider.checkCanceled();
    String qualifiedName=javaClass.getFqName();
    if (qualifiedName == null)     continue;
    FqName fqName=new FqName(qualifiedName);
    ClassDescriptor classDescriptor=javaDescriptorResolver.resolveClass(fqName,IGNORE_KOTLIN_SOURCES);
    if (classDescriptor != null) {
      result.add(classDescriptor);
    }
    NamespaceDescriptor namespace=javaDescriptorResolver.resolveNamespace(fqName,IGNORE_KOTLIN_SOURCES);
    if (namespace != null) {
      result.add(namespace);
    }
  }
  return result;
}
