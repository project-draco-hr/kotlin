{
  FqName packageFqName=stub.getPackageFqName();
  sink.occurrence(JetExactPackagesIndex.getInstance().getKey(),packageFqName.asString());
  FqName facadeFqName=((KotlinFileStubForIde)stub).getFacadeFqName();
  if (facadeFqName != null) {
    sink.occurrence(JetFileFacadeFqNameIndex.INSTANCE.getKey(),facadeFqName.asString());
    sink.occurrence(JetFileFacadeShortNameIndex.INSTANCE.getKey(),facadeFqName.shortName().asString());
    sink.occurrence(JetFileFacadeClassByPackageIndex.INSTANCE.getKey(),packageFqName.asString());
  }
  FqName partFqName=((KotlinFileStubForIde)stub).getPartFqName();
  if (partFqName != null) {
    sink.occurrence(JetFilePartClassIndex.INSTANCE.getKey(),partFqName.asString());
  }
  JetFile jetFile=stub.getPsi();
  if (jetFile != null) {
    JvmFileClassInfo fileClassInfo=JvmFileClassUtil.getFileClassInfoNoResolve(jetFile);
    sink.occurrence(JetFileFacadeFqNameIndex.INSTANCE.getKey(),fileClassInfo.getFacadeClassFqName().asString());
    sink.occurrence(JetFilePartClassIndex.INSTANCE.getKey(),fileClassInfo.getFileClassFqName().asString());
  }
  List<StringRef> partNames=((KotlinFileStubForIde)stub).getFacadePartSimpleNames();
  if (partNames != null) {
    for (    StringRef partName : partNames) {
      String partSimpleName=StringRef.toString(partName);
      if (partSimpleName == null) {
        continue;
      }
      FqName multifileClassPartFqName=packageFqName.child(Name.identifier(partSimpleName));
      sink.occurrence(JetMultifileClassPartIndex.INSTANCE.getKey(),multifileClassPartFqName.asString());
    }
  }
}
