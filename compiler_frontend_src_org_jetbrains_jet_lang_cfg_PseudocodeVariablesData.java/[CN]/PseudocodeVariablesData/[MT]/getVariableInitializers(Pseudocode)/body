{
  Set<VariableDescriptor> usedVariables=getUsedVariables(pseudocode);
  Set<VariableDescriptor> declaredVariables=getDeclaredVariables(pseudocode);
  Map<VariableDescriptor,VariableInitializers> initialMap=Collections.emptyMap();
  final Map<VariableDescriptor,VariableInitializers> initialMapForStartInstruction=prepareInitializersMapForStartInstruction(usedVariables,declaredVariables);
  Map<Instruction,Edges<Map<VariableDescriptor,VariableInitializers>>> variableInitializersMap=PseudocodeTraverser.collectInformation(pseudocode,true,false,initialMap,initialMapForStartInstruction,new PseudocodeTraverser.InstructionDataMergeStrategy<Map<VariableDescriptor,VariableInitializers>>(){
    @Override public Edges<Map<VariableDescriptor,VariableInitializers>> execute(    @NotNull Instruction instruction,    @NotNull Collection<Map<VariableDescriptor,VariableInitializers>> incomingEdgesData){
      Map<VariableDescriptor,VariableInitializers> enterInstructionData=mergeIncomingEdgesDataForInitializers(incomingEdgesData);
      Map<VariableDescriptor,VariableInitializers> exitInstructionData=addVariableInitializerFromCurrentInstructionIfAny(instruction,enterInstructionData);
      return Edges.create(enterInstructionData,exitInstructionData);
    }
  }
);
  for (  LocalDeclarationInstruction localDeclarationInstruction : pseudocode.getLocalDeclarations()) {
    Pseudocode localPseudocode=localDeclarationInstruction.getBody();
    Map<Instruction,Edges<Map<VariableDescriptor,VariableInitializers>>> initializersForLocalDeclaration=getVariableInitializers(localPseudocode);
    for (    Instruction instruction : initializersForLocalDeclaration.keySet()) {
      if (!variableInitializersMap.containsKey(instruction)) {
        variableInitializersMap.put(instruction,initializersForLocalDeclaration.get(instruction));
      }
    }
    variableInitializersMap.putAll(initializersForLocalDeclaration);
  }
  return variableInitializersMap;
}
