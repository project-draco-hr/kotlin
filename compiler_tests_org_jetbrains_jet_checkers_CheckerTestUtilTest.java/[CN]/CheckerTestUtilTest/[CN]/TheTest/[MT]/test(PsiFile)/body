{
  BindingContext bindingContext=AnalyzerFacade.analyzeFileWithCache(AnalyzingUtils.getInstance(ImportingStrategy.NONE),(JetFile)psiFile,AnalyzerFacade.SINGLE_DECLARATION_PROVIDER);
  String expectedText=CheckerTestUtil.addDiagnosticMarkersToText(psiFile,CheckerTestUtil.getDiagnosticsIncludingSyntaxErrors(bindingContext,psiFile)).toString();
  List<CheckerTestUtil.DiagnosedRange> diagnosedRanges=Lists.newArrayList();
  CheckerTestUtil.parseDiagnosedRanges(expectedText,diagnosedRanges);
  List<Diagnostic> diagnostics=CheckerTestUtil.getDiagnosticsIncludingSyntaxErrors(bindingContext,psiFile);
  Collections.sort(diagnostics,CheckerTestUtil.DIAGNOSTIC_COMPARATOR);
  makeTestData(diagnostics,diagnosedRanges);
  final List<String> expectedMessages=Lists.newArrayList(expected);
  final List<String> actualMessages=Lists.newArrayList();
  CheckerTestUtil.diagnosticsDiff(diagnosedRanges,diagnostics,new CheckerTestUtil.DiagnosticDiffCallbacks(){
    @Override public void missingDiagnostic(    String type,    int expectedStart,    int expectedEnd){
      String message="Missing " + type + " at "+ expectedStart+ " to "+ expectedEnd;
      actualMessages.add(message);
    }
    @Override public void unexpectedDiagnostic(    String type,    int actualStart,    int actualEnd){
      String message="Unexpected " + type + " at "+ actualStart+ " to "+ actualEnd;
      actualMessages.add(message);
    }
  }
);
  assertEquals(listToString(expectedMessages),listToString(actualMessages));
}
