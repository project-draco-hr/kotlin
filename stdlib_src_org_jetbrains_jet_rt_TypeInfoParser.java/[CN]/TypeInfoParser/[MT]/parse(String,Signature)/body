{
  signature.variables=new ArrayList<TypeInfoProjection>();
  signature.varNames=new HashMap<String,Integer>();
  signature.superTypes=new ArrayList<TypeInfo>();
  new JetSignatureReader(annotationValue).accept(new JetSignatureExceptionsAdapter(){
    @Override public JetSignatureVisitor visitFormalTypeParameter(    final String name,    final TypeInfoVariance variance){
      return new JetSignatureExceptionsAdapter(){
        @Override public JetSignatureVisitor visitClassBound(){
          return new SignatureParserJetSignatureAdapter(signature.klazz.getClassLoader(),signature){
            @Override protected void done(            TypeInfo typeInfo){
            }
          }
;
        }
        @Override public JetSignatureVisitor visitInterfaceBound(){
          return new SignatureParserJetSignatureAdapter(signature.klazz.getClassLoader(),signature){
            @Override protected void done(            TypeInfo typeInfo){
            }
          }
;
        }
        @Override public void visitFormalTypeParameterEnd(){
          final TypeInfoVar typeInfoVar=new TypeInfoVar(signature,signature.variables.size());
          signature.varNames.put(name,signature.variables.size());
          TypeInfoProjection typeInfoProjection=new TypeInfoProjection(){
            @Override public TypeInfoVariance getVariance(){
              return variance;
            }
            @Override public TypeInfo getType(){
              return typeInfoVar;
            }
            @Override public String toString(){
              return typeInfoVar.toString();
            }
          }
;
          signature.variables.add(typeInfoProjection);
        }
      }
;
    }
    @Override public JetSignatureVisitor visitSuperclass(){
      return new SignatureParserJetSignatureAdapter(signature.klazz.getClassLoader(),signature){
        @Override protected void done(        TypeInfo typeInfo){
          signature.superTypes.add(typeInfo);
          signature.superSignatures.put(typeInfo.getJavaClass(),typeInfo);
        }
      }
;
    }
    @Override public JetSignatureVisitor visitInterface(){
      return new SignatureParserJetSignatureAdapter(signature.klazz.getClassLoader(),signature){
        @Override protected void done(        TypeInfo typeInfo){
          signature.superTypes.add(typeInfo);
          signature.superSignatures.put(typeInfo.getJavaClass(),typeInfo);
        }
      }
;
    }
  }
);
}
