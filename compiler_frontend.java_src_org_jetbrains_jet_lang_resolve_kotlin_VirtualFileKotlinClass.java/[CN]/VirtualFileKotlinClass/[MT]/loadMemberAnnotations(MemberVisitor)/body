{
  try {
    new ClassReader(file.contentsToByteArray()).accept(new ClassVisitor(ASM4){
      @Override public FieldVisitor visitField(      int access,      String name,      String desc,      String signature,      Object value){
        final AnnotationVisitor v=memberVisitor.visitField(Name.guess(name),desc);
        if (v == null)         return null;
        return new FieldVisitor(ASM4){
          @Override public org.jetbrains.asm4.AnnotationVisitor visitAnnotation(          String desc,          boolean visible){
            return convertAnnotationVisitor(v,desc);
          }
          @Override public void visitEnd(){
            v.visitEnd();
          }
        }
;
      }
      @Override public MethodVisitor visitMethod(      int access,      String name,      String desc,      String signature,      String[] exceptions){
        final MethodAnnotationVisitor v=memberVisitor.visitMethod(Name.guess(name),desc);
        if (v == null)         return null;
        return new MethodVisitor(ASM4){
          @Override public org.jetbrains.asm4.AnnotationVisitor visitAnnotation(          String desc,          boolean visible){
            return convertAnnotationVisitor(v,desc);
          }
          @Override public org.jetbrains.asm4.AnnotationVisitor visitParameterAnnotation(          int parameter,          String desc,          boolean visible){
            AnnotationArgumentVisitor av=v.visitParameterAnnotation(parameter,classNameFromAsmDesc(desc));
            return av == null ? null : convertAnnotationVisitor(av);
          }
          @Override public void visitEnd(){
            v.visitEnd();
          }
        }
;
      }
    }
,SKIP_CODE | SKIP_DEBUG | SKIP_FRAMES);
  }
 catch (  IOException e) {
    throw ExceptionUtils.rethrow(e);
  }
}
