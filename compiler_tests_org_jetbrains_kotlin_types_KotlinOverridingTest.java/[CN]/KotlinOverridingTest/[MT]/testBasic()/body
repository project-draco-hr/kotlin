{
  assertOverridable("fun a() : Int","fun a() : Int");
  assertOverridable("fun <T1> a() : T1","fun <T> a() : T");
  assertOverridable("fun <T1> a(a : T1) : T1","fun <T> a(a : T) : T");
  assertOverridable("fun <T1, X : T1> a(a : T1) : T1","fun <T, Y : T> a(a : T) : T");
  assertOverridable("fun <T1, X : T1> a(a : T1) : T1","fun <T, Y : T> a(a : T) : Y");
  assertNotOverridable("fun ab() : Int","fun a() : Int");
  assertOverridable("fun a() : Int","fun a() : Any");
  assertNotOverridable("fun a(a : Int) : Int","fun a() : Int");
  assertNotOverridable("fun a() : Int","fun a(a : Int) : Int");
  assertNotOverridable("fun a(a : Int?) : Int","fun a(a : Int) : Int");
  assertNotOverridable("fun <T> a(a : Int) : Int","fun a(a : Int) : Int");
  assertNotOverridable("fun <T1, X : T1> a(a : T1) : T1","fun <T, Y> a(a : T) : T");
  assertNotOverridable("fun <T1, X : T1> a(a : T1) : T1","fun <T, Y : T> a(a : Y) : T");
  assertOverridable("fun <T1, X : T1> a(a : T1) : X","fun <T, Y : T> a(a : T) : T");
  assertOverridable("fun <T1, X : Array<out T1>> a(a : Array<in T1>) : T1","fun <T, Y : Array<out T>> a(a : Array<in T>) : T");
  assertNotOverridable("fun <T1, X : Array<T1>> a(a : Array<in T1>) : T1","fun <T, Y : Array<out T>> a(a : Array<in T>) : T");
  assertNotOverridable("fun <T1, X : Array<out T1>> a(a : Array<in T1>) : T1","fun <T, Y : Array<in T>> a(a : Array<in T>) : T");
  assertNotOverridable("fun <T1, X : Array<out T1>> a(a : Array<in T1>) : T1","fun <T, Y : Array<*>> a(a : Array<in T>) : T");
  assertNotOverridable("fun <T1, X : Array<out T1>> a(a : Array<in T1>) : T1","fun <T, Y : Array<out T>> a(a : Array<out T>) : T");
  assertNotOverridable("fun <T1, X : Array<out T1>> a(a : Array<*>) : T1","fun <T, Y : Array<out T>> a(a : Array<in T>) : T");
}
