{
  if (getReferencedName() == null)   return null;
  return new PsiReference(){
    @Override public PsiElement getElement(){
      return findChildByType(REFERENCE_TOKENS);
    }
    @Override public TextRange getRangeInElement(){
      return new TextRange(0,getElement().getTextLength());
    }
    @Override public PsiElement resolve(){
      PsiElement element=getElement();
      while (element != null && false == element instanceof JetFile) {
        element=element.getParent();
      }
      JetFile file=(JetFile)element;
      BindingContext bindingContext=AnalyzingUtils.analyzeFile(file,ErrorHandler.DO_NOTHING);
      return bindingContext.resolveToDeclarationPsiElement(JetReferenceExpression.this);
    }
    @NotNull @Override public String getCanonicalText(){
      return getReferencedName();
    }
    @Override public PsiElement handleElementRename(    String newElementName) throws IncorrectOperationException {
      throw new IncorrectOperationException();
    }
    @Override public PsiElement bindToElement(    @NotNull PsiElement element) throws IncorrectOperationException {
      throw new IncorrectOperationException();
    }
    @Override public boolean isReferenceTo(    PsiElement element){
      return false;
    }
    @NotNull @Override public Object[] getVariants(){
      return EMPTY_ARRAY;
    }
    @Override public boolean isSoft(){
      return false;
    }
  }
;
}
