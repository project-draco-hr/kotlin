{
  if (!changed) {
    return;
  }
  JetType lowerConstraint=null;
  JetType upperConstraint=null;
  Set<JetType> conflicts=Sets.newLinkedHashSet();
  if (!lowerConstraints.isEmpty()) {
    lowerConstraint=CommonSupertypes.commonSupertype(lowerConstraints);
  }
  if (!upperConstraints.isEmpty()) {
    upperConstraint=upperConstraints.iterator().next();
  }
  if (lowerConstraint != null && upperConstraint != null && !JetTypeChecker.INSTANCE.isSubtypeOf(lowerConstraint,upperConstraint)) {
    conflicts.add(lowerConstraint);
    conflicts.add(upperConstraint);
  }
  if (equalConstraints.size() > 1) {
    conflicts.addAll(equalConstraints);
  }
 else   if (equalConstraints.size() == 1) {
    JetType value=equalConstraints.iterator().next();
    if (lowerConstraint != null && !JetTypeChecker.INSTANCE.isSubtypeOf(lowerConstraint,value)) {
      conflicts.add(lowerConstraint);
      conflicts.add(value);
    }
    if (upperConstraint != null && !JetTypeChecker.INSTANCE.isSubtypeOf(value,upperConstraint)) {
      conflicts.add(upperConstraint);
      conflicts.add(value);
    }
    lowerConstraint=value;
    upperConstraint=value;
  }
  typeConstraintsData=new TypeConstraintsData(lowerConstraint,upperConstraint,conflicts);
}
