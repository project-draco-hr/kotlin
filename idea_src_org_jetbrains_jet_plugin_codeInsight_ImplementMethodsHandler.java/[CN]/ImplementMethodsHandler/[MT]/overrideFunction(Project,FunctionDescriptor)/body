{
  StringBuilder bodyBuilder=new StringBuilder("override fun ");
  bodyBuilder.append(descriptor.getName());
  bodyBuilder.append("(");
  boolean first=true;
  for (  ValueParameterDescriptor parameterDescriptor : descriptor.getValueParameters()) {
    if (!first) {
      bodyBuilder.append(",");
    }
    first=false;
    bodyBuilder.append(parameterDescriptor.getName());
    bodyBuilder.append(": ");
    bodyBuilder.append(parameterDescriptor.getOutType().toString());
  }
  bodyBuilder.append(")");
  final JetType returnType=descriptor.getReturnType();
  final JetStandardLibrary stdlib=JetStandardLibrary.getJetStandardLibrary(project);
  if (!returnType.equals(stdlib.getTuple0Type())) {
    bodyBuilder.append(": ").append(returnType.toString());
  }
  bodyBuilder.append("{");
  if (returnType.isNullable()) {
    bodyBuilder.append("return null");
  }
 else   if (returnType.equals(stdlib.getIntType()) || returnType.equals(stdlib.getLongType()) || returnType.equals(stdlib.getShortType())|| returnType.equals(stdlib.getByteType())|| returnType.equals(stdlib.getFloatType())|| returnType.equals(stdlib.getDoubleType())) {
    bodyBuilder.append("return 0");
  }
 else   if (returnType.equals(stdlib.getBooleanType())) {
    bodyBuilder.append("return false");
  }
  bodyBuilder.append("}");
  return JetPsiFactory.createFunction(project,bodyBuilder.toString());
}
