{
  SignatureDeserializer deserializer=new SignatureDeserializer(nameResolver);
switch (kind) {
case FUNCTION:
    if (proto.hasExtension(JavaProtoBuf.methodSignature)) {
      return deserializer.methodSignature(proto.getExtension(JavaProtoBuf.methodSignature));
    }
  break;
case PROPERTY_GETTER:
if (proto.hasExtension(JavaProtoBuf.propertySignature)) {
  return deserializer.methodSignature(proto.getExtension(JavaProtoBuf.propertySignature).getGetter());
}
break;
case PROPERTY_SETTER:
if (proto.hasExtension(JavaProtoBuf.propertySignature)) {
return deserializer.methodSignature(proto.getExtension(JavaProtoBuf.propertySignature).getSetter());
}
break;
case PROPERTY:
if (proto.hasExtension(JavaProtoBuf.propertySignature)) {
JavaProtoBuf.JavaPropertySignature propertySignature=proto.getExtension(JavaProtoBuf.propertySignature);
if (propertySignature.hasField()) {
JavaProtoBuf.JavaFieldSignature field=propertySignature.getField();
String type=deserializer.typeDescriptor(field.getType());
Name name=nameResolver.getName(field.getName());
return MemberSignature.fromFieldNameAndDesc(name,type);
}
 else if (propertySignature.hasSyntheticMethod()) {
return deserializer.methodSignature(propertySignature.getSyntheticMethod());
}
}
break;
}
return null;
}
