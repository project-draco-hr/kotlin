{
  final Map<MemberSignature,List<AnnotationDescriptor>> memberAnnotations=new HashMap<MemberSignature,List<AnnotationDescriptor>>();
  kotlinClass.loadMemberAnnotations(new KotlinJvmBinaryClass.MemberVisitor(){
    @Nullable @Override public KotlinJvmBinaryClass.AnnotationVisitor visitMethod(    @NotNull Name name,    @NotNull String desc){
      return annotationVisitor(MemberSignature.fromMethodNameAndDesc(name,desc));
    }
    @Nullable @Override public KotlinJvmBinaryClass.AnnotationVisitor visitField(    @NotNull Name name,    @NotNull String desc){
      return annotationVisitor(MemberSignature.fromFieldNameAndDesc(name,desc));
    }
    @NotNull private KotlinJvmBinaryClass.AnnotationVisitor annotationVisitor(    @NotNull final MemberSignature signature){
      return new KotlinJvmBinaryClass.AnnotationVisitor(){
        private final List<AnnotationDescriptor> result=new ArrayList<AnnotationDescriptor>();
        @Nullable @Override public KotlinJvmBinaryClass.AnnotationArgumentVisitor visitAnnotation(        @NotNull JvmClassName className){
          return resolveAnnotation(className,result);
        }
        @Override public void visitEnd(){
          if (!result.isEmpty()) {
            memberAnnotations.put(signature,result);
          }
        }
      }
;
    }
  }
);
  return memberAnnotations;
}
