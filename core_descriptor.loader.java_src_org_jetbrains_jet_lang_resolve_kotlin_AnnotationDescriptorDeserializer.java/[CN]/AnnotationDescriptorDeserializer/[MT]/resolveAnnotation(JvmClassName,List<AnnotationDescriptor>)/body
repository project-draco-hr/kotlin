{
  if (ignoreAnnotation(className))   return null;
  final ClassDescriptor annotationClass=resolveAnnotationClass(className);
  final AnnotationDescriptor annotation=new AnnotationDescriptor();
  annotation.setAnnotationType(annotationClass.getDefaultType());
  return new KotlinJvmBinaryClass.AnnotationArgumentVisitor(){
    @Override public void visit(    @Nullable Name name,    @Nullable Object value){
      if (name != null) {
        CompileTimeConstant<?> argument=JavaAnnotationArgumentResolver.resolveCompileTimeConstantValue(value,null);
        setArgumentValueByName(name,argument != null ? argument : ErrorValue.create("Unsupported annotation argument: " + name));
      }
    }
    @Override public void visitEnum(    @NotNull Name name,    @NotNull JvmClassName enumClassName,    @NotNull Name enumEntryName){
      setArgumentValueByName(name,enumEntryValue(enumClassName,enumEntryName));
    }
    @Nullable @Override public KotlinJvmBinaryClass.AnnotationArgumentVisitor visitArray(    @NotNull Name name){
      return null;
    }
    @NotNull private CompileTimeConstant<?> enumEntryValue(    @NotNull JvmClassName enumClassName,    @NotNull Name name){
      ClassDescriptor enumClass=javaClassResolver.resolveClass(enumClassName.getFqName(),IGNORE_KOTLIN_SOURCES);
      if (enumClass != null && enumClass.getKind() == ClassKind.ENUM_CLASS) {
        ClassDescriptor classObject=enumClass.getClassObjectDescriptor();
        if (classObject != null) {
          Collection<VariableDescriptor> properties=classObject.getDefaultType().getMemberScope().getProperties(name);
          if (properties.size() == 1) {
            VariableDescriptor property=properties.iterator().next();
            if (property instanceof PropertyDescriptor) {
              return new EnumValue((PropertyDescriptor)property);
            }
          }
        }
      }
      return ErrorValue.create("Unresolved enum entry: " + enumClassName.getFqName() + "."+ name);
    }
    @Override public void visitEnd(){
      result.add(annotation);
    }
    private void setArgumentValueByName(    @NotNull Name name,    @NotNull CompileTimeConstant<?> argumentValue){
      ValueParameterDescriptor parameter=DescriptorResolverUtils.getAnnotationParameterByName(name,annotationClass);
      if (parameter != null) {
        annotation.setValueArgument(parameter,argumentValue);
      }
    }
  }
;
}
