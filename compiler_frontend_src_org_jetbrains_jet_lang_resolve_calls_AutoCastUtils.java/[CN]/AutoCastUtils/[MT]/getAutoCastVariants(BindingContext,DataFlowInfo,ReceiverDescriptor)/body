{
  return receiverToCast.accept(new ReceiverDescriptorVisitor<List<ReceiverDescriptor>,Object>(){
    @Override public List<ReceiverDescriptor> visitNoReceiver(    ReceiverDescriptor noReceiver,    Object data){
      return Collections.emptyList();
    }
    @Override public List<ReceiverDescriptor> visitTransientReceiver(    TransientReceiver receiver,    Object data){
      return Collections.emptyList();
    }
    @Override public List<ReceiverDescriptor> visitExtensionReceiver(    ExtensionReceiver receiver,    Object data){
      return castThis(dataFlowInfo,receiver);
    }
    @Override public List<ReceiverDescriptor> visitClassReceiver(    ClassReceiver receiver,    Object data){
      return castThis(dataFlowInfo,receiver);
    }
    @Override public List<ReceiverDescriptor> visitExpressionReceiver(    ExpressionReceiver receiver,    Object data){
      JetExpression expression=receiver.getExpression();
      VariableDescriptor variableDescriptor=getVariableDescriptorFromSimpleName(bindingContext,expression);
      if (variableDescriptor != null) {
        List<ReceiverDescriptor> result=Lists.newArrayList();
        for (        JetType possibleType : dataFlowInfo.getPossibleTypesForVariable(variableDescriptor)) {
          result.add(new AutoCastReceiver(receiver,possibleType,isAutoCastable(variableDescriptor)));
        }
        return result;
      }
 else       if (expression instanceof JetThisExpression) {
        return castThis(dataFlowInfo,receiver);
      }
      return Collections.emptyList();
    }
  }
,null);
}
