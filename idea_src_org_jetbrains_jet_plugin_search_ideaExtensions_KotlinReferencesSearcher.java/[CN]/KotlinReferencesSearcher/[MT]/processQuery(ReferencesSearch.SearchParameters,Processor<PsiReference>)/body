{
  PsiElement element=queryParameters.getElementToSearch();
  PsiElement unwrappedElement=AsJavaPackage.getUnwrapped(element);
  if (unwrappedElement == null || !JetPluginUtil.isInSource(unwrappedElement) || JetPluginUtil.isKtFileInGradleProjectInWrongFolder(unwrappedElement))   return;
  if (element instanceof JetClassOrObject) {
    processJetClassOrObject((JetClassOrObject)element,queryParameters);
  }
 else   if (element instanceof JetNamedFunction) {
    final JetNamedFunction function=(JetNamedFunction)element;
    String name=function.getName();
    if (name != null) {
      PsiMethod method=ApplicationManager.getApplication().runReadAction(new Computable<PsiMethod>(){
        @Override public PsiMethod compute(){
          return LightClassUtil.getLightClassMethod(function);
        }
      }
);
      searchNamedElement(queryParameters,method);
    }
  }
 else   if (element instanceof JetProperty) {
    final JetProperty property=(JetProperty)element;
    LightClassUtil.PropertyAccessorsPsiMethods propertyMethods=ApplicationManager.getApplication().runReadAction(new Computable<LightClassUtil.PropertyAccessorsPsiMethods>(){
      @Override public LightClassUtil.PropertyAccessorsPsiMethods compute(){
        return LightClassUtil.getLightClassPropertyMethods(property);
      }
    }
);
    searchNamedElement(queryParameters,propertyMethods.getGetter());
    searchNamedElement(queryParameters,propertyMethods.getSetter());
  }
 else   if (element instanceof KotlinLightMethod) {
    JetDeclaration declaration=((KotlinLightMethod)element).getOrigin();
    if (declaration instanceof JetProperty || (declaration instanceof JetParameter && ((JetParameter)declaration).hasValOrVarNode())) {
      searchNamedElement(queryParameters,(PsiNamedElement)declaration);
    }
 else     if (declaration instanceof JetPropertyAccessor) {
      searchNamedElement(queryParameters,PsiTreeUtil.getParentOfType(declaration,JetProperty.class));
    }
  }
}
