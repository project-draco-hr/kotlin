{
  boolean result=super.visitSelect(node);
  if (node.getParent() instanceof Select) {
    return result;
  }
  String name=node.astIdentifier().astValue();
  boolean isField=Character.isUpperCase(name.charAt(0));
  if (!isField) {
    Select current=node;
    while (current != null) {
      Expression operand=current.astOperand();
      if (operand instanceof Select) {
        current=(Select)operand;
        if (R_CLASS.equals(current.astIdentifier().astValue())) {
          isField=true;
          break;
        }
      }
 else       if (operand instanceof VariableReference) {
        VariableReference reference=(VariableReference)operand;
        if (R_CLASS.equals(reference.astIdentifier().astValue())) {
          isField=true;
        }
        break;
      }
 else {
        break;
      }
    }
  }
  if (isField) {
    Expression operand=node.astOperand();
    if (operand.getClass() == Select.class) {
      String cls=operand.toString();
      if (Character.isUpperCase(cls.charAt(0))) {
        int firstDot=cls.indexOf('.');
        if (firstDot != -1) {
          String base=cls.substring(0,firstDot);
          String fqcn=mClassToImport.get(base);
          if (fqcn != null) {
            String owner=getInternalName(fqcn + cls.substring(firstDot));
            checkField(node,name,owner);
            return result;
          }
          if (mStarImports != null) {
            for (            String packagePrefix : mStarImports) {
              String owner=getInternalName(packagePrefix + '/' + cls);
              if (checkField(node,name,owner)) {
                mClassToImport.put(name,owner);
                return result;
              }
            }
          }
        }
      }
      String owner=getInternalName(cls);
      checkField(node,name,owner);
      return result;
    }
 else     if (operand.getClass() == VariableReference.class) {
      String className=((VariableReference)operand).astIdentifier().astValue();
      String fqcn=mClassToImport.get(className);
      if (fqcn != null) {
        String owner=getInternalName(fqcn);
        checkField(node,name,owner);
        return result;
      }
      if (Character.isUpperCase(className.charAt(0))) {
        if (mStarImports != null) {
          for (          String packagePrefix : mStarImports) {
            String owner=getInternalName(packagePrefix) + '/' + className;
            if (checkField(node,name,owner)) {
              mClassToImport.put(name,owner);
              return result;
            }
          }
        }
      }
    }
  }
  return result;
}
