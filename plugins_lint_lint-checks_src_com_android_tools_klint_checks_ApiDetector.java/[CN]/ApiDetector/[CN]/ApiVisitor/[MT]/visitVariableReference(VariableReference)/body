{
  boolean result=super.visitVariableReference(node);
  if (node.getParent() != null) {
    lombok.ast.Node parent=node.getParent();
    Class<? extends lombok.ast.Node> parentClass=parent.getClass();
    if (parentClass == Select.class || parentClass == Switch.class || parentClass == Case.class || parentClass == ConstructorInvocation.class || parentClass == SuperConstructorInvocation.class || parentClass == AnnotationElement.class) {
      return result;
    }
    if (parent instanceof MethodInvocation && ((MethodInvocation)parent).astOperand() == node) {
      return result;
    }
 else     if (parent instanceof BinaryExpression) {
      BinaryExpression expression=(BinaryExpression)parent;
      if (expression.astLeft() == node) {
        return result;
      }
    }
  }
  String name=node.astIdentifier().astValue();
  if (Character.isUpperCase(name.charAt(0)) && (mLocalVars == null || !mLocalVars.contains(name)) && (mFields == null || !mFields.contains(name))) {
    if (mStaticStarImports != null) {
      for (      String owner : mStaticStarImports) {
        if (checkField(node,name,owner)) {
          break;
        }
      }
    }
  }
  return result;
}
