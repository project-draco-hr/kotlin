{
  if (mApiDatabase == null) {
    return;
  }
  int attributeApiLevel=-1;
  if (ANDROID_URI.equals(attribute.getNamespaceURI())) {
    String name=attribute.getLocalName();
    if (!(name.equals(ATTR_LAYOUT_WIDTH) && !(name.equals(ATTR_LAYOUT_HEIGHT)) && !(name.equals(ATTR_ID)))) {
      String owner="android/R$attr";
      attributeApiLevel=mApiDatabase.getFieldVersion(owner,name);
      int minSdk=getMinSdk(context);
      if (attributeApiLevel > minSdk && attributeApiLevel > context.getFolderVersion() && attributeApiLevel > getLocalMinSdk(attribute.getOwnerElement()) && !isBenignUnusedAttribute(name) && !isAlreadyWarnedDrawableFile(context,attribute,attributeApiLevel)) {
        if (RtlDetector.isRtlAttributeName(name)) {
          if (name.equals(ATTR_PADDING_START) && viewMayExtendTextView(attribute.getOwnerElement())) {
            Location location=context.getLocation(attribute);
            String message=String.format("Attribute `%1$s` referenced here can result in a crash on " + "some specific devices older than API %2$d " + "(current min is %3$d)",attribute.getLocalName(),attributeApiLevel,minSdk);
            context.report(UNSUPPORTED,attribute,location,message);
          }
        }
 else {
          Location location=context.getLocation(attribute);
          String message=String.format("Attribute `%1$s` is only used in API level %2$d and higher " + "(current min is %3$d)",attribute.getLocalName(),attributeApiLevel,minSdk);
          context.report(UNUSED,attribute,location,message);
        }
      }
    }
    if (name.equals("divider")) {
      return;
    }
  }
  String value=attribute.getValue();
  String owner=null;
  String name=null;
  String prefix;
  if (value.startsWith(ANDROID_PREFIX)) {
    prefix=ANDROID_PREFIX;
  }
 else   if (value.startsWith(ANDROID_THEME_PREFIX)) {
    prefix=ANDROID_THEME_PREFIX;
  }
 else   if (value.startsWith(PREFIX_ANDROID) && ATTR_NAME.equals(attribute.getName()) && TAG_ITEM.equals(attribute.getOwnerElement().getTagName())&& attribute.getOwnerElement().getParentNode() != null && TAG_STYLE.equals(attribute.getOwnerElement().getParentNode().getNodeName())) {
    owner="android/R$attr";
    name=value.substring(PREFIX_ANDROID.length());
    prefix=null;
  }
 else   if (value.startsWith(PREFIX_ANDROID) && ATTR_PARENT.equals(attribute.getName()) && TAG_STYLE.equals(attribute.getOwnerElement().getTagName())) {
    owner="android/R$style";
    name=getResourceFieldName(value.substring(PREFIX_ANDROID.length()));
    prefix=null;
  }
 else {
    return;
  }
  if (owner == null) {
    int index=value.indexOf('/',prefix.length());
    if (index != -1) {
      owner="android/R$" + value.substring(prefix.length(),index);
      name=getResourceFieldName(value.substring(index + 1));
    }
 else     if (value.startsWith(ANDROID_THEME_PREFIX)) {
      owner="android/R$attr";
      name=value.substring(ANDROID_THEME_PREFIX.length());
    }
 else {
      return;
    }
  }
  int api=mApiDatabase.getFieldVersion(owner,name);
  int minSdk=getMinSdk(context);
  if (api > minSdk && api > context.getFolderVersion() && api > getLocalMinSdk(attribute.getOwnerElement())) {
    if (TOOLS_URI.equals(attribute.getNamespaceURI())) {
      return;
    }
    if (attributeApiLevel >= api) {
    }
 else     if (attributeApiLevel > minSdk) {
      String attributeName=attribute.getLocalName();
      Location location=context.getLocation(attribute);
      String message=String.format("`%1$s` requires API level %2$d (current min is %3$d), but note " + "that attribute `%4$s` is only used in API level %5$d " + "and higher",name,api,minSdk,attributeName,attributeApiLevel);
      context.report(UNSUPPORTED,attribute,location,message);
    }
 else {
      Location location=context.getLocation(attribute);
      String message=String.format("`%1$s` requires API level %2$d (current min is %3$d)",value,api,minSdk);
      context.report(UNSUPPORTED,attribute,location,message);
    }
  }
}
