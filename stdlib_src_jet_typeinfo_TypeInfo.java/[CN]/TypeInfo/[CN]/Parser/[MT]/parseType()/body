{
switch (string[cur]) {
case 'L':
    cur++;
  String name=parseName();
Class<?> aClass;
try {
aClass=classLoader.loadClass(name.replace('/','.'));
}
 catch (ClassNotFoundException e) {
throw new RuntimeException(e);
}
List<TypeInfoProjection> proj=null;
boolean nullable=false;
if (cur != string.length && string[cur] == '<') {
cur++;
while (string[cur] != '>') {
if (proj == null) proj=new LinkedList<TypeInfoProjection>();
proj.add(parseProjection());
}
cur++;
}
if (cur != string.length && string[cur] == '?') {
cur++;
nullable=true;
}
if (proj == null) proj=Collections.emptyList();
return new TypeInfoImpl(aClass,nullable,proj.toArray(new TypeInfoProjection[proj.size()]));
case 'T':
cur++;
return parseTypeVar();
default :
throw new IllegalStateException(new String(string));
}
}
