{
  TypeVariable[] typeParameters=klass.getTypeParameters();
  Map<String,Integer> variables;
  List<TypeInfoProjection> vars;
  if (typeParameters == null || typeParameters.length == 0) {
    variables=Collections.emptyMap();
    vars=Collections.emptyList();
  }
 else {
    variables=new HashMap<String,Integer>();
    vars=new LinkedList<TypeInfoProjection>();
    for (int i=0; i < typeParameters.length; i++) {
      TypeVariable typeParameter=typeParameters[i];
      variables.put(typeParameter.getName(),i);
      final TypeInfoVar typeInfoVar=new TypeInfoVar(false,i);
      vars.add(new TypeInfoProjection(){
        @Override public TypeInfoVariance getVariance(){
          return TypeInfoVariance.INVARIANT;
        }
        @Override public TypeInfo getType(){
          return typeInfoVar;
        }
        @Override public String toString(){
          return typeInfoVar.toString();
        }
      }
);
    }
  }
  List<TypeInfo> types=new LinkedList<TypeInfo>();
  java.lang.reflect.Type genericSuperclass=klass.getGenericSuperclass();
  return new Signature(klass,vars,types);
}
