{
  TypeVariable[] typeParameters=klass.getTypeParameters();
  Map<String,Integer> variables;
  List<Var> vars;
  if (typeParameters == null || typeParameters.length == 0) {
    variables=Collections.emptyMap();
    vars=Collections.emptyList();
  }
 else {
    variables=new HashMap<String,Integer>();
    vars=new LinkedList<Var>();
    for (int i=0; i < typeParameters.length; i++) {
      TypeVariable typeParameter=typeParameters[i];
      variables.put(typeParameter.getName(),i);
      vars.add(new Var(typeParameter.getName(),TypeInfoVariance.INVARIANT));
    }
  }
  List<Type> types=new LinkedList<Type>();
  java.lang.reflect.Type genericSuperclass=klass.getGenericSuperclass();
  return new Signature(klass,vars,types);
}
