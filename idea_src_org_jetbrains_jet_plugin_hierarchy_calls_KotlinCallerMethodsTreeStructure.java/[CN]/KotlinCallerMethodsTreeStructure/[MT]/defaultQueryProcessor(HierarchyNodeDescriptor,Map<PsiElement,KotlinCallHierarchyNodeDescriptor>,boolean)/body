{
  return new ReadActionProcessor<PsiReference>(){
    @Override public boolean processInReadAction(    PsiReference ref){
      if (!(ref instanceof PsiReferenceExpression || ref instanceof JetPsiReference)) {
        if (!(ref instanceof PsiElement)) {
          return true;
        }
        PsiElement parent=((PsiElement)ref).getParent();
        if (parent instanceof PsiNewExpression) {
          if (((PsiNewExpression)parent).getClassReference() != ref) {
            return true;
          }
        }
 else         if (parent instanceof PsiAnonymousClass) {
          if (((PsiAnonymousClass)parent).getBaseClassReference() != ref) {
            return true;
          }
        }
 else {
          return true;
        }
      }
      PsiElement element=HierarchyUtils.getCallHierarchyElement(ref.getElement());
      if (kotlinOnly && !(element instanceof JetNamedDeclaration))       return true;
      if (element instanceof JetProperty) {
        JetProperty property=(JetProperty)element;
        if (PsiTreeUtil.isAncestor(property.getInitializer(),ref.getElement(),false)) {
          element=HierarchyUtils.getCallHierarchyElement(element.getParent());
        }
      }
      if (element != null) {
        KotlinCallHierarchyNodeDescriptor d=methodToDescriptorMap.get(element);
        if (d == null) {
          d=new KotlinCallHierarchyNodeDescriptor(myProject,descriptor,element,false,true);
          methodToDescriptorMap.put(element,d);
        }
 else         if (!d.hasReference(ref)) {
          d.incrementUsageCount();
        }
        d.addReference(ref);
      }
      return true;
    }
  }
;
}
