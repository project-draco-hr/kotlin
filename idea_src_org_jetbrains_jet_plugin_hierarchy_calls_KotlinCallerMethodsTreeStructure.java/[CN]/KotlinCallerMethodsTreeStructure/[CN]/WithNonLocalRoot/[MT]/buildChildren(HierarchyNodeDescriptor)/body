{
  PsiElement element=getTargetElement(descriptor);
  SearchScope searchScope=getSearchScope(scopeType,basePsiClass);
  Map<PsiElement,HierarchyNodeDescriptor> methodToDescriptorMap=new HashMap<PsiElement,HierarchyNodeDescriptor>();
  Object[] javaCallers=null;
  if (element instanceof PsiMethod) {
    javaCallers=javaTreeStructure.getChildElements(getJavaNodeDescriptor(descriptor));
    processPsiMethodCallers((PsiMethod)element,descriptor,methodToDescriptorMap,searchScope,true);
  }
  if (element instanceof JetNamedFunction) {
    PsiMethod lightMethod=LightClassUtil.getLightClassMethod((JetNamedFunction)element);
    processPsiMethodCallers(lightMethod,descriptor,methodToDescriptorMap,searchScope,false);
  }
  if (element instanceof JetProperty) {
    LightClassUtil.PropertyAccessorsPsiMethods propertyMethods=LightClassUtil.getLightClassPropertyMethods((JetProperty)element);
    processPsiMethodCallers(propertyMethods.getGetter(),descriptor,methodToDescriptorMap,searchScope,false);
    processPsiMethodCallers(propertyMethods.getSetter(),descriptor,methodToDescriptorMap,searchScope,false);
  }
  if (element instanceof JetClassOrObject) {
    processJetClassOrObjectCallers((JetClassOrObject)element,descriptor,methodToDescriptorMap,searchScope);
  }
  Object[] callers=methodToDescriptorMap.values().toArray(new Object[methodToDescriptorMap.size()]);
  return (javaCallers != null) ? ArrayUtil.mergeArrays(javaCallers,callers) : callers;
}
