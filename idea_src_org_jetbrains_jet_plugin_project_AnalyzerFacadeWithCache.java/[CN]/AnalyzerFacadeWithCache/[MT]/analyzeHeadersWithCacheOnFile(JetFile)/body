{
  VirtualFile virtualFile=fileToCache.getVirtualFile();
  if (LightClassUtil.belongsToKotlinBuiltIns(fileToCache) || virtualFile != null && LibraryUtil.findLibraryEntry(virtualFile,fileToCache.getProject()) != null) {
    return AnalyzerFacadeForJVM.INSTANCE.analyzeFiles(fileToCache.getProject(),Collections.singleton(fileToCache),Collections.<AnalyzerScriptParameter>emptyList(),Predicates.<PsiFile>alwaysFalse());
  }
  KotlinDeclarationsCache cache=KotlinCacheManager.getInstance(fileToCache.getProject()).getDeclarationsFromProject();
  return ((KotlinDeclarationsCacheImpl)cache).getAnalyzeExhaust();
}
