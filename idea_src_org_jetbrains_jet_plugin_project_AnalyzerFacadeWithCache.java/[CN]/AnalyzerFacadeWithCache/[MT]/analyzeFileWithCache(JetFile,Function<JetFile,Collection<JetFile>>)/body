{
synchronized (lock) {
    CachedValue<AnalyzeExhaust> bindingContextCachedValue=file.getUserData(ANALYZE_EXHAUST);
    if (bindingContextCachedValue == null) {
      bindingContextCachedValue=CachedValuesManager.getManager(file.getProject()).createCachedValue(new CachedValueProvider<AnalyzeExhaust>(){
        @Override public Result<AnalyzeExhaust> compute(){
          try {
            AnalyzeExhaust exhaust=AnalyzerFacadeProvider.getAnalyzerFacadeForFile(file).analyzeFiles(file.getProject(),declarationProvider.fun(file),Predicates.<PsiFile>equalTo(file),JetControlFlowDataTraceFactory.EMPTY);
            return new Result<AnalyzeExhaust>(exhaust,PsiModificationTracker.MODIFICATION_COUNT);
          }
 catch (          ProcessCanceledException e) {
            throw e;
          }
catch (          Throwable e) {
            handleError(e);
            return emptyExhaustWithDiagnosticOnFile(e);
          }
        }
        @NotNull private Result<AnalyzeExhaust> emptyExhaustWithDiagnosticOnFile(        Throwable e){
          BindingTraceContext bindingTraceContext=new BindingTraceContext();
          bindingTraceContext.report(Errors.EXCEPTION_WHILE_ANALYZING.on(file,e));
          AnalyzeExhaust analyzeExhaust=AnalyzeExhaust.error(bindingTraceContext.getBindingContext(),e);
          return new Result<AnalyzeExhaust>(analyzeExhaust,PsiModificationTracker.MODIFICATION_COUNT);
        }
      }
,false);
      file.putUserData(ANALYZE_EXHAUST,bindingContextCachedValue);
    }
    return bindingContextCachedValue.getValue();
  }
}
