{
synchronized (lazyLock) {
    final Project fileProject=file.getProject();
    CachedValue<ResolveSession> bindingContextCachedValue=file.getUserData(ANALYZE_EXHAUST_LAZY_FULL);
    if (bindingContextCachedValue == null) {
      bindingContextCachedValue=CachedValuesManager.getManager(file.getProject()).createCachedValue(new CachedValueProvider<ResolveSession>(){
        @Override public Result<ResolveSession> compute(){
          ApplicationManagerEx.getApplicationEx().assertTimeConsuming();
          ModuleDescriptor javaModule=new ModuleDescriptor(Name.special("<java module>"));
          InjectorForJavaDescriptorResolver injector=new InjectorForJavaDescriptorResolver(fileProject,new BindingTraceContext(),javaModule,BuiltinsScopeExtensionMode.ALL);
          List<JetFile> files=JetFilesProvider.getInstance(fileProject).allInScope(GlobalSearchScope.allScope(fileProject));
          JetFile originalFile=(JetFile)file.getOriginalFile();
          files.remove(originalFile);
          files.add(file);
          final PsiClassFinder psiClassFinder=injector.getPsiClassFinder();
          final FileBasedDeclarationProviderFactory declarationProviderFactory=new FileBasedDeclarationProviderFactory(files,new Predicate<FqName>(){
            @Override public boolean apply(            FqName fqName){
              return psiClassFinder.findPsiPackage(fqName) != null || new FqName("jet").equals(fqName);
            }
          }
);
          final JavaDescriptorResolver javaDescriptorResolver=injector.getJavaDescriptorResolver();
          ModuleConfiguration moduleConfiguration=new ModuleConfiguration(){
            @Override public void addDefaultImports(            @NotNull Collection<JetImportDirective> directives){
              final Collection<ImportPath> defaultImports=Lists.newArrayList(JavaBridgeConfiguration.DEFAULT_JAVA_IMPORTS);
              defaultImports.addAll(Arrays.asList(DefaultModuleConfiguration.DEFAULT_JET_IMPORTS));
              for (              ImportPath defaultJetImport : defaultImports) {
                directives.add(JetPsiFactory.createImportDirective(fileProject,defaultJetImport));
              }
            }
            @Override public void extendNamespaceScope(            @NotNull BindingTrace trace,            @NotNull NamespaceDescriptor namespaceDescriptor,            @NotNull WritableScope namespaceMemberScope){
              FqName fqName=DescriptorUtils.getFQName(namespaceDescriptor).toSafe();
              if (new FqName("jet").equals(fqName)) {
                namespaceMemberScope.importScope(JetStandardLibrary.getInstance().getLibraryScope());
              }
              if (psiClassFinder.findPsiPackage(fqName) != null) {
                JavaPackageScope javaPackageScope=javaDescriptorResolver.getJavaPackageScope(fqName,namespaceDescriptor);
                namespaceMemberScope.importScope(javaPackageScope);
              }
            }
          }
;
          ModuleDescriptor lazyModule=new ModuleDescriptor(Name.special("<lazy module>"));
          ResolveSession resolveSession=new ResolveSession(fileProject,lazyModule,moduleConfiguration,declarationProviderFactory);
          return new Result<ResolveSession>(resolveSession,PsiModificationTracker.MODIFICATION_COUNT);
        }
      }
,false);
      file.putUserData(ANALYZE_EXHAUST_LAZY_FULL,bindingContextCachedValue);
    }
    return bindingContextCachedValue.getValue();
  }
}
