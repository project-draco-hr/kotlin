{
  List<FunctionDescriptor> superFunctions=Lists.newArrayList();
  Name name=method.getName();
  Method autoSignature=null;
  boolean autoMethodContainsVararg=SignaturePropagationUtilKt.containsVarargs(autoMethodDescriptor);
  for (  KotlinType supertype : containingClass.getTypeConstructor().getSupertypes()) {
    Collection<SimpleFunctionDescriptor> superFunctionCandidates=supertype.getMemberScope().getContributedFunctions(name,NoLookupLocation.WHEN_GET_SUPER_MEMBERS);
    if (!autoMethodContainsVararg && !SignaturePropagationUtilKt.containsAnyNotTrivialSignature(superFunctionCandidates))     continue;
    if (autoSignature == null) {
      autoSignature=SIGNATURE_MAPPER.mapToJvmMethodSignature(autoMethodDescriptor);
    }
    for (    FunctionDescriptor candidate : superFunctionCandidates) {
      Method candidateSignature=SIGNATURE_MAPPER.mapToJvmMethodSignature(candidate);
      if (KotlinToJvmSignatureMapperKt.erasedSignaturesEqualIgnoringReturnTypes(autoSignature,candidateSignature)) {
        superFunctions.add(candidate);
      }
    }
  }
  Collections.sort(superFunctions,new Comparator<FunctionDescriptor>(){
    @Override public int compare(    @NotNull FunctionDescriptor fun1,    @NotNull FunctionDescriptor fun2){
      FqNameUnsafe fqName1=getFqName(fun1.getContainingDeclaration());
      FqNameUnsafe fqName2=getFqName(fun2.getContainingDeclaration());
      return fqName1.asString().compareTo(fqName2.asString());
    }
  }
);
  return superFunctions;
}
