{
  List<FunctionDescriptor> superFunctions=Lists.newArrayList();
  Name name=method.getName();
  JvmMethodSignature autoSignature=SIGNATURE_MAPPER.mapToJvmMethodSignature(autoMethodDescriptor);
  for (  JetType supertype : containingClass.getTypeConstructor().getSupertypes()) {
    Collection<FunctionDescriptor> superFunctionCandidates=supertype.getMemberScope().getFunctions(name);
    for (    FunctionDescriptor candidate : superFunctionCandidates) {
      JvmMethodSignature candidateSignature=SIGNATURE_MAPPER.mapToJvmMethodSignature(candidate);
      if (JvmSignaturePackage.erasedSignaturesEqualIgnoringReturnTypes(autoSignature,candidateSignature)) {
        superFunctions.add(candidate);
      }
    }
  }
  Collections.sort(superFunctions,new Comparator<FunctionDescriptor>(){
    @Override public int compare(    @NotNull FunctionDescriptor fun1,    @NotNull FunctionDescriptor fun2){
      FqNameUnsafe fqName1=getFqName(fun1.getContainingDeclaration());
      FqNameUnsafe fqName2=getFqName(fun2.getContainingDeclaration());
      return fqName1.asString().compareTo(fqName2.asString());
    }
  }
);
  return superFunctions;
}
