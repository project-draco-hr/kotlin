{
  if (type.equals(this.type))   return;
  if (type.getSort() == Type.VOID && this.type.getSort() != Type.VOID) {
    if (this.type.getSize() == 1)     v.pop();
 else     v.pop2();
  }
 else   if (type.getSort() != Type.VOID && this.type.getSort() == Type.VOID) {
    if (type.getSort() == Type.OBJECT) {
      putTuple0Instance(v);
    }
 else     if (type == Type.LONG_TYPE)     v.lconst(0);
 else     if (type == Type.FLOAT_TYPE)     v.fconst(0);
 else     if (type == Type.DOUBLE_TYPE)     v.dconst(0);
 else     v.iconst(0);
  }
 else   if (type.getSort() == Type.OBJECT && this.type.equals(JetTypeMapper.TYPE_OBJECT) || type.getSort() == Type.ARRAY) {
    v.checkcast(type);
  }
 else   if (type.getSort() == Type.OBJECT) {
    if (this.type.getSort() == Type.OBJECT && !type.equals(JetTypeMapper.TYPE_OBJECT)) {
      v.checkcast(type);
    }
 else     box(this.type,type,v);
  }
 else   if (this.type.getSort() == Type.OBJECT && type.getSort() <= Type.DOUBLE) {
    if (this.type.equals(JetTypeMapper.TYPE_OBJECT)) {
      if (type.getSort() == Type.BOOLEAN) {
        v.checkcast(JvmPrimitiveType.BOOLEAN.getWrapper().getAsmType());
      }
 else       if (type.getSort() == Type.CHAR) {
        v.checkcast(JvmPrimitiveType.CHAR.getWrapper().getAsmType());
      }
 else {
        v.checkcast(JetTypeMapper.JL_NUMBER_TYPE);
      }
    }
    unbox(type,v);
  }
 else {
    v.cast(this.type,type);
  }
}
