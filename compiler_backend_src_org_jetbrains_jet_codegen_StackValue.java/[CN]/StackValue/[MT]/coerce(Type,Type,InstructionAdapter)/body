{
  if (toType.equals(fromType))   return;
  if (toType.getSort() == Type.VOID) {
    pop(fromType,v);
  }
 else   if (fromType.getSort() == Type.VOID) {
    if (toType.getSort() == Type.OBJECT) {
      putTuple0Instance(v);
    }
 else {
      pushDefaultPrimitiveValueOnStack(toType,v);
    }
  }
 else   if (toType.equals(JET_TUPLE0_TYPE)) {
    pop(fromType,v);
    putTuple0Instance(v);
  }
 else   if (toType.getSort() == Type.ARRAY) {
    v.checkcast(toType);
  }
 else   if (toType.getSort() == Type.OBJECT) {
    if (fromType.getSort() == Type.OBJECT || fromType.getSort() == Type.ARRAY) {
      if (!toType.equals(OBJECT_TYPE)) {
        v.checkcast(toType);
      }
    }
 else {
      box(fromType,toType,v);
    }
  }
 else   if (fromType.getSort() == Type.OBJECT) {
    if (toType.getSort() == Type.BOOLEAN) {
      coerce(fromType,JvmPrimitiveType.BOOLEAN.getWrapper().getAsmType(),v);
    }
 else     if (toType.getSort() == Type.CHAR) {
      coerce(fromType,JvmPrimitiveType.CHAR.getWrapper().getAsmType(),v);
    }
 else {
      coerce(fromType,getType(Number.class),v);
    }
    unbox(toType,v);
  }
 else {
    v.cast(fromType,toType);
  }
}
