{
  if (isStandardStack(resolvedGetCall,1) && isStandardStack(resolvedSetCall,2)) {
    v.dup2();
  }
 else {
    int size=0;
    int lastIndex=frame.enterTemp();
    frame.leaveTemp();
    List<ValueParameterDescriptor> valueParameters=resolvedGetCall.getResultingDescriptor().getValueParameters();
    int firstParamIndex=-1;
    for (int i=valueParameters.size() - 1; i >= 0; --i) {
      Type type=codegen.typeMapper.mapType(valueParameters.get(i).getOutType());
      int sz=type.getSize();
      frame.enterTemp(sz);
      lastIndex+=sz;
      size+=sz;
      v.store((firstParamIndex=lastIndex) - sz,type);
    }
    List<TypeParameterDescriptor> typeParameters=resolvedGetCall.getResultingDescriptor().getTypeParameters();
    int firstTypeParamIndex=-1;
    for (int i=typeParameters.size() - 1; i >= 0; --i) {
      if (typeParameters.get(i).isReified()) {
        frame.enterTemp();
        lastIndex++;
        size++;
        v.store(firstTypeParamIndex=lastIndex - 1,JetTypeMapper.TYPE_OBJECT);
      }
    }
    ReceiverDescriptor receiverParameter=resolvedGetCall.getReceiverArgument();
    int receiverIndex=-1;
    if (receiverParameter.exists()) {
      Type type=codegen.typeMapper.mapType(receiverParameter.getType());
      int sz=type.getSize();
      frame.enterTemp(sz);
      lastIndex+=sz;
      size+=sz;
      v.store((receiverIndex=lastIndex) - sz,type);
    }
    ReceiverDescriptor thisObject=resolvedGetCall.getThisObject();
    int thisIndex=-1;
    if (thisObject.exists()) {
      frame.enterTemp();
      lastIndex++;
      size++;
      v.store((thisIndex=lastIndex) - 1,JetTypeMapper.TYPE_OBJECT);
    }
    int realReceiverIndex;
    Type realReceiverType;
    if (thisIndex != -1) {
      if (receiverIndex != -1) {
        realReceiverIndex=receiverIndex;
        realReceiverType=codegen.typeMapper.mapType(receiverParameter.getType());
      }
 else {
        realReceiverIndex=thisIndex;
        realReceiverType=JetTypeMapper.TYPE_OBJECT;
      }
    }
 else {
      if (receiverIndex != -1) {
        realReceiverType=codegen.typeMapper.mapType(receiverParameter.getType());
        realReceiverIndex=receiverIndex;
      }
 else {
        throw new UnsupportedOperationException();
      }
    }
    if (resolvedSetCall.getThisObject().exists()) {
      if (resolvedSetCall.getReceiverArgument().exists()) {
        codegen.generateFromResolvedCall(resolvedSetCall.getThisObject(),JetTypeMapper.TYPE_OBJECT);
      }
      v.load(realReceiverIndex - realReceiverType.getSize(),realReceiverType);
    }
 else {
      if (resolvedSetCall.getReceiverArgument().exists()) {
        v.load(realReceiverIndex - realReceiverType.getSize(),realReceiverType);
      }
 else {
        throw new UnsupportedOperationException();
      }
    }
    for (    TypeParameterDescriptor typeParameterDescriptor : setterDescriptor.getOriginal().getTypeParameters()) {
      if (typeParameterDescriptor.isReified()) {
        codegen.generateTypeInfo(resolvedSetCall.getTypeArguments().get(typeParameterDescriptor),null);
      }
    }
    int index=firstParamIndex;
    for (int i=0; i != valueParameters.size(); ++i) {
      Type type=codegen.typeMapper.mapType(valueParameters.get(i).getOutType());
      int sz=type.getSize();
      v.load(index - sz,type);
      index-=sz;
    }
    if (thisIndex != -1) {
      v.load(thisIndex - 1,JetTypeMapper.TYPE_OBJECT);
    }
    if (receiverIndex != -1) {
      Type type=codegen.typeMapper.mapType(receiverParameter.getType());
      v.load(receiverIndex - type.getSize(),type);
    }
    if (firstTypeParamIndex != -1) {
      index=firstTypeParamIndex;
      for (int i=0; i != typeParameters.size(); ++i) {
        if (typeParameters.get(i).isReified()) {
          v.load(index - 1,JetTypeMapper.TYPE_OBJECT);
          index--;
        }
      }
    }
    index=firstParamIndex;
    for (int i=0; i != valueParameters.size(); ++i) {
      Type type=codegen.typeMapper.mapType(valueParameters.get(i).getOutType());
      int sz=type.getSize();
      v.load(index - sz,type);
      index-=sz;
    }
    frame.leaveTemp(size);
  }
}
