{
  if (isStandardStack(resolvedGetCall,1) && isStandardStack(resolvedSetCall,2)) {
    v.dup2();
    return;
  }
  int size=0;
  int lastIndex=frame.enterTemp(Type.INT_TYPE);
  frame.leaveTemp(Type.INT_TYPE);
  List<ValueParameterDescriptor> valueParameters=resolvedGetCall.getResultingDescriptor().getValueParameters();
  int firstParamIndex=-1;
  for (int i=valueParameters.size() - 1; i >= 0; --i) {
    Type type=codegen.typeMapper.mapType(valueParameters.get(i).getType());
    int sz=type.getSize();
    frame.enterTemp(type);
    lastIndex+=sz;
    size+=sz;
    v.store((firstParamIndex=lastIndex) - sz,type);
  }
  List<TypeParameterDescriptor> typeParameters=resolvedGetCall.getResultingDescriptor().getTypeParameters();
  int firstTypeParamIndex=-1;
  for (int i=typeParameters.size() - 1; i >= 0; --i) {
    if (typeParameters.get(i).isReified()) {
      frame.enterTemp(OBJECT_TYPE);
      lastIndex++;
      size++;
      v.store(firstTypeParamIndex=lastIndex - 1,OBJECT_TYPE);
    }
  }
  ReceiverValue receiverParameter=resolvedGetCall.getReceiverArgument();
  int receiverIndex=-1;
  if (receiverParameter.exists()) {
    Type type=codegen.typeMapper.mapType(receiverParameter.getType());
    int sz=type.getSize();
    frame.enterTemp(type);
    lastIndex+=sz;
    size+=sz;
    v.store((receiverIndex=lastIndex) - sz,type);
  }
  ReceiverValue thisObject=resolvedGetCall.getThisObject();
  int thisIndex=-1;
  if (thisObject.exists()) {
    frame.enterTemp(OBJECT_TYPE);
    lastIndex++;
    size++;
    v.store((thisIndex=lastIndex) - 1,OBJECT_TYPE);
  }
  int realReceiverIndex;
  Type realReceiverType;
  if (thisIndex != -1) {
    if (receiverIndex != -1) {
      realReceiverIndex=receiverIndex;
      realReceiverType=codegen.typeMapper.mapType(receiverParameter.getType());
    }
 else {
      realReceiverIndex=thisIndex;
      realReceiverType=OBJECT_TYPE;
    }
  }
 else {
    if (receiverIndex != -1) {
      realReceiverType=codegen.typeMapper.mapType(receiverParameter.getType());
      realReceiverIndex=receiverIndex;
    }
 else {
      throw new UnsupportedOperationException();
    }
  }
  if (resolvedSetCall.getThisObject().exists()) {
    if (resolvedSetCall.getReceiverArgument().exists()) {
      codegen.generateFromResolvedCall(resolvedSetCall.getThisObject(),OBJECT_TYPE);
    }
    v.load(realReceiverIndex - realReceiverType.getSize(),realReceiverType);
  }
 else {
    if (resolvedSetCall.getReceiverArgument().exists()) {
      v.load(realReceiverIndex - realReceiverType.getSize(),realReceiverType);
    }
 else {
      throw new UnsupportedOperationException();
    }
  }
  int index=firstParamIndex;
  for (int i=0; i != valueParameters.size(); ++i) {
    Type type=codegen.typeMapper.mapType(valueParameters.get(i).getType());
    int sz=type.getSize();
    v.load(index - sz,type);
    index-=sz;
  }
  if (thisIndex != -1) {
    v.load(thisIndex - 1,OBJECT_TYPE);
  }
  if (receiverIndex != -1) {
    Type type=codegen.typeMapper.mapType(receiverParameter.getType());
    v.load(receiverIndex - type.getSize(),type);
  }
  if (firstTypeParamIndex != -1) {
    index=firstTypeParamIndex;
    for (int i=0; i != typeParameters.size(); ++i) {
      if (typeParameters.get(i).isReified()) {
        v.load(index - 1,OBJECT_TYPE);
        index--;
      }
    }
  }
  index=firstParamIndex;
  for (int i=0; i != valueParameters.size(); ++i) {
    Type type=codegen.typeMapper.mapType(valueParameters.get(i).getType());
    int sz=type.getSize();
    v.load(index - sz,type);
    index-=sz;
  }
  for (int i=0; i < size; i++) {
    frame.leaveTemp(OBJECT_TYPE);
  }
}
