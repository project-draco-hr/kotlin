{
  initFields();
  int mutable_bitField0_=0;
  org.jetbrains.kotlin.protobuf.ByteString.Output unknownFieldsOutput=org.jetbrains.kotlin.protobuf.ByteString.newOutput();
  org.jetbrains.kotlin.protobuf.CodedOutputStream unknownFieldsCodedOutput=org.jetbrains.kotlin.protobuf.CodedOutputStream.newInstance(unknownFieldsOutput);
  try {
    boolean done=false;
    while (!done) {
      int tag=input.readTag();
switch (tag) {
case 0:
        done=true;
      break;
default :
{
      if (!parseUnknownField(input,unknownFieldsCodedOutput,extensionRegistry,tag)) {
        done=true;
      }
      break;
    }
case 10:
{
    if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
      record_=new java.util.ArrayList<org.jetbrains.kotlin.serialization.jvm.JvmProtoBuf.StringTableTypes.Record>();
      mutable_bitField0_|=0x00000001;
    }
    record_.add(input.readMessage(org.jetbrains.kotlin.serialization.jvm.JvmProtoBuf.StringTableTypes.Record.PARSER,extensionRegistry));
    break;
  }
case 40:
{
  if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
    localName_=new java.util.ArrayList<java.lang.Integer>();
    mutable_bitField0_|=0x00000002;
  }
  localName_.add(input.readInt32());
  break;
}
case 42:
{
int length=input.readRawVarint32();
int limit=input.pushLimit(length);
if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
  localName_=new java.util.ArrayList<java.lang.Integer>();
  mutable_bitField0_|=0x00000002;
}
while (input.getBytesUntilLimit() > 0) {
  localName_.add(input.readInt32());
}
input.popLimit(limit);
break;
}
}
}
}
 catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
}
catch (java.io.IOException e) {
throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(this);
}
 finally {
if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
record_=java.util.Collections.unmodifiableList(record_);
}
if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
localName_=java.util.Collections.unmodifiableList(localName_);
}
try {
unknownFieldsCodedOutput.flush();
}
 catch (java.io.IOException e) {
}
 finally {
unknownFields=unknownFieldsOutput.toByteString();
}
makeExtensionsImmutable();
}
}
