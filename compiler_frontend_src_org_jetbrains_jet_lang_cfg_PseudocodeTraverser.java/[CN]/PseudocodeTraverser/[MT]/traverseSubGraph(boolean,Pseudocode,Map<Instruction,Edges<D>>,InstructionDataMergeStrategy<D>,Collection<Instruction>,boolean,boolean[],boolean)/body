{
  List<Instruction> instructions=directOrder ? pseudocode.getInstructions() : pseudocode.getReversedInstructions();
  Instruction startInstruction=getStartInstruction(pseudocode,directOrder);
  for (  Instruction instruction : instructions) {
    boolean isStart=directOrder ? instruction instanceof SubroutineEnterInstruction : instruction instanceof SubroutineSinkInstruction;
    if (!isLocal && isStart)     continue;
    Collection<Instruction> allPreviousInstructions;
    Collection<Instruction> previousInstructions=directOrder ? instruction.getPreviousInstructions() : instruction.getNextInstructions();
    if (instruction == startInstruction && !previousSubGraphInstructions.isEmpty()) {
      allPreviousInstructions=Lists.newArrayList(previousInstructions);
      allPreviousInstructions.addAll(previousSubGraphInstructions);
    }
 else {
      allPreviousInstructions=previousInstructions;
    }
    if (lookInside && instruction instanceof LocalDeclarationInstruction) {
      Pseudocode subroutinePseudocode=((LocalDeclarationInstruction)instruction).getBody();
      traverseSubGraph(lookInside,subroutinePseudocode,dataMap,instructionDataMergeStrategy,previousInstructions,directOrder,changed,true);
      Instruction lastInstruction=directOrder ? subroutinePseudocode.getSinkInstruction() : subroutinePseudocode.getEnterInstruction();
      Edges<D> previousValue=dataMap.get(instruction);
      Edges<D> newValue=dataMap.get(lastInstruction);
      if (!previousValue.equals(newValue)) {
        changed[0]=true;
        dataMap.put(instruction,newValue);
      }
      continue;
    }
    Edges<D> previousDataValue=dataMap.get(instruction);
    Collection<D> incomingEdgesData=Sets.newHashSet();
    for (    Instruction previousInstruction : allPreviousInstructions) {
      Edges<D> previousData=dataMap.get(previousInstruction);
      if (previousData != null) {
        incomingEdgesData.add(previousData.out);
      }
    }
    Edges<D> mergedData=instructionDataMergeStrategy.execute(instruction,incomingEdgesData);
    if (!mergedData.equals(previousDataValue)) {
      changed[0]=true;
      dataMap.put(instruction,mergedData);
    }
  }
}
