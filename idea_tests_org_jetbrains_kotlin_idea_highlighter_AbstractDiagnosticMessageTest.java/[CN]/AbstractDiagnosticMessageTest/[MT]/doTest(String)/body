{
  File file=new File(filePath);
  String fileName=file.getName();
  String fileData=KotlinTestUtils.doLoadFile(file);
  Map<String,String> directives=KotlinTestUtils.parseDirectives(fileData);
  int diagnosticNumber=getDiagnosticNumber(directives);
  final Set<DiagnosticFactory<?>> diagnosticFactories=getDiagnosticFactories(directives);
  MessageType messageType=getMessageTypeDirective(directives);
  KtFile psiFile=createPsiFile(null,fileName,loadFile(fileName));
  AnalysisResult analysisResult=analyze(psiFile);
  BindingContext bindingContext=analysisResult.getBindingContext();
  List<Diagnostic> diagnostics=ContainerUtil.filter(bindingContext.getDiagnostics().all(),new Condition<Diagnostic>(){
    @Override public boolean value(    Diagnostic diagnostic){
      return diagnosticFactories.contains(diagnostic.getFactory());
    }
  }
);
  assertEquals("Expected diagnostics number mismatch:",diagnosticNumber,diagnostics.size());
  int index=1;
  String name=FileUtil.getNameWithoutExtension(fileName);
  for (  Diagnostic diagnostic : diagnostics) {
    String readableDiagnosticText;
    String extension;
    if (messageType != MessageType.TEXT && IdeErrorMessages.hasIdeSpecificMessage(diagnostic)) {
      readableDiagnosticText=FormatHtmlUtilKt.formatHtml(IdeErrorMessages.render(diagnostic));
      extension=MessageType.HTML.extension;
    }
 else {
      readableDiagnosticText=DefaultErrorMessages.render(diagnostic);
      extension=MessageType.TEXT.extension;
    }
    String errorMessageFileName=name + index;
    String path=getTestDataPath() + "/" + errorMessageFileName+ "."+ extension;
    String actualText="<!-- " + errorMessageFileName + " -->\n"+ readableDiagnosticText;
    assertSameLinesWithFile(path,actualText);
    index++;
  }
}
