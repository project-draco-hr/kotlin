{
  Annotations resultAnnotations=configuration.additionalAnnotations != null ? AnnotationsKt.composeAnnotations(getAnnotations(),configuration.additionalAnnotations) : getAnnotations();
  FunctionDescriptorImpl substitutedDescriptor=createSubstitutedCopy(configuration.newOwner,configuration.original,configuration.kind,configuration.name,resultAnnotations,getSourceToUseForCopy(configuration.preserveSourceElement,configuration.original,configuration.sourceElement));
  List<TypeParameterDescriptor> unsubstitutedTypeParameters=configuration.newTypeParameters == null ? getTypeParameters() : configuration.newTypeParameters;
  List<TypeParameterDescriptor> substitutedTypeParameters=new ArrayList<TypeParameterDescriptor>(unsubstitutedTypeParameters.size());
  final TypeSubstitutor substitutor=DescriptorSubstitutor.substituteTypeParameters(unsubstitutedTypeParameters,configuration.substitution,substitutedDescriptor,substitutedTypeParameters);
  KotlinType substitutedReceiverParameterType=null;
  if (configuration.newExtensionReceiverParameterType != null) {
    substitutedReceiverParameterType=substitutor.substitute(configuration.newExtensionReceiverParameterType,Variance.IN_VARIANCE);
    if (substitutedReceiverParameterType == null) {
      return null;
    }
  }
  ReceiverParameterDescriptor substitutedExpectedThis=null;
  if (configuration.dispatchReceiverParameter != null) {
    substitutedExpectedThis=configuration.dispatchReceiverParameter.substitute(substitutor);
    if (substitutedExpectedThis == null) {
      return null;
    }
  }
  List<ValueParameterDescriptor> substitutedValueParameters=getSubstitutedValueParameters(substitutedDescriptor,configuration.newValueParameterDescriptors,substitutor,configuration.dropOriginalInContainingParts);
  if (substitutedValueParameters == null) {
    return null;
  }
  KotlinType substitutedReturnType=substitutor.substitute(configuration.newReturnType,Variance.OUT_VARIANCE);
  if (substitutedReturnType == null) {
    return null;
  }
  substitutedDescriptor.initialize(substitutedReceiverParameterType,substitutedExpectedThis,substitutedTypeParameters,substitutedValueParameters,substitutedReturnType,configuration.newModality,configuration.newVisibility);
  substitutedDescriptor.setOperator(isOperator);
  substitutedDescriptor.setInfix(isInfix);
  substitutedDescriptor.setExternal(isExternal);
  substitutedDescriptor.setInline(isInline);
  substitutedDescriptor.setTailrec(isTailrec);
  substitutedDescriptor.setSuspend(isSuspend);
  substitutedDescriptor.setHasStableParameterNames(hasStableParameterNames);
  substitutedDescriptor.setHasSynthesizedParameterNames(hasSynthesizedParameterNames);
  substitutedDescriptor.setHiddenToOvercomeSignatureClash(configuration.isHiddenToOvercomeSignatureClash);
  substitutedDescriptor.setHiddenForResolutionEverywhereBesideSupercalls(configuration.isHiddenForResolutionEverywhereBesideSupercalls);
  if (!configuration.userDataMap.isEmpty() || userDataMap != null) {
    Map<UserDataKey<?>,Object> newMap=configuration.userDataMap;
    if (userDataMap != null) {
      for (      Map.Entry<UserDataKey<?>,Object> entry : userDataMap.entrySet()) {
        if (!newMap.containsKey(entry.getKey())) {
          newMap.put(entry.getKey(),entry.getValue());
        }
      }
    }
    if (newMap.size() == 1) {
      substitutedDescriptor.userDataMap=Collections.<UserDataKey<?>,Object>singletonMap(newMap.keySet().iterator().next(),newMap.values().iterator().next());
    }
 else {
      substitutedDescriptor.userDataMap=newMap;
    }
  }
  if (configuration.signatureChange || getInitialSignatureDescriptor() != null) {
    FunctionDescriptor initialSignature=(getInitialSignatureDescriptor() != null ? getInitialSignatureDescriptor() : this);
    FunctionDescriptor initialSignatureSubstituted=initialSignature.substitute(substitutor);
    substitutedDescriptor.setInitialSignatureDescriptor(initialSignatureSubstituted);
  }
  if (configuration.copyOverrides && !getOriginal().getOverriddenDescriptors().isEmpty()) {
    if (configuration.substitution.isEmpty()) {
      Function0<Set<FunctionDescriptor>> overriddenFunctionsTask=lazyOverriddenFunctionsTask;
      if (overriddenFunctionsTask != null) {
        substitutedDescriptor.lazyOverriddenFunctionsTask=overriddenFunctionsTask;
      }
 else {
        substitutedDescriptor.setOverriddenDescriptors(getOverriddenDescriptors());
      }
    }
 else {
      substitutedDescriptor.lazyOverriddenFunctionsTask=new Function0<Set<FunctionDescriptor>>(){
        @Override public Set<FunctionDescriptor> invoke(){
          SmartSet<FunctionDescriptor> result=SmartSet.create();
          for (          FunctionDescriptor overriddenFunction : getOverriddenDescriptors()) {
            result.add(overriddenFunction.substitute(substitutor));
          }
          return result;
        }
      }
;
    }
  }
  return substitutedDescriptor;
}
