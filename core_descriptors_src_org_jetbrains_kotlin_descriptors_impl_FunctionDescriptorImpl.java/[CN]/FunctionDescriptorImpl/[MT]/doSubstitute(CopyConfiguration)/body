{
  FunctionDescriptorImpl substitutedDescriptor=createSubstitutedCopy(configuration.newOwner,configuration.original,configuration.kind,configuration.name,configuration.preserveSourceElement);
  List<TypeParameterDescriptor> substitutedTypeParameters;
  TypeSubstitutor substitutor;
  if (configuration.newTypeParameters == null) {
    List<TypeParameterDescriptor> originalTypeParameters=getTypeParameters();
    substitutedTypeParameters=new ArrayList<TypeParameterDescriptor>(originalTypeParameters.size());
    substitutor=DescriptorSubstitutor.substituteTypeParameters(originalTypeParameters,configuration.originalSubstitutor.getSubstitution(),substitutedDescriptor,substitutedTypeParameters);
  }
 else {
    substitutedTypeParameters=configuration.newTypeParameters;
    substitutor=configuration.originalSubstitutor;
  }
  KotlinType substitutedReceiverParameterType=null;
  if (configuration.newExtensionReceiverParameterType != null) {
    substitutedReceiverParameterType=substitutor.substitute(configuration.newExtensionReceiverParameterType,Variance.IN_VARIANCE);
    if (substitutedReceiverParameterType == null) {
      return null;
    }
  }
  ReceiverParameterDescriptor substitutedExpectedThis=null;
  if (dispatchReceiverParameter != null) {
    substitutedExpectedThis=dispatchReceiverParameter.substitute(substitutor);
    if (substitutedExpectedThis == null) {
      return null;
    }
  }
  List<ValueParameterDescriptor> substitutedValueParameters=getSubstitutedValueParameters(substitutedDescriptor,configuration.newValueParameterDescriptors,substitutor,configuration.dropOriginalInContainingParts);
  if (substitutedValueParameters == null) {
    return null;
  }
  KotlinType substitutedReturnType=substitutor.substitute(configuration.newReturnType,Variance.OUT_VARIANCE);
  if (substitutedReturnType == null) {
    return null;
  }
  substitutedDescriptor.initialize(substitutedReceiverParameterType,substitutedExpectedThis,substitutedTypeParameters,substitutedValueParameters,substitutedReturnType,configuration.newModality,configuration.newVisibility);
  substitutedDescriptor.setOperator(isOperator);
  substitutedDescriptor.setInfix(isInfix);
  substitutedDescriptor.setExternal(isExternal);
  substitutedDescriptor.setInline(isInline);
  substitutedDescriptor.setTailrec(isTailrec);
  substitutedDescriptor.setHasStableParameterNames(hasStableParameterNames);
  substitutedDescriptor.setHasSynthesizedParameterNames(hasSynthesizedParameterNames);
  substitutedDescriptor.setHidden(configuration.isHiddenToOvercomeSignatureClash);
  if (configuration.signatureChange || getInitialSignatureDescriptor() != null) {
    FunctionDescriptor initialSignature=(getInitialSignatureDescriptor() != null ? getInitialSignatureDescriptor() : this);
    FunctionDescriptor initialSignatureSubstituted=initialSignature.substitute(substitutor);
    substitutedDescriptor.setInitialSignatureDescriptor(initialSignatureSubstituted);
  }
  if (configuration.copyOverrides && !getOverriddenDescriptors().isEmpty()) {
    if (configuration.originalSubstitutor.isEmpty()) {
      substitutedDescriptor.setOverriddenDescriptors(getOverriddenDescriptors());
    }
 else {
      Collection<CallableMemberDescriptor> substitutedOverridden=SmartSet.create();
      for (      FunctionDescriptor overriddenFunction : getOverriddenDescriptors()) {
        substitutedOverridden.add(overriddenFunction.substitute(substitutor));
      }
      substitutedDescriptor.setOverriddenDescriptors(substitutedOverridden);
    }
  }
  return substitutedDescriptor;
}
