{
  if (candidates.size() == 1) {
    return OverloadResolutionResultsImpl.success(candidates.iterator().next());
  }
  if (candidates.iterator().next() instanceof VariableAsFunctionResolvedCall) {
    candidates=overloadingConflictResolver.findMaximallySpecificVariableAsFunctionCalls(candidates);
  }
  Set<MutableResolvedCall<D>> noOverrides=OverrideResolver.filterOutOverridden(candidates,MAP_TO_RESULT);
  if (noOverrides.size() == 1) {
    return OverloadResolutionResultsImpl.success(noOverrides.iterator().next());
  }
  MutableResolvedCall<D> maximallySpecific=overloadingConflictResolver.findMaximallySpecific(noOverrides,checkArgumentsMode,false,isDebuggerContext);
  if (maximallySpecific != null) {
    return OverloadResolutionResultsImpl.success(maximallySpecific);
  }
  if (discriminateGenerics) {
    MutableResolvedCall<D> maximallySpecificGenericsDiscriminated=overloadingConflictResolver.findMaximallySpecific(noOverrides,checkArgumentsMode,true,isDebuggerContext);
    if (maximallySpecificGenericsDiscriminated != null) {
      return OverloadResolutionResultsImpl.success(maximallySpecificGenericsDiscriminated);
    }
  }
  return OverloadResolutionResultsImpl.ambiguity(noOverrides);
}
