{
  initFields();
  int mutable_bitField0_=0;
  try {
    boolean done=false;
    while (!done) {
      int tag=input.readTag();
switch (tag) {
case 0:
        done=true;
      break;
default :
{
      if (!parseUnknownField(input,extensionRegistry,tag)) {
        done=true;
      }
      break;
    }
case 10:
{
    org.jetbrains.kotlin.serialization.ProtoBuf.StringTable.Builder subBuilder=null;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      subBuilder=strings_.toBuilder();
    }
    strings_=input.readMessage(org.jetbrains.kotlin.serialization.ProtoBuf.StringTable.PARSER,extensionRegistry);
    if (subBuilder != null) {
      subBuilder.mergeFrom(strings_);
      strings_=subBuilder.buildPartial();
    }
    bitField0_|=0x00000001;
    break;
  }
case 18:
{
  org.jetbrains.kotlin.serialization.ProtoBuf.QualifiedNameTable.Builder subBuilder=null;
  if (((bitField0_ & 0x00000002) == 0x00000002)) {
    subBuilder=qualifiedNames_.toBuilder();
  }
  qualifiedNames_=input.readMessage(org.jetbrains.kotlin.serialization.ProtoBuf.QualifiedNameTable.PARSER,extensionRegistry);
  if (subBuilder != null) {
    subBuilder.mergeFrom(qualifiedNames_);
    qualifiedNames_=subBuilder.buildPartial();
  }
  bitField0_|=0x00000002;
  break;
}
case 26:
{
org.jetbrains.kotlin.serialization.ProtoBuf.Package.Builder subBuilder=null;
if (((bitField0_ & 0x00000004) == 0x00000004)) {
  subBuilder=package_.toBuilder();
}
package_=input.readMessage(org.jetbrains.kotlin.serialization.ProtoBuf.Package.PARSER,extensionRegistry);
if (subBuilder != null) {
  subBuilder.mergeFrom(package_);
  package_=subBuilder.buildPartial();
}
bitField0_|=0x00000004;
break;
}
case 34:
{
if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
class_=new java.util.ArrayList<org.jetbrains.kotlin.serialization.ProtoBuf.Class>();
mutable_bitField0_|=0x00000008;
}
class_.add(input.readMessage(org.jetbrains.kotlin.serialization.ProtoBuf.Class.PARSER,extensionRegistry));
break;
}
}
}
}
 catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
}
catch (java.io.IOException e) {
throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(this);
}
 finally {
if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
class_=java.util.Collections.unmodifiableList(class_);
}
makeExtensionsImmutable();
}
}
