{
  KotlinType expectedType=context.bindingContext().getType(expression);
  ConstantValue<?> constant=compileTimeValue.toConstantValue(expectedType != null ? expectedType : TypeUtils.NO_EXPECTED_TYPE);
  if (constant instanceof NullValue) {
    return JsLiteral.NULL;
  }
  Object value=constant.getValue();
  if (value instanceof Integer || value instanceof Short || value instanceof Byte) {
    return context.program().getNumberLiteral(((Number)value).intValue());
  }
 else   if (value instanceof Long) {
    return JsAstUtils.newLong((Long)value,context);
  }
 else   if (value instanceof Number) {
    return context.program().getNumberLiteral(((Number)value).doubleValue());
  }
 else   if (value instanceof Boolean) {
    return JsLiteral.getBoolean((Boolean)value);
  }
  if (value instanceof String) {
    return context.program().getStringLiteral((String)value);
  }
  if (value instanceof Character) {
    return context.program().getStringLiteral(value.toString());
  }
  return null;
}
