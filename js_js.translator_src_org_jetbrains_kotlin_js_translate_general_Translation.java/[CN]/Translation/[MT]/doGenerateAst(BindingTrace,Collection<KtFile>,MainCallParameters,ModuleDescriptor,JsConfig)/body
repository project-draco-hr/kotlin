{
  StaticContext staticContext=StaticContext.generateStaticContext(bindingTrace,config,moduleDescriptor);
  JsProgram program=staticContext.getProgram();
  JsFunction rootFunction=JsAstUtils.createFunctionWithEmptyBody(program.getScope());
  JsBlock rootBlock=rootFunction.getBody();
  List<JsStatement> statements=rootBlock.getStatements();
  statements.add(program.getStringLiteral("use strict").makeStmt());
  TranslationContext context=TranslationContext.rootContext(staticContext,rootFunction);
  statements.addAll(PackageDeclarationTranslator.translateFiles(files,context));
  defineModule(context,statements,config.getModuleId());
  statements.add(new JsReturn(program.getRootScope().declareName(Namer.getRootPackageName()).makeRef()));
  mayBeGenerateTests(files,config,rootBlock,context);
  JsBlock block=program.getGlobalBlock();
  List<JsExpression> invocationArgs=new ArrayList<JsExpression>(staticContext.getImportedModules().size() + 1);
  JsName kotlinName=program.getScope().declareName(Namer.KOTLIN_NAME);
  rootFunction.getParameters().add(new JsParameter((kotlinName)));
  invocationArgs.add(kotlinName.makeRef());
  for (  String importedModule : staticContext.getImportedModules().keySet()) {
    rootFunction.getParameters().add(new JsParameter(staticContext.getImportedModules().get(importedModule)));
    JsName globalId=program.getScope().declareName(Namer.suggestedModuleName(importedModule));
    invocationArgs.add(JsAstUtils.pureFqn(globalId,null));
  }
  JsInvocation invocation=new JsInvocation(rootFunction,invocationArgs);
  String thisModuleName=JsDescriptorUtils.getModuleNameFromDescriptorName(moduleDescriptor);
  JsName thisModuleId=program.getScope().declareName(Namer.suggestedModuleName(thisModuleName));
  block.getStatements().add(JsAstUtils.newVar(thisModuleId,new JsBinaryOperation(JsBinaryOperator.OR,thisModuleId.makeRef(),invocation)));
  if (mainCallParameters.shouldBeGenerated()) {
    JsStatement statement=generateCallToMain(context,files,mainCallParameters.arguments());
    if (statement != null) {
      statements.add(statement);
    }
  }
  return context;
}
