{
  loadText("package " + NAMESPACE_NAME + "\n\nfun foo() = 42\n");
  String facadeFileName=JvmClassName.byFqNameWithoutInnerClasses(PackageClassUtils.getPackageClassFqName(NAMESPACE_NAME)).getInternalName() + ".class";
  ClassFileFactory factory=generateClassesInFile();
  for (  String fileName : factory.getOutputFiles()) {
    if (!fileName.equals(facadeFileName)) {
      String fqName=fileName.substring(0,fileName.length() - ".class".length()).replace('/','.');
      Class aClass=generateClass(fqName);
      Class<? extends Annotation> annotationClass=getCorrespondingAnnotationClass(KotlinPackageFragment.class);
      assertTrue("No KotlinPackageFragment annotation on a package fragment",aClass.isAnnotationPresent(annotationClass));
      Annotation kotlinPackageFragment=aClass.getAnnotation(annotationClass);
      assertTrue("KotlinPackageFragment annotation is written with an unsupported format",AbiVersionUtil.isAbiVersionCompatible((Integer)ClassLoaderIsolationUtil.getAnnotationAttribute(kotlinPackageFragment,"abiVersion")));
      return;
    }
  }
  fail("No package fragment was found: " + factory.getOutputFiles());
}
