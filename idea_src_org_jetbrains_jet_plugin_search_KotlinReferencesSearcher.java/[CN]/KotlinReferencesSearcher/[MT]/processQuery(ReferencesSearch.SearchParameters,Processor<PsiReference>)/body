{
  PsiElement element=queryParameters.getElementToSearch();
  if (!JetPsiChecker.isInSourceContent(element)) {
    return;
  }
  if (element instanceof JetClass) {
    processJetClassOrObject((JetClass)element,queryParameters);
  }
 else   if (element instanceof JetNamedFunction) {
    final JetNamedFunction function=(JetNamedFunction)element;
    String name=function.getName();
    if (name != null) {
      PsiMethod method=ApplicationManager.getApplication().runReadAction(new Computable<PsiMethod>(){
        @Override public PsiMethod compute(){
          return LightClassUtil.getLightClassMethod(function);
        }
      }
);
      searchMethod(queryParameters,method);
    }
  }
 else   if (element instanceof JetProperty) {
    final JetProperty property=(JetProperty)element;
    LightClassUtil.PropertyAccessorsPsiMethods propertyMethods=ApplicationManager.getApplication().runReadAction(new Computable<LightClassUtil.PropertyAccessorsPsiMethods>(){
      @Override public LightClassUtil.PropertyAccessorsPsiMethods compute(){
        return LightClassUtil.getLightClassPropertyMethods(property);
      }
    }
);
    searchMethod(queryParameters,propertyMethods.getGetter());
    searchMethod(queryParameters,propertyMethods.getSetter());
  }
 else   if (element instanceof JetObjectDeclarationName) {
    PsiElement parent=element.getParent();
    if (parent instanceof JetObjectDeclaration) {
      processJetClassOrObject((JetObjectDeclaration)parent,queryParameters);
    }
  }
}
