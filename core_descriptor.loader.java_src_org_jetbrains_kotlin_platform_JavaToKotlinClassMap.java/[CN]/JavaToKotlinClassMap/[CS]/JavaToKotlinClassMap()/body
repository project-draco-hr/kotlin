{
  KotlinBuiltIns builtIns=KotlinBuiltIns.getInstance();
  add(Object.class,builtIns.getAny());
  add(String.class,builtIns.getString());
  add(CharSequence.class,builtIns.getCharSequence());
  add(Throwable.class,builtIns.getThrowable());
  add(Cloneable.class,builtIns.getCloneable());
  add(Number.class,builtIns.getNumber());
  add(Comparable.class,builtIns.getComparable());
  add(Enum.class,builtIns.getEnum());
  add(Annotation.class,builtIns.getAnnotation());
  add(Iterable.class,builtIns.getIterable(),builtIns.getMutableIterable());
  add(Iterator.class,builtIns.getIterator(),builtIns.getMutableIterator());
  add(Collection.class,builtIns.getCollection(),builtIns.getMutableCollection());
  add(List.class,builtIns.getList(),builtIns.getMutableList());
  add(Set.class,builtIns.getSet(),builtIns.getMutableSet());
  add(Map.class,builtIns.getMap(),builtIns.getMutableMap());
  add(Map.Entry.class,builtIns.getMapEntry(),builtIns.getMutableMapEntry());
  add(ListIterator.class,builtIns.getListIterator(),builtIns.getMutableListIterator());
  for (  JvmPrimitiveType jvmType : JvmPrimitiveType.values()) {
    add(ClassId.topLevel(jvmType.getWrapperFqName()),builtIns.getPrimitiveClassDescriptor(jvmType.getPrimitiveType()));
  }
  addJavaToKotlin(classId(Deprecated.class),builtIns.getDeprecatedAnnotation());
  addKotlinToJava(classId(Void.class),builtIns.getNothing());
}
