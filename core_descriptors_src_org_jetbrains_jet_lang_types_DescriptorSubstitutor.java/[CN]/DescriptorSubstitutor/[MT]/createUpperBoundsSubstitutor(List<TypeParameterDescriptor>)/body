{
  Map<TypeConstructor,TypeProjection> mutableSubstitution=Maps.newHashMap();
  TypeSubstitutor substitutor=TypeSubstitutor.create(mutableSubstitution);
  for (  TypeParameterDescriptor descriptor : topologicallySortTypeParameters(typeParameters)) {
    JetType upperBoundsAsType=descriptor.getUpperBoundsAsType();
    JetType substitutedUpperBoundsAsType=substitutor.substitute(upperBoundsAsType,Variance.INVARIANT);
    mutableSubstitution.put(descriptor.getTypeConstructor(),new TypeProjectionImpl(substitutedUpperBoundsAsType));
  }
  return substitutor;
}
