{
  final Map<TypeConstructor,TypeProjection> mutableSubstitution=new HashMap<TypeConstructor,TypeProjection>();
  TypeSubstitutor substitutor=TypeSubstitutor.create(new TypeSubstitution(){
    @Override public TypeProjection get(    TypeConstructor key){
      if (originalSubstitutor.inRange(key)) {
        return originalSubstitutor.getSubstitution().get(key);
      }
      return mutableSubstitution.get(key);
    }
    @Override public boolean isEmpty(){
      return originalSubstitutor.isEmpty() && mutableSubstitution.isEmpty();
    }
    @Override public String toString(){
      return "DescriptorSubstitutor.substituteTypeParameters(" + mutableSubstitution + " / "+ originalSubstitutor.getSubstitution()+ ")";
    }
  }
);
  Map<TypeParameterDescriptor,TypeParameterDescriptorImpl> substitutedMap=new HashMap<TypeParameterDescriptor,TypeParameterDescriptorImpl>();
  for (  TypeParameterDescriptor descriptor : typeParameters) {
    TypeParameterDescriptorImpl substituted=TypeParameterDescriptorImpl.createForFurtherModification(newContainingDeclaration,descriptor.getAnnotations(),descriptor.isReified(),descriptor.getVariance(),descriptor.getName(),descriptor.getIndex());
    substituted.setInitialized();
    mutableSubstitution.put(descriptor.getTypeConstructor(),new TypeProjectionImpl(substituted.getDefaultType()));
    substitutedMap.put(descriptor,substituted);
    result.add(substituted);
  }
  for (  TypeParameterDescriptor descriptor : typeParameters) {
    TypeParameterDescriptorImpl substituted=substitutedMap.get(descriptor);
    for (    JetType upperBound : descriptor.getUpperBounds()) {
      substituted.getUpperBounds().add(substitutor.substitute(upperBound,Variance.INVARIANT));
    }
  }
  return substitutor;
}
