{
  loadText("package " + PACKAGE_NAME + "\n\nfun foo() = 42\n");
  String facadeFileName=JvmClassName.byFqNameWithoutInnerClasses(PackageClassUtils.getPackageClassFqName(PACKAGE_NAME)).getInternalName() + ".class";
  OutputFileCollection outputFiles=generateClassesInFile();
  for (  OutputFile outputFile : outputFiles.asList()) {
    String filePath=outputFile.getRelativePath();
    if (!filePath.equals(facadeFileName)) {
      String fqName=filePath.substring(0,filePath.length() - ".class".length()).replace('/','.');
      Class<?> aClass=generateClass(fqName);
      Class<? extends Annotation> annotationClass=loadAnnotationClassQuietly(JvmAnnotationNames.KOTLIN_PACKAGE_PART.asString());
      assertTrue("No KotlinPackagePart annotation on a package part",aClass.isAnnotationPresent(annotationClass));
      Annotation kotlinPackagePart=aClass.getAnnotation(annotationClass);
      Integer version=(Integer)CodegenTestUtil.getAnnotationAttribute(kotlinPackagePart,"abiVersion");
      assertNotNull(version);
      assertTrue("KotlinPackagePart annotation is written with an unsupported format",AbiVersionUtil.isAbiVersionCompatible(version));
      return;
    }
  }
  fail("No package part was found: " + outputFiles.asList());
}
