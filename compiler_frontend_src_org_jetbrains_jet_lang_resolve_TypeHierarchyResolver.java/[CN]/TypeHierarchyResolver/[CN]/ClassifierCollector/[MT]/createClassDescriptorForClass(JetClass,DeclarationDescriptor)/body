{
  ClassKind kind=getClassKind(klass);
  boolean isInner=kind == ClassKind.CLASS && klass.isInner();
  MutableClassDescriptor mutableClassDescriptor=new MutableClassDescriptor(containingDeclaration,outerScope,kind,isInner,JetPsiUtil.safeName(klass.getName()));
  context.getClasses().put(klass,mutableClassDescriptor);
  trace.record(FQNAME_TO_CLASS_DESCRIPTOR,JetPsiUtil.getUnsafeFQName(klass),mutableClassDescriptor);
  createClassObjectForEnumClass(mutableClassDescriptor);
  JetScope classScope=mutableClassDescriptor.getScopeForMemberDeclarationResolution();
  prepareForDeferredCall(classScope,mutableClassDescriptor,klass);
  return mutableClassDescriptor;
}
