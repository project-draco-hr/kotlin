{
  return DFS.topologicalOrder((Iterable)context.getClasses().values(),new DFS.Neighbors<MutableClassDescriptorLite>(){
    @NotNull @Override public Iterable<MutableClassDescriptorLite> getNeighbors(    MutableClassDescriptorLite current){
      List<MutableClassDescriptorLite> result=Lists.newArrayList();
      for (      JetType supertype : current.getSupertypes()) {
        DeclarationDescriptor declarationDescriptor=supertype.getConstructor().getDeclarationDescriptor();
        if (declarationDescriptor instanceof MutableClassDescriptorLite) {
          MutableClassDescriptorLite classDescriptor=(MutableClassDescriptorLite)declarationDescriptor;
          result.add(classDescriptor);
        }
      }
      return result;
    }
  }
);
}
