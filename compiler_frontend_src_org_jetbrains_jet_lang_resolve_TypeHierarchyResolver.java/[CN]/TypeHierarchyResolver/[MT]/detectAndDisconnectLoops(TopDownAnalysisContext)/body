{
  List<Runnable> tasks=new ArrayList<Runnable>();
  for (  final MutableClassDescriptorLite klass : c.getClassesTopologicalOrder()) {
    for (    final JetType supertype : klass.getSupertypes()) {
      ClassifierDescriptor supertypeDescriptor=supertype.getConstructor().getDeclarationDescriptor();
      if (supertypeDescriptor instanceof MutableClassDescriptorLite) {
        MutableClassDescriptorLite superclass=(MutableClassDescriptorLite)supertypeDescriptor;
        if (isReachable(superclass,klass,new HashSet<ClassDescriptor>())) {
          tasks.add(new Runnable(){
            @Override public void run(){
              klass.getSupertypes().remove(supertype);
            }
          }
);
          reportCyclicInheritanceHierarchyError(trace,klass,superclass);
        }
      }
    }
  }
  for (  Runnable task : tasks) {
    task.run();
  }
}
