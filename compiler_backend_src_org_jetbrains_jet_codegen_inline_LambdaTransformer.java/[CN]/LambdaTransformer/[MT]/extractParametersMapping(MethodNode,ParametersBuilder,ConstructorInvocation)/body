{
  Map<Integer,LambdaInfo> indexToLambda=invocation.getLambdasToInline();
  AbstractInsnNode cur=constructor.instructions.getFirst();
  cur=cur.getNext();
  List<LambdaInfo> additionalCaptured=new ArrayList<LambdaInfo>();
  while (cur != null) {
    if (cur.getType() == AbstractInsnNode.FIELD_INSN) {
      FieldInsnNode fieldNode=(FieldInsnNode)cur;
      VarInsnNode previous=(VarInsnNode)fieldNode.getPrevious();
      int varIndex=previous.var;
      paramMapping.put(fieldNode.name,varIndex);
      CapturedParamInfo info=builder.addCapturedParam(fieldNode.name,Type.getType(fieldNode.desc),false,null);
      LambdaInfo LambdaInfo=indexToLambda.get(varIndex);
      if (LambdaInfo != null) {
        info.setLambda(LambdaInfo);
        additionalCaptured.add(LambdaInfo);
      }
    }
    cur=cur.getNext();
  }
  Map<String,LambdaInfo> recapturedLambdas=new HashMap<String,LambdaInfo>();
  List<CapturedParamInfo> recaptured=new ArrayList<CapturedParamInfo>();
  for (  LambdaInfo info : additionalCaptured) {
    List<CapturedParamInfo> vars=info.getCapturedVars();
    for (    CapturedParamInfo var : vars) {
      CapturedParamInfo recapturedParamInfo=builder.addCapturedParam(getNewFieldName(var.getFieldName()),var.getType(),true,var);
      recapturedParamInfo.setRecapturedFrom(info);
      recaptured.add(var);
    }
    recapturedLambdas.put(info.getLambdaClassType().getInternalName(),info);
  }
  invocation.setRecaptured(recaptured);
  invocation.setRecapturedLambdas(recapturedLambdas);
}
