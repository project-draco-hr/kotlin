{
  this.project=project;
  this.globalContext=globalContext;
  this.storageManager=globalContext.getStorageManager();
  this.bindingTrace=bindingTrace;
  this.moduleDescriptor=moduleDescriptor;
  this.platformToKotlinClassMap=moduleDescriptor.getPlatformToKotlinClassMap();
  this.topDownAnalyzer=new TopDownAnalyzer();
  this.mutablePackageFragmentProvider=new MutablePackageFragmentProvider(getModuleDescriptor());
  this.dependencyClassByQualifiedNameResolverDummy=new DependencyClassByQualifiedNameResolverDummyImpl();
  this.bodyResolver=new BodyResolver();
  this.annotationResolver=new AnnotationResolver();
  this.callResolver=new CallResolver();
  this.argumentTypeResolver=new ArgumentTypeResolver();
  this.expressionTypingComponents=new ExpressionTypingComponents();
  this.expressionTypingServices=new ExpressionTypingServices(expressionTypingComponents);
  this.controlStructureTypingUtils=new ControlStructureTypingUtils(expressionTypingServices);
  this.expressionTypingUtils=new ExpressionTypingUtils(expressionTypingServices,callResolver);
  this.forLoopConventionsChecker=new ForLoopConventionsChecker();
  this.callExpressionResolver=new CallExpressionResolver();
  this.descriptorResolver=new DescriptorResolver();
  this.delegatedPropertyResolver=new DelegatedPropertyResolver();
  this.typeResolver=new TypeResolver();
  this.qualifiedExpressionResolver=new QualifiedExpressionResolver();
  this.callResolverExtensionProvider=new CallResolverExtensionProvider();
  this.candidateResolver=new CandidateResolver();
  this.controlFlowAnalyzer=new ControlFlowAnalyzer();
  this.declarationsChecker=new DeclarationsChecker();
  this.functionAnalyzerExtension=new FunctionAnalyzerExtension();
  this.scriptBodyResolver=new ScriptBodyResolver();
  this.declarationResolver=new DeclarationResolver();
  this.importsResolver=new ImportsResolver();
  this.jetImportsFactory=new JetImportsFactory();
  this.scriptHeaderResolver=new ScriptHeaderResolver();
  this.overloadResolver=new OverloadResolver();
  this.overrideResolver=new OverrideResolver();
  this.typeHierarchyResolver=new TypeHierarchyResolver();
  this.topDownAnalyzer.setBodyResolver(bodyResolver);
  this.topDownAnalyzer.setDeclarationResolver(declarationResolver);
  this.topDownAnalyzer.setModuleDescriptor(moduleDescriptor);
  this.topDownAnalyzer.setOverloadResolver(overloadResolver);
  this.topDownAnalyzer.setOverrideResolver(overrideResolver);
  this.topDownAnalyzer.setPackageFragmentProvider(mutablePackageFragmentProvider);
  this.topDownAnalyzer.setProject(project);
  this.topDownAnalyzer.setScriptHeaderResolver(scriptHeaderResolver);
  this.topDownAnalyzer.setTrace(bindingTrace);
  this.topDownAnalyzer.setTypeHierarchyResolver(typeHierarchyResolver);
  bodyResolver.setAnnotationResolver(annotationResolver);
  bodyResolver.setCallResolver(callResolver);
  bodyResolver.setControlFlowAnalyzer(controlFlowAnalyzer);
  bodyResolver.setDeclarationsChecker(declarationsChecker);
  bodyResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);
  bodyResolver.setExpressionTypingServices(expressionTypingServices);
  bodyResolver.setFunctionAnalyzerExtension(functionAnalyzerExtension);
  bodyResolver.setScriptBodyResolverResolver(scriptBodyResolver);
  bodyResolver.setTrace(bindingTrace);
  annotationResolver.setCallResolver(callResolver);
  annotationResolver.setStorageManager(storageManager);
  annotationResolver.setTypeResolver(typeResolver);
  callResolver.setArgumentTypeResolver(argumentTypeResolver);
  callResolver.setCandidateResolver(candidateResolver);
  callResolver.setExpressionTypingServices(expressionTypingServices);
  callResolver.setTypeResolver(typeResolver);
  argumentTypeResolver.setExpressionTypingServices(expressionTypingServices);
  argumentTypeResolver.setTypeResolver(typeResolver);
  expressionTypingServices.setAnnotationResolver(annotationResolver);
  expressionTypingServices.setCallExpressionResolver(callExpressionResolver);
  expressionTypingServices.setCallResolver(callResolver);
  expressionTypingServices.setDescriptorResolver(descriptorResolver);
  expressionTypingServices.setExtensionProvider(callResolverExtensionProvider);
  expressionTypingServices.setProject(project);
  expressionTypingServices.setTypeResolver(typeResolver);
  expressionTypingComponents.setCallResolver(callResolver);
  expressionTypingComponents.setControlStructureTypingUtils(controlStructureTypingUtils);
  expressionTypingComponents.setExpressionTypingServices(expressionTypingServices);
  expressionTypingComponents.setExpressionTypingUtils(expressionTypingUtils);
  expressionTypingComponents.setForLoopConventionsChecker(forLoopConventionsChecker);
  expressionTypingComponents.setGlobalContext(globalContext);
  expressionTypingComponents.setPlatformToKotlinClassMap(platformToKotlinClassMap);
  forLoopConventionsChecker.setExpressionTypingServices(expressionTypingServices);
  forLoopConventionsChecker.setExpressionTypingUtils(expressionTypingUtils);
  forLoopConventionsChecker.setProject(project);
  callExpressionResolver.setExpressionTypingServices(expressionTypingServices);
  descriptorResolver.setAnnotationResolver(annotationResolver);
  descriptorResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);
  descriptorResolver.setExpressionTypingServices(expressionTypingServices);
  descriptorResolver.setStorageManager(storageManager);
  descriptorResolver.setTypeResolver(typeResolver);
  delegatedPropertyResolver.setCallResolver(callResolver);
  delegatedPropertyResolver.setExpressionTypingServices(expressionTypingServices);
  typeResolver.setAnnotationResolver(annotationResolver);
  typeResolver.setModuleDescriptor(moduleDescriptor);
  typeResolver.setQualifiedExpressionResolver(qualifiedExpressionResolver);
  candidateResolver.setArgumentTypeResolver(argumentTypeResolver);
  controlFlowAnalyzer.setTrace(bindingTrace);
  declarationsChecker.setDescriptorResolver(descriptorResolver);
  declarationsChecker.setTrace(bindingTrace);
  functionAnalyzerExtension.setTrace(bindingTrace);
  scriptBodyResolver.setExpressionTypingServices(expressionTypingServices);
  declarationResolver.setAnnotationResolver(annotationResolver);
  declarationResolver.setDescriptorResolver(descriptorResolver);
  declarationResolver.setImportsResolver(importsResolver);
  declarationResolver.setScriptHeaderResolver(scriptHeaderResolver);
  declarationResolver.setTrace(bindingTrace);
  importsResolver.setImportsFactory(jetImportsFactory);
  importsResolver.setModuleDescriptor(moduleDescriptor);
  importsResolver.setQualifiedExpressionResolver(qualifiedExpressionResolver);
  importsResolver.setTrace(bindingTrace);
  jetImportsFactory.setProject(project);
  scriptHeaderResolver.setDependencyClassByQualifiedNameResolver(dependencyClassByQualifiedNameResolverDummy);
  scriptHeaderResolver.setPackageFragmentProvider(mutablePackageFragmentProvider);
  scriptHeaderResolver.setTrace(bindingTrace);
  overloadResolver.setTrace(bindingTrace);
  overrideResolver.setTrace(bindingTrace);
  typeHierarchyResolver.setDescriptorResolver(descriptorResolver);
  typeHierarchyResolver.setImportsResolver(importsResolver);
  typeHierarchyResolver.setPackageFragmentProvider(mutablePackageFragmentProvider);
  typeHierarchyResolver.setScriptHeaderResolver(scriptHeaderResolver);
  typeHierarchyResolver.setTrace(bindingTrace);
}
