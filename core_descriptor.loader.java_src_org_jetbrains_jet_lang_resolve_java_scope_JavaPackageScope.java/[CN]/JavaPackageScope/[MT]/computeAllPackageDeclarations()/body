{
  Collection<DeclarationDescriptor> result=new HashSet<DeclarationDescriptor>();
  for (  JavaPackage subPackage : javaPackage.getSubPackages()) {
    NamespaceDescriptor childNs=memberResolver.resolveNamespace(subPackage.getFqName(),IGNORE_KOTLIN_SOURCES);
    if (childNs != null) {
      result.add(childNs);
    }
  }
  for (  JavaClass javaClass : DescriptorResolverUtils.getClassesInPackage(javaPackage)) {
    if (DescriptorResolverUtils.isCompiledKotlinPackageClass(javaClass))     continue;
    if (javaClass.getOriginKind() == JavaClass.OriginKind.KOTLIN_LIGHT_CLASS)     continue;
    if (javaClass.getVisibility() == Visibilities.PRIVATE)     continue;
    ProgressChecker.getInstance().checkCanceled();
    FqName fqName=javaClass.getFqName();
    if (fqName == null)     continue;
    ClassDescriptor classDescriptor=memberResolver.resolveClass(fqName,IGNORE_KOTLIN_SOURCES);
    if (classDescriptor != null) {
      result.add(classDescriptor);
    }
    NamespaceDescriptor namespace=memberResolver.resolveNamespace(fqName,IGNORE_KOTLIN_SOURCES);
    if (namespace != null) {
      result.add(namespace);
    }
  }
  return result;
}
