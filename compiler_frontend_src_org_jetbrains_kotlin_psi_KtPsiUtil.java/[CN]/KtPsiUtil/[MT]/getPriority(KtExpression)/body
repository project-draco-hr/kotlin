{
  int maxPriority=KotlinExpressionParsing.Precedence.values().length + 1;
  if (expression instanceof KtPostfixExpression || expression instanceof KtQualifiedExpression || expression instanceof KtCallExpression|| expression instanceof KtArrayAccessExpression) {
    return maxPriority - 1;
  }
  if (expression instanceof KtPrefixExpression || expression instanceof KtLabeledExpression)   return maxPriority - 2;
  if (expression instanceof KtIfExpression) {
    return KotlinExpressionParsing.Precedence.ASSIGNMENT.ordinal();
  }
  if (expression instanceof KtSuperExpression) {
    return maxPriority;
  }
  if (expression instanceof KtDeclaration || expression instanceof KtStatementExpression) {
    return 0;
  }
  IElementType operation=getOperation(expression);
  for (  KotlinExpressionParsing.Precedence precedence : KotlinExpressionParsing.Precedence.values()) {
    if (precedence != KotlinExpressionParsing.Precedence.PREFIX && precedence != KotlinExpressionParsing.Precedence.POSTFIX && precedence.getOperations().contains(operation)) {
      return maxPriority - precedence.ordinal() - 1;
    }
  }
  return maxPriority;
}
