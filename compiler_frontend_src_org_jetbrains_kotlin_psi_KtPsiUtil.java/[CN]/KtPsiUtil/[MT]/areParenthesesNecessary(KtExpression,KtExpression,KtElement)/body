{
  if (parentElement instanceof KtParenthesizedExpression || innerExpression instanceof KtParenthesizedExpression) {
    return false;
  }
  if (parentElement instanceof KtPackageDirective)   return false;
  if (parentElement instanceof KtWhenExpression || innerExpression instanceof KtWhenExpression) {
    return false;
  }
  if (innerExpression instanceof KtIfExpression) {
    if (parentElement instanceof KtQualifiedExpression)     return true;
    PsiElement current=parentElement;
    while (!(current instanceof KtBlockExpression || current instanceof KtDeclaration || current instanceof KtStatementExpression)) {
      if (current.getTextRange().getEndOffset() != currentInner.getTextRange().getEndOffset()) {
        return !(current instanceof KtParenthesizedExpression) && !(current instanceof KtValueArgumentList);
      }
      current=current.getParent();
    }
  }
  if (parentElement instanceof KtCallExpression && currentInner == ((KtCallExpression)parentElement).getCalleeExpression()) {
    if (innerExpression instanceof KtSimpleNameExpression)     return false;
    if (KtPsiUtilKt.getQualifiedExpressionForSelector(parentElement) != null)     return true;
    return !(innerExpression instanceof KtThisExpression || innerExpression instanceof KtArrayAccessExpression || innerExpression instanceof KtConstantExpression|| innerExpression instanceof KtStringTemplateExpression|| innerExpression instanceof KtCallExpression);
  }
  if (parentElement instanceof KtValueArgument) {
    KtValueArgument nextArg=PsiTreeUtil.getNextSiblingOfType(parentElement,KtValueArgument.class);
    PsiElement nextExpression=nextArg != null ? nextArg.getArgumentExpression() : null;
    if (innerExpression instanceof KtBinaryExpression && ((KtBinaryExpression)innerExpression).getOperationToken() == KtTokens.LT && nextExpression instanceof KtBinaryExpression && ((KtBinaryExpression)nextExpression).getOperationToken() == KtTokens.GT)     return true;
  }
  if (!(parentElement instanceof KtExpression))   return false;
  IElementType innerOperation=getOperation(innerExpression);
  IElementType parentOperation=getOperation((KtExpression)parentElement);
  if (parentElement instanceof KtReturnExpression && (innerExpression instanceof KtLabeledExpression || innerExpression instanceof KtAnnotatedExpression))   return true;
  if (innerExpression instanceof KtBinaryExpressionWithTypeRHS && parentOperation == KtTokens.LT) {
    return true;
  }
  if (parentElement instanceof KtLabeledExpression)   return false;
  if (parentElement instanceof KtBinaryExpression && parentOperation == KtTokens.ELVIS && currentInner == ((KtBinaryExpression)parentElement).getRight()) {
    return false;
  }
  int innerPriority=getPriority(innerExpression);
  int parentPriority=getPriority((KtExpression)parentElement);
  if (innerPriority == parentPriority) {
    if (parentElement instanceof KtBinaryExpression) {
      if (innerOperation == KtTokens.ANDAND || innerOperation == KtTokens.OROR) {
        return false;
      }
      return ((KtBinaryExpression)parentElement).getRight() == currentInner;
    }
    if (parentElement instanceof KtPrefixExpression && innerExpression instanceof KtPrefixExpression) {
      return innerOperation == parentOperation && (innerOperation == KtTokens.PLUS || innerOperation == KtTokens.MINUS);
    }
    return false;
  }
  return innerPriority < parentPriority;
}
