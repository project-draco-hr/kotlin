{
  int zzInput;
  int zzAction;
  int zzCurrentPosL;
  int zzMarkedPosL;
  int zzEndReadL=zzEndRead;
  CharSequence zzBufferL=zzBuffer;
  char[] zzBufferArrayL=zzBufferArray;
  char[] zzCMapL=ZZ_CMAP;
  int[] zzTransL=ZZ_TRANS;
  int[] zzRowMapL=ZZ_ROWMAP;
  int[] zzAttrL=ZZ_ATTRIBUTE;
  while (true) {
    zzMarkedPosL=zzMarkedPos;
    zzAction=-1;
    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;
    zzState=ZZ_LEXSTATE[zzLexicalState];
    zzForAction: {
      while (true) {
        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++);
 else         if (zzAtEOF) {
          zzInput=YYEOF;
          break zzForAction;
        }
 else {
          zzCurrentPos=zzCurrentPosL;
          zzMarkedPos=zzMarkedPosL;
          boolean eof=zzRefill();
          zzCurrentPosL=zzCurrentPos;
          zzMarkedPosL=zzMarkedPos;
          zzBufferL=zzBuffer;
          zzEndReadL=zzEndRead;
          if (eof) {
            zzInput=YYEOF;
            break zzForAction;
          }
 else {
            zzInput=zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++);
          }
        }
        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
        if (zzNext == -1)         break zzForAction;
        zzState=zzNext;
        int zzAttributes=zzAttrL[zzState];
        if ((zzAttributes & 1) == 1) {
          zzAction=zzState;
          zzMarkedPosL=zzCurrentPosL;
          if ((zzAttributes & 8) == 8)           break zzForAction;
        }
      }
    }
    zzMarkedPos=zzMarkedPosL;
switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
case 3:
{
        return JetTokens.IDENTIFIER;
      }
case 98:
    break;
case 11:
{
    pushState(STRING);
    return JetTokens.OPEN_QUOTE;
  }
case 99:
break;
case 71:
{
return JetTokens.FOR_KEYWORD;
}
case 100:
break;
case 95:
{
return JetTokens.RETURN_KEYWORD;
}
case 101:
break;
case 81:
{
return JetTokens.NULL_KEYWORD;
}
case 102:
break;
case 34:
{
if (lBraceCount == 0) {
popState();
return JetTokens.LONG_TEMPLATE_ENTRY_END;
}
lBraceCount--;
return JetTokens.RBRACE;
}
case 103:
break;
case 18:
{
return JetTokens.LT;
}
case 104:
break;
case 51:
{
return JetTokens.DO_KEYWORD;
}
case 105:
break;
case 17:
{
return JetTokens.PLUS;
}
case 106:
break;
case 67:
{
return JetTokens.RAW_STRING_LITERAL;
}
case 107:
break;
case 55:
{
return JetTokens.PLUSEQ;
}
case 108:
break;
case 86:
{
popState();
return JetTokens.THIS_KEYWORD;
}
case 109:
break;
case 27:
{
return JetTokens.COMMA;
}
case 110:
break;
case 19:
{
return JetTokens.GT;
}
case 111:
break;
case 4:
{
return JetTokens.WHITE_SPACE;
}
case 112:
break;
case 24:
{
return JetTokens.RPAR;
}
case 113:
break;
case 54:
{
return JetTokens.DOUBLE_ARROW;
}
case 114:
break;
case 79:
{
return JetTokens.TRUE_KEYWORD;
}
case 115:
break;
case 36:
{
return JetTokens.FIELD_IDENTIFIER;
}
case 116:
break;
case 59:
{
return JetTokens.ANDAND;
}
case 117:
break;
case 63:
{
pushState(LONG_TEMPLATE_ENTRY);
return JetTokens.LONG_TEMPLATE_ENTRY_START;
}
case 118:
break;
case 66:
{
return JetTokens.DOC_COMMENT;
}
case 119:
break;
case 35:
{
return JetTokens.FLOAT_LITERAL;
}
case 120:
break;
case 39:
{
return JetTokens.EOL_COMMENT;
}
case 121:
break;
case 83:
{
return JetTokens.WHEN_KEYWORD;
}
case 122:
break;
case 25:
{
return JetTokens.COLON;
}
case 123:
break;
case 57:
{
return JetTokens.LTEQ;
}
case 124:
break;
case 46:
{
return JetTokens.ARROW;
}
case 125:
break;
case 32:
{
popState();
return JetTokens.IDENTIFIER;
}
case 126:
break;
case 21:
{
return JetTokens.LBRACKET;
}
case 127:
break;
case 65:
{
yypushback(2);
return JetTokens.INTEGER_LITERAL;
}
case 128:
break;
case 10:
{
return JetTokens.CHARACTER_LITERAL;
}
case 129:
break;
case 72:
{
return JetTokens.VAR_KEYWORD;
}
case 130:
break;
case 58:
{
return JetTokens.GTEQ;
}
case 131:
break;
case 2:
{
return JetTokens.INTEGER_LITERAL;
}
case 132:
break;
case 13:
{
return JetTokens.RBRACE;
}
case 133:
break;
case 90:
{
return JetTokens.CLASS_KEYWORD;
}
case 134:
break;
case 14:
{
return JetTokens.EXCL;
}
case 135:
break;
case 68:
{
return JetTokens.TRY_KEYWORD;
}
case 136:
break;
case 52:
{
return JetTokens.EXCLEQ;
}
case 137:
break;
case 45:
{
return JetTokens.MINUSEQ;
}
case 138:
break;
case 96:
{
return JetTokens.PACKAGE_KEYWORD;
}
case 139:
break;
case 87:
{
return JetTokens.THROW_KEYWORD;
}
case 140:
break;
case 89:
{
return JetTokens.SUPER_KEYWORD;
}
case 141:
break;
case 92:
{
return JetTokens.WHILE_KEYWORD;
}
case 142:
break;
case 44:
{
return JetTokens.MINUSMINUS;
}
case 143:
break;
case 97:
{
return JetTokens.CONTINUE_KEYWORD;
}
case 144:
break;
case 75:
{
return JetTokens.NOT_IN;
}
case 145:
break;
case 38:
{
return JetTokens.ATAT;
}
case 146:
break;
case 6:
{
return JetTokens.DIV;
}
case 147:
break;
case 37:
{
return JetTokens.LABEL_IDENTIFIER;
}
case 148:
break;
case 29:
{
return JetTokens.REGULAR_STRING_PART;
}
case 149:
break;
case 16:
{
return JetTokens.QUEST;
}
case 150:
break;
case 60:
{
return JetTokens.OROR;
}
case 151:
break;
case 20:
{
return JetTokens.PERC;
}
case 152:
break;
case 76:
{
return JetTokens.EXCLEQEQEQ;
}
case 153:
break;
case 61:
{
return JetTokens.PERCEQ;
}
case 154:
break;
case 43:
{
return JetTokens.RANGE;
}
case 155:
break;
case 1:
{
return TokenType.BAD_CHARACTER;
}
case 156:
break;
case 74:
{
return JetTokens.NOT_IS;
}
case 157:
break;
case 7:
{
return JetTokens.MUL;
}
case 158:
break;
case 22:
{
return JetTokens.RBRACKET;
}
case 159:
break;
case 56:
{
return JetTokens.PLUSPLUS;
}
case 160:
break;
case 78:
{
return JetTokens.THIS_KEYWORD;
}
case 161:
break;
case 8:
{
return JetTokens.DOT;
}
case 162:
break;
case 26:
{
return JetTokens.SEMICOLON;
}
case 163:
break;
case 49:
{
return JetTokens.IF_KEYWORD;
}
case 164:
break;
case 64:
{
return JetTokens.ESCAPE_SEQUENCE;
}
case 165:
break;
case 31:
{
popState();
return JetTokens.CLOSING_QUOTE;
}
case 166:
break;
case 15:
{
return JetTokens.EQ;
}
case 167:
break;
case 5:
{
return JetTokens.AT;
}
case 168:
break;
case 69:
{
return JetTokens.AS_SAFE;
}
case 169:
break;
case 23:
{
return JetTokens.LPAR;
}
case 170:
break;
case 9:
{
return JetTokens.MINUS;
}
case 171:
break;
case 93:
{
return JetTokens.FALSE_KEYWORD;
}
case 172:
break;
case 80:
{
return JetTokens.TYPE_KEYWORD;
}
case 173:
break;
case 70:
{
return JetTokens.FUN_KEYWORD;
}
case 174:
break;
case 47:
{
return JetTokens.IS_KEYWORD;
}
case 175:
break;
case 30:
{
popState();
yypushback(1);
return JetTokens.DANGLING_NEWLINE;
}
case 176:
break;
case 33:
{
lBraceCount++;
return JetTokens.LBRACE;
}
case 177:
break;
case 85:
{
yypushback(3);
return JetTokens.EXCL;
}
case 178:
break;
case 41:
{
return JetTokens.DIVEQ;
}
case 179:
break;
case 82:
{
return JetTokens.ELSE_KEYWORD;
}
case 180:
break;
case 50:
{
return JetTokens.AS_KEYWORD;
}
case 181:
break;
case 48:
{
return JetTokens.IN_KEYWORD;
}
case 182:
break;
case 53:
{
return JetTokens.EQEQ;
}
case 183:
break;
case 77:
{
return JetTokens.EQEQEQ;
}
case 184:
break;
case 73:
{
return JetTokens.VAL_KEYWORD;
}
case 185:
break;
case 84:
{
return JetTokens.CAPITALIZED_THIS_KEYWORD;
}
case 186:
break;
case 42:
{
return JetTokens.MULTEQ;
}
case 187:
break;
case 62:
{
pushState(SHORT_TEMPLATE_ENTRY);
yypushback(yylength() - 1);
return JetTokens.SHORT_TEMPLATE_ENTRY_START;
}
case 188:
break;
case 12:
{
return JetTokens.LBRACE;
}
case 189:
break;
case 94:
{
return JetTokens.OBJECT_KEYWORD;
}
case 190:
break;
case 91:
{
return JetTokens.BREAK_KEYWORD;
}
case 191:
break;
case 40:
{
return JetTokens.BLOCK_COMMENT;
}
case 192:
break;
case 88:
{
return JetTokens.TRAIT_KEYWORD;
}
case 193:
break;
case 28:
{
return JetTokens.HASH;
}
case 194:
break;
default :
if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
zzAtEOF=true;
zzDoEOF();
return null;
}
 else {
zzScanError(ZZ_NO_MATCH);
}
}
}
}
