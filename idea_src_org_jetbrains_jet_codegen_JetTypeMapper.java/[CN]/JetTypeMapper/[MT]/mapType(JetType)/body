{
  if (jetType.equals(JetStandardClasses.getUnitType())) {
    return Type.VOID_TYPE;
  }
  if (jetType.equals(standardLibrary.getIntType())) {
    return Type.INT_TYPE;
  }
  if (jetType.equals(standardLibrary.getLongType())) {
    return Type.LONG_TYPE;
  }
  if (jetType.equals(standardLibrary.getShortType())) {
    return Type.SHORT_TYPE;
  }
  if (jetType.equals(standardLibrary.getByteType())) {
    return Type.BYTE_TYPE;
  }
  if (jetType.equals(standardLibrary.getCharType())) {
    return Type.CHAR_TYPE;
  }
  if (jetType.equals(standardLibrary.getFloatType())) {
    return Type.FLOAT_TYPE;
  }
  if (jetType.equals(standardLibrary.getDoubleType())) {
    return Type.DOUBLE_TYPE;
  }
  if (jetType.equals(standardLibrary.getBooleanType())) {
    return Type.BOOLEAN_TYPE;
  }
  if (jetType.equals(standardLibrary.getStringType())) {
    return Type.getType(String.class);
  }
  DeclarationDescriptor descriptor=jetType.getConstructor().getDeclarationDescriptor();
  if (standardLibrary.getArray().equals(descriptor)) {
    if (jetType.getArguments().size() != 1) {
      throw new UnsupportedOperationException("arrays must have one type argument");
    }
    TypeProjection memberType=jetType.getArguments().get(0);
    Type elementType=mapType(memberType.getType());
    return Type.getType("[" + elementType.getDescriptor());
  }
  if (JetStandardClasses.getAny().equals(descriptor)) {
    return Type.getType(Object.class);
  }
  if (descriptor instanceof ClassDescriptor) {
    return Type.getObjectType(getFQName(descriptor).replace('.','/'));
  }
  throw new UnsupportedOperationException("Unknown type " + jetType);
}
