{
  PsiElement declaration=bindingContext.getDeclarationPsiElement(jetClass);
  if (declaration instanceof PsiClass) {
    return jvmName((PsiClass)declaration);
  }
  if (declaration instanceof JetObjectDeclaration && ((JetObjectDeclaration)declaration).isObjectLiteral()) {
    final PsiElement parent=declaration.getParent();
    if (parent instanceof JetClassObject) {
      JetClass containingClass=PsiTreeUtil.getParentOfType(parent,JetClass.class);
      final ClassDescriptor containingClassDescriptor=bindingContext.getClassDescriptor(containingClass);
      return jvmName(containingClassDescriptor,OwnerKind.INTERFACE) + "$$ClassObj";
    }
    String className=classNamesForAnonymousClasses.get(declaration);
    if (className == null) {
      throw new UnsupportedOperationException("Unexpected forward reference to anonymous class " + declaration);
    }
    return className;
  }
  return jetJvmName(jetClass,kind);
}
