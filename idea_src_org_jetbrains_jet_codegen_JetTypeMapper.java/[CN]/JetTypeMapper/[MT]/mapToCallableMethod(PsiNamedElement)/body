{
  if (declaration instanceof PsiMethod) {
    return mapToCallableMethod((PsiMethod)declaration);
  }
  if (!(declaration instanceof JetNamedFunction)) {
    throw new UnsupportedOperationException("unknown declaration type");
  }
  JetNamedFunction f=(JetNamedFunction)declaration;
  final FunctionDescriptor functionDescriptor=bindingContext.getFunctionDescriptor(f);
  final DeclarationDescriptor functionParent=functionDescriptor.getContainingDeclaration();
  final List<Type> valueParameterTypes=new ArrayList<Type>();
  Method descriptor=mapSignature(f,valueParameterTypes);
  String owner;
  int invokeOpcode;
  boolean needsReceiver;
  ClassDescriptor receiverClass=null;
  if (functionParent instanceof NamespaceDescriptor) {
    owner=NamespaceCodegen.getJVMClassName(DescriptorRenderer.getFQName(functionParent));
    invokeOpcode=Opcodes.INVOKESTATIC;
    needsReceiver=f.getReceiverTypeRef() != null;
  }
 else   if (functionParent instanceof ClassDescriptor) {
    ClassDescriptor containingClass=(ClassDescriptor)functionParent;
    owner=jvmName(containingClass,OwnerKind.INTERFACE);
    invokeOpcode=isInterface(containingClass,OwnerKind.INTERFACE) ? Opcodes.INVOKEINTERFACE : Opcodes.INVOKEVIRTUAL;
    needsReceiver=true;
    receiverClass=containingClass;
  }
 else {
    throw new UnsupportedOperationException("unknown function parent");
  }
  final CallableMethod result=new CallableMethod(owner,descriptor,invokeOpcode,valueParameterTypes);
  result.setAcceptsTypeArguments(true);
  if (needsReceiver) {
    result.setNeedsReceiver(receiverClass);
  }
  return result;
}
