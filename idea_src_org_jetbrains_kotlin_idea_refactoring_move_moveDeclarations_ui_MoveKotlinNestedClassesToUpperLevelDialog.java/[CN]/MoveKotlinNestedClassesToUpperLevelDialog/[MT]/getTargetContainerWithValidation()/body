{
  String className=getClassName();
  String parameterName=getParameterName();
  if (className != null && className.isEmpty())   throw new ConfigurationException(RefactoringBundle.message("no.class.name.specified"));
  if (!KotlinNameSuggester.INSTANCE.isIdentifier(className))   throw new ConfigurationException(RefactoringMessageUtil.getIncorrectIdentifierMessage(className));
  if (passOuterClassCheckBox.isSelected()) {
    if (parameterName != null && parameterName.isEmpty())     throw new ConfigurationException(RefactoringBundle.message("no.parameter.name.specified"));
    if (!KotlinNameSuggester.INSTANCE.isIdentifier(parameterName))     throw new ConfigurationException(RefactoringMessageUtil.getIncorrectIdentifierMessage(parameterName));
  }
  PsiElement targetContainer=getTargetContainer();
  if (targetContainer instanceof KtClassOrObject) {
    KtClassOrObject targetClass=(KtClassOrObject)targetContainer;
    for (    KtDeclaration member : targetClass.getDeclarations()) {
      if (member instanceof KtClassOrObject && className != null && className.equals(member.getName())) {
        throw new ConfigurationException(RefactoringBundle.message("inner.class.exists",className,targetClass.getName()));
      }
    }
  }
  if (targetContainer instanceof PsiDirectory || targetContainer instanceof KtFile) {
    FqName targetPackageFqName=getTargetPackageFqName();
    if (targetPackageFqName == null)     throw new ConfigurationException("No package corresponds to this directory");
    ClassifierDescriptor existingClass=DescriptorUtils.getContainingModule(innerClassDescriptor).getPackage(targetPackageFqName).getMemberScope().getContributedClassifier(Name.identifier(className),NoLookupLocation.FROM_IDE);
    if (existingClass != null)     throw new ConfigurationException("Class " + className + " already exists in package "+ targetPackageFqName);
    PsiDirectory targetDir=targetContainer instanceof PsiDirectory ? (PsiDirectory)targetContainer : targetContainer.getContainingFile().getContainingDirectory();
    String message=RefactoringMessageUtil.checkCanCreateFile(targetDir,className + ".kt");
    if (message != null)     throw new ConfigurationException(message);
  }
  return targetContainer;
}
