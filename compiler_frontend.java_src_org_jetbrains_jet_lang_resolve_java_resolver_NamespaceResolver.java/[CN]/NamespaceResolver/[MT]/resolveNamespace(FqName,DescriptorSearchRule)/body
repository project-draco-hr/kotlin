{
  NamespaceDescriptor kotlinNamespaceDescriptor=javaDescriptorResolver.getSemanticServices().getKotlinNamespaceDescriptor(qualifiedName);
  if (kotlinNamespaceDescriptor != null) {
    return searchRule.processFoundInKotlin(kotlinNamespaceDescriptor);
  }
  ResolverNamespaceData namespaceData=namespaceDescriptorCacheByFqn.get(qualifiedName);
  if (namespaceData != null) {
    return namespaceData.getNamespaceDescriptor();
  }
  NamespaceDescriptorParent parentNs=resolveParentNamespace(qualifiedName);
  if (parentNs == null) {
    return null;
  }
  JavaNamespaceDescriptor ns=new JavaNamespaceDescriptor(parentNs,Collections.<AnnotationDescriptor>emptyList(),qualifiedName);
  ResolverNamespaceData scopeData=createNamespaceResolverScopeData(qualifiedName,ns);
  if (scopeData == null) {
    return null;
  }
  javaDescriptorResolver.getTrace().record(BindingContext.NAMESPACE,scopeData.getPsiPackageOrPsiClass(),ns);
  ns.setMemberScope(scopeData.getMemberScope());
  return scopeData.getNamespaceDescriptor();
}
