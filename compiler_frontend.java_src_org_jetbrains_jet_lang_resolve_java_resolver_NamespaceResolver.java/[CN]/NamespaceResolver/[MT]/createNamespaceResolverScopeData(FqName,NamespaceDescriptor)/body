{
  PsiPackage psiPackage;
  PsiClass psiClass;
  lookingForPsi: {
    psiClass=getPsiClassForJavaPackageScope(fqName);
    psiPackage=psiClassFinder.findPsiPackage(fqName);
    if (psiClass != null || psiPackage != null) {
      trace.record(JavaBindingContext.JAVA_NAMESPACE_KIND,ns,JavaNamespaceKind.PROPER);
      break lookingForPsi;
    }
    psiClass=psiClassFinder.findPsiClass(fqName,PsiClassFinder.RuntimeClassesHandleMode.IGNORE);
    if (psiClass != null && !psiClass.isEnum()) {
      trace.record(JavaBindingContext.JAVA_NAMESPACE_KIND,ns,JavaNamespaceKind.CLASS_STATICS);
      break lookingForPsi;
    }
    ResolverNamespaceData oldValue=namespaceDescriptorCacheByFqn.put(fqName,ResolverNamespaceData.NEGATIVE);
    if (oldValue != null) {
      throw new IllegalStateException("rewrite at " + fqName);
    }
    return null;
  }
  ResolverNamespaceData namespaceData=new ResolverNamespaceData(psiClass,psiPackage,fqName,ns);
  namespaceData.setMemberScope(new JavaPackageScope(fqName,javaSemanticServices,namespaceData));
  ResolverNamespaceData oldValue=namespaceDescriptorCacheByFqn.put(fqName,namespaceData);
  if (oldValue != null) {
    throw new IllegalStateException("rewrite at " + fqName);
  }
  return namespaceData;
}
