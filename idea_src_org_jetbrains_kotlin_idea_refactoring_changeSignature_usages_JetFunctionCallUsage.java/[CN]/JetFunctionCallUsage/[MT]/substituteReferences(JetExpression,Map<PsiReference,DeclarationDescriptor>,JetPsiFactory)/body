{
  if (referenceMap.isEmpty() || resolvedCall == null)   return expression;
  JetExpression newExpression=(JetExpression)expression.copy();
  Map<JetSimpleNameExpression,JetSimpleNameExpression> nameCounterpartMap=ExtractionEnginePackage.createNameCounterpartMap(expression,newExpression);
  Map<ValueParameterDescriptor,ResolvedValueArgument> valueArguments=resolvedCall.getValueArguments();
  List<Pair<JetElement,JetElement>> replacements=new ArrayList<Pair<JetElement,JetElement>>();
  for (  Map.Entry<PsiReference,DeclarationDescriptor> e : referenceMap.entrySet()) {
    DeclarationDescriptor descriptor=e.getValue();
    JetExpression argumentExpression;
    boolean addReceiver=false;
    if (descriptor instanceof ValueParameterDescriptor) {
      ValueParameterDescriptor parameterDescriptor=resolvedCall.getResultingDescriptor().getValueParameters().get(((ValueParameterDescriptor)descriptor).getIndex());
      ResolvedValueArgument resolvedValueArgument=valueArguments.get(parameterDescriptor);
      if (!(resolvedValueArgument instanceof ExpressionValueArgument))       continue;
      ValueArgument argument=((ExpressionValueArgument)resolvedValueArgument).getValueArgument();
      if (argument == null)       continue;
      argumentExpression=argument.getArgumentExpression();
    }
 else {
      addReceiver=!(descriptor instanceof ReceiverParameterDescriptor);
      argumentExpression=getReceiverExpressionIfMatched(resolvedCall.getExtensionReceiver(),descriptor,psiFactory);
      if (argumentExpression == null) {
        argumentExpression=getReceiverExpressionIfMatched(resolvedCall.getDispatchReceiver(),descriptor,psiFactory);
      }
    }
    if (argumentExpression == null)     continue;
    if (needSeparateVariable(argumentExpression) && PsiTreeUtil.getNonStrictParentOfType(getElement(),JetConstructorDelegationCall.class,JetDelegationSpecifier.class,JetParameter.class) == null) {
      final Ref<JetExpression> newExpressionRef=new Ref<JetExpression>();
      KotlinIntroduceVariableHandler.doRefactoring(getProject(),null,argumentExpression,Collections.singletonList(argumentExpression),new Function1<JetProperty,Unit>(){
        @Override public Unit invoke(        JetProperty property){
          newExpressionRef.set(psiFactory.createExpression(property.getName()));
          return null;
        }
      }
);
      argumentExpression=newExpressionRef.get();
    }
    JetExpression expressionToReplace=nameCounterpartMap.get(e.getKey().getElement());
    if (expressionToReplace == null)     continue;
    PsiElement parent=expressionToReplace.getParent();
    if (parent instanceof JetThisExpression) {
      expressionToReplace=(JetThisExpression)parent;
    }
    if (addReceiver) {
      JetCallExpression callExpression=PsiTreeUtil.getParentOfType(expressionToReplace,JetCallExpression.class,true);
      if (callExpression != null && PsiTreeUtil.isAncestor(callExpression.getCalleeExpression(),expressionToReplace,false)) {
        expressionToReplace=callExpression;
      }
 else {
        if (parent instanceof JetOperationExpression && ((JetOperationExpression)parent).getOperationReference() == expressionToReplace) {
          continue;
        }
      }
      replacements.add(new Pair<JetElement,JetElement>(expressionToReplace,psiFactory.createExpression(argumentExpression.getText() + "." + expressionToReplace.getText())));
    }
 else {
      replacements.add(new Pair<JetElement,JetElement>(expressionToReplace,argumentExpression));
    }
  }
  ContainerUtil.sort(replacements,REVERSED_TEXT_OFFSET_COMPARATOR);
  for (  Pair<JetElement,JetElement> replacement : replacements) {
    replacement.getFirst().replace(replacement.getSecond());
  }
  return newExpression;
}
