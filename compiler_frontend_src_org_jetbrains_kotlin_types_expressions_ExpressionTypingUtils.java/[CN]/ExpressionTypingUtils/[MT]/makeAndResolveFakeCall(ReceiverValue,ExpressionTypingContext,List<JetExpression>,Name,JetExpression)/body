{
  final JetReferenceExpression fake=JetPsiFactory(expressionTypingServices.getProject()).createSimpleName("fake");
  TemporaryBindingTrace fakeTrace=TemporaryBindingTrace.create(context.trace,"trace to resolve fake call for",name);
  Call call=CallMaker.makeCallWithExpressions(callElement != null ? callElement : fake,receiver,null,fake,valueArguments);
  OverloadResolutionResults<FunctionDescriptor> results=callResolver.resolveCallWithGivenName(context.replaceBindingTrace(fakeTrace),call,fake,name);
  if (results.isSuccess()) {
    fakeTrace.commit(new TraceEntryFilter(){
      @Override public boolean accept(      @Nullable WritableSlice<?,?> slice,      Object key){
        return key != fake;
      }
    }
,true);
  }
  return Pair.create(call,results);
}
