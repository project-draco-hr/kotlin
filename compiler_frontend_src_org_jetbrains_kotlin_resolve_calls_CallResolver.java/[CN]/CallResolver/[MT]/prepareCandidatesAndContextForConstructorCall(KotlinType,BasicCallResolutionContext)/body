{
  if (!(superType.getConstructor().getDeclarationDescriptor() instanceof ClassDescriptor)) {
    return new Pair<Collection<ResolutionCandidate<ClassConstructorDescriptor>>,BasicCallResolutionContext>(Collections.<ResolutionCandidate<ClassConstructorDescriptor>>emptyList(),context);
  }
  ClassDescriptor superClass=(ClassDescriptor)superType.getConstructor().getDeclarationDescriptor();
  boolean anyConstructorHasDeclaredTypeParameters=anyConstructorHasDeclaredTypeParameters(superType.getConstructor().getDeclarationDescriptor());
  TypeSubstitutor knownTypeParametersSubstitutor=anyConstructorHasDeclaredTypeParameters ? null : TypeSubstitutor.create(superType);
  if (anyConstructorHasDeclaredTypeParameters) {
    context=context.replaceExpectedType(superType);
  }
  Collection<ResolutionCandidate<ClassConstructorDescriptor>> candidates=CallResolverUtilKt.createResolutionCandidatesForConstructors(context.scope,context.call,superClass,knownTypeParametersSubstitutor);
  return new Pair<Collection<ResolutionCandidate<ClassConstructorDescriptor>>,BasicCallResolutionContext>(candidates,context);
}
