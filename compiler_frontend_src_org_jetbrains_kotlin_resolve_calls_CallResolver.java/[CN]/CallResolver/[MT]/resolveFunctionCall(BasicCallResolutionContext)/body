{
  ProgressIndicatorAndCompilationCanceledStatus.checkCanceled();
  JetExpression calleeExpression=context.call.getCalleeExpression();
  if (calleeExpression instanceof JetSimpleNameExpression) {
    JetSimpleNameExpression expression=(JetSimpleNameExpression)calleeExpression;
    return computeTasksAndResolveCall(context,expression.getReferencedNameAsName(),expression,CallableDescriptorCollectors.FUNCTIONS_AND_VARIABLES,CallTransformer.FUNCTION_CALL_TRANSFORMER);
  }
  if (calleeExpression instanceof JetConstructorCalleeExpression) {
    return resolveCallForConstructor(context,(JetConstructorCalleeExpression)calleeExpression);
  }
 else   if (calleeExpression == null) {
    return checkArgumentTypesAndFail(context);
  }
  JetType expectedType=NO_EXPECTED_TYPE;
  if (calleeExpression instanceof JetFunctionLiteralExpression) {
    int parameterNumber=((JetFunctionLiteralExpression)calleeExpression).getValueParameters().size();
    List<JetType> parameterTypes=new ArrayList<JetType>(parameterNumber);
    for (int i=0; i < parameterNumber; i++) {
      parameterTypes.add(NO_EXPECTED_TYPE);
    }
    expectedType=builtIns.getFunctionType(Annotations.EMPTY,null,parameterTypes,context.expectedType);
  }
  JetType calleeType=expressionTypingServices.safeGetType(context.scope,calleeExpression,expectedType,context.dataFlowInfo,context.trace);
  ExpressionReceiver expressionReceiver=new ExpressionReceiver(calleeExpression,calleeType);
  Call call=new CallTransformer.CallForImplicitInvoke(context.call.getExplicitReceiver(),expressionReceiver,context.call);
  TracingStrategyForInvoke tracingForInvoke=new TracingStrategyForInvoke(calleeExpression,call,calleeType);
  return resolveCallForInvoke(context.replaceCall(call),tracingForInvoke);
}
