{
  Call call=context.call;
  tracing.bindCall(context.trace,call);
  OverloadResolutionResultsImpl<F> results=null;
  TemporaryBindingTrace traceToResolveCall=TemporaryBindingTrace.create(context.trace,"trace to resolve call",call);
  if (!CallResolverUtil.isInvokeCallOnVariable(call)) {
    ResolutionResultsCache.CachedData data=context.resolutionResultsCache.get(call);
    if (data != null) {
      DelegatingBindingTrace deltasTraceForResolve=data.getResolutionTrace();
      deltasTraceForResolve.addOwnDataTo(traceToResolveCall);
      results=(OverloadResolutionResultsImpl<F>)data.getResolutionResults();
    }
  }
  if (results == null) {
    BasicCallResolutionContext newContext=context.replaceBindingTrace(traceToResolveCall);
    recordScopeAndDataFlowInfo(newContext,newContext.call.getCalleeExpression());
    results=doResolveCall(newContext,prioritizedTasks,callTransformer,tracing);
    DelegatingBindingTrace deltasTraceForTypeInference=((OverloadResolutionResultsImpl)results).getTrace();
    if (deltasTraceForTypeInference != null) {
      deltasTraceForTypeInference.addOwnDataTo(traceToResolveCall);
    }
    completeTypeInferenceDependentOnFunctionLiterals(newContext,results,tracing);
    cacheResults(context,results,traceToResolveCall,tracing);
  }
  traceToResolveCall.commit();
  if (context.contextDependency == ContextDependency.INDEPENDENT) {
    results=callCompleter.completeCall(context,results,tracing);
  }
  return results;
}
