{
  context.trace.record(BindingContext.LEXICAL_SCOPE,call,context.scope);
  ClassDescriptor currentClassDescriptor=calleeConstructor.getContainingDeclaration();
  boolean isThisCall=calleeExpression.isThis();
  if (currentClassDescriptor.getKind() == ClassKind.ENUM_CLASS && !isThisCall) {
    context.trace.report(DELEGATION_SUPER_CALL_IN_ENUM_CONSTRUCTOR.on(calleeExpression));
    return checkArgumentTypesAndFail(context);
  }
  ClassDescriptor delegateClassDescriptor=isThisCall ? currentClassDescriptor : DescriptorUtilsKt.getSuperClassOrAny(currentClassDescriptor);
  Collection<ConstructorDescriptor> constructors=delegateClassDescriptor.getConstructors();
  if (!isThisCall && currentClassDescriptor.getUnsubstitutedPrimaryConstructor() != null) {
    if (DescriptorUtils.canHaveDeclaredConstructors(currentClassDescriptor)) {
      context.trace.report(PRIMARY_CONSTRUCTOR_DELEGATION_CALL_EXPECTED.on((KtConstructorDelegationCall)calleeExpression.getParent()));
    }
    if (call.isImplicit())     return OverloadResolutionResultsImpl.nameNotFound();
  }
  if (constructors.isEmpty()) {
    context.trace.report(NO_CONSTRUCTOR.on(CallUtilKt.getValueArgumentListOrElement(context.call)));
    return checkArgumentTypesAndFail(context);
  }
  KotlinType superType=isThisCall ? calleeConstructor.getContainingDeclaration().getDefaultType() : DescriptorUtils.getSuperClassType(currentClassDescriptor);
  Pair<Collection<ResolutionCandidate<ConstructorDescriptor>>,BasicCallResolutionContext> candidatesAndContext=prepareCandidatesAndContextForConstructorCall(superType,context);
  Collection<ResolutionCandidate<ConstructorDescriptor>> candidates=candidatesAndContext.getFirst();
  context=candidatesAndContext.getSecond();
  TracingStrategy tracing=call.isImplicit() ? new TracingStrategyForImplicitConstructorDelegationCall(call,context.call) : TracingStrategyImpl.create(calleeExpression,context.call);
  PsiElement reportOn=call.isImplicit() ? call : calleeExpression;
  if (delegateClassDescriptor.isInner() && !DescriptorResolver.checkHasOuterClassInstance(context.scope,context.trace,reportOn,(ClassDescriptor)delegateClassDescriptor.getContainingDeclaration())) {
    return checkArgumentTypesAndFail(context);
  }
  return computeTasksFromCandidatesAndResolvedCall(context,candidates,tracing);
}
