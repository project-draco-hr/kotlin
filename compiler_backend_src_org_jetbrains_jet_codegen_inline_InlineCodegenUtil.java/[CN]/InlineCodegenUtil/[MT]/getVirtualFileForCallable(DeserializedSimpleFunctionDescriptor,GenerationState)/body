{
  VirtualFile file;
  DeclarationDescriptor parentDeclaration=deserializedDescriptor.getContainingDeclaration();
  if (parentDeclaration instanceof PackageFragmentDescriptor) {
    ProtoBuf.Callable proto=deserializedDescriptor.getFunctionProto();
    if (!proto.hasExtension(JavaProtoBuf.implClassName)) {
      throw new IllegalStateException("Function in namespace should have implClassName property in proto: " + deserializedDescriptor);
    }
    Name name=deserializedDescriptor.getNameResolver().getName(proto.getExtension(JavaProtoBuf.implClassName));
    FqName packagePartFqName=PackageClassUtils.getPackageClassFqName(((PackageFragmentDescriptor)parentDeclaration).getFqName()).parent().child(name);
    file=findVirtualFileWithHeader(state.getProject(),packagePartFqName);
  }
 else {
    file=findVirtualFileContainingDescriptor(state.getProject(),deserializedDescriptor);
  }
  if (file == null) {
    throw new IllegalStateException("Couldn't find declaration file for " + deserializedDescriptor.getName());
  }
  return file;
}
