{
  PsiMethod method=(PsiMethod)javaChangeInfo.getMethod();
  FunctionDescriptor functionDescriptor=ResolvePackage.getJavaMethodDescriptor(method);
  final List<ValueParameterDescriptor> parameterDescriptors=functionDescriptor.getValueParameters();
  final List<ValueParameterDescriptor> originalParameterDescriptors=originalChangeSignatureDescriptor.getBaseDescriptor().getValueParameters();
  List<JetParameterInfo> newParameters=KotlinPackage.map(KotlinPackage.withIndices(javaChangeInfo.getNewParameters()),new Function1<Pair<? extends Integer,? extends ParameterInfo>,JetParameterInfo>(){
    @Override public JetParameterInfo invoke(    Pair<? extends Integer,? extends ParameterInfo> pair){
      ParameterInfo info=pair.getSecond();
      int oldIndex=info.getOldIndex();
      JetType currentType=parameterDescriptors.get(pair.getFirst()).getType();
      JetType originalType=oldIndex >= 0 ? originalParameterDescriptors.get(oldIndex).getType() : currentType;
      JetParameterInfo jetParameterInfo=new JetParameterInfo(oldIndex,info.getName(),originalType,null,null);
      jetParameterInfo.setDefaultValueText(info.getDefaultValue());
      jetParameterInfo.setTypeText(IdeDescriptorRenderers.SOURCE_CODE.renderType(currentType));
      return jetParameterInfo;
    }
  }
);
  JetType returnType=functionDescriptor.getReturnType();
  String returnTypeText=returnType != null ? IdeDescriptorRenderers.SOURCE_CODE.renderType(returnType) : "";
  return new JetChangeInfo(originalChangeSignatureDescriptor,javaChangeInfo.getNewName(),returnType,returnTypeText,functionDescriptor.getVisibility(),newParameters,method);
}
