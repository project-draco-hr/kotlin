{
  int arity=descriptor.getValueParameters().size();
  ReceiverParameterDescriptor receiverParameter=descriptor.getReceiverParameter();
  ReceiverParameterDescriptor expectedThisObject=descriptor.getExpectedThisObject();
  List<TypeProjection> typeArguments=new ArrayList<TypeProjection>(arity + 2);
  if (receiverParameter != null) {
    typeArguments.add(new TypeProjectionImpl(receiverParameter.getType()));
  }
 else   if (kFunction && expectedThisObject != null) {
    typeArguments.add(new TypeProjectionImpl(expectedThisObject.getType()));
  }
  for (  ValueParameterDescriptor parameter : descriptor.getValueParameters()) {
    typeArguments.add(new TypeProjectionImpl(parameter.getType()));
  }
  typeArguments.add(new TypeProjectionImpl(descriptor.getReturnType()));
  ClassDescriptor classDescriptor;
  if (kFunction) {
    if (expectedThisObject != null) {
      classDescriptor=kMemberFunctions.get(arity);
    }
 else     if (receiverParameter != null) {
      classDescriptor=kExtensionFunctions.get(arity);
    }
 else {
      classDescriptor=kFunctions.get(arity);
    }
  }
 else {
    if (receiverParameter != null) {
      classDescriptor=extensionFunctions.get(arity);
    }
 else {
      classDescriptor=functions.get(arity);
    }
  }
  return new JetTypeImpl(classDescriptor.getDefaultType().getAnnotations(),classDescriptor.getTypeConstructor(),false,typeArguments,classDescriptor.getMemberScope(typeArguments));
}
