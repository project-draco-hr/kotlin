{
  for (  KotlinType possibleType : c.dataFlowInfo.getPossibleTypes(dataFlowValue)) {
    if (ArgumentTypeResolver.isSubtypeOfForArgumentType(possibleType,expectedType)) {
      if (expression != null) {
        recordCastOrError(expression,possibleType,c.trace,dataFlowValue,recordExpressionType);
      }
      return new SmartCastResult(possibleType,dataFlowValue.isPredictable());
    }
  }
  if (!c.dataFlowInfo.getNullability(dataFlowValue).canBeNull() && !expectedType.isMarkedNullable()) {
    boolean immanentlyNotNull=!dataFlowValue.getImmanentNullability().canBeNull();
    KotlinType nullableExpectedType=TypeUtils.makeNullable(expectedType);
    if (ArgumentTypeResolver.isSubtypeOfForArgumentType(dataFlowValue.getType(),nullableExpectedType)) {
      if (!immanentlyNotNull) {
        if (expression != null) {
          recordCastOrError(expression,dataFlowValue.getType(),c.trace,dataFlowValue,recordExpressionType);
        }
      }
      return new SmartCastResult(dataFlowValue.getType(),immanentlyNotNull || dataFlowValue.isPredictable());
    }
    return checkAndRecordPossibleCast(dataFlowValue,nullableExpectedType,expression,c,recordExpressionType);
  }
  return null;
}
