{
  LocaleQualifier locale=LintUtils.getLocale(folderName);
  if (locale != null && locale.hasLanguage()) {
    final String language=locale.getLanguage();
    String replace=null;
    if (language.equals("he")) {
      replace="iw";
    }
 else     if (language.equals("id")) {
      replace="in";
    }
 else     if (language.equals("yi")) {
      replace="ji";
    }
    if (replace != null) {
      String message=String.format("The locale folder \"`%1$s`\" should be " + "called \"`%2$s`\" instead; see the " + "`java.util.Locale` documentation",language,replace);
      context.report(DEPRECATED_CODE,Location.create(context.file),message);
    }
    if (language.length() == 3) {
      String languageAlpha2=LocaleManager.getLanguageAlpha2(language.toLowerCase(Locale.US));
      if (languageAlpha2 != null) {
        String message=String.format("For compatibility, should use 2-letter " + "language codes when available; use `%1$s` instead of `%2$s`",languageAlpha2,language);
        context.report(USE_ALPHA_2,Location.create(context.file),message);
      }
    }
    String region=locale.getRegion();
    if (region != null && locale.hasRegion() && region.length() == 3) {
      String regionAlpha2=LocaleManager.getRegionAlpha2(region.toUpperCase(Locale.UK));
      if (regionAlpha2 != null) {
        String message=String.format("For compatibility, should use 2-letter " + "region codes when available; use `%1$s` instead of `%2$s`",regionAlpha2,region);
        context.report(USE_ALPHA_2,Location.create(context.file),message);
      }
    }
    if (region != null && region.length() == 2) {
      List<String> relevantRegions=LocaleManager.getRelevantRegions(language);
      if (!relevantRegions.isEmpty() && !relevantRegions.contains(region)) {
        List<String> sortedRegions=sortRegions(language,relevantRegions);
        List<String> suggestions=Lists.newArrayList();
        for (        String code : sortedRegions) {
          suggestions.add(code + " (" + LocaleManager.getRegionName(code)+ ")");
        }
        String message=String.format("Suspicious language and region combination %1$s (%2$s) " + "with %3$s (%4$s): language %5$s is usually " + "paired with: %6$s",language,LocaleManager.getLanguageName(language),region,LocaleManager.getRegionName(region),language,Joiner.on(", ").join(suggestions));
        context.report(WRONG_REGION,Location.create(context.file),message);
      }
    }
  }
  FolderConfiguration config=FolderConfiguration.getConfigForFolder(folderName);
  if (ResourceFolderType.getFolderType(folderName) != null && config == null) {
    String message="Invalid resource folder: make sure qualifiers appear in the " + "correct order, are spelled correctly, etc.";
    String bcpSuggestion=suggestBcp47Correction(folderName);
    if (bcpSuggestion != null) {
      message=String.format("Invalid resource folder; did you mean `%1$s` ?",bcpSuggestion);
    }
    context.report(INVALID_FOLDER,Location.create(context.file),message);
  }
 else   if (locale != null && folderName.contains(BCP_47_PREFIX) && config != null && config.getLocaleQualifier() != null) {
    if (mBcp47Folders == null) {
      mBcp47Folders=Maps.newHashMap();
    }
    if (!mBcp47Folders.containsKey(folderName)) {
      mBcp47Folders.put(folderName,context.file);
    }
  }
}
