{
  this.project=project;
  this.moduleDescriptor=moduleDescriptor;
  this.kotlinBuiltIns=moduleDescriptor.getBuiltIns();
  this.platformToKotlinClassMap=moduleDescriptor.getPlatformToKotlinClassMap();
  this.expressionTypingComponents=new ExpressionTypingComponents();
  this.expressionTypingServices=new ExpressionTypingServices(getExpressionTypingComponents());
  this.callResolver=new CallResolver();
  this.annotationResolver=new AnnotationResolver();
  this.qualifiedExpressionResolver=new QualifiedExpressionResolver();
  this.flexibleTypeCapabilitiesProvider=new FlexibleTypeCapabilitiesProvider();
  this.globalContext=org.jetbrains.kotlin.context.ContextPackage.GlobalContext();
  this.storageManager=globalContext.getStorageManager();
  this.typeLazinessToken=new TypeLazinessToken();
  this.dynamicTypesSettings=new DynamicTypesSettings();
  this.typeResolver=new TypeResolver(annotationResolver,qualifiedExpressionResolver,moduleDescriptor,flexibleTypeCapabilitiesProvider,storageManager,typeLazinessToken,dynamicTypesSettings);
  this.defaultProvider=DefaultProvider.INSTANCE$;
  this.symbolUsageValidator=defaultProvider.getSymbolUsageValidator();
  this.statementFilter=new StatementFilter();
  this.callExpressionResolver=new CallExpressionResolver(getCallResolver());
  this.controlStructureTypingUtils=new ControlStructureTypingUtils(getCallResolver());
  this.descriptorResolver=new DescriptorResolver();
  this.delegatedPropertyResolver=new DelegatedPropertyResolver();
  this.forLoopConventionsChecker=new ForLoopConventionsChecker();
  this.fakeCallResolver=new FakeCallResolver(project,getCallResolver());
  this.functionDescriptorResolver=new FunctionDescriptorResolver(getTypeResolver(),descriptorResolver,annotationResolver,storageManager,getExpressionTypingServices(),kotlinBuiltIns);
  this.localClassifierAnalyzer=new LocalClassifierAnalyzer(descriptorResolver,functionDescriptorResolver,getTypeResolver(),annotationResolver);
  this.multiDeclarationResolver=new MultiDeclarationResolver(fakeCallResolver,descriptorResolver,getTypeResolver(),symbolUsageValidator);
  this.reflectionTypes=new ReflectionTypes(moduleDescriptor);
  this.valueParameterResolver=new ValueParameterResolver(defaultProvider,getExpressionTypingServices());
  this.argumentTypeResolver=new ArgumentTypeResolver();
  this.candidateResolver=new CandidateResolver();
  this.callCompleter=new CallCompleter(argumentTypeResolver,candidateResolver);
  this.taskPrioritizer=new TaskPrioritizer(storageManager);
  this.expressionTypingServices.setStatementFilter(statementFilter);
  this.expressionTypingComponents.setAdditionalCheckerProvider(defaultProvider);
  this.expressionTypingComponents.setAnnotationResolver(annotationResolver);
  this.expressionTypingComponents.setBuiltIns(kotlinBuiltIns);
  this.expressionTypingComponents.setCallExpressionResolver(callExpressionResolver);
  this.expressionTypingComponents.setCallResolver(callResolver);
  this.expressionTypingComponents.setControlStructureTypingUtils(controlStructureTypingUtils);
  this.expressionTypingComponents.setDescriptorResolver(descriptorResolver);
  this.expressionTypingComponents.setDynamicTypesSettings(dynamicTypesSettings);
  this.expressionTypingComponents.setExpressionTypingServices(expressionTypingServices);
  this.expressionTypingComponents.setForLoopConventionsChecker(forLoopConventionsChecker);
  this.expressionTypingComponents.setFunctionDescriptorResolver(functionDescriptorResolver);
  this.expressionTypingComponents.setGlobalContext(globalContext);
  this.expressionTypingComponents.setLocalClassifierAnalyzer(localClassifierAnalyzer);
  this.expressionTypingComponents.setMultiDeclarationResolver(multiDeclarationResolver);
  this.expressionTypingComponents.setPlatformToKotlinClassMap(platformToKotlinClassMap);
  this.expressionTypingComponents.setReflectionTypes(reflectionTypes);
  this.expressionTypingComponents.setSymbolUsageValidator(symbolUsageValidator);
  this.expressionTypingComponents.setTypeResolver(typeResolver);
  this.expressionTypingComponents.setValueParameterResolver(valueParameterResolver);
  this.callResolver.setAdditionalCheckerProvider(defaultProvider);
  this.callResolver.setArgumentTypeResolver(argumentTypeResolver);
  this.callResolver.setCallCompleter(callCompleter);
  this.callResolver.setCandidateResolver(candidateResolver);
  this.callResolver.setExpressionTypingServices(expressionTypingServices);
  this.callResolver.setTaskPrioritizer(taskPrioritizer);
  this.callResolver.setTypeResolver(typeResolver);
  annotationResolver.setCallResolver(callResolver);
  annotationResolver.setStorageManager(storageManager);
  annotationResolver.setTypeResolver(typeResolver);
  callExpressionResolver.setExpressionTypingServices(expressionTypingServices);
  descriptorResolver.setAnnotationResolver(annotationResolver);
  descriptorResolver.setBuiltIns(kotlinBuiltIns);
  descriptorResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);
  descriptorResolver.setExpressionTypingServices(expressionTypingServices);
  descriptorResolver.setStorageManager(storageManager);
  descriptorResolver.setTypeResolver(typeResolver);
  delegatedPropertyResolver.setAdditionalCheckerProvider(defaultProvider);
  delegatedPropertyResolver.setBuiltIns(kotlinBuiltIns);
  delegatedPropertyResolver.setCallResolver(callResolver);
  delegatedPropertyResolver.setExpressionTypingServices(expressionTypingServices);
  forLoopConventionsChecker.setBuiltIns(kotlinBuiltIns);
  forLoopConventionsChecker.setFakeCallResolver(fakeCallResolver);
  forLoopConventionsChecker.setSymbolUsageValidator(symbolUsageValidator);
  argumentTypeResolver.setBuiltIns(kotlinBuiltIns);
  argumentTypeResolver.setExpressionTypingServices(expressionTypingServices);
  argumentTypeResolver.setTypeResolver(typeResolver);
  candidateResolver.setArgumentTypeResolver(argumentTypeResolver);
  qualifiedExpressionResolver.setSymbolUsageValidator(symbolUsageValidator);
}
