{
  JetFilesProvider filesProvider=JetFilesProvider.getInstance(searchScope.getProject());
  Collection<JetFile> filesInScope=filesProvider.allInScope(searchScope);
  final FqName packageFqName=getPackageFqNameForClass(className);
  Collection<JetFile> files=Collections2.filter(filesInScope,new Predicate<JetFile>(){
    @Override public boolean apply(    @Nullable JetFile file){
      return file != null && file.getName().equals(fileName) && file.getPackageFqName().equals(packageFqName);
    }
  }
);
  if (files.isEmpty())   return null;
  JetFile anyFile=files.iterator().next();
  if (files.size() == 1) {
    return anyFile;
  }
  Collection<JetFile> allPackageFiles=filesProvider.allPackageFiles().fun(anyFile);
  JetFile file=PsiCodegenPredictor.getFileForPackagePartName(allPackageFiles,className);
  if (file != null) {
    return file;
  }
  AnalyzeExhaust analyzeExhaust=AnalyzerFacadeWithCache.analyzeFileWithCache(anyFile);
  return PsiCodegenPredictor.getFileForCodegenNamedClass(analyzeExhaust.getBindingContext(),allPackageFiles,className.getInternalName());
}
