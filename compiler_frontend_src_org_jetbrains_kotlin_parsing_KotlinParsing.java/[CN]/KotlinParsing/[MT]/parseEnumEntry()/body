{
  PsiBuilder.Marker entry=mark();
  parseModifierList(DEFAULT,TokenSet.create(COMMA,SEMICOLON,RBRACE));
  if (!atSet(SOFT_KEYWORDS_AT_MEMBER_START) && at(IDENTIFIER)) {
    advance();
    if (at(LPAR)) {
      PsiBuilder.Marker initializerList=mark();
      PsiBuilder.Marker delegatorSuperCall=mark();
      PsiBuilder.Marker callee=mark();
      PsiBuilder.Marker typeReference=mark();
      PsiBuilder.Marker type=mark();
      PsiBuilder.Marker referenceExpr=mark();
      referenceExpr.done(ENUM_ENTRY_SUPERCLASS_REFERENCE_EXPRESSION);
      type.done(USER_TYPE);
      typeReference.done(TYPE_REFERENCE);
      callee.done(CONSTRUCTOR_CALLEE);
      myExpressionParsing.parseValueArgumentList();
      delegatorSuperCall.done(DELEGATOR_SUPER_CALL);
      initializerList.done(INITIALIZER_LIST);
    }
    if (at(LBRACE)) {
      parseClassBody();
    }
    boolean commaFound=at(COMMA);
    if (commaFound) {
      advance();
    }
    boolean semicolonFound=at(SEMICOLON);
    if (semicolonFound) {
      advance();
    }
    closeDeclarationWithCommentBinders(entry,ENUM_ENTRY,true);
    return semicolonFound ? ParseEnumEntryResult.SEMICOLON_DELIMITER : (commaFound ? ParseEnumEntryResult.COMMA_DELIMITER : ParseEnumEntryResult.NO_DELIMITER);
  }
 else {
    entry.rollbackTo();
    return ParseEnumEntryResult.FAILED;
  }
}
