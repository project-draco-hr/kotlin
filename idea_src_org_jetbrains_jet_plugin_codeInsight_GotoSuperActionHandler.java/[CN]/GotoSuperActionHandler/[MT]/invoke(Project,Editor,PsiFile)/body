{
  FeatureUsageTracker.getInstance().triggerFeatureUsed(GotoSuperAction.FEATURE_ID);
  PsiElement element=file.findElementAt(editor.getCaretModel().getOffset());
  if (element == null)   return;
  @SuppressWarnings("unchecked") JetNamedDeclaration funOrClass=PsiTreeUtil.getParentOfType(element,JetNamedFunction.class,JetClass.class,JetProperty.class);
  if (funOrClass == null)   return;
  final BindingContext bindingContext=WholeProjectAnalyzerFacade.analyzeProjectWithCacheOnAFile((JetFile)file).getBindingContext();
  DeclarationDescriptor descriptor=bindingContext.get(BindingContext.DECLARATION_TO_DESCRIPTOR,funOrClass);
  Collection<? extends DeclarationDescriptor> superDescriptors;
  String message;
  if (descriptor instanceof ClassDescriptor) {
    Collection<JetType> supertypes=((ClassDescriptor)descriptor).getTypeConstructor().getSupertypes();
    List<ClassDescriptor> superclasses=ContainerUtil.mapNotNull(supertypes,new Function<JetType,ClassDescriptor>(){
      @Override public ClassDescriptor fun(      JetType type){
        ClassifierDescriptor descriptor=type.getConstructor().getDeclarationDescriptor();
        if (descriptor instanceof ClassDescriptor) {
          return (ClassDescriptor)descriptor;
        }
        return null;
      }
    }
);
    ContainerUtil.removeDuplicates(superclasses);
    superDescriptors=superclasses;
    message=JetBundle.message("goto.super.class.chooser.title");
  }
 else   if (descriptor instanceof CallableMemberDescriptor) {
    superDescriptors=((CallableMemberDescriptor)descriptor).getOverriddenDescriptors();
    if (descriptor instanceof PropertyDescriptor) {
      message=JetBundle.message("goto.super.property.chooser.title");
    }
 else     if (descriptor instanceof SimpleFunctionDescriptor) {
      message=JetBundle.message("goto.super.function.chooser.title");
    }
 else     throw new IllegalStateException("Unknown member type: " + descriptor.getClass().getName());
  }
 else   return;
  List<PsiElement> superDeclarations=ContainerUtil.mapNotNull(superDescriptors,new Function<DeclarationDescriptor,PsiElement>(){
    @Override public PsiElement fun(    DeclarationDescriptor descriptor){
      if (KotlinBuiltIns.getInstance().getAny() == descriptor) {
        return null;
      }
      return BindingContextUtils.descriptorToDeclaration(bindingContext,descriptor);
    }
  }
);
  if (superDeclarations.isEmpty())   return;
  if (superDeclarations.size() == 1) {
    Navigatable navigatable=EditSourceUtil.getDescriptor(superDeclarations.get(0));
    if (navigatable != null && navigatable.canNavigate()) {
      navigatable.navigate(true);
    }
  }
 else {
    PsiElement[] superDeclarationsArray=PsiUtilCore.toPsiElementArray(superDeclarations);
    JBPopup popup=descriptor instanceof ClassDescriptor ? NavigationUtil.getPsiElementPopup(superDeclarationsArray,message) : NavigationUtil.getPsiElementPopup(superDeclarationsArray,new JetFunctionPsiElementCellRenderer(bindingContext),message);
    popup.showInBestPositionFor(editor);
  }
}
