{
  List<UsageInfo> allUsages=new ArrayList<UsageInfo>();
  List<JavaChangeInfo> javaChangeInfos=getChangeInfo().getOrCreateJavaChangeInfos();
  if (javaChangeInfos != null) {
    JavaChangeSignatureUsageProcessor javaProcessor=new JavaChangeSignatureUsageProcessor();
    for (    JavaChangeInfo javaChangeInfo : javaChangeInfos) {
      UsageInfo[] javaUsages=javaProcessor.findUsages(javaChangeInfo);
      allUsages.add(new KotlinWrapperForJavaUsageInfos(javaChangeInfo,javaUsages,getChangeInfo().getMethod()));
    }
  }
  KotlinPackage.filterIsInstanceTo(super.findUsages(),allUsages,JetUsageInfo.class);
  return allUsages.toArray(new UsageInfo[allUsages.size()]);
}
