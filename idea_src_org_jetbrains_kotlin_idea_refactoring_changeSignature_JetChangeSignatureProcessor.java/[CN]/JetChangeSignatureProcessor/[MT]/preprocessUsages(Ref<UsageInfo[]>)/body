{
  for (  ChangeSignatureUsageProcessor processor : ChangeSignatureUsageProcessor.EP_NAME.getExtensions()) {
    if (!processor.setupDefaultValues(myChangeInfo,refUsages,myProject))     return false;
  }
  MultiMap<PsiElement,String> conflictDescriptions=new MultiMap<PsiElement,String>();
  for (  ChangeSignatureUsageProcessor usageProcessor : ChangeSignatureUsageProcessor.EP_NAME.getExtensions()) {
    MultiMap<PsiElement,String> conflicts=usageProcessor.findConflicts(myChangeInfo,refUsages);
    for (    PsiElement key : conflicts.keySet()) {
      Collection<String> collection=conflictDescriptions.get(key);
      if (collection.size() == 0)       collection=new HashSet<String>();
      collection.addAll(conflicts.get(key));
      conflictDescriptions.put(key,collection);
    }
  }
  UsageInfo[] usagesIn=refUsages.get();
  RenameUtil.addConflictDescriptions(usagesIn,conflictDescriptions);
  Set<UsageInfo> usagesSet=new HashSet<UsageInfo>(Arrays.asList(usagesIn));
  RenameUtil.removeConflictUsages(usagesSet);
  if (!conflictDescriptions.isEmpty()) {
    if (ApplicationManager.getApplication().isUnitTestMode()) {
      throw new ConflictsInTestsException(conflictDescriptions.values());
    }
    if (myPrepareSuccessfulSwingThreadCallback != null) {
      ConflictsDialog dialog=prepareConflictsDialog(conflictDescriptions,usagesIn);
      dialog.show();
      if (!dialog.isOK()) {
        if (dialog.isShowConflicts())         prepareSuccessful();
        return false;
      }
    }
  }
  UsageInfo[] array=usagesSet.toArray(new UsageInfo[usagesSet.size()]);
  Arrays.sort(array,new Comparator<UsageInfo>(){
    @Override public int compare(    @NotNull UsageInfo u1,    @NotNull UsageInfo u2){
      PsiElement element1=u1.getElement();
      PsiElement element2=u2.getElement();
      int rank1=element1 != null ? element1.getTextOffset() : -1;
      int rank2=element2 != null ? element2.getTextOffset() : -1;
      return rank2 - rank1;
    }
  }
);
  refUsages.set(array);
  prepareSuccessful();
  return true;
}
