{
  for (  Map.Entry<JetType,KnownType> entry : Sets.newHashSet(knownTypes.entrySet())) {
    JetType jetType=entry.getKey();
    KnownType typeValue=entry.getValue();
    for (    TypeValue upperBound : typeValue.getUpperBounds()) {
      if (upperBound instanceof KnownType) {
        KnownType knownBoundType=(KnownType)upperBound;
        boolean ok=constraintExpander.isSubtypeOf(jetType,knownBoundType.getType());
        if (!ok) {
          return new Solution().registerError("Mismatch while expanding constraints");
        }
      }
    }
  }
  for (  Map.Entry<TypeParameterDescriptor,UnknownType> entry : Sets.newHashSet(unknownTypes.entrySet())) {
    TypeParameterDescriptor typeParameterDescriptor=entry.getKey();
    UnknownType typeValue=entry.getValue();
    for (    JetType upperBound : typeParameterDescriptor.getUpperBounds()) {
      addSubtypingConstraintOnTypeValues(typeValue,getTypeValueFor(upperBound));
    }
  }
  Set<TypeValue> visited=Sets.newHashSet();
  for (  UnknownType unknownType : unknownTypes.values()) {
    transitiveClosure(unknownType,visited);
  }
  for (  UnknownType unknownType : unknownTypes.values()) {
    println("Constraints for " + unknownType.getTypeParameterDescriptor());
    printTypeValue(unknownType);
  }
  for (  KnownType knownType : knownTypes.values()) {
    println("Constraints for " + knownType.getType());
    printTypeValue(knownType);
  }
  Solution solution=new Solution();
  for (  UnknownType unknownType : unknownTypes.values()) {
    check(unknownType,solution);
  }
  for (  KnownType knownType : knownTypes.values()) {
    check(knownType,solution);
  }
  println("====================================");
  println("");
  println("");
  return solution;
}
