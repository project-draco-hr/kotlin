{
  PropertyDescriptor propertyDescriptor=getPropertyDescriptor(expression,context);
  if (isNativeProperty(propertyDescriptor,context)) {
    return new NativePropertyAccessTranslator(propertyDescriptor,qualifier,context);
  }
  ResolvedCall<?> resolvedCall=getResolvedCall(context.bindingContext(),expression);
  boolean backingFieldAccess=isBackingFieldReference(expression);
  return new KotlinPropertyAccessTranslator(propertyDescriptor,qualifier,backingFieldAccess,resolvedCall,context);
}
