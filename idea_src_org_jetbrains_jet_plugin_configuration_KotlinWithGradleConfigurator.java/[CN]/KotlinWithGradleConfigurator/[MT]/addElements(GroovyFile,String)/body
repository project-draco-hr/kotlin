{
  GrClosableBlock buildScriptBlock=getBuildScriptBlock(file);
  addFirstExpressionInBlockIfNeeded(VERSION.replace(VERSION_TEMPLATE,version),buildScriptBlock);
  GrClosableBlock buildScriptRepositoriesBlock=getBuildScriptRepositoriesBlock(file);
  if (isSnapshot(version)) {
    addLastExpressionInBlockIfNeeded(SNAPSHOT_REPOSITORY,buildScriptRepositoriesBlock);
  }
 else   if (!buildScriptRepositoriesBlock.getText().contains(REPOSITORY)) {
    addLastExpressionInBlockIfNeeded(REPOSITORY,buildScriptRepositoriesBlock);
  }
  GrClosableBlock buildScriptDependenciesBlock=getBuildScriptDependenciesBlock(file);
  addLastExpressionInBlockIfNeeded(CLASSPATH,buildScriptDependenciesBlock);
  if (!file.getText().contains(getApplyPluginDirective())) {
    GrExpression apply=GroovyPsiElementFactory.getInstance(file.getProject()).createExpressionFromText(getApplyPluginDirective());
    GrApplicationStatement applyStatement=getApplyStatement(file);
    if (applyStatement != null) {
      file.addAfter(apply,applyStatement);
    }
 else {
      file.addAfter(apply,buildScriptBlock.getParent());
    }
  }
  GrClosableBlock repositoriesBlock=getRepositoriesBlock(file);
  if (isSnapshot(version)) {
    addLastExpressionInBlockIfNeeded(SNAPSHOT_REPOSITORY,repositoriesBlock);
  }
 else   if (!repositoriesBlock.getText().contains(REPOSITORY)) {
    addLastExpressionInBlockIfNeeded(REPOSITORY,repositoriesBlock);
  }
  GrClosableBlock dependenciesBlock=getDependenciesBlock(file);
  addLastExpressionInBlockIfNeeded(LIBRARY,dependenciesBlock);
  addSourceSetsBlock(file);
}
