{
  Wrap wrap=null;
  Indent childIndent=Indent.getNoneIndent();
  Alignment childAlignment=null;
  ASTNode childParent=child.getTreeParent();
  if (CODE_BLOCKS.contains(myNode.getElementType())) {
    childIndent=indentIfNotBrace(child);
  }
 else   if (childParent != null && childParent.getElementType() == JetNodeTypes.BODY && child.getElementType() != JetNodeTypes.BLOCK) {
    childIndent=Indent.getNormalIndent();
  }
 else   if (child.getElementType() == JetNodeTypes.WHEN_ENTRY) {
    childIndent=Indent.getNormalIndent();
  }
 else   if (childParent != null && childParent.getElementType() == JetNodeTypes.WHEN_ENTRY) {
    ASTNode prev=getPrevWithoutWhitespace(child);
    if (prev != null && prev.getText().equals("->")) {
      childIndent=indentIfNotBrace(child);
    }
  }
 else   if (STATEMENT_PARTS.contains(myNode.getElementType()) && child.getElementType() != JetNodeTypes.BLOCK) {
    childIndent=Indent.getNormalIndent();
  }
 else   if (childParent != null && childParent.getElementType() == JetNodeTypes.DOT_QUALIFIED_EXPRESSION) {
    if (childParent.getFirstChildNode() != child && childParent.getLastChildNode() != child) {
      childIndent=Indent.getContinuationWithoutFirstIndent(false);
    }
  }
 else   if (childParent != null && childParent.getElementType() == JetNodeTypes.VALUE_PARAMETER_LIST) {
    String childText=child.getText();
    if (!(childText.equals("(") || childText.equals(")"))) {
      childIndent=Indent.getContinuationWithoutFirstIndent(false);
    }
  }
 else   if (childParent != null && childParent.getElementType() == JetNodeTypes.TYPE_PARAMETER_LIST) {
    String childText=child.getText();
    if (!(childText.equals("<") || childText.equals(">"))) {
      childIndent=Indent.getContinuationWithoutFirstIndent(false);
    }
  }
  return new JetBlock(child,childAlignment,childIndent,wrap,mySettings,mySpacingBuilder);
}
