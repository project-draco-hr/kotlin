{
  if (args.length < PRELOADER_ARG_COUNT) {
    printUsageAndExit();
  }
  List<File> files=parseClassPath(args[0]);
  String mainClassCanonicalName=args[1];
  int classNumber;
  try {
    classNumber=Integer.parseInt(args[2]);
  }
 catch (  NumberFormatException e) {
    System.out.println(e.getMessage());
    printUsageAndExit();
    return;
  }
  String modeStr=args[3];
  final Mode mode=parseMode(modeStr);
  URL[] instrumentersClasspath=parseInstrumentersClasspath(mode,modeStr);
  final long startTime=System.nanoTime();
  ClassLoader parent=Preloader.class.getClassLoader();
  final ClassLoader withInstrumenter=instrumentersClasspath.length > 0 ? new URLClassLoader(instrumentersClasspath,parent) : parent;
  final Handler handler=getHandler(mode,withInstrumenter);
  ClassLoader preloaded=ClassPreloadingUtils.preloadClasses(files,classNumber,new ClassLoaderFactory(){
    @Override public ClassLoader create(    ClassLoader parameter){
      return withInstrumenter;
    }
  }
,handler);
  Class<?> mainClass=preloaded.loadClass(mainClassCanonicalName);
  Method mainMethod=mainClass.getMethod("main",String[].class);
  Runtime.getRuntime().addShutdownHook(new Thread(new Runnable(){
    @Override public void run(){
      if (mode != Mode.NO_TIME) {
        System.out.println();
        System.out.println("=== Preloader's measurements: ");
        long dt=System.nanoTime() - startTime;
        System.out.format("Total time: %.3fs\n",dt / 1e9);
      }
      handler.done();
    }
  }
));
  mainMethod.invoke(0,new Object[]{Arrays.copyOfRange(args,PRELOADER_ARG_COUNT,args.length)});
}
