{
  if (args.length < PRELOADER_ARG_COUNT) {
    printUsageAndExit();
  }
  String classpath=args[0];
  String[] paths=classpath.split("\\" + File.pathSeparator);
  List<File> files=new ArrayList<File>(paths.length);
  for (  String path : paths) {
    File file=new File(path);
    if (!file.exists()) {
      System.out.println("File does not exist: " + file);
      printUsageAndExit();
    }
    files.add(file);
  }
  String mainClassCanonicalName=args[1];
  int classNumber;
  try {
    classNumber=Integer.parseInt(args[2]);
  }
 catch (  NumberFormatException e) {
    System.out.println(e.getMessage());
    printUsageAndExit();
    return;
  }
  boolean printTime=parseMeasureTime(args[3]);
  long startTime=System.nanoTime();
  ClassLoader parent=Preloader.class.getClassLoader();
  ClassPreloadingUtils.ClassHandler handler=getHandler(printTime);
  ClassLoader preloaded=ClassPreloadingUtils.preloadClasses(files,classNumber,parent,handler);
  handler.done();
  Class<?> mainClass=preloaded.loadClass(mainClassCanonicalName);
  Method mainMethod=mainClass.getMethod("main",String[].class);
  try {
    mainMethod.invoke(0,new Object[]{Arrays.copyOfRange(args,PRELOADER_ARG_COUNT,args.length)});
  }
  finally {
    if (printTime) {
      long dt=System.nanoTime() - startTime;
      System.out.format("Total time: %.3fs\n",dt / 1e9);
    }
  }
}
