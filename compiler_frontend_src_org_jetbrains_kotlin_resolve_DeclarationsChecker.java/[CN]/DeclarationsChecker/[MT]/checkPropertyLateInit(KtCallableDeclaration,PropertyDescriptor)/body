{
  KtModifierList modifierList=property.getModifierList();
  if (modifierList == null)   return;
  PsiElement modifier=modifierList.getModifier(KtTokens.LATEINIT_KEYWORD);
  if (modifier == null)   return;
  if (!propertyDescriptor.isVar()) {
    trace.report(INAPPLICABLE_LATEINIT_MODIFIER.on(modifier,"is allowed only on mutable properties"));
  }
  boolean returnTypeIsNullable=true;
  boolean returnTypeIsPrimitive=true;
  KtType returnType=propertyDescriptor.getReturnType();
  if (returnType != null) {
    returnTypeIsNullable=TypeUtils.isNullableType(returnType);
    returnTypeIsPrimitive=KotlinBuiltIns.isPrimitiveType(returnType);
  }
  if (returnTypeIsNullable) {
    trace.report(INAPPLICABLE_LATEINIT_MODIFIER.on(modifier,"is not allowed on nullable properties"));
  }
  if (returnTypeIsPrimitive) {
    trace.report(INAPPLICABLE_LATEINIT_MODIFIER.on(modifier,"is not allowed on primitive type properties"));
  }
  boolean isAbstract=propertyDescriptor.getModality() == Modality.ABSTRACT;
  if (isAbstract) {
    trace.report(INAPPLICABLE_LATEINIT_MODIFIER.on(modifier,"is not allowed on abstract properties"));
  }
  if (property instanceof KtParameter) {
    trace.report(INAPPLICABLE_LATEINIT_MODIFIER.on(modifier,"is not allowed on primary constructor parameters"));
  }
  boolean hasDelegateExpressionOrInitializer=false;
  if (property instanceof KtProperty) {
    hasDelegateExpressionOrInitializer=((KtProperty)property).hasDelegateExpressionOrInitializer();
    if (hasDelegateExpressionOrInitializer) {
      trace.report(INAPPLICABLE_LATEINIT_MODIFIER.on(modifier,"is not allowed on properties with initializer or on delegated properties"));
    }
  }
  PropertyGetterDescriptor getter=propertyDescriptor.getGetter();
  PropertySetterDescriptor setter=propertyDescriptor.getSetter();
  boolean customGetterOrSetter=false;
  if (getter != null) {
    customGetterOrSetter=getter.hasBody();
  }
  if (setter != null) {
    customGetterOrSetter|=setter.hasBody();
  }
  if (!hasDelegateExpressionOrInitializer && customGetterOrSetter) {
    trace.report(INAPPLICABLE_LATEINIT_MODIFIER.on(modifier,"is not allowed on properties with a custom getter or setter"));
  }
  boolean hasBackingField=Boolean.TRUE.equals(trace.getBindingContext().get(BindingContext.BACKING_FIELD_REQUIRED,propertyDescriptor));
  if (!isAbstract && !customGetterOrSetter && !hasDelegateExpressionOrInitializer&& !hasBackingField) {
    trace.report(INAPPLICABLE_LATEINIT_MODIFIER.on(modifier,"is not allowed on properties without backing field"));
  }
  if (propertyDescriptor.getExtensionReceiverParameter() != null) {
    trace.report(INAPPLICABLE_LATEINIT_MODIFIER.on(modifier,"is not allowed on extension properties"));
  }
}
