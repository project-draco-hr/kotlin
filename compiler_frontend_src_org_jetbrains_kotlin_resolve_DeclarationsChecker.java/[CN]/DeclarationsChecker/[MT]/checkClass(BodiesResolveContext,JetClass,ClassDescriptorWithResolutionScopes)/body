{
  checkOpenMembers(classDescriptor);
  checkTypeParameters(aClass);
  if (aClass.isInterface()) {
    checkConstructorInTrait(aClass);
  }
 else   if (classDescriptor.getKind() == ClassKind.ANNOTATION_CLASS) {
    checkAnnotationClassWithBody(aClass);
    checkValOnAnnotationParameter(aClass);
  }
 else   if (aClass instanceof JetEnumEntry) {
    checkEnumEntry((JetEnumEntry)aClass,classDescriptor);
  }
  for (  CallableMemberDescriptor memberDescriptor : classDescriptor.getDeclaredCallableMembers()) {
    if (memberDescriptor.getKind() != CallableMemberDescriptor.Kind.DECLARATION)     continue;
    JetNamedDeclaration member=(JetNamedDeclaration)DescriptorToSourceUtils.descriptorToDeclaration(memberDescriptor);
    if (member instanceof JetFunction && memberDescriptor instanceof FunctionDescriptor) {
      checkFunctionExposedType((JetFunction)member,(FunctionDescriptor)memberDescriptor);
    }
  }
}
