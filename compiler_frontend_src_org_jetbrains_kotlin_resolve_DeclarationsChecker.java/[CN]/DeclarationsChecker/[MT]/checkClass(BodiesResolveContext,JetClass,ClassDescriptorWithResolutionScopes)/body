{
  AnnotationResolver.reportDeprecatedAnnotationSyntax(aClass.getAnnotations(),trace);
  checkOpenMembers(classDescriptor);
  checkPrimaryConstructor(aClass,classDescriptor);
  checkTypeParameters(aClass);
  if (aClass.isInterface()) {
    ASTNode traitKeyword=aClass.getNode().findChildByType(JetTokens.TRAIT_KEYWORD);
    if (traitKeyword != null) {
      trace.report(Errors.DEPRECATED_TRAIT_KEYWORD.on(traitKeyword.getPsi()));
    }
    checkTraitModifiers(aClass);
    checkConstructorInTrait(aClass);
  }
 else   if (aClass.isAnnotation()) {
    checkAnnotationClassWithBody(aClass);
    checkValOnAnnotationParameter(aClass);
  }
 else   if (aClass.isEnum()) {
    checkEnumModifiers(aClass);
    if (aClass.isLocal()) {
      trace.report(LOCAL_ENUM_NOT_ALLOWED.on(aClass,classDescriptor));
    }
  }
 else   if (aClass instanceof JetEnumEntry) {
    checkEnumEntry((JetEnumEntry)aClass,classDescriptor);
  }
}
