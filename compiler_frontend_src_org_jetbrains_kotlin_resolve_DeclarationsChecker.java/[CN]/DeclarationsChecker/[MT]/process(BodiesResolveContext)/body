{
  for (  KtFile file : bodiesResolveContext.getFiles()) {
    checkModifiersAndAnnotationsInPackageDirective(file);
    annotationChecker.check(file,trace,null);
  }
  Map<KtClassOrObject,ClassDescriptorWithResolutionScopes> classes=bodiesResolveContext.getDeclaredClasses();
  for (  Map.Entry<KtClassOrObject,ClassDescriptorWithResolutionScopes> entry : classes.entrySet()) {
    KtClassOrObject classOrObject=entry.getKey();
    ClassDescriptorWithResolutionScopes classDescriptor=entry.getValue();
    checkSupertypesForConsistency(classDescriptor);
    checkTypesInClassHeader(classOrObject);
    if (classOrObject instanceof KtClass) {
      KtClass ktClass=(KtClass)classOrObject;
      checkClass(bodiesResolveContext,ktClass,classDescriptor);
      descriptorResolver.checkNamesInConstraints(ktClass,classDescriptor,classDescriptor.getScopeForClassHeaderResolution(),trace);
    }
 else     if (classOrObject instanceof KtObjectDeclaration) {
      checkObject((KtObjectDeclaration)classOrObject,classDescriptor);
    }
    checkPrimaryConstructor(classOrObject,classDescriptor);
    modifiersChecker.checkModifiersForDeclaration(classOrObject,classDescriptor);
    identifierChecker.checkDeclaration(classOrObject,trace);
    checkClassExposedType(classOrObject,classDescriptor);
  }
  Map<KtNamedFunction,SimpleFunctionDescriptor> functions=bodiesResolveContext.getFunctions();
  for (  Map.Entry<KtNamedFunction,SimpleFunctionDescriptor> entry : functions.entrySet()) {
    KtNamedFunction function=entry.getKey();
    SimpleFunctionDescriptor functionDescriptor=entry.getValue();
    checkFunction(function,functionDescriptor);
    modifiersChecker.checkModifiersForDeclaration(function,functionDescriptor);
    identifierChecker.checkDeclaration(function,trace);
  }
  Map<KtProperty,PropertyDescriptor> properties=bodiesResolveContext.getProperties();
  for (  Map.Entry<KtProperty,PropertyDescriptor> entry : properties.entrySet()) {
    KtProperty property=entry.getKey();
    PropertyDescriptor propertyDescriptor=entry.getValue();
    checkProperty(property,propertyDescriptor);
    modifiersChecker.checkModifiersForDeclaration(property,propertyDescriptor);
    identifierChecker.checkDeclaration(property,trace);
  }
  for (  Map.Entry<KtSecondaryConstructor,ConstructorDescriptor> entry : bodiesResolveContext.getSecondaryConstructors().entrySet()) {
    ConstructorDescriptor constructorDescriptor=entry.getValue();
    KtSecondaryConstructor declaration=entry.getKey();
    checkConstructorDeclaration(constructorDescriptor,declaration);
    checkFunctionExposedType(declaration,constructorDescriptor);
  }
}
