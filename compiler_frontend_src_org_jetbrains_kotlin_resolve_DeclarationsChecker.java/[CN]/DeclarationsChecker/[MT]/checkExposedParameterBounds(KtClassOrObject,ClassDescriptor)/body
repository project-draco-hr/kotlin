{
  EffectiveVisibility classVisibility=EffectiveVisibility.Companion.forClass(classDescriptor);
  List<KtTypeParameter> typeParameterList=klass.getTypeParameters();
  int i=0;
  for (  TypeParameterDescriptor typeParameterDescriptor : classDescriptor.getDeclaredTypeParameters()) {
    if (i >= typeParameterList.size())     return;
    for (    KotlinType upperBound : typeParameterDescriptor.getUpperBounds()) {
      EffectiveVisibility upperBoundVisibility=EffectiveVisibility.Companion.forType(upperBound);
      if (!upperBoundVisibility.sameOrMorePermissive(classVisibility)) {
        KtTypeParameter typeParameter=typeParameterList.get(i);
        trace.report(EXPOSED_TYPE_PARAMETER_BOUND.on(typeParameter,classVisibility,upperBoundVisibility));
        break;
      }
    }
    i++;
  }
}
