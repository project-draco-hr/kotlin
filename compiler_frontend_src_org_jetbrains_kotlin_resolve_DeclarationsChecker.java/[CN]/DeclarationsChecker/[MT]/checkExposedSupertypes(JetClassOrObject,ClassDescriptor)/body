{
  EffectiveVisibility classVisibility=EffectiveVisibility.Companion.forClass(classDescriptor);
  boolean isInterface=classDescriptor.getKind() == ClassKind.INTERFACE;
  List<JetDelegationSpecifier> delegationList=klass.getDelegationSpecifiers();
  int i=-1;
  for (  JetType superType : classDescriptor.getTypeConstructor().getSupertypes()) {
    i++;
    if (i >= delegationList.size())     return;
    ClassDescriptor superDescriptor=TypeUtils.getClassDescriptor(superType);
    if (superDescriptor == null) {
      continue;
    }
    boolean superIsInterface=superDescriptor.getKind() == ClassKind.INTERFACE;
    if (superIsInterface != isInterface) {
      continue;
    }
    EffectiveVisibility superTypeVisibility=EffectiveVisibility.Companion.forType(superType);
    if (!superTypeVisibility.sameOrMorePermissive(classVisibility)) {
      if (isInterface) {
        trace.report(EXPOSED_SUPER_INTERFACE.on(delegationList.get(i),classVisibility,superTypeVisibility));
      }
 else {
        trace.report(EXPOSED_SUPER_CLASS.on(delegationList.get(i),classVisibility,superTypeVisibility));
      }
    }
  }
}
