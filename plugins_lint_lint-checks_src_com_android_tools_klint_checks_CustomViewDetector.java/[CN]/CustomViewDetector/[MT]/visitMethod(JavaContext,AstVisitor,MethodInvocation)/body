{
  if (node.getParent() instanceof ExpressionStatement) {
    if (!context.isContextMethod(node)) {
      return;
    }
    StrictListAccessor<Expression,MethodInvocation> expressions=node.astArguments();
    int size=expressions.size();
    int parameterIndex;
    if (size == 1) {
      parameterIndex=0;
    }
 else {
      parameterIndex=1;
    }
    Expression expression=Iterators.get(node.astArguments().iterator(),parameterIndex,null);
    if (expression == null) {
      return;
    }
    String s=expression.toString();
    if (!s.startsWith(R_STYLEABLE_PREFIX)) {
      return;
    }
    String styleableName=s.substring(R_STYLEABLE_PREFIX.length());
    ClassDeclaration cls=JavaContext.findSurroundingClass(node);
    if (cls == null) {
      return;
    }
    ResolvedNode resolved=context.resolve(cls);
    if (!(resolved instanceof ResolvedClass)) {
      return;
    }
    String className=cls.astName().astValue();
    ResolvedClass resolvedClass=(ResolvedClass)resolved;
    if (resolvedClass.isSubclassOf(CLASS_VIEW,false)) {
      if (!styleableName.equals(className)) {
        String message=String.format("By convention, the custom view (`%1$s`) and the declare-styleable (`%2$s`) " + "should have the same name (various editor features rely on " + "this convention)",className,styleableName);
        context.report(ISSUE,node,context.getLocation(expression),message);
      }
    }
 else     if (resolvedClass.isSubclassOf(CLASS_VIEWGROUP + DOT_LAYOUT_PARAMS,false)) {
      ClassDeclaration outer=JavaContext.findSurroundingClass(cls.getParent());
      if (outer == null) {
        return;
      }
      String layoutClassName=outer.astName().astValue();
      String expectedName=layoutClassName + "_Layout";
      if (!styleableName.equals(expectedName)) {
        String message=String.format("By convention, the declare-styleable (`%1$s`) for a layout parameter " + "class (`%2$s`) is expected to be the surrounding " + "class (`%3$s`) plus \"`_Layout`\", e.g. `%4$s`. "+ "(Various editor features rely on this convention.)",styleableName,className,layoutClassName,expectedName);
        context.report(ISSUE,node,context.getLocation(expression),message);
      }
    }
  }
}
