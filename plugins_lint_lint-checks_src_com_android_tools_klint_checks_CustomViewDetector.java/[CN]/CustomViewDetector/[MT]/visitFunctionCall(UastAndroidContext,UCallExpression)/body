{
  if (node.getParent() instanceof UExpression) {
    if (!context.getLintContext().isContextMethod(node)) {
      return;
    }
    List<UExpression> expressions=node.getValueArguments();
    int size=expressions.size();
    int parameterIndex;
    if (size == 1) {
      parameterIndex=0;
    }
 else     if (size > 1) {
      parameterIndex=1;
    }
 else {
      return;
    }
    UExpression expression=expressions.get(parameterIndex);
    if (!(expression instanceof UQualifiedExpression)) {
      return;
    }
    String s=expression.renderString();
    if (!s.startsWith(R_STYLEABLE_PREFIX)) {
      return;
    }
    String styleableName=s.substring(R_STYLEABLE_PREFIX.length());
    UClass resolvedClass=UastUtils.getContainingClass(node);
    if (resolvedClass == null) {
      return;
    }
    String className=resolvedClass.getName();
    if (resolvedClass.isSubclassOf(CLASS_VIEW)) {
      if (!styleableName.equals(className)) {
        String message=String.format("By convention, the custom view (`%1$s`) and the declare-styleable (`%2$s`) " + "should have the same name (various editor features rely on " + "this convention)",className,styleableName);
        context.report(ISSUE,node,UastAndroidUtils.getLocation(expression),message);
      }
    }
 else     if (resolvedClass.isSubclassOf(CLASS_VIEWGROUP + DOT_LAYOUT_PARAMS)) {
      UClass outer=UastUtils.getContainingClass(resolvedClass);
      if (outer == null) {
        return;
      }
      String layoutClassName=outer.getName();
      String expectedName=layoutClassName + "_Layout";
      if (!styleableName.equals(expectedName)) {
        String message=String.format("By convention, the declare-styleable (`%1$s`) for a layout parameter " + "class (`%2$s`) is expected to be the surrounding " + "class (`%3$s`) plus \"`_Layout`\", e.g. `%4$s`. "+ "(Various editor features rely on this convention.)",styleableName,className,layoutClassName,expectedName);
        context.report(ISSUE,node,UastAndroidUtils.getLocation(expression),message);
      }
    }
  }
}
