{
  List<File> classpathItems=new ArrayList<File>();
  classpathItems.add(PathUtil.findRtJar());
  if ((stdlib != null) && (stdlib.trim().length() > 0)) {
    classpathItems.add(new File(stdlib));
  }
 else {
    classpathItems.add(PathUtil.getDefaultRuntimePath());
  }
  if ((classpath != null) && (classpath.length > 0)) {
    for (    String path : classpath) {
      classpathItems.add(new File(path));
    }
  }
  CompilerConfiguration configuration=new CompilerConfiguration();
  configuration.putUserData(JVMConfigurationKeys.CLASSPATH_KEY,classpathItems.toArray(new File[classpathItems.size()]));
  configuration.putUserData(JVMConfigurationKeys.ANNOTATIONS_PATH_KEY,new File[]{PathUtil.getJdkAnnotationsPath()});
  JetCoreEnvironment environment=new JetCoreEnvironment(CompileEnvironmentUtil.createMockDisposable(),configuration,CompilerSpecialMode.REGULAR);
  K2JVMCompileEnvironmentConfiguration env=new K2JVMCompileEnvironmentConfiguration(environment,MessageCollector.PLAIN_TEXT_TO_SYSTEM_ERR,false);
  env.getCompilerPlugins().addAll(getCompilerPlugins());
  return env;
}
