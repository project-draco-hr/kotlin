{
  CompilerConfiguration configuration=new CompilerConfiguration();
  configuration.add(CLASSPATH_KEY,PathUtil.findRtJar());
  if ((stdlib != null) && (stdlib.trim().length() > 0)) {
    configuration.add(CLASSPATH_KEY,new File(stdlib));
  }
 else {
    File path=PathUtil.getDefaultRuntimePath();
    if (path != null) {
      configuration.add(CLASSPATH_KEY,path);
    }
  }
  if ((classpath != null) && (classpath.length > 0)) {
    for (    String path : classpath) {
      configuration.add(CLASSPATH_KEY,new File(path));
    }
  }
  File jdkAnnotationsPath=PathUtil.getJdkAnnotationsPath();
  if (jdkAnnotationsPath != null) {
    configuration.add(ANNOTATIONS_PATH_KEY,jdkAnnotationsPath);
  }
  JetCoreEnvironment environment=new JetCoreEnvironment(CompileEnvironmentUtil.createMockDisposable(),configuration);
  K2JVMCompileEnvironmentConfiguration env=new K2JVMCompileEnvironmentConfiguration(environment,MessageCollector.PLAIN_TEXT_TO_SYSTEM_ERR,false,BuiltinsScopeExtensionMode.ALL,false,BuiltinToJavaTypesMapping.ENABLED);
  env.getCompilerPlugins().addAll(getCompilerPlugins());
  return env;
}
