{
  KotlinPaths paths=getKotlinPathsForAntTask();
  CompilerConfiguration configuration=new CompilerConfiguration();
  configuration.addAll(CLASSPATH_KEY,PathUtil.getJdkClassesRoots());
  if ((stdlib != null) && (stdlib.trim().length() > 0)) {
    configuration.add(CLASSPATH_KEY,new File(stdlib));
  }
 else {
    File path=paths.getRuntimePath();
    if (path.exists()) {
      configuration.add(CLASSPATH_KEY,path);
    }
  }
  if ((classpath != null) && (classpath.length > 0)) {
    for (    String path : classpath) {
      configuration.add(CLASSPATH_KEY,new File(path));
    }
  }
  if ((externalAnnotationsPath != null) && (externalAnnotationsPath.length > 0)) {
    for (    String path : externalAnnotationsPath) {
      configuration.add(ANNOTATIONS_PATH_KEY,new File(path));
    }
  }
  File jdkAnnotationsPath=paths.getJdkAnnotationsPath();
  if (jdkAnnotationsPath.exists()) {
    configuration.add(ANNOTATIONS_PATH_KEY,jdkAnnotationsPath);
  }
  configuration.addAll(CommonConfigurationKeys.SOURCE_ROOTS_KEY,Arrays.asList(sourceRoots));
  for (  String sourceRoot : sourceRoots) {
    File file=new File(sourceRoot);
    if (!file.isFile() || !"kt".equals(FileUtilRt.getExtension(file.getName()))) {
      configuration.add(JVMConfigurationKeys.CLASSPATH_KEY,file);
    }
  }
  configuration.put(CLIConfigurationKeys.MESSAGE_COLLECTOR_KEY,MessageCollectorPlainTextToStream.PLAIN_TEXT_TO_SYSTEM_ERR);
  configuration.put(ENABLE_INLINE,enableInline);
  configuration.addAll(CLIConfigurationKeys.COMPILER_PLUGINS,getCompilerPlugins());
  return configuration;
}
