{
  DependencyInjectorGenerator generator=new DependencyInjectorGenerator();
  generator.addParameter(Project.class);
  generator.addParameter(BindingTrace.class);
  generator.addField(true,GlobalContextImpl.class,null,new GivenExpression("org.jetbrains.jet.context.ContextPackage.GlobalContext()"));
  generator.addField(false,StorageManager.class,null,new GivenExpression("globalContext.getStorageManager()"));
  generator.addPublicField(JavaClassFinderImpl.class);
  generator.addField(TraceBasedExternalSignatureResolver.class);
  generator.addField(TraceBasedJavaResolverCache.class);
  generator.addField(TraceBasedErrorReporter.class);
  generator.addField(PsiBasedMethodSignatureChecker.class);
  generator.addField(PsiBasedExternalAnnotationResolver.class);
  generator.addPublicField(JavaDescriptorResolver.class);
  generator.addField(false,VirtualFileFinder.class,"virtualFileFinder",new GivenExpression(VirtualFileFinder.class.getName() + ".SERVICE.getInstance(project)"));
  generator.addField(true,ModuleDescriptorImpl.class,"module",new GivenExpression("org.jetbrains.jet.lang.resolve.java.AnalyzerFacadeForJVM.createJavaModule(\"<fake-jdr-module>\")"));
  generator.configure("compiler/frontend.java/src","org.jetbrains.jet.di","InjectorForJavaDescriptorResolver",GenerateInjectors.class);
  return generator;
}
