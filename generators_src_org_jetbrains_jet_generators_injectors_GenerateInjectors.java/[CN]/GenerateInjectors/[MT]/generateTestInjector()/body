{
  DependencyInjectorGenerator generator=new DependencyInjectorGenerator();
  generator.addPublicField(DescriptorResolver.class);
  generator.addPublicField(ExpressionTypingServices.class);
  generator.addPublicField(TypeResolver.class);
  generator.addPublicField(CallResolver.class);
  generator.addField(CallResolverExtensionProvider.class);
  generator.addField(false,StorageManager.class,null,new GivenExpression("globalContext.getStorageManager()"));
  generator.addField(true,KotlinBuiltIns.class,null,new GivenExpression("KotlinBuiltIns.getInstance()"));
  generator.addField(false,PlatformToKotlinClassMap.class,null,new GivenExpression("moduleDescriptor.getPlatformToKotlinClassMap()"));
  generator.addField(false,GlobalContext.class,null,new GivenExpression("org.jetbrains.jet.context.ContextPackage.GlobalContext()"));
  generator.addPublicParameter(Project.class);
  generator.addParameter(ModuleDescriptor.class);
  generator.configure("compiler/tests","org.jetbrains.jet.di","InjectorForTests",GenerateInjectors.class);
  return generator;
}
