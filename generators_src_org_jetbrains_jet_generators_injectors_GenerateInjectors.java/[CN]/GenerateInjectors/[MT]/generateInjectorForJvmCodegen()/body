{
  DependencyInjectorGenerator generator=new DependencyInjectorGenerator();
  generator.addPublicParameter(JetTypeMapper.class);
  generator.addPublicParameter(GenerationState.class);
  generator.addParameter(ClassBuilderFactory.class);
  generator.addPublicParameter(Project.class);
  generator.addField(false,GlobalContext.class,null,new GivenExpression("org.jetbrains.jet.context.ContextPackage.GlobalContext()"));
  generator.addField(false,BindingTrace.class,"bindingTrace",new GivenExpression("jetTypeMapper.getBindingTrace()"));
  generator.addField(false,BindingContext.class,"bindingContext",new GivenExpression("bindingTrace.getBindingContext()"));
  generator.addField(false,ClassBuilderMode.class,"classBuilderMode",new GivenExpression("classBuilderFactory.getClassBuilderMode()"));
  generator.addField(true,IntrinsicMethods.class,"intrinsics",null);
  generator.addPublicField(ClassFileFactory.class);
  generator.configure("compiler/backend/src","org.jetbrains.jet.di","InjectorForJvmCodegen",GenerateInjectors.class);
  return generator;
}
