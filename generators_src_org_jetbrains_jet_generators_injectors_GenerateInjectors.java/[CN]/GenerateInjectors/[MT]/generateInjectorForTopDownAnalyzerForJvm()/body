{
  DependencyInjectorGenerator generator=new DependencyInjectorGenerator();
  generator.implementInterface(InjectorForTopDownAnalyzer.class);
  generateInjectorForTopDownAnalyzerCommon(generator);
  generator.addField(JavaDescriptorResolver.class);
  generator.addField(false,JavaToKotlinClassMap.class,null,new GivenExpression("org.jetbrains.jet.lang.resolve.java.mapping.JavaToKotlinClassMap.getInstance()"));
  generator.addField(JavaClassFinderImpl.class);
  generator.addField(TraceBasedExternalSignatureResolver.class);
  generator.addField(TraceBasedJavaResolverCache.class);
  generator.addField(TraceBasedErrorReporter.class);
  generator.addField(PsiBasedMethodSignatureChecker.class);
  generator.addField(PsiBasedExternalAnnotationResolver.class);
  generator.addField(MutablePackageFragmentProvider.class);
  generator.addField(NamespaceFactoryImpl.class);
  generator.addPublicField(JavaPackageFragmentProviderImpl.class);
  generator.addField(false,VirtualFileFinder.class,"virtualFileFinder",new GivenExpression(VirtualFileFinder.class.getName() + ".SERVICE.getInstance(project)"));
  generator.configure("compiler/frontend.java/src","org.jetbrains.jet.di","InjectorForTopDownAnalyzerForJvm",GenerateInjectors.class);
  return generator;
}
