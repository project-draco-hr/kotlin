{
  List<Instruction> instructions=pseudocode.getInstructions();
  SubroutineEnterInstruction enterInstruction=pseudocode.getEnterInstruction();
  for (  Instruction instruction : instructions) {
    if (!isLocal && instruction instanceof SubroutineEnterInstruction)     continue;
    Collection<Instruction> allPreviousInstructions;
    Collection<Instruction> previousInstructions=straightDirection ? instruction.getPreviousInstructions() : instruction.getNextInstructions();
    if (instruction == enterInstruction && !previousSubGraphInstructions.isEmpty()) {
      allPreviousInstructions=Lists.newArrayList(previousInstructions);
      allPreviousInstructions.addAll(previousSubGraphInstructions);
    }
 else {
      allPreviousInstructions=previousInstructions;
    }
    if (instruction instanceof LocalDeclarationInstruction) {
      Pseudocode subroutinePseudocode=((LocalDeclarationInstruction)instruction).getBody();
      traverseSubGraph(subroutinePseudocode,instructionsMergeStrategy,previousInstructions,straightDirection,changed,true);
    }
    Pair<D,D> previousDataValue=dataMap.get(instruction);
    Collection<D> incomingEdgesData=Sets.newHashSet();
    for (    Instruction previousInstruction : allPreviousInstructions) {
      incomingEdgesData.add(dataMap.get(previousInstruction).getSecond());
    }
    Pair<D,D> mergedData=instructionsMergeStrategy.execute(instruction,incomingEdgesData);
    if (!mergedData.equals(previousDataValue)) {
      changed[0]=true;
      dataMap.put(instruction,mergedData);
    }
  }
}
