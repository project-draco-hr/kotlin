{
  DelegatingBindingTrace trace=new DelegatingBindingTrace(resolveSession.getBindingContext());
  if (expression instanceof JetReferenceExpression) {
    if (expression.getParent() instanceof JetUserType) {
      JetUserType qualifier=((JetUserType)expression.getParent()).getQualifier();
      if (qualifier != null) {
        Collection<? extends DeclarationDescriptor> descriptors=resolveSession.getInjector().getQualifiedExpressionResolver().lookupDescriptorsForUserType(qualifier,getExpressionOuterScope(resolveSession,expression),trace);
        for (        DeclarationDescriptor descriptor : descriptors) {
          if (descriptor instanceof LazyPackageDescriptor) {
            return ((LazyPackageDescriptor)descriptor).getMemberScope();
          }
        }
      }
    }
    if (PsiTreeUtil.getParentOfType(expression,JetImportDirective.class,false) != null) {
      if (expression.getParent() instanceof JetDotQualifiedExpression) {
        JetExpression element=((JetDotQualifiedExpression)expression.getParent()).getReceiverExpression();
        NamespaceDescriptor filePackage=resolveSession.getPackageDescriptorByFqName(new FqName(((JetFile)expression.getContainingFile()).getPackageName()));
        NamespaceDescriptor rootPackage=resolveSession.getPackageDescriptorByFqName(FqName.ROOT);
        Collection<? extends DeclarationDescriptor> descriptors;
        if (element instanceof JetDotQualifiedExpression) {
          descriptors=resolveSession.getInjector().getQualifiedExpressionResolver().lookupDescriptorsForQualifiedExpression((JetDotQualifiedExpression)element,rootPackage.getMemberScope(),filePackage.getMemberScope(),trace,false,false);
        }
 else {
          descriptors=resolveSession.getInjector().getQualifiedExpressionResolver().lookupDescriptorsForSimpleNameReference((JetSimpleNameExpression)element,rootPackage.getMemberScope(),filePackage.getMemberScope(),trace,false,false,false);
        }
        for (        DeclarationDescriptor descriptor : descriptors) {
          if (descriptor instanceof NamespaceDescriptor) {
            return ((NamespaceDescriptor)descriptor).getMemberScope();
          }
        }
      }
 else {
        return resolveSession.getPackageDescriptorByFqName(FqName.ROOT).getMemberScope();
      }
    }
    JetNamespaceHeader namespaceHeader=PsiTreeUtil.getParentOfType(expression,JetNamespaceHeader.class,false);
    if (namespaceHeader != null) {
      NamespaceDescriptor packageDescriptor=resolveSession.getPackageDescriptorByFqName(namespaceHeader.getParentFqName((JetReferenceExpression)expression));
      if (packageDescriptor != null) {
        return packageDescriptor.getMemberScope();
      }
    }
  }
  return null;
}
