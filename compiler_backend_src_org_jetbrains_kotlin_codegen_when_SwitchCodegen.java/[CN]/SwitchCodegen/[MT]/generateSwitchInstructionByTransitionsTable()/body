{
  int[] keys=new int[transitionsTable.size()];
  Label[] labels=new Label[transitionsTable.size()];
  int i=0;
  for (  Map.Entry<Integer,Label> transition : transitionsTable.entrySet()) {
    keys[i]=transition.getKey();
    labels[i]=transition.getValue();
    i++;
  }
  int nlabels=keys.length;
  int hi=keys[nlabels - 1];
  int lo=keys[0];
  long table_space_cost=4 + ((long)hi - lo + 1);
  long table_time_cost=3;
  long lookup_space_cost=3 + 2 * (long)nlabels;
  long lookup_time_cost=nlabels;
  boolean useTableSwitch=nlabels > 0 && table_space_cost + 3 * table_time_cost <= lookup_space_cost + 3 * lookup_time_cost;
  if (!useTableSwitch) {
    v.lookupswitch(defaultLabel,keys,labels);
    return;
  }
  Label[] sparseLabels=new Label[hi - lo + 1];
  Arrays.fill(sparseLabels,defaultLabel);
  for (i=0; i < keys.length; i++) {
    sparseLabels[keys[i] - lo]=labels[i];
  }
  v.tableswitch(lo,hi,defaultLabel,sparseLabels);
}
