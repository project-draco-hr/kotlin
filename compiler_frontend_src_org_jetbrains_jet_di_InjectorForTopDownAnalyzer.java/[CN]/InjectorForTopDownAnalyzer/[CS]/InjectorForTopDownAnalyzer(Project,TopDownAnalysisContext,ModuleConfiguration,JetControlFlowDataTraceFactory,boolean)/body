{
  this.topDownAnalyzer=new TopDownAnalyzer();
  this.bodyResolver=new BodyResolver();
  this.controlFlowAnalyzer=new ControlFlowAnalyzer();
  this.declarationsChecker=new DeclarationsChecker();
  this.descriptorResolver=new DescriptorResolver();
  this.expressionTypingServices=new ExpressionTypingServices();
  this.project=project;
  DeclarationResolver declarationResolver=new DeclarationResolver();
  AnnotationResolver annotationResolver=new AnnotationResolver();
  CallResolver callResolver=new CallResolver();
  TypeResolver typeResolver=new TypeResolver();
  OverloadingConflictResolver overloadingConflictResolver=new OverloadingConflictResolver();
  ImportsResolver importsResolver=new ImportsResolver();
  TypeHierarchyResolver typeHierarchyResolver=new TypeHierarchyResolver();
  DelegationResolver delegationResolver=new DelegationResolver();
  OverrideResolver overrideResolver=new OverrideResolver();
  OverloadResolver overloadResolver=new OverloadResolver();
  this.topDownAnalyzer.setDeclarationResolver(declarationResolver);
  this.topDownAnalyzer.setTypeHierarchyResolver(typeHierarchyResolver);
  this.topDownAnalyzer.setDelegationResolver(delegationResolver);
  this.topDownAnalyzer.setOverrideResolver(overrideResolver);
  this.topDownAnalyzer.setOverloadResolver(overloadResolver);
  this.bodyResolver.setContext(topDownAnalysisContext);
  this.bodyResolver.setDescriptorResolver(descriptorResolver);
  this.bodyResolver.setExpressionTypingServices(expressionTypingServices);
  this.bodyResolver.setCallResolver(callResolver);
  this.controlFlowAnalyzer.setContext(topDownAnalysisContext);
  this.controlFlowAnalyzer.setFlowDataTraceFactory(jetControlFlowDataTraceFactory);
  this.declarationsChecker.setContext(topDownAnalysisContext);
  this.descriptorResolver.setExpressionTypingServices(expressionTypingServices);
  this.descriptorResolver.setTypeResolver(typeResolver);
  this.descriptorResolver.setAnnotationResolver(annotationResolver);
  this.expressionTypingServices.setDescriptorResolver(descriptorResolver);
  this.expressionTypingServices.setCallResolver(callResolver);
  this.expressionTypingServices.setTypeResolver(typeResolver);
  this.expressionTypingServices.setProject(project);
  declarationResolver.setContext(topDownAnalysisContext);
  declarationResolver.setDescriptorResolver(descriptorResolver);
  declarationResolver.setAnnotationResolver(annotationResolver);
  declarationResolver.setImportsResolver(importsResolver);
  annotationResolver.setExpressionTypingServices(expressionTypingServices);
  annotationResolver.setCallResolver(callResolver);
  callResolver.setDescriptorResolver(descriptorResolver);
  callResolver.setExpressionTypingServices(expressionTypingServices);
  callResolver.setTypeResolver(typeResolver);
  callResolver.setOverloadingConflictResolver(overloadingConflictResolver);
  typeResolver.setDescriptorResolver(descriptorResolver);
  typeResolver.setAnnotationResolver(annotationResolver);
  importsResolver.setContext(topDownAnalysisContext);
  importsResolver.setConfiguration(moduleConfiguration);
  typeHierarchyResolver.setContext(topDownAnalysisContext);
  typeHierarchyResolver.setDescriptorResolver(descriptorResolver);
  typeHierarchyResolver.setImportsResolver(importsResolver);
  typeHierarchyResolver.setConfiguration(moduleConfiguration);
  delegationResolver.setContext(topDownAnalysisContext);
  overrideResolver.setContext(topDownAnalysisContext);
  overloadResolver.setContext(topDownAnalysisContext);
}
