{
  return new JetType(){
    private TypeConstructor constructor;
    private final List<TypeProjection> arguments=typeArguments(proto.getArgumentsList());
    private JetScope memberScope;
    @NotNull @Override public TypeConstructor getConstructor(){
      if (constructor == null) {
        constructor=typeConstructor(proto);
      }
      return constructor;
    }
    @NotNull @Override public List<TypeProjection> getArguments(){
      return arguments;
    }
    @Override public boolean isNullable(){
      return proto.getNullable();
    }
    @NotNull @Override public JetScope getMemberScope(){
      if (memberScope == null) {
        TypeConstructor typeConstructor=getConstructor();
        if (ErrorUtils.isError(typeConstructor)) {
          memberScope=ErrorUtils.createErrorScope(typeConstructor.toString());
        }
 else {
          memberScope=getTypeMemberScope(typeConstructor,getArguments());
        }
      }
      return memberScope;
    }
    @Override public List<AnnotationDescriptor> getAnnotations(){
      return Collections.emptyList();
    }
    @Override public String toString(){
      return TypeUtils.toString(this);
    }
    @Override public boolean equals(    Object o){
      if (this == o)       return true;
      if (!(o instanceof JetType))       return false;
      JetType type=(JetType)o;
      return isNullable() == type.isNullable() && JetTypeChecker.INSTANCE.equalTypes(this,type);
    }
    @Override public int hashCode(){
      int result=constructor != null ? constructor.hashCode() : 0;
      result=31 * result + arguments.hashCode();
      result=31 * result + (isNullable() ? 1 : 0);
      return result;
    }
  }
;
}
