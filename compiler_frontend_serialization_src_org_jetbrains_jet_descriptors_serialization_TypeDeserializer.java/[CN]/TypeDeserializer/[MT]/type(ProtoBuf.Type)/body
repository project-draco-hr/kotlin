{
  return new JetType(){
    private TypeConstructor constructor;
    private final List<TypeProjection> arguments=typeArguments(proto.getArgumentsList());
    private JetScope memberScope;
    @NotNull @Override public TypeConstructor getConstructor(){
      if (constructor == null) {
        constructor=typeConstructor(proto);
      }
      return constructor;
    }
    @NotNull @Override public List<TypeProjection> getArguments(){
      return arguments;
    }
    @Override public boolean isNullable(){
      return proto.getNullable();
    }
    @NotNull @Override public JetScope getMemberScope(){
      if (memberScope == null) {
        memberScope=getTypeMemberScope(getConstructor(),getArguments());
      }
      return memberScope;
    }
    @Override public List<AnnotationDescriptor> getAnnotations(){
      return Collections.emptyList();
    }
    @Override public String toString(){
      return TypeUtils.toString(this);
    }
  }
;
}
