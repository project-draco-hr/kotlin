{
  final List<PsiElement> memberSuspects=new ArrayList<PsiElement>();
  JetModifierList modifierList=declaration.getModifierList();
  if (modifierList != null)   memberSuspects.add(modifierList);
  if (declaration instanceof JetNamedDeclaration) {
    PsiElement nameIdentifier=((JetNamedDeclaration)declaration).getNameIdentifier();
    if (nameIdentifier != null)     memberSuspects.add(nameIdentifier);
  }
  declaration.accept(new JetVisitorVoid(){
    @Override public void visitAnonymousInitializer(    @NotNull JetClassInitializer initializer){
      PsiElement brace=initializer.getOpenBraceNode();
      if (brace != null) {
        memberSuspects.add(brace);
      }
    }
    @Override public void visitClassObject(    @NotNull JetClassObject classObject){
      PsiElement classKeyword=classObject.getClassKeywordNode();
      if (classKeyword != null)       memberSuspects.add(classKeyword);
    }
    @Override public void visitNamedFunction(    @NotNull JetNamedFunction function){
      PsiElement equalsToken=function.getEqualsToken();
      if (equalsToken != null)       memberSuspects.add(equalsToken);
      JetTypeParameterList typeParameterList=function.getTypeParameterList();
      if (typeParameterList != null)       memberSuspects.add(typeParameterList);
      JetTypeReference receiverTypeRef=function.getReceiverTypeReference();
      if (receiverTypeRef != null)       memberSuspects.add(receiverTypeRef);
      JetTypeReference returnTypeRef=function.getTypeReference();
      if (returnTypeRef != null)       memberSuspects.add(returnTypeRef);
    }
    @Override public void visitProperty(    @NotNull JetProperty property){
      PsiElement valOrVarNode=property.getValOrVarNode().getPsi();
      if (valOrVarNode != null)       memberSuspects.add(valOrVarNode);
      JetTypeParameterList typeParameterList=property.getTypeParameterList();
      if (typeParameterList != null)       memberSuspects.add(typeParameterList);
      JetTypeReference receiverTypeRef=property.getReceiverTypeReference();
      if (receiverTypeRef != null)       memberSuspects.add(receiverTypeRef);
      JetTypeReference returnTypeRef=property.getTypeReference();
      if (returnTypeRef != null)       memberSuspects.add(returnTypeRef);
    }
  }
);
  return memberSuspects;
}
