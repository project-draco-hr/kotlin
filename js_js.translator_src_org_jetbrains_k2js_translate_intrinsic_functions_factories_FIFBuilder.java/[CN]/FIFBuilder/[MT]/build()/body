{
  return new FunctionIntrinsicFactory(){
    @NotNull @Override public Pattern getPattern(){
      Collection<Pattern> patterns=patternToIntrinsic.keySet();
      return PatternBuilder.any(patterns.toArray(new Pattern[patterns.size()]));
    }
    @NotNull @Override public FunctionIntrinsic getIntrinsic(    @NotNull FunctionDescriptor descriptor){
      for (      Pattern pattern : patternToIntrinsic.keySet()) {
        if (pattern.apply(descriptor)) {
          return patternToIntrinsic.get(pattern);
        }
      }
      throw new IllegalStateException("Must have intrinsic for pattern.");
    }
  }
;
}
