{
  super.setUp();
  File libraryIoDir=createTempDir("libraries_");
  VirtualFile testDataDir=LocalFileSystem.getInstance().findFileByPath(TEST_DATA_PATH);
  assertNotNull(testDataDir);
  VfsUtilCore.visitChildrenRecursively(testDataDir,new VirtualFileVisitor(){
    @Override public boolean visitFile(    @NotNull VirtualFile file){
      file.getChildren();
      file.refresh(false,true);
      return true;
    }
  }
);
  librarySourceDir=LocalFileSystem.getInstance().findFileByPath(TEST_DATA_PATH + "/library");
  assertNotNull(librarySourceDir);
  KotlinCompiler.ExitCode compilerExec=new KotlinCompiler().exec(System.out,"-src",librarySourceDir.getPath(),"-output",libraryIoDir.getAbsolutePath());
  assertEquals(KotlinCompiler.ExitCode.OK,compilerExec);
  libraryDir=LocalFileSystem.getInstance().findFileByIoFile(libraryIoDir);
  assertNotNull(libraryDir);
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    @Override public void run(){
      ModifiableRootModel moduleModel=ModuleRootManager.getInstance(myModule).getModifiableModel();
      Library.ModifiableModel libraryModel=moduleModel.getModuleLibraryTable().getModifiableModel().createLibrary("myKotlinLib").getModifiableModel();
      libraryModel.addRoot(libraryDir,OrderRootType.CLASSES);
      if (isWithSources()) {
        libraryModel.addRoot(librarySourceDir,OrderRootType.SOURCES);
      }
      libraryModel.commit();
      moduleModel.commit();
    }
  }
);
}
