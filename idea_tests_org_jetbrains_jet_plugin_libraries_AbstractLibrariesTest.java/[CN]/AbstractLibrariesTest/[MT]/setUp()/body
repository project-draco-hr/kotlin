{
  super.setUp();
  final VirtualFile baseDir=getProject().getBaseDir();
  assertNotNull(baseDir);
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    @Override public void run(){
      try {
        libraryDir=baseDir.createChildDirectory(this,"lib");
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
    }
  }
);
  VirtualFile testDataDir=LocalFileSystem.getInstance().findFileByPath(TEST_DATA_PATH);
  assertNotNull(testDataDir);
  VfsUtilCore.visitChildrenRecursively(testDataDir,new VirtualFileVisitor(){
    @Override public boolean visitFile(    @NotNull VirtualFile file){
      file.getChildren();
      file.refresh(false,true);
      return true;
    }
  }
);
  librarySourceDir=LocalFileSystem.getInstance().findFileByPath(TEST_DATA_PATH + "/library");
  assertNotNull(librarySourceDir);
  ExitCode compilerExec=new K2JVMCompiler().exec(System.out,"-src",librarySourceDir.getPath(),"-output",libraryDir.getPath());
  assertEquals(ExitCode.OK,compilerExec);
  assertNotNull(libraryDir);
  ((NewVirtualFile)libraryDir).markDirtyRecursively();
  libraryDir.refresh(false,true);
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    @Override public void run(){
      ModifiableRootModel moduleModel=ModuleRootManager.getInstance(myModule).getModifiableModel();
      Library.ModifiableModel libraryModel=moduleModel.getModuleLibraryTable().getModifiableModel().createLibrary("myKotlinLib").getModifiableModel();
      libraryModel.addRoot(libraryDir,OrderRootType.CLASSES);
      if (isWithSources()) {
        libraryModel.addRoot(librarySourceDir,OrderRootType.SOURCES);
      }
      libraryModel.commit();
      moduleModel.commit();
    }
  }
);
}
