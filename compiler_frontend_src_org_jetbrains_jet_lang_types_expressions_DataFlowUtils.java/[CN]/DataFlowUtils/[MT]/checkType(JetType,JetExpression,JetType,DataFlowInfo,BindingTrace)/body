{
  JetExpression expression=JetPsiUtil.unwrapFromBlock(possiblyWrappedInBlockExpression);
  recordExpectedType(trace,expression,expectedType);
  if (expressionType == null || noExpectedType(expectedType) || JetTypeChecker.INSTANCE.isSubtypeOf(expressionType,expectedType)) {
    return expressionType;
  }
  if (expression instanceof JetConstantExpression) {
    Diagnostic diagnostic=new CompileTimeConstantResolver().checkConstantExpressionType((JetConstantExpression)expression,expectedType);
    if (diagnostic != null) {
      trace.report(diagnostic);
    }
    return expressionType;
  }
  DataFlowValue dataFlowValue=DataFlowValueFactory.INSTANCE.createDataFlowValue(expression,expressionType,trace.getBindingContext());
  for (  JetType possibleType : dataFlowInfo.getPossibleTypes(dataFlowValue)) {
    if (JetTypeChecker.INSTANCE.isSubtypeOf(possibleType,expectedType)) {
      if (dataFlowValue.isStableIdentifier()) {
        trace.record(AUTOCAST,expression,possibleType);
      }
 else {
        trace.report(AUTOCAST_IMPOSSIBLE.on(expression,possibleType,expression.getText()));
      }
      return possibleType;
    }
  }
  trace.report(TYPE_MISMATCH.on(expression,expectedType,expressionType));
  return expressionType;
}
