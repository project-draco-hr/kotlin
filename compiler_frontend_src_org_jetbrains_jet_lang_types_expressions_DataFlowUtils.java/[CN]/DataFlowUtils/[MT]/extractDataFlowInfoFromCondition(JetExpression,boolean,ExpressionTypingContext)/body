{
  if (condition == null)   return context.dataFlowInfo;
  final Ref<DataFlowInfo> result=new Ref<DataFlowInfo>(null);
  condition.accept(new JetVisitorVoid(){
    @Override public void visitIsExpression(    JetIsExpression expression){
      if (conditionValue && !expression.isNegated() || !conditionValue && expression.isNegated()) {
        result.set(context.trace.get(BindingContext.DATAFLOW_INFO_AFTER_CONDITION,expression));
      }
    }
    @Override public void visitBinaryExpression(    JetBinaryExpression expression){
      IElementType operationToken=expression.getOperationToken();
      if (OperatorConventions.BOOLEAN_OPERATIONS.containsKey(operationToken)) {
        DataFlowInfo dataFlowInfo=extractDataFlowInfoFromCondition(expression.getLeft(),conditionValue,context);
        JetExpression expressionRight=expression.getRight();
        if (expressionRight != null) {
          DataFlowInfo rightInfo=extractDataFlowInfoFromCondition(expressionRight,conditionValue,context);
          boolean and=operationToken == JetTokens.ANDAND;
          if (and == conditionValue) {
            dataFlowInfo=dataFlowInfo.and(rightInfo);
          }
 else {
            dataFlowInfo=dataFlowInfo.or(rightInfo);
          }
        }
        result.set(dataFlowInfo);
      }
 else {
        JetExpression left=expression.getLeft();
        if (left == null)         return;
        JetExpression right=expression.getRight();
        if (right == null)         return;
        JetType lhsType=context.trace.getBindingContext().get(BindingContext.EXPRESSION_TYPE,left);
        if (lhsType == null)         return;
        JetType rhsType=context.trace.getBindingContext().get(BindingContext.EXPRESSION_TYPE,right);
        if (rhsType == null)         return;
        BindingContext bindingContext=context.trace.getBindingContext();
        DataFlowValue leftValue=DataFlowValueFactory.INSTANCE.createDataFlowValue(left,lhsType,bindingContext);
        DataFlowValue rightValue=DataFlowValueFactory.INSTANCE.createDataFlowValue(right,rhsType,bindingContext);
        Boolean equals=null;
        if (operationToken == JetTokens.EQEQ || operationToken == JetTokens.EQEQEQ) {
          equals=true;
        }
 else         if (operationToken == JetTokens.EXCLEQ || operationToken == JetTokens.EXCLEQEQEQ) {
          equals=false;
        }
        if (equals != null) {
          if (equals == conditionValue) {
            result.set(context.dataFlowInfo.equate(leftValue,rightValue));
          }
 else {
            result.set(context.dataFlowInfo.disequate(leftValue,rightValue));
          }
        }
      }
    }
    @Override public void visitUnaryExpression(    JetUnaryExpression expression){
      IElementType operationTokenType=expression.getOperationReference().getReferencedNameElementType();
      if (operationTokenType == JetTokens.EXCL) {
        JetExpression baseExpression=expression.getBaseExpression();
        if (baseExpression != null) {
          result.set(extractDataFlowInfoFromCondition(baseExpression,!conditionValue,context));
        }
      }
    }
    @Override public void visitParenthesizedExpression(    JetParenthesizedExpression expression){
      JetExpression body=expression.getExpression();
      if (body != null) {
        body.accept(this);
      }
    }
  }
);
  if (result.get() == null) {
    return context.dataFlowInfo;
  }
  return context.dataFlowInfo.and(result.get());
}
