{
  if (arguments.size() == 1) {
    final Type leftType=receiver.type;
    final Type rightType=codegen.expressionType(arguments.get(0));
    receiver.put(Type.INT_TYPE,v);
    codegen.gen(arguments.get(0),rightType);
    v.invokestatic("jet/runtime/Ranges","rangeTo","(" + receiver.type.getDescriptor() + leftType.getDescriptor()+ ")"+ expectedType.getDescriptor());
    return StackValue.onStack(expectedType);
  }
 else {
    JetBinaryExpression expression=(JetBinaryExpression)element;
    final Type leftType=codegen.expressionType(expression.getLeft());
    final Type rightType=codegen.expressionType(expression.getRight());
    codegen.gen(expression.getLeft(),leftType);
    codegen.gen(expression.getRight(),rightType);
    v.invokestatic("jet/runtime/Ranges","rangeTo","(" + leftType.getDescriptor() + rightType.getDescriptor()+ ")"+ expectedType.getDescriptor());
    return StackValue.onStack(expectedType);
  }
}
