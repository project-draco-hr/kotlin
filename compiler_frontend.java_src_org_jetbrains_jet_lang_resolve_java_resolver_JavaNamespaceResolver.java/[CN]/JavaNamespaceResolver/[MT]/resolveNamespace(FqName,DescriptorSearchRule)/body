{
  NamespaceDescriptor kotlinNamespaceDescriptor=javaSemanticServices.getKotlinNamespaceDescriptor(qualifiedName);
  if (kotlinNamespaceDescriptor != null) {
    return searchRule.processFoundInKotlin(kotlinNamespaceDescriptor);
  }
  if (unresolvedCache.contains(qualifiedName)) {
    return null;
  }
  JetScope scope=resolvedNamespaceCache.get(qualifiedName);
  if (scope != null) {
    return (NamespaceDescriptor)scope.getContainingDeclaration();
  }
  NamespaceDescriptorParent parentNs=resolveParentNamespace(qualifiedName);
  if (parentNs == null) {
    return null;
  }
  JavaNamespaceDescriptor javaNamespaceDescriptor=new JavaNamespaceDescriptor(parentNs,Collections.<AnnotationDescriptor>emptyList(),qualifiedName);
  JetScope newScope=createNamespaceScope(qualifiedName,javaNamespaceDescriptor);
  if (newScope == null) {
    return null;
  }
  if (newScope instanceof JavaBaseScope) {
    trace.record(BindingContext.NAMESPACE,((JavaBaseScope)newScope).getPsiElement(),javaNamespaceDescriptor);
  }
  javaNamespaceDescriptor.setMemberScope(newScope);
  return javaNamespaceDescriptor;
}
