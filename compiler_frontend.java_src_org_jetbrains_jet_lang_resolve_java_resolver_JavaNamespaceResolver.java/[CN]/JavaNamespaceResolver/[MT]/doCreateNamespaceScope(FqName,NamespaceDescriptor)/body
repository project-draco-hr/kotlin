{
  PsiPackage psiPackage=psiClassFinder.findPsiPackage(fqName);
  if (psiPackage != null) {
    PsiClass psiClass=getPsiClassForJavaPackageScope(fqName);
    trace.record(JavaBindingContext.JAVA_NAMESPACE_KIND,namespaceDescriptor,JavaNamespaceKind.PROPER);
    if (psiClass != null) {
      boolean compiledKotlinClass=isCompiledKotlinClass(psiClass);
      if (isOldKotlinPackageClass(psiClass) && !compiledKotlinClass) {
        AbiVersionUtil.checkAbiVersion(psiClass,INVALID_VERSION,trace);
      }
      if (compiledKotlinClass) {
        JetScope kotlinPackageScope=deserializedDescriptorResolver.createKotlinPackageScope(psiClass,namespaceDescriptor);
        if (kotlinPackageScope != null)         return kotlinPackageScope;
      }
    }
    return new JavaPackageScopeWithoutMembers(namespaceDescriptor,javaSemanticServices.getPsiDeclarationProviderFactory().createDeclarationProviderForNamespaceWithoutMembers(psiPackage),fqName,javaSemanticServices);
  }
  PsiClass psiClass=psiClassFinder.findPsiClass(fqName,PsiClassFinder.RuntimeClassesHandleMode.IGNORE);
  if (psiClass == null) {
    return null;
  }
  if (DescriptorResolverUtils.isKotlinClass(psiClass)) {
    return null;
  }
  if (!hasStaticMembers(psiClass)) {
    return null;
  }
  trace.record(JavaBindingContext.JAVA_NAMESPACE_KIND,namespaceDescriptor,JavaNamespaceKind.CLASS_STATICS);
  return new JavaClassStaticMembersScope(namespaceDescriptor,javaSemanticServices.getPsiDeclarationProviderFactory().createDeclarationProviderForClassStaticMembers(psiClass),fqName,javaSemanticServices);
}
