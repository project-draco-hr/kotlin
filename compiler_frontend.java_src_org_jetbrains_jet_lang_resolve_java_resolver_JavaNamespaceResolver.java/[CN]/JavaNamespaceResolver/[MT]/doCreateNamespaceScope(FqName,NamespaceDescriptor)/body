{
  PsiPackage psiPackage=psiClassFinder.findPsiPackage(fqName);
  if (psiPackage != null) {
    PsiClass psiClass=getPsiClassForJavaPackageScope(fqName);
    trace.record(JavaBindingContext.JAVA_NAMESPACE_KIND,namespaceDescriptor,JavaNamespaceKind.PROPER);
    if (psiClass != null) {
      boolean isCompiledKotlinPackageClass=DescriptorResolverUtils.isCompiledKotlinPackageClass(psiClass);
      if (isOldKotlinPackageClass(psiClass) && !isCompiledKotlinPackageClass) {
        AbiVersionUtil.reportIncompatibleAbiVersion(psiClass,INVALID_VERSION,trace);
      }
      if (isCompiledKotlinPackageClass) {
        VirtualFile file=psiClass.getContainingFile().getVirtualFile();
        if (file != null) {
          JetScope kotlinPackageScope=deserializedDescriptorResolver.createKotlinPackageScope(namespaceDescriptor,file,DescriptorResolverUtils.createPsiBasedErrorReporter(psiClass,trace));
          if (kotlinPackageScope != null) {
            return kotlinPackageScope;
          }
        }
      }
    }
    PackagePsiDeclarationProvider provider=new PackagePsiDeclarationProviderImpl(psiPackage,psiClassFinder);
    return new JavaPackageScope(namespaceDescriptor,provider,fqName,javaDescriptorResolver,psiClassFinder);
  }
  PsiClass psiClass=psiClassFinder.findPsiClass(fqName,PsiClassFinder.RuntimeClassesHandleMode.IGNORE);
  if (psiClass == null) {
    return null;
  }
  if (DescriptorResolverUtils.isCompiledKotlinClassOrPackageClass(psiClass)) {
    return null;
  }
  if (!hasStaticMembers(psiClass)) {
    return null;
  }
  trace.record(JavaBindingContext.JAVA_NAMESPACE_KIND,namespaceDescriptor,JavaNamespaceKind.CLASS_STATICS);
  return new JavaClassStaticMembersScope(namespaceDescriptor,new ClassPsiDeclarationProviderImpl(psiClass,true,psiClassFinder),fqName,javaDescriptorResolver);
}
