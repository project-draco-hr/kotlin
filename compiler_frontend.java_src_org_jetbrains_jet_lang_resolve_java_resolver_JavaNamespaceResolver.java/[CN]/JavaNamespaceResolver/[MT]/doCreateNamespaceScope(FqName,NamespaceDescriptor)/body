{
  PsiPackage psiPackage=psiClassFinder.findPsiPackage(fqName);
  if (psiPackage != null) {
    PsiClass psiClass=getPsiClassForJavaPackageScope(fqName);
    trace.record(JavaBindingContext.JAVA_NAMESPACE_KIND,namespaceDescriptor,JavaNamespaceKind.PROPER);
    if (psiClass == null) {
      return new JavaPackageScopeWithoutMembers(namespaceDescriptor,javaSemanticServices.getPsiDeclarationProviderFactory().createDeclarationProviderForNamespaceWithoutMembers(psiPackage),fqName,javaSemanticServices);
    }
    AbiVersionUtil.checkAbiVersion(psiClass,JetPackageClassAnnotation.get(psiClass),trace);
    return new JavaScopeForKotlinNamespace(namespaceDescriptor,javaSemanticServices.getPsiDeclarationProviderFactory().createDeclarationForKotlinNamespace(psiPackage,psiClass),fqName,javaSemanticServices);
  }
  PsiClass psiClass=psiClassFinder.findPsiClass(fqName,PsiClassFinder.RuntimeClassesHandleMode.IGNORE);
  if (psiClass == null) {
    return null;
  }
  if (psiClass.isEnum()) {
    return null;
  }
  trace.record(JavaBindingContext.JAVA_NAMESPACE_KIND,namespaceDescriptor,JavaNamespaceKind.CLASS_STATICS);
  return new JavaClassStaticMembersScope(namespaceDescriptor,javaSemanticServices.getPsiDeclarationProviderFactory().createDeclarationProviderForClassStaticMembers(psiClass),fqName,javaSemanticServices);
}
