{
  jetCoreEnvironment=JetTestUtils.createEnvironmentWithMockJdkAndIdeaAnnotations(myTestRootDisposable,ConfigurationKind.JDK_ONLY);
  String text=FileUtil.loadFile(testFile);
  LightVirtualFile virtualFile=new LightVirtualFile(testFile.getName(),JetLanguage.INSTANCE,text);
  virtualFile.setCharset(CharsetToolkit.UTF8_CHARSET);
  JetFile psiFile=(JetFile)((PsiFileFactoryImpl)PsiFileFactory.getInstance(jetCoreEnvironment.getProject())).trySetupPsiForFile(virtualFile,JetLanguage.INSTANCE,true,false);
  GenerationState state=GenerationUtils.compileFileGetGenerationStateForTest(psiFile);
  ClassFileFactory classFileFactory=state.getFactory();
  CompileEnvironmentUtil.writeToOutputDirectory(classFileFactory,tmpdir);
  NamespaceDescriptor namespaceFromSource=state.getBindingContext().get(BindingContext.FILE_TO_NAMESPACE,psiFile);
  Assert.assertEquals("test",namespaceFromSource.getName().getName());
  Disposer.dispose(myTestRootDisposable);
  jetCoreEnvironment=new JetCoreEnvironment(myTestRootDisposable,CompileCompilerDependenciesTest.compilerConfigurationForTests(ConfigurationKind.JDK_ONLY,TestJdkKind.MOCK_JDK,JetTestUtils.getAnnotationsJar(),tmpdir,ForTestCompileRuntime.runtimeJarForTests()));
  InjectorForJavaSemanticServices injector=new InjectorForJavaSemanticServices(BuiltinsScopeExtensionMode.ALL,jetCoreEnvironment.getProject());
  JavaDescriptorResolver javaDescriptorResolver=injector.getJavaDescriptorResolver();
  NamespaceDescriptor namespaceFromClass=javaDescriptorResolver.resolveNamespace(FqName.topLevel(Name.identifier("test")),DescriptorSearchRule.ERROR_IF_FOUND_IN_KOTLIN);
  NamespaceComparator.compareNamespaces(namespaceFromSource,namespaceFromClass,false,txtFile);
}
