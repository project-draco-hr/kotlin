{
  PsiElement element1=getElementAtOffsetIgnoreWhitespaceBefore(file,startOffset);
  PsiElement element2=getElementAtOffsetIgnoreWhitespaceAfter(file,endOffset);
  if (element1 == null || element2 == null)   return PsiElement.EMPTY_ARRAY;
  startOffset=element1.getTextRange().getStartOffset();
  endOffset=element2.getTextRange().getEndOffset();
  PsiElement parent=PsiTreeUtil.findCommonParent(element1,element2);
  if (parent == null)   return PsiElement.EMPTY_ARRAY;
  while (true) {
    if (parent instanceof JetBlockExpression)     break;
    if (parent == null || parent instanceof JetFile)     return PsiElement.EMPTY_ARRAY;
    parent=parent.getParent();
  }
  if (!parent.equals(element1)) {
    while (!parent.equals(element1.getParent())) {
      element1=element1.getParent();
    }
  }
  if (startOffset != element1.getTextRange().getStartOffset())   return PsiElement.EMPTY_ARRAY;
  if (!parent.equals(element2)) {
    while (!parent.equals(element2.getParent())) {
      element2=element2.getParent();
    }
  }
  if (endOffset != element2.getTextRange().getEndOffset())   return PsiElement.EMPTY_ARRAY;
  ArrayList<PsiElement> array=new ArrayList<PsiElement>();
  PsiElement stopElement=element2.getNextSibling();
  for (PsiElement currentElement=element1; currentElement != stopElement; currentElement=currentElement.getNextSibling()) {
    if (!(currentElement instanceof PsiWhiteSpace)) {
      array.add(currentElement);
    }
  }
  for (  PsiElement element : array) {
    if (!(element instanceof JetExpression || element instanceof PsiWhiteSpace || element instanceof PsiComment)) {
      return PsiElement.EMPTY_ARRAY;
    }
  }
  return PsiUtilCore.toPsiElementArray(array);
}
