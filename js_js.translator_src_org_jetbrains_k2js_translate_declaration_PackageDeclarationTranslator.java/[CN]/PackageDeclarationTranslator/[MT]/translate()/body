{
  Map<FqName,DefineInvocation> packageFqNameToDefineInvocation=new THashMap<FqName,DefineInvocation>();
  for (  JetFile file : files) {
    PackageFragmentDescriptor packageFragment=context().bindingContext().get(BindingContext.FILE_TO_PACKAGE_FRAGMENT,file);
    PackageTranslator translator=packageFragmentToTranslator.get(packageFragment);
    if (translator == null) {
      createRootPackageDefineInvocationIfNeeded(packageFqNameToDefineInvocation);
      translator=new PackageTranslator(packageFragment,packageFqNameToDefineInvocation,context());
      packageFragmentToTranslator.put(packageFragment,translator);
    }
    translator.translate(file);
  }
  for (  PackageTranslator translator : packageFragmentToTranslator.values()) {
    translator.add(packageFqNameToDefineInvocation);
  }
  JsVars vars=new JsVars(true);
  vars.addIfHasInitializer(getRootPackageDeclaration(packageFqNameToDefineInvocation.get(FqName.ROOT)));
  return Collections.<JsStatement>singletonList(vars);
}
