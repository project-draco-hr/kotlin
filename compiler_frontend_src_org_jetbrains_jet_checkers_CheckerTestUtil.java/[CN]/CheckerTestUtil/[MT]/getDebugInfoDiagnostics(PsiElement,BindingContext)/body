{
  final List<Diagnostic> debugAnnotations=Lists.newArrayList();
  DebugInfoUtil.markDebugAnnotations(root,bindingContext,new DebugInfoUtil.DebugInfoReporter(){
    @Override public void reportElementWithErrorType(    @NotNull JetReferenceExpression expression){
      newDiagnostic(expression,DebugInfoDiagnosticFactory.ELEMENT_WITH_ERROR_TYPE);
    }
    @Override public void reportMissingUnresolved(    @NotNull JetReferenceExpression expression){
      newDiagnostic(expression,DebugInfoDiagnosticFactory.MISSING_UNRESOLVED);
    }
    @Override public void reportUnresolvedWithTarget(    @NotNull JetReferenceExpression expression,    @NotNull String target){
      newDiagnostic(expression,DebugInfoDiagnosticFactory.UNRESOLVED_WITH_TARGET);
    }
    private void newDiagnostic(    JetReferenceExpression expression,    DebugInfoDiagnosticFactory factory){
      debugAnnotations.add(new DebugInfoDiagnostic(expression,factory));
    }
  }
);
  for (  JetExpression expression : bindingContext.getSliceContents(BindingContext.SMARTCAST).keySet()) {
    if (PsiTreeUtil.isAncestor(root,expression,false)) {
      debugAnnotations.add(new DebugInfoDiagnostic(expression,DebugInfoDiagnosticFactory.SMARTCAST));
    }
  }
  return debugAnnotations;
}
