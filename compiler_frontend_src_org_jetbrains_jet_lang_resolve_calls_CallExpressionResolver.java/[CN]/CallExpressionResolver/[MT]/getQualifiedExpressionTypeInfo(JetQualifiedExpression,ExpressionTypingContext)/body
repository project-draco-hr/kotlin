{
  JetExpression selectorExpression=expression.getSelectorExpression();
  JetExpression receiverExpression=expression.getReceiverExpression();
  ResolutionContext contextForReceiver=context.replaceExpectedType(NO_EXPECTED_TYPE).replaceContextDependency(INDEPENDENT);
  JetTypeInfo receiverTypeInfo=expressionTypingServices.getTypeInfo(receiverExpression,contextForReceiver);
  JetType receiverType=receiverTypeInfo.getType();
  QualifierReceiver qualifierReceiver=(QualifierReceiver)context.trace.get(BindingContext.QUALIFIER,receiverExpression);
  if (receiverType == null)   receiverType=ErrorUtils.createErrorType("Type for " + expression.getText());
  context=context.replaceDataFlowInfo(receiverTypeInfo.getDataFlowInfo());
  ReceiverValue receiver=qualifierReceiver == null ? new ExpressionReceiver(receiverExpression,receiverType) : qualifierReceiver;
  JetTypeInfo selectorReturnTypeInfo=getSelectorReturnTypeInfo(receiver,expression.getOperationTokenNode(),selectorExpression,context);
  JetType selectorReturnType=selectorReturnTypeInfo.getType();
  resolveDeferredReceiverInQualifiedExpression(qualifierReceiver,expression,context);
  checkNestedClassAccess(expression,context);
  if (expression.getOperationSign() == JetTokens.SAFE_ACCESS) {
    if (selectorReturnType != null && !KotlinBuiltIns.getInstance().isUnit(selectorReturnType)) {
      if (receiverType.isNullable()) {
        selectorReturnType=TypeUtils.makeNullable(selectorReturnType);
      }
    }
  }
  if (selectorReturnType != null) {
    context.trace.record(BindingContext.EXPRESSION_TYPE,selectorExpression,selectorReturnType);
  }
  CompileTimeConstant<?> value=ConstantExpressionEvaluator.OBJECT$.evaluate(expression,context.trace,context.expectedType);
  if (value instanceof IntegerValueConstant && ((IntegerValueConstant)value).isPure()) {
    return BasicExpressionTypingVisitor.createCompileTimeConstantTypeInfo(value,expression,context);
  }
  JetTypeInfo typeInfo=JetTypeInfo.create(selectorReturnType,selectorReturnTypeInfo.getDataFlowInfo());
  if (context.contextDependency == INDEPENDENT) {
    DataFlowUtils.checkType(typeInfo,expression,context);
  }
  return typeInfo;
}
