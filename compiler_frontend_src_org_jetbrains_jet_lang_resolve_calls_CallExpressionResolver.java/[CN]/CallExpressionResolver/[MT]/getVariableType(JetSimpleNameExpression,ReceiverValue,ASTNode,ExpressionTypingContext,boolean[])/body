{
  TemporaryTraceAndCache temporaryForVariable=TemporaryTraceAndCache.create(context,"trace to resolve as local variable or property",nameExpression);
  CallResolver callResolver=expressionTypingServices.getCallResolver();
  Call call=CallMaker.makePropertyCall(receiver,callOperationNode,nameExpression);
  BasicCallResolutionContext contextForVariable=BasicCallResolutionContext.create(context.replaceTraceAndCache(temporaryForVariable),call,CheckValueArgumentsMode.ENABLED);
  OverloadResolutionResults<VariableDescriptor> resolutionResult=callResolver.resolveSimpleProperty(contextForVariable);
  boolean isLHSOfDot=JetPsiUtil.isLHSOfDot(nameExpression);
  if (!resolutionResult.isNothing()) {
    boolean isQualifier=isLHSOfDot && resolutionResult.isSingleResult() && resolutionResult.getResultingDescriptor() instanceof FakeCallableDescriptorForObject;
    if (!isQualifier) {
      result[0]=true;
      temporaryForVariable.commit();
      checkSuper(receiver,resolutionResult,context.trace,nameExpression);
      return resolutionResult.isSingleResult() ? resolutionResult.getResultingDescriptor().getReturnType() : null;
    }
  }
  QualifierReceiver qualifierReceiver=createQualifierReceiver(nameExpression,receiver,context);
  if (qualifierReceiver != null) {
    result[0]=true;
    if (!isLHSOfDot) {
      resolveAsStandaloneExpression(qualifierReceiver,context);
    }
    return null;
  }
  temporaryForVariable.commit();
  result[0]=!resolutionResult.isNothing();
  return resolutionResult.isSingleResult() ? resolutionResult.getResultingDescriptor().getReturnType() : null;
}
