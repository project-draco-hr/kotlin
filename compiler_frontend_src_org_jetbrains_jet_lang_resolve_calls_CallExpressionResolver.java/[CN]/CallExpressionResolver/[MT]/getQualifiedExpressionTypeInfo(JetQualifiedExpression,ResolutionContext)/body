{
  JetExpression selectorExpression=expression.getSelectorExpression();
  JetExpression receiverExpression=expression.getReceiverExpression();
  ResolutionContext contextForReceiver=context.replaceExpectedType(NO_EXPECTED_TYPE).replaceExpressionPosition(ExpressionPosition.LHS_OF_DOT).replaceContextDependency(ContextDependency.INDEPENDENT);
  JetTypeInfo receiverTypeInfo=expressionTypingServices.getTypeInfo(receiverExpression,contextForReceiver);
  JetType receiverType=receiverTypeInfo.getType();
  if (selectorExpression == null)   return JetTypeInfo.create(null,context.dataFlowInfo);
  if (receiverType == null)   receiverType=ErrorUtils.createErrorType("Type for " + expression.getText());
  context=context.replaceDataFlowInfo(receiverTypeInfo.getDataFlowInfo());
  if (selectorExpression instanceof JetSimpleNameExpression) {
    ConstantUtils.propagateConstantValues(expression,context.trace,(JetSimpleNameExpression)selectorExpression);
  }
  JetTypeInfo selectorReturnTypeInfo=getSelectorReturnTypeInfo(new ExpressionReceiver(receiverExpression,receiverType),expression.getOperationTokenNode(),selectorExpression,context);
  JetType selectorReturnType=selectorReturnTypeInfo.getType();
  if (!(receiverType instanceof NamespaceType) && expression.getOperationSign() == JetTokens.SAFE_ACCESS) {
    if (selectorReturnType != null && !selectorReturnType.isNullable() && !KotlinBuiltIns.getInstance().isUnit(selectorReturnType)) {
      if (receiverType.isNullable()) {
        selectorReturnType=TypeUtils.makeNullable(selectorReturnType);
      }
    }
  }
  if (selectorReturnType != null) {
    context.trace.record(BindingContext.EXPRESSION_TYPE,selectorExpression,selectorReturnType);
  }
  JetTypeInfo typeInfo=JetTypeInfo.create(selectorReturnType,selectorReturnTypeInfo.getDataFlowInfo());
  if (context.contextDependency == ContextDependency.INDEPENDENT) {
    DataFlowUtils.checkType(typeInfo.getType(),expression,context,typeInfo.getDataFlowInfo());
  }
  return typeInfo;
}
