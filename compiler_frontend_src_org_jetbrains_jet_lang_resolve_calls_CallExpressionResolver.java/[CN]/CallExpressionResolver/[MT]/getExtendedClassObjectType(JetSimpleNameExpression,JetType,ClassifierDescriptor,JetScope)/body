{
  if (!isLHSOfDot(expression) || !(classifier instanceof ClassDescriptor)) {
    return classObjectType;
  }
  ClassDescriptor classDescriptor=(ClassDescriptor)classifier;
  if (classDescriptor.getKind() == ClassKind.ENUM_ENTRY) {
    return classObjectType;
  }
  List<JetScope> scopes=new ArrayList<JetScope>(3);
  scopes.add(classObjectType.getMemberScope());
  scopes.add(getStaticNestedClassesScope(classDescriptor));
  Name referencedName=expression.getReferencedNameAsName();
  PackageViewDescriptor packageView=receiverScope.getPackage(referencedName);
  if (packageView != null) {
    scopes.add(packageView.getMemberScope());
  }
  JetScope scope=new ChainedScope(classifier,"Member scope for extended class object type " + classifier,scopes.toArray(new JetScope[scopes.size()]));
  return new PackageType(referencedName,scope,new ExpressionReceiver(expression,classObjectType));
}
