{
  boolean[] result=new boolean[1];
  Call call=CallMaker.makeCall(receiver,callOperationNode,callExpression);
  TemporaryBindingTrace traceForFunction=TemporaryBindingTrace.create(context.trace,"trace to resolve as function call",callExpression);
  ResolvedCallWithTrace<FunctionDescriptor> resolvedCall=getResolvedCallForFunction(call,callExpression,receiver,context.replaceBindingTrace(traceForFunction),resolveMode,resolutionResultsCache,result);
  if (result[0]) {
    FunctionDescriptor functionDescriptor=resolvedCall != null ? resolvedCall.getResultingDescriptor() : null;
    traceForFunction.commit();
    if (callExpression.getValueArgumentList() == null && callExpression.getFunctionLiteralArguments().isEmpty()) {
      boolean hasValueParameters=functionDescriptor == null || functionDescriptor.getValueParameters().size() > 0;
      context.trace.report(FUNCTION_CALL_EXPECTED.on(callExpression,callExpression,hasValueParameters));
    }
    if (functionDescriptor == null) {
      return TypeInfoForCall.create(null,context.dataFlowInfo);
    }
    JetType type=functionDescriptor.getReturnType();
    return TypeInfoForCall.create(type,resolvedCall.getDataFlowInfo(),resolvedCall,call,context,resolveMode,resolutionResultsCache);
  }
  JetExpression calleeExpression=callExpression.getCalleeExpression();
  if (calleeExpression instanceof JetSimpleNameExpression && callExpression.getTypeArgumentList() == null) {
    TemporaryBindingTrace traceForVariable=TemporaryBindingTrace.create(context.trace,"trace to resolve as variable with 'invoke' call",callExpression);
    JetType type=getVariableType((JetSimpleNameExpression)calleeExpression,receiver,callOperationNode,context.replaceBindingTrace(traceForVariable),result);
    if (result[0]) {
      traceForVariable.commit();
      context.trace.report(FUNCTION_EXPECTED.on((JetReferenceExpression)calleeExpression,calleeExpression,type != null ? type : ErrorUtils.createErrorType("")));
      return TypeInfoForCall.create(null,context.dataFlowInfo);
    }
  }
  traceForFunction.commit();
  return TypeInfoForCall.create(null,context.dataFlowInfo);
}
