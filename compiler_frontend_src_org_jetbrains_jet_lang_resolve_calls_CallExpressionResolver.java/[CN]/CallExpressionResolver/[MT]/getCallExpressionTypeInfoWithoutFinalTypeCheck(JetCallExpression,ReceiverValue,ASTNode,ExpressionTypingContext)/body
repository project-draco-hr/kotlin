{
  boolean[] result=new boolean[1];
  Call call=CallMaker.makeCall(receiver,callOperationNode,callExpression);
  TemporaryTraceAndCache temporaryForFunction=TemporaryTraceAndCache.create(context,"trace to resolve as function call",callExpression);
  ResolvedCall<FunctionDescriptor> resolvedCall=getResolvedCallForFunction(call,callExpression,context.replaceTraceAndCache(temporaryForFunction),CheckValueArgumentsMode.ENABLED,result);
  if (result[0]) {
    FunctionDescriptor functionDescriptor=resolvedCall != null ? resolvedCall.getResultingDescriptor() : null;
    temporaryForFunction.commit();
    if (callExpression.getValueArgumentList() == null && callExpression.getFunctionLiteralArguments().isEmpty()) {
      boolean hasValueParameters=functionDescriptor == null || functionDescriptor.getValueParameters().size() > 0;
      context.trace.report(FUNCTION_CALL_EXPECTED.on(callExpression,callExpression,hasValueParameters));
    }
    if (functionDescriptor == null) {
      return JetTypeInfo.create(null,context.dataFlowInfo);
    }
    if (functionDescriptor instanceof ConstructorDescriptor && DescriptorUtils.isAnnotationClass(functionDescriptor.getContainingDeclaration())) {
      if (!canInstantiateAnnotationClass(callExpression)) {
        context.trace.report(ANNOTATION_CLASS_CONSTRUCTOR_CALL.on(callExpression));
      }
    }
    JetType type=functionDescriptor.getReturnType();
    return JetTypeInfo.create(type,resolvedCall.getDataFlowInfoForArguments().getResultInfo());
  }
  JetExpression calleeExpression=callExpression.getCalleeExpression();
  if (calleeExpression instanceof JetSimpleNameExpression && callExpression.getTypeArgumentList() == null) {
    TemporaryTraceAndCache temporaryForVariable=TemporaryTraceAndCache.create(context,"trace to resolve as variable with 'invoke' call",callExpression);
    JetType type=getVariableType((JetSimpleNameExpression)calleeExpression,receiver,callOperationNode,context.replaceTraceAndCache(temporaryForVariable),result);
    if (result[0]) {
      temporaryForVariable.commit();
      context.trace.report(FUNCTION_EXPECTED.on((JetReferenceExpression)calleeExpression,calleeExpression,type != null ? type : ErrorUtils.createErrorType("")));
      return JetTypeInfo.create(null,context.dataFlowInfo);
    }
  }
  temporaryForFunction.commit();
  return JetTypeInfo.create(null,context.dataFlowInfo);
}
