{
  Name referencedName=expression.getReferencedNameAsName();
  final ClassifierDescriptor classifier=context.scope.getClassifier(referencedName);
  if (classifier != null) {
    JetType classObjectType=classifier.getClassObjectType();
    if (classObjectType != null) {
      context.trace.record(REFERENCE_TARGET,expression,classifier);
      JetType result=getExtendedClassObjectType(expression,classObjectType,classifier,context);
      checkClassObjectVisibility(classifier,expression,context);
      return DataFlowUtils.checkType(result,expression,context);
    }
  }
  JetType[] result=new JetType[1];
  TemporaryBindingTrace temporaryTrace=TemporaryBindingTrace.create(context.trace,"trace for namespace/class object lookup of name",referencedName);
  if (furtherNameLookup(expression,result,context.replaceBindingTrace(temporaryTrace))) {
    temporaryTrace.commit();
    return DataFlowUtils.checkType(result[0],expression,context);
  }
  if (classifier != null) {
    if (classifier instanceof TypeParameterDescriptor) {
      if (isLHSOfDot(expression)) {
        context.trace.report(TYPE_PARAMETER_ON_LHS_OF_DOT.on(expression,(TypeParameterDescriptor)classifier));
      }
 else {
        context.trace.report(TYPE_PARAMETER_IS_NOT_AN_EXPRESSION.on(expression,(TypeParameterDescriptor)classifier));
      }
    }
 else     if (!isLHSOfDot(expression)) {
      context.trace.report(NO_CLASS_OBJECT.on(expression,classifier));
    }
    context.trace.record(REFERENCE_TARGET,expression,classifier);
    JetScope scopeForStaticMembersResolution=classifier instanceof ClassDescriptor ? getStaticNestedClassesScope((ClassDescriptor)classifier) : new JetScopeImpl(){
      @NotNull @Override public DeclarationDescriptor getContainingDeclaration(){
        return classifier;
      }
      @Override public String toString(){
        return "Scope for the type parameter on the left hand side of dot";
      }
    }
;
    return new NamespaceType(referencedName,scopeForStaticMembersResolution,NO_RECEIVER);
  }
  temporaryTrace.commit();
  return result[0];
}
