{
  ClassifierDescriptor descriptor=exprType.getConstructor().getDeclarationDescriptor();
  boolean isAnonymous=descriptor != null && DescriptorUtils.isAnonymousObject(descriptor);
  Set<JetType> allSupertypes=TypeUtils.getAllSupertypes(exprType);
  List<JetType> types=isAnonymous ? new ArrayList<JetType>() : Lists.newArrayList(exprType);
  types.addAll(allSupertypes);
  return new JetTypeLookupExpression<JetType>(types,types.iterator().next(),JetBundle.message("specify.type.explicitly.add.action.name")){
    @Override protected String getLookupString(    JetType element){
      return IdeDescriptorRenderers.SOURCE_CODE_SHORT_NAMES_IN_TYPES.renderType(element);
    }
    @Override protected String getResult(    JetType element){
      return IdeDescriptorRenderers.SOURCE_CODE.renderType(element);
    }
  }
;
}
