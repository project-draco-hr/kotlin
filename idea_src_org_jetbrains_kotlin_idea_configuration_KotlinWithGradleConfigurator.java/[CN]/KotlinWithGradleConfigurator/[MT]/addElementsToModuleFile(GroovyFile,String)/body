{
  boolean wasModified=false;
  if (!containsDirective(file.getText(),getApplyPluginDirective())) {
    GrExpression apply=GroovyPsiElementFactory.getInstance(file.getProject()).createExpressionFromText(getApplyPluginDirective());
    GrApplicationStatement applyStatement=getApplyStatement(file);
    if (applyStatement != null) {
      file.addAfter(apply,applyStatement);
      wasModified=true;
    }
 else {
      GrClosableBlock buildScript=getBlockByName(file,"buildscript");
      if (buildScript != null) {
        file.addAfter(apply,buildScript.getParent());
        wasModified=true;
      }
 else {
        GrStatement[] statements=file.getStatements();
        if (statements.length > 0) {
          file.addAfter(apply,statements[statements.length - 1]);
        }
 else {
          file.addAfter(apply,file.getFirstChild());
        }
        wasModified=true;
      }
    }
  }
  GrClosableBlock repositoriesBlock=getRepositoriesBlock(file);
  if (ConfigureKotlinInProjectUtilsKt.isSnapshot(version)) {
    wasModified|=addLastExpressionInBlockIfNeeded(SNAPSHOT_REPOSITORY,repositoriesBlock);
  }
 else   if (ConfigureKotlinInProjectUtilsKt.isEap(version)) {
    wasModified|=addLastExpressionInBlockIfNeeded(EAP_REPOSITORY,repositoriesBlock);
  }
 else   if (!isRepositoryConfigured(repositoriesBlock)) {
    wasModified|=addLastExpressionInBlockIfNeeded(MAVEN_CENTRAL,repositoriesBlock);
  }
  GrClosableBlock dependenciesBlock=getDependenciesBlock(file);
  wasModified|=addExpressionInBlockIfNeeded(LIBRARY,dependenciesBlock,false);
  wasModified|=addSourceSetsBlock(file);
  return wasModified;
}
