{
  final int offset=editor.getCaretModel().getOffset() - 1;
  Document document=editor.getDocument();
  CharSequence chars=document.getCharsSequence();
  if (offset < 0 || chars.charAt(offset) != braceChar)   return;
  int spaceStart=CharArrayUtil.shiftBackward(chars,offset - 1," \t");
  if (spaceStart < 0 || chars.charAt(spaceStart) == '\n' || chars.charAt(spaceStart) == '\r') {
    PsiDocumentManager documentManager=PsiDocumentManager.getInstance(project);
    documentManager.commitDocument(document);
    final PsiFile file=documentManager.getPsiFile(document);
    if (file == null || !file.isWritable())     return;
    PsiElement element=file.findElementAt(offset);
    if (element == null)     return;
    EditorHighlighter highlighter=((EditorEx)editor).getHighlighter();
    HighlighterIterator iterator=highlighter.createIterator(offset);
    FileType fileType=file.getFileType();
    BraceMatcher braceMatcher=BraceMatchingUtil.getBraceMatcher(fileType,iterator);
    boolean isBrace=braceMatcher.isLBraceToken(iterator,chars,fileType) || braceMatcher.isRBraceToken(iterator,chars,fileType);
    if (element.getNode() != null && isBrace) {
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        @Override public void run(){
          int newOffset=CodeStyleManager.getInstance(project).adjustLineIndent(file,offset);
          editor.getCaretModel().moveToOffset(newOffset + 1);
          editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
          editor.getSelectionModel().removeSelection();
        }
      }
);
    }
  }
}
