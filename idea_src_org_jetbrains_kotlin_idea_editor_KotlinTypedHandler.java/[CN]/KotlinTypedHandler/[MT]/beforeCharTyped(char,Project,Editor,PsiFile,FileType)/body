{
  if (!(file instanceof JetFile)) {
    return Result.CONTINUE;
  }
switch (c) {
case '<':
    jetLTTyped=CodeInsightSettings.getInstance().AUTOINSERT_PAIR_BRACKET && JetLtGtTypingUtils.shouldAutoCloseAngleBracket(editor.getCaretModel().getOffset(),editor);
  return Result.CONTINUE;
case '>':
if (CodeInsightSettings.getInstance().AUTOINSERT_PAIR_BRACKET) {
  if (JetLtGtTypingUtils.handleJetGTInsert(editor)) {
    return Result.STOP;
  }
}
return Result.CONTINUE;
case '{':
int offset=editor.getCaretModel().getOffset();
if (offset == 0) {
return Result.CONTINUE;
}
HighlighterIterator iterator=((EditorEx)editor).getHighlighter().createIterator(offset - 1);
while (!iterator.atEnd() && iterator.getTokenType() == TokenType.WHITE_SPACE) {
iterator.retreat();
}
if (iterator.atEnd() || iterator.getTokenType() != JetTokens.RPAR) {
return Result.CONTINUE;
}
PsiDocumentManager.getInstance(project).commitDocument(editor.getDocument());
PsiElement leaf=file.findElementAt(offset);
if (leaf != null) {
PsiElement parent=leaf.getParent();
if (parent != null && CONTROL_FLOW_EXPRESSIONS.contains(parent.getNode().getElementType())) {
ASTNode nonWhitespaceSibling=FormatterUtil.getPreviousNonWhitespaceSibling(leaf.getNode());
if (nonWhitespaceSibling != null && nonWhitespaceSibling.getText().equals(")")) {
EditorModificationUtil.insertStringAtCaret(editor,"{",false,true);
indentBrace(project,editor,'{');
return Result.STOP;
}
}
}
return Result.CONTINUE;
case '.':
autoPopupMemberLookup(project,editor);
return Result.CONTINUE;
case '@':
autoPopupLabelLookup(project,editor);
return Result.CONTINUE;
case ':':
autoPopupCallableReferenceLookup(project,editor);
return Result.CONTINUE;
}
return Result.CONTINUE;
}
