{
  super.setUp();
  CompilerConfiguration configuration=JetTestUtils.compilerConfigurationForTests(ConfigurationKind.ALL,TestJdkKind.FULL_JDK);
  configuration.add(JVMConfigurationKeys.CLASSPATH_KEY,JetTestUtils.getAnnotationsJar());
  junitJar=new File("libraries/lib/junit-4.9.jar");
  assertTrue(junitJar.exists());
  configuration.add(JVMConfigurationKeys.CLASSPATH_KEY,junitJar);
  configuration.add(CommonConfigurationKeys.SOURCE_ROOTS_KEY,JetTestCaseBuilder.getTestDataPathBase() + "/../../libraries/stdlib/test");
  configuration.add(CommonConfigurationKeys.SOURCE_ROOTS_KEY,JetTestCaseBuilder.getTestDataPathBase() + "/../../libraries/kunit/src");
  configuration.put(CLIConfigurationKeys.MESSAGE_COLLECTOR_KEY,new MessageCollectorPlainTextToStream(System.out,MessageCollectorPlainTextToStream.NON_VERBOSE));
  myEnvironment=JetCoreEnvironment.createForTests(getTestRootDisposable(),configuration);
  generationState=KotlinToJVMBytecodeCompiler.analyzeAndGenerate(myEnvironment);
  if (generationState == null) {
    throw new RuntimeException("There were compilation errors");
  }
  ClassFileFactory classFileFactory=generationState.getFactory();
  classLoader=new GeneratedClassLoader(classFileFactory,new URLClassLoader(new URL[]{ForTestCompileRuntime.runtimeJarForTests().toURI().toURL()},null)){
    @Override public Class<?> loadClass(    String name) throws ClassNotFoundException {
      if (name.startsWith("junit.") || name.startsWith("org.junit.")) {
        return TestlibTest.class.getClassLoader().loadClass(name);
      }
      return super.loadClass(name);
    }
  }
;
  typeMapper=generationState.getTypeMapper();
  for (  JetFile jetFile : myEnvironment.getSourceFiles()) {
    for (    JetDeclaration declaration : jetFile.getDeclarations()) {
      if (declaration instanceof JetClass) {
        ClassDescriptor descriptor=(ClassDescriptor)generationState.getBindingContext().get(BindingContext.DECLARATION_TO_DESCRIPTOR,declaration);
        assertNotNull("Descriptor for declaration " + declaration + " shouldn't be null",descriptor);
        for (        ClassDescriptor superClass : DescriptorUtils.getAllSuperClasses(descriptor)) {
          if ("junit/framework/Test".equals(typeMapper.mapClass(superClass).getInternalName())) {
            String name=typeMapper.mapClass(descriptor).getInternalName();
            System.out.println(name);
            @SuppressWarnings("unchecked") Class<TestCase> aClass=(Class<TestCase>)classLoader.loadClass(name.replace('/','.'));
            if (!Modifier.isAbstract(aClass.getModifiers()) && Modifier.isPublic(aClass.getModifiers())) {
              try {
                if (Modifier.isPublic(aClass.getConstructor().getModifiers())) {
                  suite.addTestSuite(aClass);
                }
              }
 catch (              NoSuchMethodException e) {
              }
            }
            break;
          }
        }
      }
    }
  }
}
