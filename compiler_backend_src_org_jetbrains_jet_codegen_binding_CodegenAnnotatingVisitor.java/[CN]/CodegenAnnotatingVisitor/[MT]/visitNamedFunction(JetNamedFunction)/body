{
  FunctionDescriptor functionDescriptor=(FunctionDescriptor)bindingContext.get(DECLARATION_TO_DESCRIPTOR,function);
  if (functionDescriptor == null)   return;
  DeclarationDescriptor containingDeclaration=functionDescriptor.getContainingDeclaration();
  if (containingDeclaration instanceof ClassDescriptor) {
    nameStack.push(peekFromStack(nameStack) + '$' + function.getName());
    super.visitNamedFunction(function);
    nameStack.pop();
  }
 else   if (containingDeclaration instanceof NamespaceDescriptor) {
    String peek=peekFromStack(nameStack);
    FqName qualifiedName=((NamespaceDescriptor)containingDeclaration).getFqName();
    String packageClassName=PackageClassUtils.getPackageClassName(qualifiedName);
    if (peek.isEmpty()) {
      peek=packageClassName;
    }
 else {
      peek+="/" + packageClassName;
    }
    nameStack.push(peek + '$' + function.getName());
    super.visitNamedFunction(function);
    nameStack.pop();
  }
 else {
    String name=inventAnonymousClassName(function);
    ClassDescriptor classDescriptor=recordClassForFunction(functionDescriptor);
    recordClosure(bindingTrace,function,classDescriptor,peekFromStack(classStack),JvmClassName.byInternalName(name),true);
    classStack.push(classDescriptor);
    nameStack.push(name);
    super.visitNamedFunction(function);
    nameStack.pop();
    classStack.pop();
  }
}
