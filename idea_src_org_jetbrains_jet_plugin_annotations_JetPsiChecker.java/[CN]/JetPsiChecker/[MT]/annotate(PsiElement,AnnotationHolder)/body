{
  if (element instanceof JetFile) {
    JetFile file=(JetFile)element;
    try {
      final BindingContext bindingContext=WholeProjectAnalyzerFacade.analyzeProjectWithCacheOnAFile(file);
      if (errorReportingEnabled) {
        Collection<Diagnostic> diagnostics=Sets.newLinkedHashSet(bindingContext.getDiagnostics());
        Set<PsiElement> redeclarations=Sets.newHashSet();
        for (        Diagnostic diagnostic : diagnostics) {
          if (diagnostic.getFactory().getPsiFile(diagnostic) != file)           continue;
          registerDiagnosticAnnotations(diagnostic,redeclarations,holder);
        }
      }
      highlightBackingFields(holder,file,bindingContext);
      file.acceptChildren(new JetVisitorVoid(){
        @Override public void visitSimpleNameExpression(        @NotNull JetSimpleNameExpression expression){
          DeclarationDescriptor target=bindingContext.get(REFERENCE_TARGET,expression);
          if (target instanceof ValueParameterDescriptor) {
            ValueParameterDescriptor parameterDescriptor=(ValueParameterDescriptor)target;
            if (bindingContext.get(AUTO_CREATED_IT,parameterDescriptor)) {
              holder.createInfoAnnotation(expression,"Automatically declared based on the expected type").setTextAttributes(JetHighlighter.JET_AUTOCREATED_IT);
            }
          }
          markVariableAsWrappedIfNeeded(expression.getNode(),target);
          super.visitSimpleNameExpression(expression);
        }
        private void markVariableAsWrappedIfNeeded(        @NotNull ASTNode node,        DeclarationDescriptor target){
          if (target instanceof VariableDescriptor) {
            VariableDescriptor variableDescriptor=(VariableDescriptor)target;
            if (bindingContext.get(MUST_BE_WRAPPED_IN_A_REF,variableDescriptor)) {
              holder.createInfoAnnotation(node,"Wrapped into a ref-object to be modifier when captured in a closure").setTextAttributes(JetHighlighter.JET_WRAPPED_INTO_REF);
            }
          }
        }
        @Override public void visitProperty(        @NotNull JetProperty property){
          DeclarationDescriptor declarationDescriptor=bindingContext.get(DECLARATION_TO_DESCRIPTOR,property);
          PsiElement nameIdentifier=property.getNameIdentifier();
          if (nameIdentifier != null) {
            markVariableAsWrappedIfNeeded(nameIdentifier.getNode(),declarationDescriptor);
          }
          super.visitProperty(property);
        }
        @Override public void visitExpression(        @NotNull JetExpression expression){
          JetType autoCast=bindingContext.get(AUTOCAST,expression);
          if (autoCast != null) {
            holder.createInfoAnnotation(expression,"Automatically cast to " + autoCast).setTextAttributes(JetHighlighter.JET_AUTO_CAST_EXPRESSION);
          }
          expression.acceptChildren(this);
        }
        @Override public void visitJetElement(        @NotNull JetElement element){
          element.acceptChildren(this);
        }
      }
);
    }
 catch (    ProcessCanceledException e) {
      throw e;
    }
catch (    AssertionError e) {
      holder.createErrorAnnotation(element,e.getClass().getCanonicalName() + ": " + e.getMessage());
      throw e;
    }
catch (    Throwable e) {
      holder.createErrorAnnotation(element,e.getClass().getCanonicalName() + ": " + e.getMessage());
      e.printStackTrace();
    }
  }
}
