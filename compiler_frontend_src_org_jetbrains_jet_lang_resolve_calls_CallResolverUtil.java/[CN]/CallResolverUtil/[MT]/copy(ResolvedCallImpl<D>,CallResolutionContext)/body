{
  ResolutionCandidate<D> candidate=ResolutionCandidate.create(call.getCandidateDescriptor(),call.getThisObject(),call.getReceiverArgument(),call.getExplicitReceiverKind(),call.isSafeCall());
  TemporaryBindingTrace trace=TemporaryBindingTrace.create(context.trace,call.getTrace().toString() + "(copy)");
  ResolvedCallImpl<D> copy=ResolvedCallImpl.create(candidate,trace,call.getTracing());
  call.getTrace().addAllMyDataTo(trace);
  trace.record(BindingContext.RESOLVED_CALL,context.call.getCalleeExpression(),copy);
  copy.addStatus(call.getStatus());
  if (call.isDirty()) {
    copy.argumentHasNoType();
  }
  copy.setHasUnknownTypeParameters(call.hasUnknownTypeParameters());
  ConstraintSystem constraintSystem=call.getConstraintSystem();
  if (constraintSystem != null) {
    copy.setConstraintSystem(constraintSystem.copy());
  }
  for (  Map.Entry<TypeParameterDescriptor,JetType> entry : call.getTypeArguments().entrySet()) {
    copy.recordTypeArgument(entry.getKey(),entry.getValue());
  }
  for (  Map.Entry<ValueParameterDescriptor,ResolvedValueArgument> entry : call.getValueArguments().entrySet()) {
    copy.recordValueArgument(entry.getKey(),entry.getValue());
  }
  copy.setInitialDataFlowInfo(call.getDataFlowInfo());
  for (  ResolvedValueArgument resolvedArgument : call.getValueArguments().values()) {
    for (    ValueArgument argument : resolvedArgument.getArguments()) {
      copy.addDeferredComputationForArgument(argument,call.getDeferredComputationForArgument(argument));
    }
  }
  return copy;
}
