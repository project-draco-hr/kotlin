{
  final JetReferenceExpression fake=JetPsiFactory.createSimpleName(context.expressionTypingServices.getProject(),"fake");
  TemporaryBindingTrace fakeTrace=TemporaryBindingTrace.create(context.trace,"trace to resolve fake call for",name);
  Call call=CallMaker.makeCallWithExpressions(fake,receiver,null,fake,valueArguments);
  OverloadResolutionResults<FunctionDescriptor> results=context.replaceBindingTrace(fakeTrace).resolveCallWithGivenName(call,fake,name);
  if (results.isSuccess()) {
    fakeTrace.commit(new TraceEntryFilter(){
      @Override public boolean accept(      @NotNull WritableSlice<?,?> slice,      Object key){
        return key != fake;
      }
    }
,false);
  }
  return Pair.create(call,results);
}
