{
  int componentIndex=1;
  for (  JetMultiDeclarationEntry entry : multiDeclaration.getEntries()) {
    final Name componentName=Name.identifier("component" + componentIndex);
    componentIndex++;
    JetType expectedType=getExpectedTypeForComponent(context,entry);
    OverloadResolutionResults<FunctionDescriptor> results=resolveFakeCall(receiver,context.replaceExpectedType(expectedType),componentName);
    JetType componentType=null;
    if (results.isSuccess()) {
      context.trace.record(COMPONENT_RESOLVED_CALL,entry,results.getResultingCall());
      componentType=results.getResultingDescriptor().getReturnType();
      if (componentType != null && expectedType != TypeUtils.NO_EXPECTED_TYPE && !JetTypeChecker.INSTANCE.isSubtypeOf(componentType,expectedType)) {
        context.trace.report(COMPONENT_FUNCTION_RETURN_TYPE_MISMATCH.on(reportErrorsOn,componentName,componentType,expectedType));
      }
    }
 else     if (results.isAmbiguity()) {
      context.trace.report(COMPONENT_FUNCTION_AMBIGUITY.on(reportErrorsOn,componentName,results.getResultingCalls()));
    }
 else {
      context.trace.report(COMPONENT_FUNCTION_MISSING.on(reportErrorsOn,componentName));
    }
    if (componentType == null) {
      componentType=ErrorUtils.createErrorType(componentName + "() return type");
    }
    VariableDescriptor variableDescriptor=context.expressionTypingServices.getDescriptorResolver().resolveLocalVariableDescriptorWithType(writableScope.getContainingDeclaration(),entry,componentType,context.trace);
    writableScope.addVariableDescriptor(variableDescriptor);
  }
}
