{
  try {
    String testName=getTestName(false);
    configureByFileNoComplete(testName + ".kt");
    String fileText=getFile().getText();
    type=getCompletionType(testName,fileText);
    boolean withKotlinRuntime=InTextDirectivesUtils.getPrefixedInt(fileText,"// RUNTIME:") != null;
    try {
      if (withKotlinRuntime) {
        ConfigLibraryUtil.configureKotlinRuntime(getModule(),getFullJavaJDK());
      }
      Integer completionTime=ExpectedCompletionUtils.getExecutionTime(fileText);
      complete(completionTime == null ? 1 : completionTime);
      ExpectedCompletionUtils.CompletionProposal[] expected=ExpectedCompletionUtils.itemsShouldExist(fileText);
      ExpectedCompletionUtils.CompletionProposal[] unexpected=ExpectedCompletionUtils.itemsShouldAbsent(fileText);
      Integer itemsNumber=ExpectedCompletionUtils.getExpectedNumber(fileText);
      assertTrue("Should be some assertions about completion",expected.length != 0 || unexpected.length != 0 || itemsNumber != null);
      if (myItems == null) {
        myItems=new LookupElement[0];
      }
      ExpectedCompletionUtils.assertContainsRenderedItems(expected,myItems,ExpectedCompletionUtils.isWithOrder(fileText));
      ExpectedCompletionUtils.assertNotContainsRenderedItems(unexpected,myItems);
      if (itemsNumber != null) {
        assertEquals(String.format("Invalid number of completion items: %s",ExpectedCompletionUtils.listToString(ExpectedCompletionUtils.getItemsInformation(myItems))),itemsNumber.intValue(),myItems.length);
      }
    }
  finally {
      if (withKotlinRuntime) {
        ConfigLibraryUtil.unConfigureKotlinRuntime(getModule(),getProjectJDK());
      }
    }
  }
 catch (  Exception e) {
    throw ExceptionUtils.rethrow(e);
  }
}
