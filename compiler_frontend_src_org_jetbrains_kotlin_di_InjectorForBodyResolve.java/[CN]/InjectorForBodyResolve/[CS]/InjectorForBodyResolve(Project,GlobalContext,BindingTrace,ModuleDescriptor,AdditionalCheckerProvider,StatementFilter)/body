{
  this.project=project;
  this.globalContext=globalContext;
  this.storageManager=globalContext.getStorageManager();
  this.bindingTrace=bindingTrace;
  this.moduleDescriptor=moduleDescriptor;
  this.kotlinBuiltIns=moduleDescriptor.getBuiltIns();
  this.platformToKotlinClassMap=moduleDescriptor.getPlatformToKotlinClassMap();
  this.additionalCheckerProvider=additionalCheckerProvider;
  this.statementFilter=statementFilter;
  this.bodyResolver=new BodyResolver();
  this.annotationResolver=new AnnotationResolver();
  this.callResolver=new CallResolver();
  this.argumentTypeResolver=new ArgumentTypeResolver();
  this.expressionTypingComponents=new ExpressionTypingComponents();
  this.expressionTypingServices=new ExpressionTypingServices(expressionTypingComponents);
  this.controlStructureTypingUtils=new ControlStructureTypingUtils(expressionTypingServices);
  this.dynamicTypesSettings=new DynamicTypesSettings();
  this.expressionTypingUtils=new ExpressionTypingUtils(expressionTypingServices,callResolver,kotlinBuiltIns);
  this.forLoopConventionsChecker=new ForLoopConventionsChecker();
  this.descriptorResolver=new DescriptorResolver();
  this.qualifiedExpressionResolver=new QualifiedExpressionResolver();
  this.flexibleTypeCapabilitiesProvider=new FlexibleTypeCapabilitiesProvider();
  this.typeLazinessToken=new TypeLazinessToken();
  this.typeResolver=new TypeResolver(annotationResolver,qualifiedExpressionResolver,moduleDescriptor,flexibleTypeCapabilitiesProvider,storageManager,typeLazinessToken,dynamicTypesSettings);
  this.localClassifierAnalyzer=new LocalClassifierAnalyzer(descriptorResolver,typeResolver,annotationResolver);
  this.delegatedPropertyResolver=new DelegatedPropertyResolver();
  this.reflectionTypes=new ReflectionTypes(moduleDescriptor);
  this.callExpressionResolver=new CallExpressionResolver();
  this.candidateResolver=new CandidateResolver();
  this.callCompleter=new CallCompleter(argumentTypeResolver,candidateResolver);
  this.taskPrioritizer=new TaskPrioritizer(storageManager);
  this.controlFlowAnalyzer=new ControlFlowAnalyzer();
  this.declarationsChecker=new DeclarationsChecker();
  this.modifiersChecker=new ModifiersChecker(bindingTrace,additionalCheckerProvider);
  this.functionAnalyzerExtension=new FunctionAnalyzerExtension();
  this.scriptBodyResolver=new ScriptBodyResolver();
  this.bodyResolver.setAnnotationResolver(annotationResolver);
  this.bodyResolver.setCallResolver(callResolver);
  this.bodyResolver.setControlFlowAnalyzer(controlFlowAnalyzer);
  this.bodyResolver.setDeclarationsChecker(declarationsChecker);
  this.bodyResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);
  this.bodyResolver.setExpressionTypingServices(expressionTypingServices);
  this.bodyResolver.setFunctionAnalyzerExtension(functionAnalyzerExtension);
  this.bodyResolver.setScriptBodyResolverResolver(scriptBodyResolver);
  this.bodyResolver.setTrace(bindingTrace);
  annotationResolver.setCallResolver(callResolver);
  annotationResolver.setStorageManager(storageManager);
  annotationResolver.setTypeResolver(typeResolver);
  callResolver.setArgumentTypeResolver(argumentTypeResolver);
  callResolver.setCallCompleter(callCompleter);
  callResolver.setCandidateResolver(candidateResolver);
  callResolver.setExpressionTypingServices(expressionTypingServices);
  callResolver.setTaskPrioritizer(taskPrioritizer);
  callResolver.setTypeResolver(typeResolver);
  argumentTypeResolver.setBuiltIns(kotlinBuiltIns);
  argumentTypeResolver.setExpressionTypingServices(expressionTypingServices);
  argumentTypeResolver.setTypeResolver(typeResolver);
  expressionTypingServices.setAnnotationResolver(annotationResolver);
  expressionTypingServices.setBuiltIns(kotlinBuiltIns);
  expressionTypingServices.setCallExpressionResolver(callExpressionResolver);
  expressionTypingServices.setCallResolver(callResolver);
  expressionTypingServices.setDescriptorResolver(descriptorResolver);
  expressionTypingServices.setProject(project);
  expressionTypingServices.setStatementFilter(statementFilter);
  expressionTypingServices.setTypeResolver(typeResolver);
  expressionTypingComponents.setAdditionalCheckerProvider(additionalCheckerProvider);
  expressionTypingComponents.setBuiltIns(kotlinBuiltIns);
  expressionTypingComponents.setCallResolver(callResolver);
  expressionTypingComponents.setControlStructureTypingUtils(controlStructureTypingUtils);
  expressionTypingComponents.setDynamicTypesSettings(dynamicTypesSettings);
  expressionTypingComponents.setExpressionTypingServices(expressionTypingServices);
  expressionTypingComponents.setExpressionTypingUtils(expressionTypingUtils);
  expressionTypingComponents.setForLoopConventionsChecker(forLoopConventionsChecker);
  expressionTypingComponents.setGlobalContext(globalContext);
  expressionTypingComponents.setLocalClassifierAnalyzer(localClassifierAnalyzer);
  expressionTypingComponents.setPlatformToKotlinClassMap(platformToKotlinClassMap);
  expressionTypingComponents.setReflectionTypes(reflectionTypes);
  forLoopConventionsChecker.setBuiltIns(kotlinBuiltIns);
  forLoopConventionsChecker.setExpressionTypingServices(expressionTypingServices);
  forLoopConventionsChecker.setExpressionTypingUtils(expressionTypingUtils);
  forLoopConventionsChecker.setProject(project);
  descriptorResolver.setAnnotationResolver(annotationResolver);
  descriptorResolver.setBuiltIns(kotlinBuiltIns);
  descriptorResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);
  descriptorResolver.setExpressionTypingServices(expressionTypingServices);
  descriptorResolver.setStorageManager(storageManager);
  descriptorResolver.setTypeResolver(typeResolver);
  delegatedPropertyResolver.setBuiltIns(kotlinBuiltIns);
  delegatedPropertyResolver.setCallResolver(callResolver);
  delegatedPropertyResolver.setExpressionTypingServices(expressionTypingServices);
  callExpressionResolver.setExpressionTypingServices(expressionTypingServices);
  candidateResolver.setArgumentTypeResolver(argumentTypeResolver);
  controlFlowAnalyzer.setTrace(bindingTrace);
  declarationsChecker.setDescriptorResolver(descriptorResolver);
  declarationsChecker.setModifiersChecker(modifiersChecker);
  declarationsChecker.setTrace(bindingTrace);
  functionAnalyzerExtension.setTrace(bindingTrace);
  scriptBodyResolver.setExpressionTypingServices(expressionTypingServices);
}
