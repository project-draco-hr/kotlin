{
  DependencyInjectorGenerator generator=new DependencyInjectorGenerator();
  generator.addPublicField(JavaSemanticServices.class);
  generator.addPublicField(JavaDescriptorResolver.class);
  generator.addField(true,BindingTrace.class,null,new GivenExpression("new org.jetbrains.jet.lang.resolve.BindingTraceContext()"));
  generator.addField(JavaBridgeConfiguration.class);
  generator.addPublicField(PsiClassFinderImpl.class);
  generator.addField(false,ModuleDescriptorImpl.class,null,new GivenExpression("new " + ModuleDescriptorImpl.class.getCanonicalName() + "("+ Name.class.getCanonicalName()+ ".special(\"<dummy>\"), "+ JavaBridgeConfiguration.class.getCanonicalName()+ ".ALL_JAVA_IMPORTS, "+ JavaToKotlinClassMap.class.getCanonicalName()+ ".getInstance())"));
  generator.addPublicParameter(Project.class);
  generator.generate("compiler/frontend.java/src","org.jetbrains.jet.di","InjectorForJavaSemanticServices",GenerateInjectors.class);
}
