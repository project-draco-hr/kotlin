{
  DependencyInjectorGenerator generator=new DependencyInjectorGenerator(false);
  generator.addPublicParameter(JetTypeMapper.class);
  generator.addPublicParameter(DiType.listOf(JetFile.class));
  generator.addParameter(BuiltinToJavaTypesMapping.class);
  generator.addPublicParameter(GenerationState.class);
  generator.addParameter(ClassBuilderFactory.class);
  generator.addPublicParameter(Project.class);
  generator.addField(false,BindingTrace.class,"bindingTrace",new GivenExpression("jetTypeMapper.getBindingTrace()"));
  generator.addField(false,BindingContext.class,"bindingContext",new GivenExpression("bindingTrace.getBindingContext()"));
  generator.addField(false,ClassBuilderMode.class,"classBuilderMode",new GivenExpression("classBuilderFactory.getClassBuilderMode()"));
  generator.addPublicField(ScriptCodegen.class);
  generator.addField(true,IntrinsicMethods.class,"intrinsics",null);
  generator.addPublicField(ClassFileFactory.class);
  generator.generate("compiler/backend/src","org.jetbrains.jet.di","InjectorForJvmCodegen",GenerateInjectors.class);
}
