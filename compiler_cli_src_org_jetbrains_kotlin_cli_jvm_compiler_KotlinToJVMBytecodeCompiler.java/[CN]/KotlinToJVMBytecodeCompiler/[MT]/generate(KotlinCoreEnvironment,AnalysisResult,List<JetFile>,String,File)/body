{
  CompilerConfiguration configuration=environment.getConfiguration();
  IncrementalCacheProvider incrementalCacheProvider=configuration.get(JVMConfigurationKeys.INCREMENTAL_CACHE_PROVIDER);
  Collection<FqName> packagesWithObsoleteParts;
  if (moduleId == null || incrementalCacheProvider == null) {
    packagesWithObsoleteParts=null;
  }
 else {
    IncrementalCache incrementalCache=incrementalCacheProvider.getIncrementalCache(moduleId);
    packagesWithObsoleteParts=new HashSet<FqName>();
    for (    String internalName : incrementalCache.getObsoletePackageParts()) {
      packagesWithObsoleteParts.add(JvmClassName.byInternalName(internalName).getPackageFqName());
    }
  }
  BindingTraceContext diagnosticHolder=new BindingTraceContext();
  GenerationState generationState=new GenerationState(environment.getProject(),ClassBuilderFactories.BINARIES,Progress.DEAF,result.getModuleDescriptor(),result.getBindingContext(),sourceFiles,configuration.get(JVMConfigurationKeys.DISABLE_CALL_ASSERTIONS,false),configuration.get(JVMConfigurationKeys.DISABLE_PARAM_ASSERTIONS,false),GenerationState.GenerateClassFilter.GENERATE_ALL,configuration.get(JVMConfigurationKeys.DISABLE_INLINE,false),configuration.get(JVMConfigurationKeys.DISABLE_OPTIMIZATION,false),packagesWithObsoleteParts,moduleId,diagnosticHolder,outputDirectory);
  ProgressIndicatorAndCompilationCanceledStatus.checkCanceled();
  long generationStart=PerformanceCounter.Companion.currentTime();
  KotlinCodegenFacade.compileCorrectFiles(generationState,CompilationErrorHandler.THROW_EXCEPTION);
  long generationNanos=PerformanceCounter.Companion.currentTime() - generationStart;
  String desc=moduleId != null ? "module " + moduleId + " " : "";
  String message="GENERATE: " + sourceFiles.size() + " files ("+ environment.countLinesOfCode(sourceFiles)+ " lines) "+ desc+ "in "+ TimeUnit.NANOSECONDS.toMillis(generationNanos)+ " ms";
  K2JVMCompiler.Companion.reportPerf(environment.getConfiguration(),message);
  ProgressIndicatorAndCompilationCanceledStatus.checkCanceled();
  AnalyzerWithCompilerReport.reportDiagnostics(new FilteredJvmDiagnostics(diagnosticHolder.getBindingContext().getDiagnostics(),result.getBindingContext().getDiagnostics()),environment.getConfiguration().get(CLIConfigurationKeys.MESSAGE_COLLECTOR_KEY));
  ProgressIndicatorAndCompilationCanceledStatus.checkCanceled();
  return generationState;
}
