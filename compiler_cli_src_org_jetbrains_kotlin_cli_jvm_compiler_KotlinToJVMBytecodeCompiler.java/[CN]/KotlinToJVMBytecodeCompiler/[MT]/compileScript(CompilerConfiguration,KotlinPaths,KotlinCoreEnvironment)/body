{
  List<AnalyzerScriptParameter> scriptParameters=environment.getConfiguration().getList(JVMConfigurationKeys.SCRIPT_PARAMETERS);
  if (!scriptParameters.isEmpty()) {
    KotlinScriptDefinitionProvider.getInstance(environment.getProject()).addScriptDefinition(new KotlinScriptDefinition(".kts",scriptParameters));
  }
  GenerationState state=analyzeAndGenerate(environment);
  if (state == null) {
    return null;
  }
  GeneratedClassLoader classLoader;
  try {
    List<URL> classPaths=Lists.newArrayList(paths.getRuntimePath().toURI().toURL());
    for (    File file : JvmContentRootsKt.getJvmClasspathRoots(configuration)) {
      classPaths.add(file.toURI().toURL());
    }
    classLoader=new GeneratedClassLoader(state.getFactory(),new URLClassLoader(classPaths.toArray(new URL[classPaths.size()]),null));
    FqName nameForScript=ScriptNameUtil.classNameForScript(environment.getSourceFiles().get(0).getScript());
    return classLoader.loadClass(nameForScript.asString());
  }
 catch (  Exception e) {
    throw new RuntimeException("Failed to evaluate script: " + e,e);
  }
}
