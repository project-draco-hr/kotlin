{
  Map<Module,ClassFileFactory> outputFiles=Maps.newHashMap();
  ProgressIndicatorAndCompilationCanceledStatus.checkCanceled();
  String targetDescription="in modules [" + Joiner.on(", ").join(Collections2.transform(chunk,new Function<Module,String>(){
    @Override public String apply(    @Nullable Module input){
      return input != null ? input.getModuleName() : "<null>";
    }
  }
)) + "] ";
  AnalysisResult result=analyze(environment,targetDescription);
  if (result == null) {
    return false;
  }
  ProgressIndicatorAndCompilationCanceledStatus.checkCanceled();
  result.throwIfError();
  for (  Module module : chunk) {
    ProgressIndicatorAndCompilationCanceledStatus.checkCanceled();
    List<JetFile> jetFiles=CompileEnvironmentUtil.getJetFiles(environment.getProject(),getAbsolutePaths(directory,module),new Function1<String,Unit>(){
      @Override public Unit invoke(      String s){
        throw new IllegalStateException("Should have been checked before: " + s);
      }
    }
);
    GenerationState generationState=generate(environment,result,jetFiles,module.getModuleName(),new File(module.getOutputDirectory()),module.getModuleName());
    outputFiles.put(module,generationState.getFactory());
  }
  for (  Module module : chunk) {
    ProgressIndicatorAndCompilationCanceledStatus.checkCanceled();
    writeOutput(configuration,outputFiles.get(module),new File(module.getOutputDirectory()),jarPath,jarRuntime,null);
  }
  return true;
}
