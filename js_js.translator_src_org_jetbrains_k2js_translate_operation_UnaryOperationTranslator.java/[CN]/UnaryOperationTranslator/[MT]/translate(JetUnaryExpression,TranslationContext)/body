{
  if (isExclExcl(expression)) {
    return translateExclExclOperator(expression,context);
  }
  if (IncrementTranslator.isIncrement(expression)) {
    return IncrementTranslator.translate(expression,context);
  }
  JsExpression baseExpression=TranslationUtils.translateBaseExpression(context,expression);
  if (isExclForBinaryEqualLikeExpr(expression,baseExpression)) {
    return translateExclForBinaryEqualLikeExpr((JsBinaryOperation)baseExpression);
  }
  return translateAsCall(expression,context,baseExpression);
}
