{
  for (int i=0, instructionsSize=instructions.size(); i < instructionsSize; i++) {
    Instruction instruction=instructions.get(i);
    final int currentPosition=i;
    instruction.accept(new InstructionVisitor(){
      @Override public void visitRead(      ValueInstruction instruction){
        instruction.setNext(getNextPosition(currentPosition));
      }
      @Override public void visitJump(      AbstractJumpInstruction instruction){
        instruction.setResolvedTarget(getJumpTarget(instruction.getTargetLabel()));
      }
      @Override public void visitNondeterministicJump(      NondeterministicJumpInstruction instruction){
        instruction.setNext(getNextPosition(currentPosition));
        visitJump(instruction);
      }
      @Override public void visitConditionalJump(      ConditionalJumpInstruction instruction){
        Instruction nextInstruction=getNextPosition(currentPosition);
        Instruction jumpTarget=getJumpTarget(instruction.getTargetLabel());
        if (instruction.onTrue()) {
          instruction.setNextOnFalse(nextInstruction);
          instruction.setNextOnTrue(jumpTarget);
        }
 else {
          instruction.setNextOnFalse(jumpTarget);
          instruction.setNextOnTrue(nextInstruction);
        }
        visitJump(instruction);
      }
      @Override public void visitSubroutineExit(      SubroutineExitInstruction instruction){
      }
      @Override public void visitInstruction(      Instruction instruction){
        throw new UnsupportedOperationException(instruction.toString());
      }
    }
);
  }
}
