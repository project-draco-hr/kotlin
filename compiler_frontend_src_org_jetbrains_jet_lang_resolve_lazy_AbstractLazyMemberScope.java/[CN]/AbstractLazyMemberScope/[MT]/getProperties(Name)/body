{
  Set<VariableDescriptor> known=propertyDescriptors.get(name);
  if (known != null)   return known;
  if (allDescriptorsComputed)   return Collections.emptySet();
  Set<VariableDescriptor> result=Sets.newLinkedHashSet();
  List<JetProperty> declarations=declarationProvider.getPropertyDeclarations(name);
  for (  JetProperty propertyDeclaration : declarations) {
    JetScope resolutionScope=getScopeForMemberDeclarationResolution(propertyDeclaration);
    result.add(resolveSession.getInjector().getDescriptorResolver().resolvePropertyDescriptor(thisDescriptor,resolutionScope,propertyDeclaration,resolveSession.getTrace()));
  }
  JetClassOrObject classOrObjectDeclaration=declarationProvider.getClassOrObjectDeclaration(name);
  if (classOrObjectDeclaration instanceof JetObjectDeclaration) {
    JetObjectDeclaration objectDeclaration=(JetObjectDeclaration)classOrObjectDeclaration;
    ClassDescriptor classifier=(ClassDescriptor)getClassifier(name);
    VariableDescriptor propertyDescriptor=resolveSession.getInjector().getDescriptorResolver().resolveObjectDeclaration(thisDescriptor,objectDeclaration,classifier,resolveSession.getTrace());
    result.add(propertyDescriptor);
  }
 else   if (classOrObjectDeclaration instanceof JetEnumEntry) {
    JetEnumEntry jetEnumEntry=(JetEnumEntry)classOrObjectDeclaration;
    throw new UnsupportedOperationException("Enums are not supported yet: " + jetEnumEntry + " "+ jetEnumEntry.getText());
  }
  getNonDeclaredProperties(name,result);
  if (!result.isEmpty()) {
    propertyDescriptors.put(name,result);
    allDescriptors.addAll(result);
  }
  return result;
}
