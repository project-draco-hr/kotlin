{
  KotlinPaths paths=arguments.kotlinHome != null ? new KotlinPathsFromHomeDir(new File(arguments.kotlinHome)) : PathUtil.getKotlinPathsForCompiler();
  messageCollector.report(CompilerMessageSeverity.LOGGING,"Using Kotlin home directory " + paths.getHomePath(),CompilerMessageLocation.NO_LOCATION);
  CompilerConfiguration configuration=new CompilerConfiguration();
  try {
    configuration.addAll(JVMConfigurationKeys.CLASSPATH_KEY,getClasspath(paths,arguments));
    configuration.addAll(JVMConfigurationKeys.ANNOTATIONS_PATH_KEY,getAnnotationsPath(paths,arguments));
  }
 catch (  Throwable t) {
    MessageCollectorUtil.reportException(messageCollector,t);
    return INTERNAL_ERROR;
  }
  List<String> argumentsSourceDirs=arguments.getSourceDirs();
  if (!arguments.script && arguments.module == null && arguments.src == null && arguments.freeArgs.isEmpty() && (argumentsSourceDirs == null || argumentsSourceDirs.size() == 0)) {
    ReplFromTerminal.run(rootDisposable,configuration);
    return ExitCode.OK;
  }
 else   if (arguments.module != null) {
  }
 else   if (arguments.script) {
    configuration.add(CommonConfigurationKeys.SOURCE_ROOTS_KEY,arguments.freeArgs.get(0));
  }
 else {
    if (arguments.getSourceDirs() != null) {
      for (      String source : arguments.getSourceDirs()) {
        configuration.add(CommonConfigurationKeys.SOURCE_ROOTS_KEY,source);
      }
    }
 else {
      if (arguments.src != null) {
        List<String> sourcePathsSplitByPathSeparator=Arrays.asList(arguments.src.split(StringUtil.escapeToRegexp(File.pathSeparator)));
        configuration.addAll(CommonConfigurationKeys.SOURCE_ROOTS_KEY,sourcePathsSplitByPathSeparator);
      }
      for (      String freeArg : arguments.freeArgs) {
        configuration.add(CommonConfigurationKeys.SOURCE_ROOTS_KEY,freeArg);
      }
    }
  }
  configuration.put(JVMConfigurationKeys.SCRIPT_PARAMETERS,arguments.script ? CommandLineScriptUtils.scriptParameters() : Collections.<AnalyzerScriptParameter>emptyList());
  configuration.put(JVMConfigurationKeys.GENERATE_NOT_NULL_ASSERTIONS,arguments.notNullAssertions);
  configuration.put(JVMConfigurationKeys.GENERATE_NOT_NULL_PARAMETER_ASSERTIONS,arguments.notNullParamAssertions);
  configuration.put(CLIConfigurationKeys.MESSAGE_COLLECTOR_KEY,messageCollector);
  messageCollector.report(CompilerMessageSeverity.LOGGING,"Configuring the compilation environment",CompilerMessageLocation.NO_LOCATION);
  try {
    configureEnvironment(configuration,arguments);
    File jar=arguments.jar != null ? new File(arguments.jar) : null;
    File outputDir=arguments.outputDir != null ? new File(arguments.outputDir) : null;
    if (arguments.module != null) {
      MessageCollector sanitizedCollector=new FilteringMessageCollector(messageCollector,in(CompilerMessageSeverity.VERBOSE));
      ModuleChunk modules=CompileEnvironmentUtil.loadModuleDescriptions(paths,arguments.module,sanitizedCollector);
      File directory=new File(arguments.module).getAbsoluteFile().getParentFile();
      KotlinToJVMBytecodeCompiler.compileModules(configuration,modules,directory,jar,outputDir,arguments.includeRuntime);
    }
 else     if (arguments.script) {
      List<String> scriptArgs=arguments.freeArgs.subList(1,arguments.freeArgs.size());
      JetCoreEnvironment environment=new JetCoreEnvironment(rootDisposable,configuration);
      KotlinToJVMBytecodeCompiler.compileAndExecuteScript(paths,environment,scriptArgs);
    }
 else {
      JetCoreEnvironment environment=new JetCoreEnvironment(rootDisposable,configuration);
      KotlinToJVMBytecodeCompiler.compileBunchOfSources(environment,jar,outputDir,arguments.includeRuntime);
    }
    return OK;
  }
 catch (  CompilationException e) {
    messageCollector.report(CompilerMessageSeverity.EXCEPTION,MessageRenderer.PLAIN.renderException(e),MessageUtil.psiElementToMessageLocation(e.getElement()));
    return INTERNAL_ERROR;
  }
}
