{
  KotlinPaths paths=arguments.kotlinHome != null ? new KotlinPathsFromHomeDir(new File(arguments.kotlinHome)) : PathUtil.getKotlinPathsForCompiler();
  messageCollector.report(CompilerMessageSeverity.LOGGING,"Using Kotlin home directory " + paths.getHomePath(),CompilerMessageLocation.NO_LOCATION);
  CompilerConfiguration configuration=new CompilerConfiguration();
  try {
    configuration.addAll(JVMConfigurationKeys.CLASSPATH_KEY,getClasspath(paths,arguments));
    configuration.addAll(JVMConfigurationKeys.ANNOTATIONS_PATH_KEY,getAnnotationsPath(paths,arguments));
  }
 catch (  Throwable t) {
    MessageCollectorUtil.reportException(messageCollector,t);
    return INTERNAL_ERROR;
  }
  if (!arguments.script && arguments.module == null && arguments.freeArgs.isEmpty() && !arguments.version) {
    ReplFromTerminal.run(rootDisposable,configuration);
    return ExitCode.OK;
  }
 else   if (arguments.module != null) {
  }
 else   if (arguments.script) {
    configuration.add(CommonConfigurationKeys.SOURCE_ROOTS_KEY,arguments.freeArgs.get(0));
  }
 else {
    configuration.addAll(CommonConfigurationKeys.SOURCE_ROOTS_KEY,arguments.freeArgs);
  }
  configuration.put(JVMConfigurationKeys.SCRIPT_PARAMETERS,arguments.script ? CommandLineScriptUtils.scriptParameters() : Collections.<AnalyzerScriptParameter>emptyList());
  putAdvancedOptions(configuration,arguments);
  configuration.put(CLIConfigurationKeys.MESSAGE_COLLECTOR_KEY,messageCollector);
  messageCollector.report(CompilerMessageSeverity.LOGGING,"Configuring the compilation environment",CompilerMessageLocation.NO_LOCATION);
  try {
    configureEnvironment(configuration,arguments);
    String destination=arguments.destination;
    File jar;
    File outputDir;
    if (destination != null) {
      boolean isJar=destination.endsWith(".jar");
      jar=isJar ? new File(destination) : null;
      outputDir=isJar ? null : new File(destination);
    }
 else {
      jar=null;
      outputDir=null;
    }
    if (arguments.module != null) {
      MessageCollector sanitizedCollector=new FilteringMessageCollector(messageCollector,in(CompilerMessageSeverity.VERBOSE));
      ModuleScriptData moduleScript=CompileEnvironmentUtil.loadModuleDescriptions(paths,arguments.module,sanitizedCollector);
      if (moduleScript.getIncrementalCacheDir() != null) {
        configuration.put(JVMConfigurationKeys.INCREMENTAL_CACHE_BASE_DIR,new File(moduleScript.getIncrementalCacheDir()));
      }
      if (outputDir != null) {
        messageCollector.report(CompilerMessageSeverity.WARNING,"The '-d' option with a directory destination is ignored because '-module' is specified",CompilerMessageLocation.NO_LOCATION);
      }
      File directory=new File(arguments.module).getAbsoluteFile().getParentFile();
      KotlinToJVMBytecodeCompiler.compileModules(configuration,moduleScript.getModules(),directory,jar,arguments.includeRuntime);
    }
 else     if (arguments.script) {
      List<String> scriptArgs=arguments.freeArgs.subList(1,arguments.freeArgs.size());
      JetCoreEnvironment environment=JetCoreEnvironment.createForProduction(rootDisposable,configuration);
      KotlinToJVMBytecodeCompiler.compileAndExecuteScript(paths,environment,scriptArgs);
    }
 else {
      JetCoreEnvironment environment=JetCoreEnvironment.createForProduction(rootDisposable,configuration);
      KotlinToJVMBytecodeCompiler.compileBunchOfSources(environment,jar,outputDir,arguments.includeRuntime);
    }
    return OK;
  }
 catch (  CompilationException e) {
    messageCollector.report(CompilerMessageSeverity.EXCEPTION,MessageRenderer.PLAIN.renderException(e),MessageUtil.psiElementToMessageLocation(e.getElement()));
    return INTERNAL_ERROR;
  }
}
