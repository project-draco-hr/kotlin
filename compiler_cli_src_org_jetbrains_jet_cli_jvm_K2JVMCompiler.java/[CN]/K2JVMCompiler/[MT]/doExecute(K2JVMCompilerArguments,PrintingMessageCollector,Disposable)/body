{
  CompilerConfiguration compilerConfiguration=createCompilerConfiguration(arguments);
  final List<String> argumentsSourceDirs=arguments.getSourceDirs();
  if (!arguments.script && arguments.module == null && arguments.src == null && arguments.freeArgs.isEmpty() && (argumentsSourceDirs == null || argumentsSourceDirs.size() == 0)) {
    ReplFromTerminal.run(rootDisposable,compilerConfiguration);
    return ExitCode.OK;
  }
 else   if (arguments.module != null) {
  }
 else   if (arguments.script) {
    compilerConfiguration.add(CommonConfigurationKeys.SOURCE_ROOTS_KEY,arguments.freeArgs.get(0));
  }
 else {
    if (arguments.getSourceDirs() != null) {
      for (      String source : arguments.getSourceDirs()) {
        compilerConfiguration.add(CommonConfigurationKeys.SOURCE_ROOTS_KEY,source);
      }
    }
 else {
      if (arguments.src != null) {
        compilerConfiguration.add(CommonConfigurationKeys.SOURCE_ROOTS_KEY,arguments.src);
      }
      for (      String freeArg : arguments.freeArgs) {
        compilerConfiguration.add(CommonConfigurationKeys.SOURCE_ROOTS_KEY,freeArg);
      }
    }
  }
  JetCoreEnvironment environment=JetCoreEnvironment.createCoreEnvironmentForJVM(rootDisposable,compilerConfiguration);
  boolean builtins=arguments.builtins;
  compilerConfiguration.put(JVMConfigurationKeys.SCRIPT_PARAMETERS,arguments.script ? CommandLineScriptUtils.scriptParameters() : Collections.<AnalyzerScriptParameter>emptyList());
  compilerConfiguration.put(JVMConfigurationKeys.BUILTINS_SCOPE_EXTENSION_MODE_KEY,builtins ? BuiltinsScopeExtensionMode.ONLY_STANDARD_CLASSES : BuiltinsScopeExtensionMode.ALL);
  compilerConfiguration.put(JVMConfigurationKeys.STUBS,builtins);
  compilerConfiguration.put(JVMConfigurationKeys.BUILTIN_TO_JAVA_TYPES_MAPPING_KEY,builtins ? BuiltinToJavaTypesMapping.DISABLED : BuiltinToJavaTypesMapping.ENABLED);
  compilerConfiguration.put(CLIConfigurationKeys.MESSAGE_COLLECTOR_KEY,messageCollector);
  messageCollector.report(CompilerMessageSeverity.LOGGING,"Configuring the compilation environment",CompilerMessageLocation.NO_LOCATION);
  try {
    configureEnvironment(compilerConfiguration,arguments);
    File jar=arguments.jar != null ? new File(arguments.jar) : null;
    File outputDir=arguments.outputDir != null ? new File(arguments.outputDir) : null;
    boolean noErrors;
    if (arguments.module != null) {
      boolean oldVerbose=messageCollector.isVerbose();
      messageCollector.setVerbose(false);
      List<Module> modules=CompileEnvironmentUtil.loadModuleScript(arguments.module,messageCollector);
      messageCollector.setVerbose(oldVerbose);
      File directory=new File(arguments.module).getParentFile();
      noErrors=KotlinToJVMBytecodeCompiler.compileModules(environment,modules,directory,jar,outputDir,arguments.includeRuntime);
    }
 else     if (arguments.script) {
      List<String> scriptArgs=arguments.freeArgs.subList(1,arguments.freeArgs.size());
      noErrors=KotlinToJVMBytecodeCompiler.compileAndExecuteScript(environment,scriptArgs);
    }
 else {
      noErrors=KotlinToJVMBytecodeCompiler.compileBunchOfSources(environment,jar,outputDir,arguments.includeRuntime);
    }
    return noErrors ? OK : COMPILATION_ERROR;
  }
 catch (  CompilationException e) {
    messageCollector.report(CompilerMessageSeverity.EXCEPTION,MessageRenderer.PLAIN.renderException(e),MessageUtil.psiElementToMessageLocation(e.getElement()));
    return INTERNAL_ERROR;
  }
catch (  Throwable t) {
    messageCollector.report(CompilerMessageSeverity.EXCEPTION,MessageRenderer.PLAIN.renderException(t),CompilerMessageLocation.NO_LOCATION);
    return INTERNAL_ERROR;
  }
}
