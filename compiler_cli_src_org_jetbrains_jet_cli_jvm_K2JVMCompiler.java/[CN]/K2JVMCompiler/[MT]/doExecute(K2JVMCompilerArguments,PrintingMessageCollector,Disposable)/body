{
  CompilerSpecialMode mode=parseCompilerSpecialMode(arguments);
  CompilerConfiguration compilerConfiguration=createCompilerConfiguration(arguments);
  final List<String> argumentsSourceDirs=arguments.getSourceDirs();
  if (!arguments.script && arguments.module == null && arguments.src == null && arguments.freeArgs.isEmpty() && (argumentsSourceDirs == null || argumentsSourceDirs.size() == 0)) {
    ReplFromTerminal.run(rootDisposable,compilerConfiguration);
    return ExitCode.OK;
  }
  JetCoreEnvironment environment=JetCoreEnvironment.createCoreEnvironmentForJVM(rootDisposable,compilerConfiguration);
  boolean builtins=mode == CompilerSpecialMode.BUILTINS;
  K2JVMCompileEnvironmentConfiguration configuration=new K2JVMCompileEnvironmentConfiguration(environment,messageCollector,arguments.script,builtins ? BuiltinsScopeExtensionMode.ONLY_STANDARD_CLASSES : BuiltinsScopeExtensionMode.ALL,builtins,builtins ? BuiltinToJavaTypesMapping.DISABLED : BuiltinToJavaTypesMapping.ENABLED);
  messageCollector.report(CompilerMessageSeverity.LOGGING,"Configuring the compilation environment",CompilerMessageLocation.NO_LOCATION);
  try {
    configureEnvironment(configuration,arguments);
    File jar=arguments.jar != null ? new File(arguments.jar) : null;
    File outputDir=arguments.outputDir != null ? new File(arguments.outputDir) : null;
    boolean noErrors;
    if (arguments.module != null) {
      boolean oldVerbose=messageCollector.isVerbose();
      messageCollector.setVerbose(false);
      List<Module> modules=CompileEnvironmentUtil.loadModuleScript(arguments.module,messageCollector);
      messageCollector.setVerbose(oldVerbose);
      File directory=new File(arguments.module).getParentFile();
      noErrors=KotlinToJVMBytecodeCompiler.compileModules(configuration,modules,directory,jar,outputDir,arguments.includeRuntime);
    }
 else     if (arguments.script) {
      configuration.getEnvironment().addSources(arguments.freeArgs.get(0));
      List<String> scriptArgs=arguments.freeArgs.subList(1,arguments.freeArgs.size());
      noErrors=KotlinToJVMBytecodeCompiler.compileAndExecuteScript(configuration,scriptArgs);
    }
 else {
      if (arguments.getSourceDirs() != null) {
        noErrors=KotlinToJVMBytecodeCompiler.compileBunchOfSourceDirectories(configuration,arguments.getSourceDirs(),jar,outputDir,arguments.script,arguments.includeRuntime);
      }
 else {
        if (arguments.src != null) {
          configuration.getEnvironment().addSources(arguments.src);
        }
        for (        String freeArg : arguments.freeArgs) {
          configuration.getEnvironment().addSources(freeArg);
        }
        noErrors=KotlinToJVMBytecodeCompiler.compileBunchOfSources(configuration,jar,outputDir,arguments.includeRuntime);
      }
    }
    return noErrors ? OK : COMPILATION_ERROR;
  }
 catch (  CompilationException e) {
    messageCollector.report(CompilerMessageSeverity.EXCEPTION,MessageRenderer.PLAIN.renderException(e),MessageUtil.psiElementToMessageLocation(e.getElement()));
    return INTERNAL_ERROR;
  }
catch (  Throwable t) {
    messageCollector.report(CompilerMessageSeverity.EXCEPTION,MessageRenderer.PLAIN.renderException(t),CompilerMessageLocation.NO_LOCATION);
    return INTERNAL_ERROR;
  }
}
