{
  CompilerSpecialMode mode=parseCompilerSpecialMode(arguments);
  File jdkHeadersJar;
  if (mode.includeJdkHeaders()) {
    if (arguments.jdkHeaders != null) {
      jdkHeadersJar=new File(arguments.jdkHeaders);
    }
 else {
      jdkHeadersJar=PathUtil.getAltHeadersPath();
    }
  }
 else {
    jdkHeadersJar=null;
  }
  File runtimeJar;
  if (mode.includeKotlinRuntime()) {
    if (arguments.stdlib != null) {
      runtimeJar=new File(arguments.stdlib);
    }
 else {
      runtimeJar=PathUtil.getDefaultRuntimePath();
    }
  }
 else {
    runtimeJar=null;
  }
  CompilerDependencies dependencies=new CompilerDependencies(mode,CompilerDependencies.findRtJar(),jdkHeadersJar,runtimeJar);
  PrintingMessageCollector messageCollector=new PrintingMessageCollector(errStream,messageRenderer,arguments.verbose);
  Disposable rootDisposable=CompileEnvironmentUtil.createMockDisposable();
  JetCoreEnvironment environment=JetCoreEnvironment.getCoreEnvironmentForJVM(rootDisposable,dependencies);
  K2JVMCompileEnvironmentConfiguration configuration=new K2JVMCompileEnvironmentConfiguration(environment,messageCollector);
  messageCollector.report(CompilerMessageSeverity.LOGGING,"Configuring the compilation environment",CompilerMessageLocation.NO_LOCATION);
  try {
    configureEnvironment(configuration,arguments);
    boolean noErrors;
    if (arguments.module != null) {
      List<Module> modules=CompileEnvironmentUtil.loadModuleScript(arguments.module,new PrintingMessageCollector(errStream,messageRenderer,false));
      File directory=new File(arguments.module).getParentFile();
      noErrors=KotlinToJVMBytecodeCompiler.compileModules(configuration,modules,directory,arguments.jar,arguments.outputDir,arguments.includeRuntime);
    }
 else {
      if (arguments.getSourceDirs() != null) {
        noErrors=KotlinToJVMBytecodeCompiler.compileBunchOfSourceDirectories(configuration,arguments.getSourceDirs(),arguments.jar,arguments.outputDir,arguments.includeRuntime);
      }
 else {
        noErrors=KotlinToJVMBytecodeCompiler.compileBunchOfSources(configuration,arguments.src,arguments.jar,arguments.outputDir,arguments.includeRuntime);
      }
    }
    return noErrors ? OK : COMPILATION_ERROR;
  }
 catch (  CompilationException e) {
    messageCollector.report(CompilerMessageSeverity.EXCEPTION,MessageRenderer.PLAIN.renderException(e),MessageUtil.psiElementToMessageLocation(e.getElement()));
    return INTERNAL_ERROR;
  }
catch (  Throwable t) {
    messageCollector.report(CompilerMessageSeverity.EXCEPTION,MessageRenderer.PLAIN.renderException(t),CompilerMessageLocation.NO_LOCATION);
    return INTERNAL_ERROR;
  }
 finally {
    Disposer.dispose(rootDisposable);
    messageCollector.printToErrStream();
  }
}
