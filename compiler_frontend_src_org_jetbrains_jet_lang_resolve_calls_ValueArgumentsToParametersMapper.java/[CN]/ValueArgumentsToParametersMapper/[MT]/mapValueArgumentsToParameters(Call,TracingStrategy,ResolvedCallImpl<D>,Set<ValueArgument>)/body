{
  TemporaryBindingTrace temporaryTrace=candidateCall.getTrace();
  Map<ValueParameterDescriptor,VarargValueArgument> varargs=Maps.newHashMap();
  Set<ValueParameterDescriptor> usedParameters=Sets.newHashSet();
  D candidate=candidateCall.getCandidateDescriptor();
  List<ValueParameterDescriptor> valueParameters=candidate.getValueParameters();
  Map<String,ValueParameterDescriptor> parameterByName=Maps.newHashMap();
  for (  ValueParameterDescriptor valueParameter : valueParameters) {
    parameterByName.put(valueParameter.getName(),valueParameter);
  }
  List<? extends ValueArgument> valueArguments=call.getValueArguments();
  Status status=OK;
  boolean someNamed=false;
  boolean somePositioned=false;
  for (int i=0; i < valueArguments.size(); i++) {
    ValueArgument valueArgument=valueArguments.get(i);
    if (valueArgument.isNamed()) {
      someNamed=true;
      JetSimpleNameExpression nameReference=valueArgument.getArgumentName().getReferenceExpression();
      ValueParameterDescriptor valueParameterDescriptor=parameterByName.get(nameReference.getReferencedName());
      if (valueParameterDescriptor == null) {
        temporaryTrace.report(NAMED_PARAMETER_NOT_FOUND.on(nameReference));
        unmappedArguments.add(valueArgument);
        status=ERROR;
      }
 else {
        temporaryTrace.record(REFERENCE_TARGET,nameReference,valueParameterDescriptor);
        if (!usedParameters.add(valueParameterDescriptor)) {
          temporaryTrace.report(ARGUMENT_PASSED_TWICE.on(nameReference));
          unmappedArguments.add(valueArgument);
          status=WEAK_ERROR;
        }
 else {
          status=status.compose(put(candidateCall,valueParameterDescriptor,valueArgument,varargs));
        }
      }
      if (somePositioned) {
        temporaryTrace.report(MIXING_NAMED_AND_POSITIONED_ARGUMENTS.on(nameReference));
        status=ERROR;
      }
    }
 else {
      somePositioned=true;
      if (someNamed) {
        temporaryTrace.report(MIXING_NAMED_AND_POSITIONED_ARGUMENTS.on(valueArgument.asElement()));
        status=ERROR;
      }
 else {
        int parameterCount=valueParameters.size();
        if (i < parameterCount) {
          ValueParameterDescriptor valueParameterDescriptor=valueParameters.get(i);
          usedParameters.add(valueParameterDescriptor);
          status=status.compose(put(candidateCall,valueParameterDescriptor,valueArgument,varargs));
        }
 else         if (!valueParameters.isEmpty()) {
          ValueParameterDescriptor valueParameterDescriptor=valueParameters.get(valueParameters.size() - 1);
          if (valueParameterDescriptor.getVarargElementType() != null) {
            status=status.compose(put(candidateCall,valueParameterDescriptor,valueArgument,varargs));
            usedParameters.add(valueParameterDescriptor);
          }
 else {
            temporaryTrace.report(TOO_MANY_ARGUMENTS.on(valueArgument.asElement(),candidate));
            unmappedArguments.add(valueArgument);
            status=WEAK_ERROR;
          }
        }
 else {
          temporaryTrace.report(TOO_MANY_ARGUMENTS.on(valueArgument.asElement(),candidate));
          unmappedArguments.add(valueArgument);
          status=WEAK_ERROR;
        }
      }
    }
  }
  List<JetExpression> functionLiteralArguments=call.getFunctionLiteralArguments();
  if (!functionLiteralArguments.isEmpty()) {
    JetExpression possiblyLabeledFunctionLiteral=functionLiteralArguments.get(0);
    if (valueParameters.isEmpty()) {
      temporaryTrace.report(TOO_MANY_ARGUMENTS.on(possiblyLabeledFunctionLiteral,candidate));
      status=ERROR;
    }
 else {
      JetFunctionLiteralExpression functionLiteral;
      if (possiblyLabeledFunctionLiteral instanceof JetLabelQualifiedExpression) {
        JetLabelQualifiedExpression labeledFunctionLiteral=(JetLabelQualifiedExpression)possiblyLabeledFunctionLiteral;
        functionLiteral=(JetFunctionLiteralExpression)labeledFunctionLiteral.getLabeledExpression();
      }
 else {
        functionLiteral=(JetFunctionLiteralExpression)possiblyLabeledFunctionLiteral;
      }
      ValueParameterDescriptor valueParameterDescriptor=valueParameters.get(valueParameters.size() - 1);
      if (valueParameterDescriptor.getVarargElementType() != null) {
        temporaryTrace.report(VARARG_OUTSIDE_PARENTHESES.on(possiblyLabeledFunctionLiteral));
        status=ERROR;
      }
 else {
        if (!usedParameters.add(valueParameterDescriptor)) {
          temporaryTrace.report(TOO_MANY_ARGUMENTS.on(possiblyLabeledFunctionLiteral,candidate));
          status=ERROR;
        }
 else {
          status=status.compose(put(candidateCall,valueParameterDescriptor,CallMaker.makeValueArgument(functionLiteral),varargs));
        }
      }
    }
    for (int i=1; i < functionLiteralArguments.size(); i++) {
      JetExpression argument=functionLiteralArguments.get(i);
      temporaryTrace.report(MANY_FUNCTION_LITERAL_ARGUMENTS.on(argument));
      status=ERROR;
    }
  }
  for (  ValueParameterDescriptor valueParameter : valueParameters) {
    if (!usedParameters.contains(valueParameter)) {
      if (valueParameter.hasDefaultValue()) {
        candidateCall.recordValueArgument(valueParameter,DefaultValueArgument.DEFAULT);
      }
 else       if (valueParameter.getVarargElementType() != null) {
        candidateCall.recordValueArgument(valueParameter,new VarargValueArgument());
      }
 else {
        tracing.noValueForParameter(temporaryTrace,valueParameter);
        status=ERROR;
      }
    }
  }
  ReceiverDescriptor receiverParameter=candidate.getReceiverParameter();
  ReceiverDescriptor receiverArgument=candidateCall.getReceiverArgument();
  if (receiverParameter.exists() && !receiverArgument.exists()) {
    tracing.missingReceiver(temporaryTrace,receiverParameter);
    status=ERROR;
  }
  if (!receiverParameter.exists() && receiverArgument.exists()) {
    tracing.noReceiverAllowed(temporaryTrace);
    status=ERROR;
  }
  return status;
}
