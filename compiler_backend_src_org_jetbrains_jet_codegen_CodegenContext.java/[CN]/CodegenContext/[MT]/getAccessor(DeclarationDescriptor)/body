{
  if (accessors == null) {
    accessors=new HashMap<DeclarationDescriptor,DeclarationDescriptor>();
  }
  descriptor=descriptor.getOriginal();
  DeclarationDescriptor accessor=accessors.get(descriptor);
  if (accessor != null) {
    return accessor;
  }
  if (descriptor instanceof SimpleFunctionDescriptor) {
    SimpleFunctionDescriptorImpl myAccessor=new SimpleFunctionDescriptorImpl(contextDescriptor,Collections.<AnnotationDescriptor>emptyList(),Name.identifier(descriptor.getName() + "$b$" + getHierarchyCount()+ "$"+ accessors.size()),CallableMemberDescriptor.Kind.DECLARATION);
    FunctionDescriptor fd=(SimpleFunctionDescriptor)descriptor;
    myAccessor.initialize(fd.getReceiverParameter().exists() ? fd.getReceiverParameter().getType() : null,fd.getExpectedThisObject(),fd.getTypeParameters(),fd.getValueParameters(),fd.getReturnType(),Modality.FINAL,Visibilities.PUBLIC,false);
    accessor=myAccessor;
  }
 else   if (descriptor instanceof PropertyDescriptor) {
    PropertyDescriptor pd=(PropertyDescriptor)descriptor;
    PropertyDescriptor myAccessor=new PropertyDescriptor(contextDescriptor,Collections.<AnnotationDescriptor>emptyList(),Modality.FINAL,Visibilities.PUBLIC,pd.isVar(),pd.isObjectDeclaration(),Name.identifier(pd.getName() + "$b$" + getHierarchyCount()+ "$"+ accessors.size()),CallableMemberDescriptor.Kind.DECLARATION);
    JetType receiverType=pd.getReceiverParameter().exists() ? pd.getReceiverParameter().getType() : null;
    myAccessor.setType(pd.getType(),Collections.<TypeParameterDescriptorImpl>emptyList(),pd.getExpectedThisObject(),receiverType);
    PropertyGetterDescriptor pgd=new PropertyGetterDescriptor(myAccessor,Collections.<AnnotationDescriptor>emptyList(),Modality.FINAL,Visibilities.PUBLIC,false,false,CallableMemberDescriptor.Kind.DECLARATION);
    pgd.initialize(myAccessor.getType());
    PropertySetterDescriptor psd=new PropertySetterDescriptor(myAccessor,Collections.<AnnotationDescriptor>emptyList(),Modality.FINAL,Visibilities.PUBLIC,false,false,CallableMemberDescriptor.Kind.DECLARATION);
    myAccessor.initialize(pgd,psd);
    accessor=myAccessor;
  }
 else {
    throw new UnsupportedOperationException();
  }
  accessors.put(descriptor,accessor);
  return accessor;
}
