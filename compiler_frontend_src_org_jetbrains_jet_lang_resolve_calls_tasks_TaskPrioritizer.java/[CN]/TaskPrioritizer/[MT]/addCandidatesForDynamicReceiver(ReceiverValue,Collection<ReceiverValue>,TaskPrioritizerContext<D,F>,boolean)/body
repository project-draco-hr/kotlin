{
  if (!TypesPackage.isDynamic(explicitReceiver.getType()))   return;
  TaskPrioritizerContext<D,F> onlyDynamicReceivers=c.replaceCollectors(TasksPackage.onlyDynamicReceivers(c.callableDescriptorCollectors));
  addExtensionCandidates(explicitReceiver,implicitReceivers,onlyDynamicReceivers,isExplicit);
  c.result.addCandidates(new Function0<Collection<? extends ResolutionCandidate<D>>>(){
    @Override public Collection<? extends ResolutionCandidate<D>> invoke(){
      D dynamicDescriptor=(D)DynamicCallableDescriptors.createCallableDescriptorForDynamicCall(c.context.call,c.scope.getContainingDeclaration());
      if (dynamicDescriptor == null)       return Collections.emptyList();
      ResolutionCandidate<D> dynamicCandidate=ResolutionCandidate.create(c.context.call,dynamicDescriptor);
      dynamicCandidate.setDispatchReceiver(explicitReceiver);
      dynamicCandidate.setExplicitReceiverKind(DISPATCH_RECEIVER);
      return Collections.singletonList(dynamicCandidate);
    }
  }
);
}
