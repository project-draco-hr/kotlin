{
  if (!TypesPackage.isDynamic(explicitReceiver.getType()))   return;
  TaskPrioritizerContext<D,F> onlyDynamicReceivers=c.replaceCollectors(TasksPackage.onlyDynamicReceivers(c.callableDescriptorCollectors));
  addExtensionCandidates(explicitReceiver,implicitReceivers,onlyDynamicReceivers,isExplicit);
  c.result.addCandidates(new Function0<Collection<? extends ResolutionCandidate<D>>>(){
    @Override public Collection<? extends ResolutionCandidate<D>> invoke(){
      JetScope dynamicScope=DynamicCallableDescriptors.createDynamicDescriptorScope(c.context.call,c.scope.getContainingDeclaration());
      Collection<D> dynamicDescriptors=new ArrayList<D>();
      for (      CallableDescriptorCollector<D> collector : c.callableDescriptorCollectors) {
        dynamicDescriptors.addAll(collector.getNonExtensionsByName(dynamicScope,c.name,c.context.trace));
      }
      return KotlinPackage.map(dynamicDescriptors,new Function1<D,ResolutionCandidate<D>>(){
        @Override public ResolutionCandidate<D> invoke(        D dynamicDescriptor){
          ResolutionCandidate<D> dynamicCandidate=ResolutionCandidate.create(c.context.call,dynamicDescriptor);
          dynamicCandidate.setDispatchReceiver(explicitReceiver);
          dynamicCandidate.setExplicitReceiverKind(DISPATCH_RECEIVER);
          return dynamicCandidate;
        }
      }
);
    }
  }
);
}
