{
  List<ReceiverValue> variantsForExplicitReceiver=AutoCastUtils.getAutoCastVariants(receiver,c.context);
  for (  CallableDescriptorCollector<? extends D> callableDescriptorCollector : c.callableDescriptorCollectors) {
    Collection<ResolutionCandidate<D>> members=Lists.newArrayList();
    for (    ReceiverValue variant : variantsForExplicitReceiver) {
      Collection<? extends D> membersForThisVariant=callableDescriptorCollector.getMembersByName(variant.getType(),c.name,c.context.trace);
      convertWithReceivers(membersForThisVariant,Collections.singletonList(variant),Collections.singletonList(NO_RECEIVER),members,createKind(THIS_OBJECT,isExplicit));
    }
    c.result.addCandidates(members);
  }
  for (  CallableDescriptorCollector<? extends D> callableDescriptorCollector : c.callableDescriptorCollectors) {
    for (    ReceiverValue implicitReceiver : implicitReceivers) {
      addMemberExtensionCandidates(implicitReceiver,variantsForExplicitReceiver,callableDescriptorCollector,c,createKind(RECEIVER_ARGUMENT,isExplicit));
    }
    Collection<ResolutionCandidate<D>> extensions=convertWithImpliedThis(c.scope,variantsForExplicitReceiver,callableDescriptorCollector.getNonMembersByName(c.scope,c.name,c.context.trace),createKind(RECEIVER_ARGUMENT,isExplicit));
    c.result.addCandidates(extensions);
  }
}
