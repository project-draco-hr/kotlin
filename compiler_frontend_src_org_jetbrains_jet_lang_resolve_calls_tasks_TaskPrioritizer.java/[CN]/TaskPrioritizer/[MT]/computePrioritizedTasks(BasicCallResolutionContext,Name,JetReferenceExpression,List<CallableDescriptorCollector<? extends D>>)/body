{
  ReceiverValue explicitReceiver=context.call.getExplicitReceiver();
  JetScope scope;
  if (explicitReceiver.exists() && explicitReceiver.getType() instanceof NamespaceType) {
    scope=explicitReceiver.getType().getMemberScope();
    explicitReceiver=NO_RECEIVER;
  }
 else {
    scope=context.scope;
  }
  ResolutionTaskHolder.PriorityProvider<ResolutionCandidate<D>> visibleStrategy=new ResolutionTaskHolder.PriorityProvider<ResolutionCandidate<D>>(){
    @Override public int getPriority(    ResolutionCandidate<D> call){
      return (isVisible(call) ? 2 : 0) + (isSynthesized(call) ? 0 : 1);
    }
    @Override public int getMaxPriority(){
      return 3;
    }
    private boolean isVisible(    ResolutionCandidate<D> call){
      if (call == null)       return false;
      D candidateDescriptor=call.getDescriptor();
      if (ErrorUtils.isError(candidateDescriptor))       return true;
      return Visibilities.isVisible(candidateDescriptor,context.scope.getContainingDeclaration());
    }
    private boolean isSynthesized(    ResolutionCandidate<D> call){
      D descriptor=call.getDescriptor();
      return descriptor instanceof CallableMemberDescriptor && isOrOverridesSynthesized((CallableMemberDescriptor)descriptor);
    }
    private boolean isOrOverridesSynthesized(    CallableMemberDescriptor descriptor){
      if (descriptor.getKind() == CallableMemberDescriptor.Kind.SYNTHESIZED) {
        return true;
      }
      if (descriptor.getKind() == CallableMemberDescriptor.Kind.FAKE_OVERRIDE) {
        for (        CallableMemberDescriptor overridden : descriptor.getOverriddenDescriptors()) {
          if (!isOrOverridesSynthesized(overridden)) {
            return false;
          }
        }
        return true;
      }
      return false;
    }
  }
;
  ResolutionTaskHolder<D,F> result=new ResolutionTaskHolder<D,F>(functionReference,context,visibleStrategy);
  for (  CallableDescriptorCollector<? extends D> callableDescriptorCollector : callableDescriptorCollectors) {
    doComputeTasks(scope,explicitReceiver,name,result,context,callableDescriptorCollector);
  }
  return result.getTasks();
}
