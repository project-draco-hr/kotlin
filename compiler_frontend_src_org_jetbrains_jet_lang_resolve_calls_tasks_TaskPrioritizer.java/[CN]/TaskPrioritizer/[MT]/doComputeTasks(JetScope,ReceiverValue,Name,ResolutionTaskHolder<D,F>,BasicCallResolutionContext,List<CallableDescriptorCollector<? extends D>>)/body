{
  ProgressIndicatorProvider.checkCanceled();
  AutoCastServiceImpl autoCastService=new AutoCastServiceImpl(context.dataFlowInfo,context.trace.getBindingContext());
  List<ReceiverValue> implicitReceivers=JetScopeUtils.getImplicitReceiversHierarchyValues(scope);
  boolean hasExplicitThisObject=context.call.getThisObject().exists();
  if (hasExplicitThisObject) {
    implicitReceivers.add(context.call.getThisObject());
  }
  if (receiver.exists()) {
    List<ReceiverValue> variantsForExplicitReceiver=autoCastService.getVariantsForReceiver(receiver);
    for (    CallableDescriptorCollector<? extends D> callableDescriptorCollector : callableDescriptorCollectors) {
      Collection<ResolutionCandidate<D>> members=Lists.newArrayList();
      for (      ReceiverValue variant : variantsForExplicitReceiver) {
        Collection<? extends D> membersForThisVariant=callableDescriptorCollector.getMembersByName(variant.getType(),name);
        convertWithReceivers(membersForThisVariant,Collections.singletonList(variant),Collections.singletonList(NO_RECEIVER),members,hasExplicitThisObject);
      }
      result.addCandidates(members);
    }
    for (    CallableDescriptorCollector<? extends D> callableDescriptorCollector : callableDescriptorCollectors) {
      for (      ReceiverValue implicitReceiver : implicitReceivers) {
        Collection<? extends D> memberExtensions=callableDescriptorCollector.getNonMembersByName(implicitReceiver.getType().getMemberScope(),name);
        List<ReceiverValue> variantsForImplicitReceiver=autoCastService.getVariantsForReceiver(implicitReceiver);
        result.addCandidates(convertWithReceivers(memberExtensions,variantsForImplicitReceiver,variantsForExplicitReceiver,hasExplicitThisObject));
      }
      Collection<ResolutionCandidate<D>> extensionFunctions=convertWithImpliedThis(scope,variantsForExplicitReceiver,callableDescriptorCollector.getNonMembersByName(scope,name));
      result.addCandidates(extensionFunctions);
    }
  }
 else {
    List<Collection<ResolutionCandidate<D>>> localsList=Lists.newArrayList();
    List<Collection<ResolutionCandidate<D>>> nonlocalsList=Lists.newArrayList();
    for (    CallableDescriptorCollector<? extends D> callableDescriptorCollector : callableDescriptorCollectors) {
      Collection<ResolutionCandidate<D>> functions=convertWithImpliedThis(scope,Collections.singletonList(receiver),callableDescriptorCollector.getNonExtensionsByName(scope,name));
      List<ResolutionCandidate<D>> nonlocals=Lists.newArrayList();
      List<ResolutionCandidate<D>> locals=Lists.newArrayList();
      TaskPrioritizer.<D>splitLexicallyLocalDescriptors(functions,scope.getContainingDeclaration(),locals,nonlocals);
      localsList.add(locals);
      nonlocalsList.add(nonlocals);
    }
    result.addCandidates(localsList);
    for (    ReceiverValue implicitReceiver : implicitReceivers) {
      doComputeTasks(scope,implicitReceiver,name,result,context,callableDescriptorCollectors);
    }
    result.addCandidates(nonlocalsList);
  }
}
