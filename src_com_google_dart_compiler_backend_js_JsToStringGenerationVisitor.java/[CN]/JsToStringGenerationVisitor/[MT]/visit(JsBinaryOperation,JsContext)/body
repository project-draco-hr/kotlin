{
  JsBinaryOperator operator=binaryOperation.getOperator();
  JsExpression arg1=binaryOperation.getArg1();
  boolean isExpressionEnclosed=parenPush(binaryOperation,arg1,!operator.isLeftAssociative());
  accept(arg1);
  if (operator.isKeyword()) {
    _parenPopOrSpace(binaryOperation,arg1,!operator.isLeftAssociative());
  }
 else   if (operator != JsBinaryOperator.COMMA) {
    if (isExpressionEnclosed) {
      rightParen();
    }
    spaceOpt();
  }
  p.print(operator.getSymbol());
  JsExpression arg2=binaryOperation.getArg2();
  boolean isParenOpened;
  if (operator == JsBinaryOperator.COMMA) {
    isParenOpened=false;
    spaceOpt();
  }
 else   if (arg2 instanceof JsBinaryOperation && ((JsBinaryOperation)arg2).getOperator() == JsBinaryOperator.AND) {
    spaceOpt();
    leftParen();
    isParenOpened=true;
  }
 else {
    if (spaceCalc(operator,arg2)) {
      isParenOpened=_parenPushOrSpace(binaryOperation,arg2,operator.isLeftAssociative());
    }
 else {
      spaceOpt();
      isParenOpened=parenPush(binaryOperation,arg2,operator.isLeftAssociative());
    }
  }
  accept(arg2);
  if (isParenOpened) {
    rightParen();
  }
  return false;
}
