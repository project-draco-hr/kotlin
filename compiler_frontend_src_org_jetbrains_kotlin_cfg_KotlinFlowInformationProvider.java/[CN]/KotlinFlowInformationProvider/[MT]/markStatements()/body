{
  PseudocodeTraverserKt.traverse(pseudocode,TraversalOrder.FORWARD,new KotlinFlowInformationProvider.FunctionVoid1<Instruction>(){
    @Override public void execute(    @NotNull Instruction instruction){
      PseudoValue value=instruction instanceof InstructionWithValue ? ((InstructionWithValue)instruction).getOutputValue() : null;
      Pseudocode pseudocode=instruction.getOwner();
      boolean isUsedAsExpression=!pseudocode.getUsages(value).isEmpty();
      for (      KtElement element : pseudocode.getValueElements(value)) {
        trace.record(BindingContext.USED_AS_EXPRESSION,element,isUsedAsExpression);
      }
    }
  }
);
}
