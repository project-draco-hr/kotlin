{
  final Map<Instruction,DiagnosticFactory<?>> reportedDiagnosticMap=Maps.newHashMap();
  PseudocodeTraverserKt.traverse(pseudocode,TraversalOrder.FORWARD,new KotlinFlowInformationProvider.FunctionVoid1<Instruction>(){
    @Override public void execute(    @NotNull Instruction instruction){
      if (!(instruction instanceof KtElementInstruction))       return;
      KtElement element=((KtElementInstruction)instruction).getElement();
      if (!(element instanceof KtExpression))       return;
      if (BindingContextUtilsKt.isUsedAsStatement((KtExpression)element,trace.getBindingContext()) && PseudocodeUtilsKt.getSideEffectFree(instruction)) {
        VariableContext ctxt=new VariableContext(instruction,reportedDiagnosticMap);
        report(element instanceof KtLambdaExpression ? Errors.UNUSED_LAMBDA_EXPRESSION.on((KtLambdaExpression)element) : Errors.UNUSED_EXPRESSION.on(element),ctxt);
      }
    }
  }
);
}
