{
  org.jetbrains.kotlin.serialization.DebugProtoBuf.Class result=new org.jetbrains.kotlin.serialization.DebugProtoBuf.Class(this);
  int from_bitField0_=bitField0_;
  int to_bitField0_=0;
  if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
    to_bitField0_|=0x00000001;
  }
  result.flags_=flags_;
  if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
    to_bitField0_|=0x00000002;
  }
  result.extraVisibility_=extraVisibility_;
  if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
    to_bitField0_|=0x00000004;
  }
  result.fqName_=fqName_;
  if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
    to_bitField0_|=0x00000008;
  }
  if (classObjectBuilder_ == null) {
    result.classObject_=classObject_;
  }
 else {
    result.classObject_=classObjectBuilder_.build();
  }
  if (typeParameterBuilder_ == null) {
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      typeParameter_=java.util.Collections.unmodifiableList(typeParameter_);
      bitField0_=(bitField0_ & ~0x00000010);
    }
    result.typeParameter_=typeParameter_;
  }
 else {
    result.typeParameter_=typeParameterBuilder_.build();
  }
  if (supertypeBuilder_ == null) {
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      supertype_=java.util.Collections.unmodifiableList(supertype_);
      bitField0_=(bitField0_ & ~0x00000020);
    }
    result.supertype_=supertype_;
  }
 else {
    result.supertype_=supertypeBuilder_.build();
  }
  if (((bitField0_ & 0x00000040) == 0x00000040)) {
    nestedClassName_=java.util.Collections.unmodifiableList(nestedClassName_);
    bitField0_=(bitField0_ & ~0x00000040);
  }
  result.nestedClassName_=nestedClassName_;
  if (memberBuilder_ == null) {
    if (((bitField0_ & 0x00000080) == 0x00000080)) {
      member_=java.util.Collections.unmodifiableList(member_);
      bitField0_=(bitField0_ & ~0x00000080);
    }
    result.member_=member_;
  }
 else {
    result.member_=memberBuilder_.build();
  }
  if (((bitField0_ & 0x00000100) == 0x00000100)) {
    enumEntry_=java.util.Collections.unmodifiableList(enumEntry_);
    bitField0_=(bitField0_ & ~0x00000100);
  }
  result.enumEntry_=enumEntry_;
  if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
    to_bitField0_|=0x00000010;
  }
  if (primaryConstructorBuilder_ == null) {
    result.primaryConstructor_=primaryConstructor_;
  }
 else {
    result.primaryConstructor_=primaryConstructorBuilder_.build();
  }
  result.bitField0_=to_bitField0_;
  onBuilt();
  return result;
}
