{
  org.jetbrains.kotlin.serialization.DebugProtoBuf.Function result=new org.jetbrains.kotlin.serialization.DebugProtoBuf.Function(this);
  int from_bitField0_=bitField0_;
  int to_bitField0_=0;
  if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
    to_bitField0_|=0x00000001;
  }
  result.flags_=flags_;
  if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
    to_bitField0_|=0x00000002;
  }
  result.newFlags_=newFlags_;
  if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
    to_bitField0_|=0x00000004;
  }
  result.name_=name_;
  if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
    to_bitField0_|=0x00000008;
  }
  if (returnTypeBuilder_ == null) {
    result.returnType_=returnType_;
  }
 else {
    result.returnType_=returnTypeBuilder_.build();
  }
  if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
    to_bitField0_|=0x00000010;
  }
  result.returnTypeId_=returnTypeId_;
  if (typeParameterBuilder_ == null) {
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      typeParameter_=java.util.Collections.unmodifiableList(typeParameter_);
      bitField0_=(bitField0_ & ~0x00000020);
    }
    result.typeParameter_=typeParameter_;
  }
 else {
    result.typeParameter_=typeParameterBuilder_.build();
  }
  if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
    to_bitField0_|=0x00000020;
  }
  if (receiverTypeBuilder_ == null) {
    result.receiverType_=receiverType_;
  }
 else {
    result.receiverType_=receiverTypeBuilder_.build();
  }
  if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
    to_bitField0_|=0x00000040;
  }
  result.receiverTypeId_=receiverTypeId_;
  if (valueParameterBuilder_ == null) {
    if (((bitField0_ & 0x00000100) == 0x00000100)) {
      valueParameter_=java.util.Collections.unmodifiableList(valueParameter_);
      bitField0_=(bitField0_ & ~0x00000100);
    }
    result.valueParameter_=valueParameter_;
  }
 else {
    result.valueParameter_=valueParameterBuilder_.build();
  }
  if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
    to_bitField0_|=0x00000080;
  }
  if (typeTableBuilder_ == null) {
    result.typeTable_=typeTable_;
  }
 else {
    result.typeTable_=typeTableBuilder_.build();
  }
  result.bitField0_=to_bitField0_;
  onBuilt();
  return result;
}
