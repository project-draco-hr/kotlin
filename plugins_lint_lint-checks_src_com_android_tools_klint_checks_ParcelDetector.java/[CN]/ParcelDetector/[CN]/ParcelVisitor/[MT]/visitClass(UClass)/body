{
  if (node.getKind() != UastClassKind.CLASS || node.hasModifier(UastModifier.ABSTRACT)) {
    return true;
  }
  for (  UType reference : node.getSuperTypes()) {
    String name=reference.getName();
    if (name.equals("Parcelable")) {
      UVariable field=UastUtils.findStaticMemberOfType(node,"CREATOR",UVariable.class);
      boolean hasField=field != null && field.hasModifier(UastModifier.FIELD);
      boolean hasNamedCompanionObject=false;
      if (!hasField) {
        for (        UClass companion : node.getCompanions()) {
          if (companion.getName().equals("CREATOR")) {
            hasNamedCompanionObject=true;
            break;
          }
        }
      }
      if (!hasField && !hasNamedCompanionObject) {
        UClass parcelable=reference.resolve(mContext);
        if (parcelable != null) {
          if (!parcelable.isSubclassOf("android.os.Parcelable")) {
            return true;
          }
        }
        Location location=mContext.getLocation(node.getNameElement());
        mContext.report(ISSUE,node,location,"This class implements `Parcelable` but does not " + "provide a `CREATOR` field");
      }
    }
  }
  return true;
}
