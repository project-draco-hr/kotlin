{
  String documentText=editor.getDocument().getText();
  List<String> searchTextList=InTextDirectivesUtils.findListWithPrefixes(documentText,"// SEARCH_TEXT:");
  Assert.assertFalse("There's no search text in test data file given. Use '// SEARCH_TEXT:' directive",searchTextList.isEmpty());
  List<String> expectedReferences=CollectionsKt.map(InTextDirectivesUtils.findLinesWithPrefixesRemoved(documentText,"// REF:"),new Function1<String,String>(){
    @Override public String invoke(    String input){
      return input.trim();
    }
  }
);
  boolean enableCheckbox=InTextDirectivesUtils.isDirectiveDefined(documentText,"// CHECK_BOX");
  String searchText=searchTextList.get(0);
  List<Object> elementsByName=new ArrayList<Object>();
  String[] names=model.getNames(enableCheckbox);
  for (  String name : names) {
    if (name != null && name.startsWith(searchText)) {
      elementsByName.addAll(Arrays.asList(model.getElementsByName(name,enableCheckbox,name + "*")));
    }
  }
  List<String> renderedElements=Lists.transform(elementsByName,new Function<Object,String>(){
    @Override public String apply(    @Nullable Object element){
      Assert.assertNotNull(element);
      Assert.assertTrue(element instanceof PsiElement);
      return ReferenceUtils.renderAsGotoImplementation((PsiElement)element);
    }
  }
);
  boolean inexactMatching=InTextDirectivesUtils.isDirectiveDefined(documentText,"// ALLOW_MORE_RESULTS");
  if (inexactMatching) {
    UsefulTestCase.assertContainsElements(renderedElements,expectedReferences);
  }
 else {
    UsefulTestCase.assertOrderedEquals(Ordering.natural().sortedCopy(renderedElements),expectedReferences);
  }
}
