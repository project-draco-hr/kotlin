{
  ClassDescriptor iteratorOfT=JetStandardLibrary.getInstance().getIterator();
  JetType iteratorOfAny=TypeUtils.substituteParameters(iteratorOfT,Collections.singletonList(KotlinBuiltIns.getInstance().getAnyType()));
  boolean isIterator=JetTypeChecker.INSTANCE.isSubtypeOf(classDescriptor.getDefaultType(),iteratorOfAny);
  boolean hasRemove=hasMethod(classDescriptor,Name.identifier("remove"));
  return isIterator && !hasRemove;
}
