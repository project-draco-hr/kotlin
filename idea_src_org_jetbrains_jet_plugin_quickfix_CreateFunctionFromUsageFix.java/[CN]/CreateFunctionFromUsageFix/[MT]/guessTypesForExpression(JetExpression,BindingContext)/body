{
  JetType type=context.get(BindingContext.EXPRESSION_TYPE,expr);
  if (type != null) {
    return new JetType[]{type};
  }
 else   if ((type=context.get(BindingContext.EXPECTED_EXPRESSION_TYPE,expr)) != null) {
    return new JetType[]{type};
  }
 else   if (expr instanceof JetTypeConstraint) {
    JetTypeConstraint constraint=(JetTypeConstraint)expr;
    return new JetType[]{context.get(BindingContext.TYPE,constraint.getBoundTypeReference())};
  }
 else   if (expr.getParent() instanceof JetTypeConstraint) {
    JetTypeConstraint constraint=(JetTypeConstraint)expr.getParent();
    return new JetType[]{context.get(BindingContext.TYPE,constraint.getBoundTypeReference())};
  }
 else   if (expr instanceof JetMultiDeclarationEntry) {
    JetMultiDeclarationEntry entry=(JetMultiDeclarationEntry)expr;
    JetTypeReference typeRef=entry.getTypeRef();
    if (typeRef != null) {
      return new JetType[]{context.get(BindingContext.TYPE,typeRef)};
    }
    return guessTypeForDeclaration(entry,context);
  }
 else   if (expr instanceof JetParameter) {
    JetParameter parameter=(JetParameter)expr;
    JetTypeReference typeRef=parameter.getTypeReference();
    if (typeRef != null) {
      return new JetType[]{context.get(BindingContext.TYPE,typeRef)};
    }
    return guessTypeForDeclaration(parameter,context);
  }
 else   if (expr.getParent() instanceof JetVariableDeclaration) {
    JetVariableDeclaration variable=(JetVariableDeclaration)expr.getParent();
    JetTypeReference typeRef=variable.getTypeRef();
    if (typeRef != null) {
      return new JetType[]{context.get(BindingContext.TYPE,typeRef)};
    }
    return guessTypeForDeclaration(variable,context);
  }
  return new JetType[0];
}
