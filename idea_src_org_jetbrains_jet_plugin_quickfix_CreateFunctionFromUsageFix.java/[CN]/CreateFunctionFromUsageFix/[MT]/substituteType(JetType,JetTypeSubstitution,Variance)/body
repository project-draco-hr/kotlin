{
switch (variance) {
case INVARIANT:
    if (type.equals(substitution.getForType())) {
      return substitution.getByType();
    }
  break;
case IN_VARIANCE:
if (JetTypeChecker.INSTANCE.isSubtypeOf(type,substitution.getForType())) {
  return substitution.getByType();
}
break;
case OUT_VARIANCE:
if (JetTypeChecker.INSTANCE.isSubtypeOf(substitution.getForType(),type)) {
return substitution.getByType();
}
break;
}
List<TypeProjection> newArguments=new ArrayList<TypeProjection>();
List<TypeParameterDescriptor> typeParameters=type.getConstructor().getParameters();
int i=0;
for (TypeProjection projection : type.getArguments()) {
TypeParameterDescriptor typeParameter=typeParameters.get(i);
JetType newArgument=substituteType(projection.getType(),substitution,typeParameter.getVariance());
newArguments.add(new TypeProjectionImpl(Variance.INVARIANT,newArgument));
i++;
}
return new JetTypeImpl(type.getAnnotations(),type.getConstructor(),type.isNullable(),newArguments,type.getMemberScope());
}
