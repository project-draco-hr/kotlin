{
  return new JetSingleIntentionActionFactory(){
    @Nullable @Override public IntentionAction createAction(    Diagnostic diagnostic){
      PsiFile file=diagnostic.getPsiFile();
      if (!(file instanceof JetFile))       return null;
      JetFile jetFile=(JetFile)file;
      JetForExpression forExpr=QuickFixUtil.getParentElementOfType(diagnostic,JetForExpression.class);
      if (forExpr == null)       return null;
      JetExpression iterableExpr=forExpr.getLoopRange();
      if (iterableExpr == null)       return null;
      JetExpression variableExpr=forExpr.getLoopParameter();
      if (variableExpr == null) {
        variableExpr=forExpr.getMultiParameter();
        if (variableExpr == null)         return null;
      }
      TypeOrExpressionThereof iterableType=new TypeOrExpressionThereof(iterableExpr,Variance.IN_VARIANCE);
      JetType returnJetType=KotlinBuiltIns.getInstance().getIterator().getDefaultType();
      BindingContext context=ResolvePackage.getAnalysisResults(jetFile).getBindingContext();
      JetType[] returnJetTypeParameterTypes=guessTypesForExpression(variableExpr,context);
      if (returnJetTypeParameterTypes.length != 1)       return null;
      TypeProjection returnJetTypeParameterType=new TypeProjectionImpl(returnJetTypeParameterTypes[0]);
      List<TypeProjection> returnJetTypeArguments=Collections.singletonList(returnJetTypeParameterType);
      returnJetType=new JetTypeImpl(returnJetType.getAnnotations(),returnJetType.getConstructor(),returnJetType.isNullable(),returnJetTypeArguments,returnJetType.getMemberScope());
      TypeOrExpressionThereof returnType=new TypeOrExpressionThereof(returnJetType,Variance.OUT_VARIANCE);
      return new CreateFunctionFromUsageFix(forExpr,iterableType,"iterator",returnType,new ArrayList<Parameter>());
    }
  }
;
}
