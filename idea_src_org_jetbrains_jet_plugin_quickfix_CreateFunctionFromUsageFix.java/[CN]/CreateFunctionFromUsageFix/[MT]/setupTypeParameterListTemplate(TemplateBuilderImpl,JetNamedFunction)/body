{
  Map<String,String[]> typeParameterMap=new HashMap<String,String[]>();
  String[] receiverTypeParameterNames=selectedReceiverType.getTypeParameterNames();
  for (  Parameter parameter : parameters) {
    TypeCandidate[] parameterTypeCandidates=parameter.getType().getTypeCandidates();
    for (    TypeCandidate parameterTypeCandidate : parameterTypeCandidates) {
      typeParameterMap.put(parameterTypeCandidate.getRenderedType(),parameterTypeCandidate.getTypeParameterNames());
    }
  }
  JetTypeReference returnTypeRef=func.getReturnTypeRef();
  if (returnTypeRef != null) {
    TypeCandidate[] returnTypeCandidates=returnType.getTypeCandidates();
    for (    TypeCandidate returnTypeCandidate : returnTypeCandidates) {
      typeParameterMap.put(returnTypeCandidate.getRenderedType(),returnTypeCandidate.getTypeParameterNames());
    }
  }
  builder.replaceElement(func,TextRange.create(3,3),TYPE_PARAMETER_LIST_VARIABLE_NAME,null,false);
  return new TypeParameterListExpression(receiverTypeParameterNames,typeParameterMap);
}
