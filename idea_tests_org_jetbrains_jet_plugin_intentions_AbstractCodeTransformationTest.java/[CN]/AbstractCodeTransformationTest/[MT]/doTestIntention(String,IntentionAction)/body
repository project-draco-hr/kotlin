{
  configureByFile(path);
  DirectiveBasedActionUtils.checkForUnexpectedErrors((JetFile)getFile());
  String fileText=FileUtil.loadFile(new File(path),true);
  String isApplicableString=InTextDirectivesUtils.findStringWithPrefixes(fileText,"// IS_APPLICABLE: ");
  boolean isApplicableExpected=isApplicableString == null || isApplicableString.equals("true");
  Assert.assertTrue("isAvailable() for " + intentionAction.getClass() + " should return "+ isApplicableExpected,isApplicableExpected == intentionAction.isAvailable(getProject(),getEditor(),getFile()));
  String intentionTextString=InTextDirectivesUtils.findStringWithPrefixes(fileText,"// INTENTION_TEXT: ");
  if (intentionTextString != null) {
    assertEquals("Intention text mismatch.",intentionTextString,intentionAction.getText());
  }
  String shouldFailString=InTextDirectivesUtils.findStringWithPrefixes(fileText,"// SHOULD_FAIL_WITH: ");
  try {
    if (isApplicableExpected) {
      intentionAction.invoke(getProject(),getEditor(),getFile());
      if (shouldFailString == null) {
        checkResultByFile(path + ".after");
      }
    }
    assertNull("Expected test to fail.",shouldFailString);
  }
 catch (  IntentionTestException e) {
    assertEquals("Failure message mismatch.",shouldFailString,e.getMessage());
  }
}
