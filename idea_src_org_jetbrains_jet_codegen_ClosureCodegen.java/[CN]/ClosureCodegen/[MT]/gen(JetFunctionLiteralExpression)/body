{
  final Pair<String,ClassVisitor> nameAndVisitor=state.forAnonymousSubclass(fun);
  final FunctionDescriptor funDescriptor=(FunctionDescriptor)state.getBindingContext().getDeclarationDescriptor(fun);
  cv=nameAndVisitor.getSecond();
  name=nameAndVisitor.getFirst();
  SignatureWriter signatureWriter=new SignatureWriter();
  final List<ValueParameterDescriptor> parameters=funDescriptor.getValueParameters();
  final String funClass=getInternalClassName(funDescriptor);
  signatureWriter.visitClassType(funClass);
  for (  ValueParameterDescriptor parameter : parameters) {
    appendType(signatureWriter,parameter.getOutType(),'=');
  }
  appendType(signatureWriter,funDescriptor.getReturnType(),'=');
  signatureWriter.visitEnd();
  cv.visit(Opcodes.V1_6,Opcodes.ACC_PUBLIC,name,null,funClass,new String[0]);
  generateBridge(name,funDescriptor,cv);
  final boolean captureThis=generateBody(funDescriptor,cv,fun.getFunctionLiteral());
  final Method constructor=generateConstructor(funClass,captureThis);
  if (captureThis) {
    cv.visitField(Opcodes.ACC_PRIVATE,"this$0",enclosingClassType().getDescriptor(),null,null);
  }
  cv.visitEnd();
  final GeneratedAnonymousClassDescriptor answer=new GeneratedAnonymousClassDescriptor(name,constructor,captureThis);
  for (  DeclarationDescriptor descriptor : closure.keySet()) {
    final EnclosedValueDescriptor valueDescriptor=closure.get(descriptor);
    answer.addArg(valueDescriptor.getOuterValue());
  }
  return answer;
}
