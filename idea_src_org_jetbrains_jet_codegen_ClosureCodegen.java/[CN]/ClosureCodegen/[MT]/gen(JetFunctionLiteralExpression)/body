{
  JetNamedDeclaration container=PsiTreeUtil.getParentOfType(fun,JetNamespace.class,JetClass.class,JetObjectDeclaration.class);
  final Pair<String,ClassVisitor> nameAndVisitor;
  if (container instanceof JetNamespace) {
    nameAndVisitor=factory.forClosureIn((JetNamespace)container);
  }
 else {
    nameAndVisitor=factory.forClosureIn(bindingContext.getClassDescriptor((JetClassOrObject)container));
  }
  final FunctionDescriptor funDescriptor=(FunctionDescriptor)bindingContext.getDeclarationDescriptor(fun);
  final ClassVisitor cv=nameAndVisitor.getSecond();
  final String name=nameAndVisitor.getFirst();
  SignatureWriter signatureWriter=new SignatureWriter();
  final List<ValueParameterDescriptor> parameters=funDescriptor.getUnsubstitutedValueParameters();
  final String funClass=getInternalClassName(funDescriptor);
  signatureWriter.visitClassType(funClass);
  for (  ValueParameterDescriptor parameter : parameters) {
    appendType(signatureWriter,parameter.getOutType(),'=');
  }
  appendType(signatureWriter,funDescriptor.getUnsubstitutedReturnType(),'=');
  signatureWriter.visitEnd();
  cv.visit(Opcodes.V1_6,Opcodes.ACC_PUBLIC,name,null,funClass,new String[0]);
  final Method constructor=generateConstructor(cv,funClass);
  generateBridge(name,funDescriptor,cv);
  generateBody(name,funDescriptor,cv,container.getProject(),fun.getBody());
  cv.visitEnd();
  return new GeneratedClosureDescriptor(name,constructor);
}
