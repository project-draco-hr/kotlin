{
  Type[] argTypes=new Type[closure.size()];
  int i=0;
  for (  DeclarationDescriptor descriptor : closure.keySet()) {
    argTypes[i++]=state.getTypeMapper().mapType(((VariableDescriptor)descriptor).getOutType());
  }
  final Method constructor=new Method("<init>",Type.VOID_TYPE,argTypes);
  final MethodVisitor mv=cv.visitMethod(Opcodes.ACC_PUBLIC,"<init>",constructor.getDescriptor(),null,new String[0]);
  mv.visitCode();
  InstructionAdapter iv=new InstructionAdapter(mv);
  iv.load(0,Type.getObjectType(funClass));
  iv.invokespecial(funClass,"<init>","()V");
  for (int j=0; j < argTypes.length; j++) {
    Type type=argTypes[j];
    StackValue.local(0,JetTypeMapper.TYPE_OBJECT).put(JetTypeMapper.TYPE_OBJECT,iv);
    StackValue.local(j + 1,type).put(type,iv);
    StackValue.field(type,name,"$" + (j + 1),false).store(iv);
  }
  iv.visitInsn(Opcodes.RETURN);
  mv.visitMaxs(0,0);
  mv.visitEnd();
  return constructor;
}
