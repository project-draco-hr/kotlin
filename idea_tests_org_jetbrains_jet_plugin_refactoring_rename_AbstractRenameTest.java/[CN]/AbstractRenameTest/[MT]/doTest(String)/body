{
  try {
    String fileText=FileUtil.loadFile(new File(path));
    String renameDirective=InTextDirectivesUtils.findStringWithPrefixes(fileText,"// RENAME:");
    Assert.assertNotNull("'// RENAME:' directive is expected for rename test file",renameDirective);
    String[] strings=renameDirective.split("->");
    Assert.assertTrue("'// RENAME:' directive should have at least AbstractRenameTest.RenameType parameter",strings.length > 0);
    String renameTypeStr=strings[0];
    RenameType type=RenameType.valueOf(renameTypeStr);
    FqNameUnsafe fqNameUnsafe=new FqNameUnsafe(strings[1]);
switch (type) {
case JAVA_CLASS:
      renameJavaClassTest(fqNameUnsafe.asString(),strings[2]);
    break;
case JAVA_METHOD:
  renameJavaMethodTest(fqNameUnsafe.asString(),strings[2],strings[3]);
break;
case KOTLIN_CLASS:
renameKotlinClassTest(fqNameUnsafe.toSafe(),strings[2]);
break;
case KOTLIN_FUNCTION:
renameKotlinFunctionTest(fqNameUnsafe.parent().toSafe(),fqNameUnsafe.shortName().asString(),strings[2]);
break;
case KOTLIN_PROPERTY:
renameKotlinPropertyTest(fqNameUnsafe.parent().toSafe(),fqNameUnsafe.shortName().asString(),strings[2]);
break;
}
}
 catch (Exception e) {
throw ExceptionUtils.rethrow(e);
}
}
