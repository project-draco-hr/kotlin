{
  CompilerConfiguration configuration=new CompilerConfiguration();
  configuration.add(CLASSPATH_KEY,PathUtil.findRtJar());
  Disposable disposable=Disposer.newDisposable();
  try {
    JetCoreEnvironment coreEnvironment=JetCoreEnvironment.createForProduction(disposable,configuration);
    StringBuilder buf=new StringBuilder();
    Printer printer=new Printer(buf);
    printer.print(FileUtil.loadFile(new File("injector-generator/copyright.txt"))).println().println("package org.jetbrains.jet.lang.resolve.java.kotlinSignature;").println().println("import com.google.common.collect.ImmutableMultimap;").println().println("import static org.jetbrains.jet.lang.resolve.java.kotlinSignature.JavaToKotlinMethodMap.*;").println().println("/* This file is generated by ",GenerateJavaToKotlinMethodMap.class.getName(),". DO NOT EDIT! */").println("@SuppressWarnings(\"unchecked\")").println("class JavaToKotlinMethodMapGenerated {").pushIndent().println("final ImmutableMultimap<String, JavaToKotlinMethodMap.ClassData> map;").println().println("JavaToKotlinMethodMapGenerated() {").pushIndent().println("ImmutableMultimap.Builder<String, JavaToKotlinMethodMap.ClassData> b = ImmutableMultimap.builder();").println();
    MyMapBuilder builder=new MyMapBuilder(coreEnvironment.getProject());
    printer.printWithNoIndent(builder.toString());
    printer.println("map = b.build();");
    printer.popIndent().println("}");
    printer.popIndent().println("}");
    return buf;
  }
  finally {
    Disposer.dispose(disposable);
  }
}
