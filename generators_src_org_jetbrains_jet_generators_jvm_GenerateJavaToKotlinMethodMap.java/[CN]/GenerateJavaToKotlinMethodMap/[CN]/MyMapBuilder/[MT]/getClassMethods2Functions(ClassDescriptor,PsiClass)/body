{
  PsiMethod[] methods=psiClass.getMethods();
  List<Pair<PsiMethod,FunctionDescriptor>> result=Lists.newArrayList();
  for (  DeclarationDescriptor member : kotlinClass.getDefaultType().getMemberScope().getAllDescriptors()) {
    if (!(member instanceof FunctionDescriptor) || member.getContainingDeclaration() != kotlinClass) {
      continue;
    }
    FunctionDescriptor fun=(FunctionDescriptor)member;
    PsiMethod foundMethod=findMethod(methods,fun);
    if (foundMethod != null) {
      result.add(Pair.create(foundMethod,fun));
    }
  }
  Collections.sort(result,new Comparator<Pair<PsiMethod,FunctionDescriptor>>(){
    @Override public int compare(    Pair<PsiMethod,FunctionDescriptor> pair1,    Pair<PsiMethod,FunctionDescriptor> pair2){
      PsiMethod method1=pair1.first;
      PsiMethod method2=pair2.first;
      String name1=method1.getName();
      String name2=method2.getName();
      if (!name1.equals(name2)) {
        return name1.compareTo(name2);
      }
      String serialized1=serializePsiMethod(method1);
      String serialized2=serializePsiMethod(method2);
      return serialized1.compareTo(serialized2);
    }
  }
);
  return result;
}
