{
  if (expression == null) {
    return TypeInfoForCall.create(null,context.dataFlowInfo);
  }
  if (expression instanceof JetFunctionLiteralExpression) {
    return TypeInfoForCall.create(getFunctionLiteralTypeInfo((JetFunctionLiteralExpression)expression,context,resolveArgumentsMode));
  }
  TypeInfoForCall cachedTypeInfo=getRecordedTypeInfoForCall(expression,context);
  if (cachedTypeInfo != null) {
    return cachedTypeInfo;
  }
  CallExpressionResolver callExpressionResolver=expressionTypingServices.getCallExpressionResolver();
  TypeInfoForCall result=null;
  if (expression instanceof JetCallExpression) {
    result=callExpressionResolver.getCallExpressionTypeInfoForCall((JetCallExpression)expression,ReceiverValue.NO_RECEIVER,null,context.replaceExpectedType(TypeUtils.NO_EXPECTED_TYPE),ResolveMode.NESTED_CALL);
  }
  if (expression instanceof JetQualifiedExpression) {
    result=callExpressionResolver.getQualifiedExpressionExtendedTypeInfo((JetQualifiedExpression)expression,context.replaceExpectedType(TypeUtils.NO_EXPECTED_TYPE),ResolveMode.NESTED_CALL);
  }
  if (result != null) {
    recordExpressionType(expression,context,result.getTypeInfo());
    CallCandidateResolutionContext<FunctionDescriptor> deferredContext=result.getCallCandidateResolutionContext();
    if (deferredContext != null) {
      context.trace.record(BindingContext.DEFERRED_COMPUTATION_FOR_CALL,expression,deferredContext);
    }
    return result;
  }
  return TypeInfoForCall.create(expressionTypingServices.getTypeInfo(context.scope,expression,context.expectedType,context.dataFlowInfo,context.trace));
}
