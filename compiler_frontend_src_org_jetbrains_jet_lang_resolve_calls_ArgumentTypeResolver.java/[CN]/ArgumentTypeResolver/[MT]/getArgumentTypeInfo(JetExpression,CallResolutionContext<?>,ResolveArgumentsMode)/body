{
  if (expression == null) {
    return JetTypeInfo.create(null,context.dataFlowInfo);
  }
  if (isFunctionLiteralArgument(expression)) {
    return getFunctionLiteralTypeInfo(expression,getFunctionLiteralArgument(expression),context,resolveArgumentsMode);
  }
  JetTypeInfo recordedTypeInfo=getRecordedTypeInfo(expression,context.trace.getBindingContext());
  if (recordedTypeInfo != null) {
    return recordedTypeInfo;
  }
  ResolutionContext newContext=context.replaceExpectedType(NO_EXPECTED_TYPE).replaceContextDependency(DEPENDENT);
  return expressionTypingServices.getTypeInfo(expression,newContext);
}
