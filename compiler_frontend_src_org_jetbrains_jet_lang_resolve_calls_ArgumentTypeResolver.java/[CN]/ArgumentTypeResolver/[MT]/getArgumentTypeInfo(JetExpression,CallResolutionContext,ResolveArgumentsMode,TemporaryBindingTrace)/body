{
  if (expression == null) {
    return JetTypeInfo.create(null,context.dataFlowInfo);
  }
  if (expression instanceof JetFunctionLiteralExpression) {
    return getFunctionLiteralTypeInfo((JetFunctionLiteralExpression)expression,context,resolveArgumentsMode);
  }
  JetTypeInfo recordedTypeInfo=getRecordedTypeInfo(expression,context.trace.getBindingContext());
  if (recordedTypeInfo != null) {
    return recordedTypeInfo;
  }
  CallExpressionResolver callExpressionResolver=expressionTypingServices.getCallExpressionResolver();
  if (!(expression instanceof JetCallExpression) && !(expression instanceof JetQualifiedExpression)) {
    return expressionTypingServices.getTypeInfo(context.scope,expression,context.expectedType,context.dataFlowInfo,context.trace);
  }
  TypeInfoForCall result;
  if (expression instanceof JetCallExpression) {
    result=callExpressionResolver.getCallExpressionTypeInfoForCall((JetCallExpression)expression,ReceiverValue.NO_RECEIVER,null,context.replaceExpectedType(TypeUtils.NO_EXPECTED_TYPE),ResolveMode.NESTED_CALL,context.resolutionResultsCache);
  }
 else {
    result=callExpressionResolver.getQualifiedExpressionExtendedTypeInfo((JetQualifiedExpression)expression,context.replaceExpectedType(TypeUtils.NO_EXPECTED_TYPE),ResolveMode.NESTED_CALL,context.resolutionResultsCache);
  }
  recordExpressionType(expression,context.trace,context.scope,result.getTypeInfo());
  CallCandidateResolutionContext<FunctionDescriptor> deferredContext=result.getCallCandidateResolutionContext();
  if (deferredContext != null) {
    context.resolutionResultsCache.recordDeferredComputationForCall(expression,deferredContext);
  }
  if (traceToCommitForCall != null) {
    traceToCommitForCall.commit();
  }
  return result.getTypeInfo();
}
