{
  final List<NameChecker> checkersWithPrefixChecker=Lists.newArrayList(JET);
  checkersWithPrefixChecker.addAll(checkers);
  return new Pattern(){
    @Override public boolean apply(    @NotNull FunctionDescriptor descriptor){
      try {
        return doApply(descriptor);
      }
 catch (      IllegalArgumentException e) {
        return false;
      }
    }
    private boolean doApply(    @NotNull FunctionDescriptor descriptor){
      List<Name> nameParts=DescriptorUtils.getFQName(descriptor).pathSegments();
      if (nameParts.size() != checkersWithPrefixChecker.size()) {
        return false;
      }
      if (!allNamePartsValid(nameParts))       return false;
      return true;
    }
    private boolean allNamePartsValid(    @NotNull List<Name> nameParts){
      for (int i=0; i < nameParts.size(); ++i) {
        Name namePart=nameParts.get(i);
        NameChecker correspondingPredicate=checkersWithPrefixChecker.get(i);
        if (!correspondingPredicate.isValid(namePart)) {
          return false;
        }
      }
      return true;
    }
  }
;
}
