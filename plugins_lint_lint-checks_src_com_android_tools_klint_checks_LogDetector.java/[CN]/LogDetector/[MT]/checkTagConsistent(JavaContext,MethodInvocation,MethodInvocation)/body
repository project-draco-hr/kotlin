{
  Iterator<Expression> isLogIterator=call.astArguments().iterator();
  Iterator<Expression> logIterator=logCall.astArguments().iterator();
  if (!isLogIterator.hasNext() || !logIterator.hasNext()) {
    return;
  }
  Expression isLoggableTag=isLogIterator.next();
  Expression logTag=logIterator.next();
  String logCallName=logCall.astName().astValue();
  boolean isPrintln=PRINTLN.equals(logCallName);
  if (isPrintln) {
    if (!logIterator.hasNext()) {
      return;
    }
    logTag=logIterator.next();
  }
  if (logTag != null) {
    if (!isLoggableTag.toString().equals(logTag.toString())) {
      ResolvedNode resolved1=context.resolve(isLoggableTag);
      ResolvedNode resolved2=context.resolve(logTag);
      if ((resolved1 == null || resolved2 == null || !resolved1.equals(resolved2)) && context.isEnabled(WRONG_TAG)) {
        Location location=context.getLocation(logTag);
        Location alternate=context.getLocation(isLoggableTag);
        alternate.setMessage("Conflicting tag");
        location.setSecondary(alternate);
        String isLoggableDescription=resolved1 != null ? resolved1.getName() : isLoggableTag.toString();
        String logCallDescription=resolved2 != null ? resolved2.getName() : logTag.toString();
        String message=String.format("Mismatched tags: the `%1$s()` and `isLoggable()` calls typically " + "should pass the same tag: `%2$s` versus `%3$s`",logCallName,isLoggableDescription,logCallDescription);
        context.report(WRONG_TAG,call,location,message);
      }
    }
  }
  if (logCallName.length() != 1 || !isLogIterator.hasNext()) {
    return;
  }
  Expression isLoggableLevel=isLogIterator.next();
  if (isLoggableLevel == null) {
    return;
  }
  String levelString=isLoggableLevel.toString();
  if (isLoggableLevel instanceof Select) {
    levelString=((Select)isLoggableLevel).astIdentifier().astValue();
  }
  if (levelString.isEmpty()) {
    return;
  }
  char levelChar=Character.toLowerCase(levelString.charAt(0));
  if (logCallName.charAt(0) == levelChar || !context.isEnabled(WRONG_TAG)) {
    return;
  }
switch (levelChar) {
case 'd':
case 'e':
case 'i':
case 'v':
case 'w':
    break;
default :
  return;
}
String expectedCall=String.valueOf(levelChar);
String message=String.format("Mismatched logging levels: when checking `isLoggable` level `%1$s`, the " + "corresponding log call should be `Log.%2$s`, not `Log.%3$s`",levelString,expectedCall,logCallName);
Location location=context.getLocation(logCall.astName());
Location alternate=context.getLocation(isLoggableLevel);
alternate.setMessage("Conflicting tag");
location.setSecondary(alternate);
context.report(WRONG_TAG,call,location,message);
}
