{
  Iterator<UExpression> isLogIterator=call.getValueArguments().iterator();
  Iterator<UExpression> logIterator=logCall.getValueArguments().iterator();
  if (!isLogIterator.hasNext() || !logIterator.hasNext()) {
    return;
  }
  UExpression isLoggableTag=isLogIterator.next();
  UExpression logTag=logIterator.next();
  String logCallName=logCall.getFunctionName();
  if (logCallName == null) {
    return;
  }
  boolean isPrintln=PRINTLN.equals(logCallName);
  if (isPrintln) {
    if (!logIterator.hasNext()) {
      return;
    }
    logTag=logIterator.next();
  }
  JavaContext lintContext=context.getLintContext();
  if (logTag != null) {
    String isLoggableTagString=null;
    String logTagString=null;
    boolean isOk=true;
    Object isLoggableTagValue=isLoggableTag.evaluate();
    Object logTagValue=logTag.evaluate();
    if (isLoggableTagValue instanceof String && logTagValue instanceof String) {
      isLoggableTagString=(String)isLoggableTagValue;
      logTagString=(String)logTagValue;
      isOk=isLoggableTagString.equals(logTagString);
    }
 else     if (isLoggableTag instanceof UResolvable && logTag instanceof UResolvable) {
      UDeclaration isLoggableTagResolved=((UResolvable)isLoggableTag).resolve(context);
      UDeclaration logTagResolved=((UResolvable)logTag).resolve(context);
      if (isLoggableTagResolved != null && logTagResolved != null) {
        isOk=isLoggableTagResolved.equals(logTagResolved);
      }
    }
    if (!isOk) {
      Location location=context.getLocation(logTag);
      Location alternate=context.getLocation(isLoggableTag);
      if (location != null && alternate != null) {
        alternate.setMessage("Conflicting tag");
        location.setSecondary(alternate);
        String message=String.format("Mismatched tags: the `%1$s()` and `isLoggable()` calls typically " + "should pass the same tag: `%2$s` versus `%3$s`",logCallName,isLoggableTagValue,logTagValue);
        context.report(WRONG_TAG,call,location,message);
      }
    }
  }
  if (logCallName.length() != 1 || !isLogIterator.hasNext()) {
    return;
  }
  UExpression isLoggableLevel=isLogIterator.next();
  if (isLoggableLevel == null) {
    return;
  }
  String levelString=isLoggableLevel.toString();
  if (isLoggableLevel instanceof UQualifiedExpression) {
    String identifier=((UQualifiedExpression)isLoggableLevel).getSelectorAsIdentifier();
    if (identifier != null) {
      levelString=identifier;
    }
  }
  if (levelString.isEmpty()) {
    return;
  }
  char levelChar=Character.toLowerCase(levelString.charAt(0));
  if (logCallName.charAt(0) == levelChar || !lintContext.isEnabled(WRONG_TAG)) {
    return;
  }
switch (levelChar) {
case 'd':
case 'e':
case 'i':
case 'v':
case 'w':
    break;
default :
  return;
}
String expectedCall=String.valueOf(levelChar);
String message=String.format("Mismatched logging levels: when checking `isLoggable` level `%1$s`, the " + "corresponding log call should be `Log.%2$s`, not `Log.%3$s`",levelString,expectedCall,logCallName);
Location location=context.getLocation(logCall.getFunctionNameElement());
Location alternate=context.getLocation(isLoggableLevel);
if (location != null && alternate != null) {
alternate.setMessage("Conflicting tag");
location.setSecondary(alternate);
context.report(WRONG_TAG,call,location,message);
}
}
