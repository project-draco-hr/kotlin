{
  ExpressionTypingContext contextWithNoExpectedType=context.replaceExpectedType(NO_EXPECTED_TYPE);
  DataFlowInfo dataFlowInfo=facade.getTypeInfo(right,contextWithNoExpectedType).getDataFlowInfo();
  Name name=Name.identifier("contains");
  ExpressionReceiver receiver=safeGetExpressionReceiver(facade,right,contextWithNoExpectedType);
  ExpressionTypingContext contextWithDataFlow=context.replaceDataFlowInfo(dataFlowInfo);
  OverloadResolutionResults<FunctionDescriptor> resolutionResult=contextWithDataFlow.resolveCallWithGivenName(CallMaker.makeCallWithExpressions(callElement,receiver,null,operationSign,Collections.singletonList(left)),operationSign,name);
  JetType containsType=OverloadResolutionResultsUtil.getResultType(resolutionResult);
  ensureBooleanResult(operationSign,name,containsType,context);
  if (left != null) {
    dataFlowInfo=facade.getTypeInfo(left,contextWithDataFlow).getDataFlowInfo();
  }
  return Pair.create(resolutionResult.isSuccess(),dataFlowInfo);
}
