{
  if (right == null)   return JetTypeInfo.create(null,context.dataFlowInfo);
  ExpressionTypingContext contextWithNoExpectedType=context.replaceExpectedType(NO_EXPECTED_TYPE);
  DataFlowInfo dataFlowInfo=facade.getTypeInfo(right,contextWithNoExpectedType).getDataFlowInfo();
  ExpressionReceiver receiver=safeGetExpressionReceiver(facade,right,contextWithNoExpectedType);
  ExpressionTypingContext contextWithDataFlow=context.replaceDataFlowInfo(dataFlowInfo);
  OverloadResolutionResults<FunctionDescriptor> resolutionResult=contextWithDataFlow.resolveCallWithGivenName(CallMaker.makeCallWithExpressions(callElement,receiver,null,operationSign,Collections.singletonList(left)),operationSign,OperatorConventions.CONTAINS);
  JetType containsType=OverloadResolutionResultsUtil.getResultingType(resolutionResult,context.contextDependency);
  ensureBooleanResult(operationSign,OperatorConventions.CONTAINS,containsType,context);
  if (left != null) {
    dataFlowInfo=facade.getTypeInfo(left,contextWithDataFlow).getDataFlowInfo().and(dataFlowInfo);
  }
  return JetTypeInfo.create(resolutionResult.isSuccess() ? KotlinBuiltIns.getInstance().getBooleanType() : null,dataFlowInfo);
}
