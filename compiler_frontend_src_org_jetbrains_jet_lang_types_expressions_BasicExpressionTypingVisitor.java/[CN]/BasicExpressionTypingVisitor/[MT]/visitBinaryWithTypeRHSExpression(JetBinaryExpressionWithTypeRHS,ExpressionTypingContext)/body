{
  JetExpression left=expression.getLeft();
  JetTypeReference right=expression.getRight();
  JetType result=null;
  DataFlowInfo dataFlowInfo=context.dataFlowInfo;
  if (right != null) {
    JetType targetType=context.expressionTypingServices.getTypeResolver().resolveType(context.scope,right,context.trace,true);
    IElementType operationType=expression.getOperationReference().getReferencedNameElementType();
    boolean tryWithNoExpectedType=true;
    if (isTypeFlexible(left) || operationType == JetTokens.COLON) {
      TemporaryBindingTrace temporaryTraceWithExpectedType=TemporaryBindingTrace.create(context.trace,"trace for resolve RHSExpression",expression);
      ExpressionTypingContext contextWithTemporaryTrace=context.replaceBindingTrace(temporaryTraceWithExpectedType).replaceExpectedType(targetType);
      JetTypeInfo typeInfo=facade.getTypeInfo(left,contextWithTemporaryTrace);
      if (typeInfo.getType() != null && checkBinaryWithTypeRHS(expression,contextWithTemporaryTrace,targetType,typeInfo.getType())) {
        temporaryTraceWithExpectedType.commit();
        dataFlowInfo=typeInfo.getDataFlowInfo();
        tryWithNoExpectedType=false;
      }
    }
    if (tryWithNoExpectedType) {
      ExpressionTypingContext contextWithNoExpectedType=context.replaceExpectedType(NO_EXPECTED_TYPE);
      JetTypeInfo typeInfo=facade.getTypeInfo(left,contextWithNoExpectedType);
      if (typeInfo.getType() != null) {
        checkBinaryWithTypeRHS(expression,contextWithNoExpectedType,targetType,typeInfo.getType());
        dataFlowInfo=typeInfo.getDataFlowInfo();
        if (operationType == JetTokens.AS_KEYWORD) {
          DataFlowValue value=DataFlowValueFactory.INSTANCE.createDataFlowValue(left,typeInfo.getType(),context.trace.getBindingContext());
          dataFlowInfo=dataFlowInfo.establishSubtyping(value,targetType);
        }
      }
    }
    result=operationType == JetTokens.AS_SAFE ? TypeUtils.makeNullable(targetType) : targetType;
  }
 else {
    dataFlowInfo=facade.getTypeInfo(left,context.replaceExpectedType(NO_EXPECTED_TYPE)).getDataFlowInfo();
  }
  return DataFlowUtils.checkType(result,expression,context,dataFlowInfo);
}
