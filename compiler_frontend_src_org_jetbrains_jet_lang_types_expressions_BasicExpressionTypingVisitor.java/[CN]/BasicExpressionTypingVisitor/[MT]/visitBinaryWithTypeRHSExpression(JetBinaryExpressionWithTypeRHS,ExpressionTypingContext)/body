{
  JetTypeReference right=expression.getRight();
  JetType result=null;
  if (right != null) {
    JetType targetType=context.expressionTypingServices.getTypeResolver().resolveType(context.scope,right,context.trace,true);
    if (isTypeFlexible(expression.getLeft()) || expression.getOperationSign().getReferencedNameElementType() == JetTokens.COLON) {
      TemporaryBindingTrace temporaryTraceWithExpectedType=TemporaryBindingTrace.create(context.trace);
      boolean success=checkBinaryWithTypeRHS(expression,context.replaceBindingTrace(temporaryTraceWithExpectedType).replaceExpectedType(targetType),targetType);
      if (success) {
        temporaryTraceWithExpectedType.commit();
      }
 else {
        checkBinaryWithTypeRHS(expression,context.replaceExpectedType(NO_EXPECTED_TYPE),targetType);
      }
    }
 else {
      checkBinaryWithTypeRHS(expression,context.replaceExpectedType(NO_EXPECTED_TYPE),targetType);
    }
    IElementType operationType=expression.getOperationSign().getReferencedNameElementType();
    result=operationType == JetTokens.AS_SAFE ? TypeUtils.makeNullable(targetType) : targetType;
  }
 else {
    facade.getType(expression.getLeft(),context.replaceExpectedType(NO_EXPECTED_TYPE));
  }
  return DataFlowUtils.checkType(result,expression,context,context.dataFlowInfo);
}
