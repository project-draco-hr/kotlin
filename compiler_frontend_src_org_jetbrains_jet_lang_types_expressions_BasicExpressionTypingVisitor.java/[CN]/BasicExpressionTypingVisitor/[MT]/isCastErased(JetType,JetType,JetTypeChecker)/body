{
  if (!(targetType.getConstructor().getDeclarationDescriptor() instanceof ClassDescriptor)) {
    return false;
  }
  if (ErrorUtils.isErrorType(actualType) || ErrorUtils.isErrorType(targetType)) {
    return false;
  }
  List<TypeParameterDescriptor> actualTypeParameters=actualType.getConstructor().getParameters();
{
    Multimap<TypeConstructor,TypeProjection> typeSubstitutionMap=SubstitutionUtils.buildDeepSubstitutionMultimap(targetType);
    for (int i=0; i < actualTypeParameters.size(); i++) {
      TypeProjection actualTypeArgument=actualType.getArguments().get(i);
      TypeParameterDescriptor actualTypeParameter=actualTypeParameters.get(i);
      if (actualTypeParameter.isReified()) {
        continue;
      }
      Collection<TypeProjection> substituted=typeSubstitutionMap.get(actualTypeParameter.getTypeConstructor());
      for (      TypeProjection substitutedProjection : substituted) {
        if (!typeChecker.isSubtypeOf(actualTypeArgument.getType(),substitutedProjection.getType())) {
          return true;
        }
      }
    }
  }
{
    JetType targetTypeCleared=TypeUtils.makeUnsubstitutedType((ClassDescriptor)targetType.getConstructor().getDeclarationDescriptor(),null);
    Multimap<TypeConstructor,TypeProjection> clearTypeSubstitutionMap=SubstitutionUtils.buildDeepSubstitutionMultimap(targetTypeCleared);
    Set<JetType> clearSubstituted=new HashSet<JetType>();
    for (    TypeParameterDescriptor actualTypeParameter : actualTypeParameters) {
      Collection<TypeProjection> substituted=clearTypeSubstitutionMap.get(actualTypeParameter.getTypeConstructor());
      for (      TypeProjection substitutedProjection : substituted) {
        clearSubstituted.add(substitutedProjection.getType());
      }
    }
    List<TypeParameterDescriptor> targetTypeParameters=targetType.getConstructor().getParameters();
    for (int i=0; i < targetTypeParameters.size(); i++) {
      TypeParameterDescriptor typeParameter=targetTypeParameters.get(i);
      if (typeParameter.isReified()) {
        continue;
      }
      TypeProjection typeArgument=targetType.getArguments().get(i);
      if (typeArgument.equals(SubstitutionUtils.makeStarProjection(typeParameter))) {
        continue;
      }
      if (!clearSubstituted.contains(typeParameter.getDefaultType())) {
        return true;
      }
    }
  }
  return false;
}
