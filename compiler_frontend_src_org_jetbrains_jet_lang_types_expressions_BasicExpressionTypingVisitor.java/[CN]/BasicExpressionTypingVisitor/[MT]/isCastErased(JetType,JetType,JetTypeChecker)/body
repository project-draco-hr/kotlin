{
  if (!(subtype.getConstructor().getDeclarationDescriptor() instanceof ClassDescriptor)) {
    return false;
  }
  if (ErrorUtils.isErrorType(supertype) || ErrorUtils.isErrorType(subtype)) {
    return false;
  }
  List<TypeParameterDescriptor> superTypeParameters=supertype.getConstructor().getParameters();
{
    Multimap<TypeConstructor,TypeProjection> subtypeSubstitutionMap=SubstitutionUtils.buildDeepSubstitutionMultimap(subtype);
    for (int i=0; i < superTypeParameters.size(); i++) {
      TypeProjection superTypeArgument=supertype.getArguments().get(i);
      TypeParameterDescriptor superTypeParameter=superTypeParameters.get(i);
      if (superTypeParameter.isReified()) {
        continue;
      }
      Collection<TypeProjection> substituted=subtypeSubstitutionMap.get(superTypeParameter.getTypeConstructor());
      for (      TypeProjection substitutedProjection : substituted) {
        if (!typeChecker.isSubtypeOf(superTypeArgument.getType(),substitutedProjection.getType())) {
          return true;
        }
      }
    }
  }
{
    JetType subtypeCleared=TypeUtils.makeUnsubstitutedType((ClassDescriptor)subtype.getConstructor().getDeclarationDescriptor(),null);
    Multimap<TypeConstructor,TypeProjection> clearTypeSubstitutionMap=SubstitutionUtils.buildDeepSubstitutionMultimap(subtypeCleared);
    Set<JetType> clearSubstituted=new HashSet<JetType>();
    for (    TypeParameterDescriptor superTypeParameter : superTypeParameters) {
      Collection<TypeProjection> substituted=clearTypeSubstitutionMap.get(superTypeParameter.getTypeConstructor());
      for (      TypeProjection substitutedProjection : substituted) {
        clearSubstituted.add(substitutedProjection.getType());
      }
    }
    List<TypeParameterDescriptor> subTypeParameters=subtype.getConstructor().getParameters();
    for (int i=0; i < subTypeParameters.size(); i++) {
      TypeParameterDescriptor typeParameter=subTypeParameters.get(i);
      if (typeParameter.isReified()) {
        continue;
      }
      TypeProjection typeArgument=subtype.getArguments().get(i);
      if (typeArgument.equals(SubstitutionUtils.makeStarProjection(typeParameter))) {
        continue;
      }
      if (!clearSubstituted.contains(typeParameter.getDefaultType())) {
        return true;
      }
    }
  }
  return false;
}
