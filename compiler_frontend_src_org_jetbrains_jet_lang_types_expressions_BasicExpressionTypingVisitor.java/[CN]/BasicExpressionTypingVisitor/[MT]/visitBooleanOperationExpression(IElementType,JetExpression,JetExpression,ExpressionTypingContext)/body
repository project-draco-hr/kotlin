{
  JetType booleanType=KotlinBuiltIns.getInstance().getBooleanType();
  JetTypeInfo leftTypeInfo=getTypeInfoOrNullType(left,context,facade);
  JetType leftType=leftTypeInfo.getType();
  DataFlowInfo dataFlowInfo=leftTypeInfo.getDataFlowInfo();
  WritableScopeImpl leftScope=newWritableScopeImpl(context,"Left scope of && or ||");
  boolean isAnd=operationType == JetTokens.ANDAND;
  DataFlowInfo flowInfoLeft=DataFlowUtils.extractDataFlowInfoFromCondition(left,isAnd,context).and(dataFlowInfo);
  WritableScopeImpl rightScope=isAnd ? leftScope : newWritableScopeImpl(context,"Right scope of && or ||");
  ExpressionTypingContext contextForRightExpr=context.replaceDataFlowInfo(flowInfoLeft).replaceScope(rightScope);
  JetType rightType=right != null ? facade.getTypeInfo(right,contextForRightExpr).getType() : null;
  if (left != null && leftType != null && !isBoolean(leftType)) {
    context.trace.report(TYPE_MISMATCH.on(left,booleanType,leftType));
  }
  if (rightType != null && !isBoolean(rightType)) {
    context.trace.report(TYPE_MISMATCH.on(right,booleanType,rightType));
  }
  return JetTypeInfo.create(booleanType,dataFlowInfo);
}
