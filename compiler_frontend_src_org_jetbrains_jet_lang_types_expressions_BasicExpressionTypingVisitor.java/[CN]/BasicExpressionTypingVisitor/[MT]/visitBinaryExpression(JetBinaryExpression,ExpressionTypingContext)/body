{
  ExpressionTypingContext context=isBinaryExpressionDependentOnExpectedType(expression) ? contextWithExpectedType : contextWithExpectedType.replaceContextDependency(INDEPENDENT).replaceExpectedType(NO_EXPECTED_TYPE);
  JetSimpleNameExpression operationSign=expression.getOperationReference();
  JetExpression left=expression.getLeft();
  JetExpression right=expression.getRight();
  IElementType operationType=operationSign.getReferencedNameElementType();
  JetTypeInfo result;
  if (operationType == JetTokens.IDENTIFIER) {
    Name referencedName=operationSign.getReferencedNameAsName();
    result=getTypeInfoForBinaryCall(referencedName,context,expression);
  }
 else   if (OperatorConventions.BINARY_OPERATION_NAMES.containsKey(operationType)) {
    Name referencedName=OperatorConventions.BINARY_OPERATION_NAMES.get(operationType);
    result=getTypeInfoForBinaryCall(referencedName,context,expression);
  }
 else   if (operationType == JetTokens.ELVIS) {
    return visitElvisExpression(expression,context);
  }
 else   if (operationType == JetTokens.EQ) {
    result=visitAssignment(expression,context);
  }
 else   if (OperatorConventions.ASSIGNMENT_OPERATIONS.containsKey(operationType)) {
    result=visitAssignmentOperation(expression,context);
  }
 else   if (OperatorConventions.COMPARISON_OPERATIONS.contains(operationType)) {
    result=visitComparison(expression,context,operationSign);
  }
 else   if (OperatorConventions.EQUALS_OPERATIONS.contains(operationType)) {
    result=visitEquality(expression,context,operationSign,left,right);
  }
 else   if (operationType == JetTokens.EQEQEQ || operationType == JetTokens.EXCLEQEQEQ) {
    ensureNonemptyIntersectionOfOperandTypes(expression,context);
    result=JetTypeInfo.create(KotlinBuiltIns.getInstance().getBooleanType(),context.dataFlowInfo);
  }
 else   if (OperatorConventions.IN_OPERATIONS.contains(operationType)) {
    result=checkInExpression(expression,operationSign,left,right,context);
  }
 else   if (OperatorConventions.BOOLEAN_OPERATIONS.containsKey(operationType)) {
    result=visitBooleanOperationExpression(operationType,left,right,context);
  }
 else {
    context.trace.report(UNSUPPORTED.on(operationSign,"Unknown operation"));
    result=JetTypeInfo.create(null,context.dataFlowInfo);
  }
  return DataFlowUtils.checkType(result,expression,contextWithExpectedType);
}
