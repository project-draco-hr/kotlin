{
  IElementType elementType=expression.getNode().getElementType();
  String text=expression.getNode().getText();
  KotlinBuiltIns builtIns=KotlinBuiltIns.getInstance();
  CompileTimeConstantResolver compileTimeConstantResolver=context.getCompileTimeConstantResolver();
  if (noExpectedType(context.expectedType) && context.contextDependency == DEPENDENT) {
    if (elementType == JetNodeTypes.INTEGER_CONSTANT) {
      Long longValue=CompileTimeConstantResolver.parseLongValue(text);
      if (longValue != null) {
        return createNumberValueTypeInfo(IntegerValueTypeConstructor.create(longValue),longValue,context.dataFlowInfo);
      }
    }
 else     if (elementType == JetNodeTypes.FLOAT_CONSTANT) {
      Double doubleValue=CompileTimeConstantResolver.parseDoubleValue(text);
      if (doubleValue != null) {
        return createNumberValueTypeInfo(DoubleValueTypeConstructor.create(doubleValue),doubleValue,context.dataFlowInfo);
      }
    }
  }
  CompileTimeConstant<?> value=compileTimeConstantResolver.getCompileTimeConstant(expression,context.expectedType);
  if (value instanceof ErrorValue) {
    if (context.contextDependency == INDEPENDENT) {
      context.trace.report(ERROR_COMPILE_TIME_VALUE.on(expression,((ErrorValue)value).getMessage()));
    }
    return JetTypeInfo.create(getDefaultType(elementType),context.dataFlowInfo);
  }
  context.trace.record(BindingContext.COMPILE_TIME_VALUE,expression,value);
  return DataFlowUtils.checkType(value.getType(builtIns),expression,context,context.dataFlowInfo);
}
