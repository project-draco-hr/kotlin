{
  ASTNode node=expression.getNode();
  IElementType elementType=node.getElementType();
  String text=node.getText();
  KotlinBuiltIns builtIns=KotlinBuiltIns.getInstance();
  CompileTimeConstantResolver compileTimeConstantResolver=context.getCompileTimeConstantResolver();
  if (context.expectedType == UNKNOWN_EXPECTED_TYPE) {
    if (elementType == JetNodeTypes.INTEGER_CONSTANT) {
      Long longValue=CompileTimeConstantResolver.parseLongValue(text);
      if (longValue != null) {
        JetTypeImpl numberValueType=new JetTypeImpl(Collections.<AnnotationDescriptor>emptyList(),new NumberValueTypeConstructor(longValue),false,Collections.<TypeProjection>emptyList(),ErrorUtils.createErrorScope("Scope for number value type (" + longValue + ")",true));
        return JetTypeInfo.create(numberValueType,context.dataFlowInfo);
      }
    }
  }
  CompileTimeConstant<?> value;
  if (elementType == JetNodeTypes.INTEGER_CONSTANT) {
    value=compileTimeConstantResolver.getIntegerValue(text,context.expectedType);
  }
 else   if (elementType == JetNodeTypes.FLOAT_CONSTANT) {
    value=compileTimeConstantResolver.getFloatValue(text,context.expectedType);
  }
 else   if (elementType == JetNodeTypes.BOOLEAN_CONSTANT) {
    value=compileTimeConstantResolver.getBooleanValue(text,context.expectedType);
  }
 else   if (elementType == JetNodeTypes.CHARACTER_CONSTANT) {
    value=compileTimeConstantResolver.getCharValue(text,context.expectedType);
  }
 else   if (elementType == JetNodeTypes.NULL) {
    value=compileTimeConstantResolver.getNullValue(context.expectedType);
  }
 else {
    throw new IllegalArgumentException("Unsupported constant: " + expression);
  }
  if (value instanceof ErrorValue) {
    ErrorValue errorValue=(ErrorValue)value;
    context.trace.report(ERROR_COMPILE_TIME_VALUE.on(node.getPsi(),errorValue.getMessage()));
    return JetTypeInfo.create(getDefaultType(elementType),context.dataFlowInfo);
  }
 else {
    context.trace.record(BindingContext.COMPILE_TIME_VALUE,expression,value);
    return DataFlowUtils.checkType(value.getType(builtIns),expression,context,context.dataFlowInfo);
  }
}
