{
  if (expression.getEntries().size() <= 3) {
    context.trace.report(TUPLES_ARE_NOT_SUPPORTED.on(expression));
  }
 else {
    context.trace.report(TUPLES_ARE_NOT_SUPPORTED_BIG.on(expression));
  }
  List<JetExpression> entries=expression.getEntries();
  List<JetType> types=new ArrayList<JetType>();
  for (  JetExpression entry : entries) {
    types.add(context.expressionTypingServices.safeGetType(context.scope,entry,NO_EXPECTED_TYPE,context.dataFlowInfo,context.trace));
  }
  if (context.expectedType != NO_EXPECTED_TYPE && KotlinBuiltIns.getInstance().isTupleType(context.expectedType)) {
    List<JetType> enrichedTypes=checkArgumentTypes(types,entries,context.expectedType.getArguments(),context);
    if (enrichedTypes != types) {
      return JetTypeInfo.create(KotlinBuiltIns.getInstance().getTupleType(enrichedTypes),context.dataFlowInfo);
    }
  }
  return DataFlowUtils.checkType(KotlinBuiltIns.getInstance().getTupleType(types),expression,context,context.dataFlowInfo);
}
