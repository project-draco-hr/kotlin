{
  JetTypeInfo result;
  DataFlowInfo dataFlowInfo=context.dataFlowInfo;
  if (right != null && left != null) {
    ExpressionReceiver receiver=ExpressionTypingUtils.safeGetExpressionReceiver(facade,left,context);
    JetTypeInfo leftTypeInfo=getTypeInfoOrNullType(left,context,facade);
    dataFlowInfo=leftTypeInfo.getDataFlowInfo();
    ExpressionTypingContext contextWithDataFlow=context.replaceDataFlowInfo(dataFlowInfo);
    OverloadResolutionResults<FunctionDescriptor> resolutionResults=resolveFakeCall(contextWithDataFlow,receiver,OperatorConventions.EQUALS,KotlinBuiltIns.getInstance().getNullableAnyType());
    dataFlowInfo=facade.getTypeInfo(right,contextWithDataFlow).getDataFlowInfo();
    if (resolutionResults.isSuccess()) {
      FunctionDescriptor equals=resolutionResults.getResultingCall().getResultingDescriptor();
      context.trace.record(REFERENCE_TARGET,operationSign,equals);
      context.trace.record(RESOLVED_CALL,operationSign,resolutionResults.getResultingCall());
      if (ensureBooleanResult(operationSign,OperatorConventions.EQUALS,equals.getReturnType(),context)) {
        ensureNonemptyIntersectionOfOperandTypes(expression,context);
      }
    }
 else {
      if (resolutionResults.isAmbiguity()) {
        context.trace.report(OVERLOAD_RESOLUTION_AMBIGUITY.on(operationSign,resolutionResults.getResultingCalls()));
      }
 else {
        context.trace.report(EQUALS_MISSING.on(operationSign));
      }
    }
  }
  result=JetTypeInfo.create(KotlinBuiltIns.getInstance().getBooleanType(),dataFlowInfo);
  return result;
}
