{
  DataFlowInfo dataFlowInfo=context.dataFlowInfo;
  if (right == null || left == null) {
    ExpressionTypingUtils.getTypeInfoOrNullType(right,context,facade);
    ExpressionTypingUtils.getTypeInfoOrNullType(left,context,facade);
    return JetTypeInfo.create(components.builtIns.getBooleanType(),dataFlowInfo);
  }
  ExpressionReceiver receiver=ExpressionTypingUtils.safeGetExpressionReceiver(facade,left,context);
  JetTypeInfo leftTypeInfo=getTypeInfoOrNullType(left,context,facade);
  dataFlowInfo=leftTypeInfo.getDataFlowInfo();
  ExpressionTypingContext contextWithDataFlow=context.replaceDataFlowInfo(dataFlowInfo);
  JetTypeInfo rightTypeInfo=facade.getTypeInfo(right,contextWithDataFlow);
  dataFlowInfo=rightTypeInfo.getDataFlowInfo();
  TemporaryBindingTrace traceInterpretingRightAsNullableAny=TemporaryBindingTrace.create(context.trace,"trace to resolve 'equals(Any?)' interpreting as of type Any? an expression:",right);
  traceInterpretingRightAsNullableAny.record(EXPRESSION_TYPE,right,components.builtIns.getNullableAnyType());
  Call call=CallMaker.makeCallWithExpressions(expression,receiver,null,operationSign,Collections.singletonList(right));
  ExpressionTypingContext newContext=context.replaceBindingTrace(traceInterpretingRightAsNullableAny);
  OverloadResolutionResults<FunctionDescriptor> resolutionResults=components.callResolver.resolveCallWithGivenName(newContext,call,operationSign,OperatorConventions.EQUALS);
  traceInterpretingRightAsNullableAny.commit(new TraceEntryFilter(){
    @Override public boolean accept(    @Nullable WritableSlice<?,?> slice,    Object key){
      if (key == right && slice == EXPRESSION_TYPE)       return false;
      if (key == left && slice == SMARTCAST)       return false;
      return true;
    }
  }
,true);
  if (resolutionResults.isSuccess()) {
    FunctionDescriptor equals=resolutionResults.getResultingCall().getResultingDescriptor();
    if (components.expressionTypingUtils.ensureBooleanResult(operationSign,OperatorConventions.EQUALS,equals.getReturnType(),context)) {
      ensureNonemptyIntersectionOfOperandTypes(expression,context);
    }
  }
 else {
    if (resolutionResults.isAmbiguity()) {
      context.trace.report(OVERLOAD_RESOLUTION_AMBIGUITY.on(operationSign,resolutionResults.getResultingCalls()));
    }
 else {
      context.trace.report(EQUALS_MISSING.on(operationSign));
    }
  }
  return JetTypeInfo.create(components.builtIns.getBooleanType(),dataFlowInfo);
}
