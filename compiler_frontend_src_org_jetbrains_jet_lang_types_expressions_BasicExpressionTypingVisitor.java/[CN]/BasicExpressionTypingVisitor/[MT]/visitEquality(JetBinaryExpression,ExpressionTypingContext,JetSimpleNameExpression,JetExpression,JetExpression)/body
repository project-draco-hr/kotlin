{
  DataFlowInfo dataFlowInfo=context.dataFlowInfo;
  if (right != null && left != null) {
    ExpressionReceiver receiver=ExpressionTypingUtils.safeGetExpressionReceiver(facade,left,context);
    JetTypeInfo leftTypeInfo=getTypeInfoOrNullType(left,context,facade);
    dataFlowInfo=leftTypeInfo.getDataFlowInfo();
    ExpressionTypingContext contextWithDataFlow=context.replaceDataFlowInfo(dataFlowInfo);
    TemporaryBindingTrace traceInterpretingRightAsNullableAny=TemporaryBindingTrace.create(context.trace,"trace to resolve 'equals(Any?)' interpreting as of type Any? an expression:" + right);
    traceInterpretingRightAsNullableAny.record(EXPRESSION_TYPE,right,KotlinBuiltIns.getInstance().getNullableAnyType());
    traceInterpretingRightAsNullableAny.record(PROCESSED,right);
    Call call=CallMaker.makeCallWithExpressions(operationSign,receiver,null,operationSign,Collections.singletonList(right));
    ExpressionTypingContext newContext=context.replaceBindingTrace(traceInterpretingRightAsNullableAny);
    OverloadResolutionResults<FunctionDescriptor> resolutionResults=newContext.resolveCallWithGivenName(call,operationSign,OperatorConventions.EQUALS);
    traceInterpretingRightAsNullableAny.commit(new TraceEntryFilter(){
      @Override public boolean accept(      @Nullable WritableSlice<?,?> slice,      Object key){
        if (key == right && (slice == EXPRESSION_TYPE || slice == PROCESSED))         return false;
        if (key == left && slice == AUTOCAST)         return false;
        return true;
      }
    }
,true);
    dataFlowInfo=facade.getTypeInfo(right,contextWithDataFlow).getDataFlowInfo();
    if (resolutionResults.isSuccess()) {
      FunctionDescriptor equals=resolutionResults.getResultingCall().getResultingDescriptor();
      if (ensureBooleanResult(operationSign,OperatorConventions.EQUALS,equals.getReturnType(),context)) {
        ensureNonemptyIntersectionOfOperandTypes(expression,context);
      }
    }
 else {
      if (resolutionResults.isAmbiguity()) {
        context.trace.report(OVERLOAD_RESOLUTION_AMBIGUITY.on(operationSign,resolutionResults.getResultingCalls()));
      }
 else {
        context.trace.report(EQUALS_MISSING.on(operationSign));
      }
    }
  }
  return JetTypeInfo.create(KotlinBuiltIns.getInstance().getBooleanType(),dataFlowInfo);
}
