{
  JetExpression selectorExpression=expression.getSelectorExpression();
  JetExpression receiverExpression=expression.getReceiverExpression();
  ExpressionTypingContext contextWithNoExpectedType=context.replaceExpectedType(NO_EXPECTED_TYPE);
  JetTypeInfo receiverTypeInfo=facade.getTypeInfo(receiverExpression,contextWithNoExpectedType.replaceNamespacesAllowed(true));
  JetType receiverType=receiverTypeInfo.getType();
  if (selectorExpression == null)   return JetTypeInfo.create(null,context.dataFlowInfo);
  if (receiverType == null)   receiverType=ErrorUtils.createErrorType("Type for " + expression.getText());
  if (selectorExpression instanceof JetSimpleNameExpression) {
    propagateConstantValues(expression,context,(JetSimpleNameExpression)selectorExpression);
  }
  JetType selectorReturnType=getSelectorReturnType(new ExpressionReceiver(receiverExpression,receiverType),expression.getOperationTokenNode(),selectorExpression,context);
  if (expression.getOperationSign() == JetTokens.SAFE_ACCESS) {
    if (selectorReturnType != null && !selectorReturnType.isNullable() && !JetStandardClasses.isUnit(selectorReturnType)) {
      if (receiverType.isNullable()) {
        selectorReturnType=TypeUtils.makeNullable(selectorReturnType);
      }
    }
  }
  JetType result=selectorReturnType;
  if (result != null) {
    context.trace.record(BindingContext.EXPRESSION_TYPE,selectorExpression,result);
  }
  return DataFlowUtils.checkType(result,expression,context,receiverTypeInfo.getDataFlowInfo());
}
