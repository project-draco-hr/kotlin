{
  JetExpression baseExpression=expression.getBaseExpression();
  if (baseExpression == null)   return null;
  JetSimpleNameExpression operationSign=expression.getOperationReference();
  if (JetTokens.LABELS.contains(operationSign.getReferencedNameElementType())) {
    String referencedName=operationSign.getReferencedName();
    referencedName=referencedName == null ? " <?>" : referencedName;
    context.labelResolver.enterLabeledElement(referencedName.substring(1),baseExpression);
    ExpressionTypingContext newContext=context.replaceExpectedReturnType(context.expectedType);
    JetType type=facade.getType(baseExpression,newContext,isStatement);
    context.labelResolver.exitLabeledElement(baseExpression);
    return DataFlowUtils.checkType(type,expression,context);
  }
  IElementType operationType=operationSign.getReferencedNameElementType();
  TemporaryBindingTrace temporaryTrace=TemporaryBindingTrace.create(context.trace);
  BindingTrace initialTrace=context.trace;
  context=context.replaceBindingTrace(temporaryTrace);
  JetType type=facade.getType(baseExpression,context.replaceExpectedType(NO_EXPECTED_TYPE));
  if (type == null) {
    temporaryTrace.commit();
    return null;
  }
  if (operationType == JetTokens.EXCLEXCL) {
    JetType result;
    if (isKnownToBeNotNull(baseExpression,context)) {
      temporaryTrace.report(UNNECESSARY_NOT_NULL_ASSERTION.on(operationSign,type));
      result=type;
    }
 else {
      result=TypeUtils.makeNotNullable(type);
    }
    temporaryTrace.commit();
    return DataFlowUtils.checkType(result,expression,context);
  }
  String name=OperatorConventions.UNARY_OPERATION_NAMES.get(operationType);
  if (name == null) {
    context.trace.report(UNSUPPORTED.on(operationSign,"visitUnaryExpression"));
    return null;
  }
  if ((operationType == JetTokens.PLUSPLUS || operationType == JetTokens.MINUSMINUS) && baseExpression instanceof JetArrayAccessExpression) {
    JetExpression stubExpression=ExpressionTypingUtils.createStubExpressionOfNecessaryType(baseExpression.getProject(),type,context.trace);
    resolveArrayAccessSetMethod((JetArrayAccessExpression)baseExpression,stubExpression,context.replaceExpectedType(NO_EXPECTED_TYPE).replaceBindingTrace(TemporaryBindingTrace.create(initialTrace)),context.trace);
  }
  ExpressionReceiver receiver=new ExpressionReceiver(baseExpression,type);
  OverloadResolutionResults<FunctionDescriptor> resolutionResults=context.resolveCallWithGivenNameToDescriptor(CallMaker.makeCall(receiver,expression),expression.getOperationReference(),name);
  if (!resolutionResults.isSuccess()) {
    temporaryTrace.commit();
    return null;
  }
  JetType returnType=resolutionResults.getResultingDescriptor().getReturnType();
  JetType result;
  if (operationType == JetTokens.PLUSPLUS || operationType == JetTokens.MINUSMINUS) {
    if (JetTypeChecker.INSTANCE.isSubtypeOf(returnType,JetStandardClasses.getUnitType())) {
      result=JetStandardClasses.getUnitType();
      context.trace.report(INC_DEC_SHOULD_NOT_RETURN_UNIT.on(operationSign));
    }
 else {
      JetType receiverType=receiver.getType();
      if (!JetTypeChecker.INSTANCE.isSubtypeOf(returnType,receiverType)) {
        context.trace.report(RESULT_TYPE_MISMATCH.on(operationSign,name,receiverType,returnType));
      }
 else {
        context.trace.record(BindingContext.VARIABLE_REASSIGNMENT,expression);
        checkLValue(context.trace,baseExpression);
      }
      result=receiverType;
    }
  }
 else {
    result=returnType;
  }
  temporaryTrace.commit();
  return DataFlowUtils.checkType(result,expression,context);
}
