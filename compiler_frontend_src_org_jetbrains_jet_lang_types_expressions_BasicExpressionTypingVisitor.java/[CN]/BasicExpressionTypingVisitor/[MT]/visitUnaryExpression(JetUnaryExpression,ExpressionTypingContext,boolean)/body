{
  JetExpression baseExpression=expression.getBaseExpression();
  if (baseExpression == null)   return JetTypeInfo.create(null,context.dataFlowInfo);
  JetSimpleNameExpression operationSign=expression.getOperationReference();
  IElementType operationType=operationSign.getReferencedNameElementType();
  if (JetTokens.LABELS.contains(operationType)) {
    return visitLabeledExpression(expression,context,isStatement);
  }
  if (operationType == JetTokens.EXCLEXCL) {
    return visitExclExclExpression(expression,context);
  }
  JetTypeInfo typeInfo=facade.getTypeInfo(baseExpression,context.replaceExpectedType(NO_EXPECTED_TYPE));
  JetType type=typeInfo.getType();
  if (type == null) {
    return typeInfo;
  }
  DataFlowInfo dataFlowInfo=typeInfo.getDataFlowInfo();
  Name name=OperatorConventions.UNARY_OPERATION_NAMES.get(operationType);
  if (name == null) {
    context.trace.report(UNSUPPORTED.on(operationSign,"visitUnaryExpression"));
    return JetTypeInfo.create(null,dataFlowInfo);
  }
  if ((operationType == JetTokens.PLUSPLUS || operationType == JetTokens.MINUSMINUS) && baseExpression instanceof JetArrayAccessExpression) {
    JetExpression stubExpression=ExpressionTypingUtils.createStubExpressionOfNecessaryType(baseExpression.getProject(),type,context.trace);
    resolveArrayAccessSetMethod((JetArrayAccessExpression)baseExpression,stubExpression,context.replaceExpectedType(NO_EXPECTED_TYPE).replaceBindingTrace(TemporaryBindingTrace.create(context.trace)),context.trace);
  }
  ExpressionReceiver receiver=new ExpressionReceiver(baseExpression,type);
  OverloadResolutionResults<FunctionDescriptor> resolutionResults=context.resolveCallWithGivenName(CallMaker.makeCall(receiver,expression),expression.getOperationReference(),name);
  if (!resolutionResults.isSuccess()) {
    return JetTypeInfo.create(null,dataFlowInfo);
  }
  JetType returnType=resolutionResults.getResultingDescriptor().getReturnType();
  JetType result;
  if (operationType == JetTokens.PLUSPLUS || operationType == JetTokens.MINUSMINUS) {
    if (JetTypeChecker.INSTANCE.isSubtypeOf(returnType,JetStandardClasses.getUnitType())) {
      result=ErrorUtils.createErrorType(JetStandardClasses.UNIT_ALIAS.getName());
      context.trace.report(INC_DEC_SHOULD_NOT_RETURN_UNIT.on(operationSign));
    }
 else {
      JetType receiverType=receiver.getType();
      if (!JetTypeChecker.INSTANCE.isSubtypeOf(returnType,receiverType)) {
        context.trace.report(RESULT_TYPE_MISMATCH.on(operationSign,name.getName(),receiverType,returnType));
      }
 else {
        context.trace.record(BindingContext.VARIABLE_REASSIGNMENT,expression);
        checkLValue(context.trace,baseExpression);
      }
      result=receiverType;
    }
  }
 else {
    result=returnType;
  }
  return DataFlowUtils.checkType(result,expression,context,dataFlowInfo);
}
