{
  List<TypeParameterDescriptor> superParameters=supertype.getConstructor().getParameters();
  Multimap<TypeConstructor,TypeProjection> subtypeSubstitutionMap=SubstitutionUtils.buildDeepSubstitutionMultimap(subtype);
  for (int i=0; i < superParameters.size(); i++) {
    TypeProjection superArgument=supertype.getArguments().get(i);
    TypeParameterDescriptor parameter=superParameters.get(i);
    if (parameter.isReified()) {
      continue;
    }
    Collection<TypeProjection> substituted=subtypeSubstitutionMap.get(parameter.getTypeConstructor());
    for (    TypeProjection substitutedArgument : substituted) {
      JetType superOut=TypeCheckingProcedure.getOutType(parameter,superArgument);
      JetType superIn=TypeCheckingProcedure.getInType(parameter,superArgument);
      JetType subOut=TypeCheckingProcedure.getOutType(parameter,substitutedArgument);
      JetType subIn=TypeCheckingProcedure.getInType(parameter,substitutedArgument);
      if (typeChecker.isSubtypeOf(superOut,subOut) && typeChecker.isSubtypeOf(subIn,superIn)) {
      }
 else {
        return true;
      }
    }
  }
  return false;
}
