{
  ExpressionTypingContext context=contextWithExpectedType.replaceExpectedType(NO_EXPECTED_TYPE);
  JetExpression left=expression.getLeft();
  JetExpression right=expression.getRight();
  JetTypeInfo leftTypeInfo=getTypeInfoOrNullType(left,context,facade);
  JetType leftType=leftTypeInfo.getType();
  DataFlowInfo dataFlowInfo=leftTypeInfo.getDataFlowInfo();
  if (left == null || leftType == null)   return JetTypeInfo.create(null,dataFlowInfo);
  if (isKnownToBeNotNull(left,leftType,context)) {
    context.trace.report(USELESS_ELVIS.on(left,leftType));
  }
  ExpressionTypingContext newContext=contextWithExpectedType.replaceDataFlowInfo(dataFlowInfo).replaceScope(context.scope);
  JetType rightType=right == null ? null : facade.getTypeInfo(right,newContext).getType();
  if (rightType != null) {
    DataFlowUtils.checkType(TypeUtils.makeNullableAsSpecified(leftType,rightType.isNullable()),left,contextWithExpectedType);
    return JetTypeInfo.create(TypeUtils.makeNullableAsSpecified(CommonSupertypes.commonSupertype(Arrays.asList(leftType,rightType)),rightType.isNullable()),dataFlowInfo);
  }
  return JetTypeInfo.create(null,dataFlowInfo);
}
