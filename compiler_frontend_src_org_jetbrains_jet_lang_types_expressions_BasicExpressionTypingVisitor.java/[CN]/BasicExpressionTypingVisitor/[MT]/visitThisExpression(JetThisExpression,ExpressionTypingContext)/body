{
  JetType result=null;
  ReceiverDescriptor thisReceiver=null;
  String labelName=expression.getLabelName();
  if (labelName != null) {
    thisReceiver=context.labelResolver.resolveThisLabel(expression,context,thisReceiver,labelName);
  }
 else {
    thisReceiver=context.scope.getImplicitReceiver();
    DeclarationDescriptor declarationDescriptorForUnqualifiedThis=context.scope.getDeclarationDescriptorForUnqualifiedThis();
    if (declarationDescriptorForUnqualifiedThis != null) {
      context.trace.record(REFERENCE_TARGET,expression.getThisReference(),declarationDescriptorForUnqualifiedThis);
    }
  }
  if (thisReceiver != null) {
    if (!thisReceiver.exists()) {
      context.trace.report(NO_THIS.on(expression));
    }
 else {
      JetTypeReference superTypeQualifier=expression.getSuperTypeQualifier();
      if (superTypeQualifier != null) {
        JetTypeElement superTypeElement=superTypeQualifier.getTypeElement();
        if (superTypeElement instanceof JetUserType) {
          JetUserType typeElement=(JetUserType)superTypeElement;
          ClassifierDescriptor classifierCandidate=context.getTypeResolver().resolveClass(context.scope,typeElement);
          if (classifierCandidate instanceof ClassDescriptor) {
            ClassDescriptor superclass=(ClassDescriptor)classifierCandidate;
            JetType thisType=thisReceiver.getType();
            Collection<? extends JetType> supertypes=thisType.getConstructor().getSupertypes();
            TypeSubstitutor substitutor=TypeSubstitutor.create(thisType);
            for (            JetType declaredSupertype : supertypes) {
              if (declaredSupertype.getConstructor().equals(superclass.getTypeConstructor())) {
                result=substitutor.safeSubstitute(declaredSupertype,Variance.INVARIANT);
                break;
              }
            }
            if (result == null) {
              context.trace.report(NOT_A_SUPERTYPE.on(superTypeElement));
            }
          }
        }
      }
 else {
        result=thisReceiver.getType();
      }
      if (result != null) {
        context.trace.record(BindingContext.EXPRESSION_TYPE,expression.getThisReference(),result);
      }
    }
  }
  return DataFlowUtils.checkType(result,expression,context);
}
