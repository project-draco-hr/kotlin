{
  JetSimpleNameExpression reference=expression.getCallableReference();
  boolean[] result=new boolean[1];
  FunctionDescriptor descriptor=resolveCallableReferenceTarget(lhsType,context,expression,result);
  if (!result[0]) {
    context.trace.report(UNRESOLVED_REFERENCE.on(reference,reference));
  }
  if (descriptor == null)   return null;
  ReceiverParameterDescriptor receiverParameter=descriptor.getReceiverParameter();
  ReceiverParameterDescriptor expectedThisObject=descriptor.getExpectedThisObject();
  if (receiverParameter != null && expectedThisObject != null) {
    context.trace.report(EXTENSION_IN_CLASS_REFERENCE_NOT_ALLOWED.on(reference,descriptor));
    return null;
  }
  JetType receiverType=null;
  if (receiverParameter != null) {
    receiverType=receiverParameter.getType();
  }
 else   if (expectedThisObject != null) {
    receiverType=expectedThisObject.getType();
  }
  JetType type=KotlinBuiltIns.getInstance().getKFunctionType(Annotations.EMPTY,receiverType,DescriptorUtils.getValueParametersTypes(descriptor.getValueParameters()),descriptor.getReturnType(),receiverParameter != null);
  AnonymousFunctionDescriptor functionDescriptor=new AnonymousFunctionDescriptor(context.scope.getContainingDeclaration(),Annotations.EMPTY,CallableMemberDescriptor.Kind.DECLARATION);
  FunctionDescriptorUtil.initializeFromFunctionType(functionDescriptor,type,null,Modality.FINAL,Visibilities.PUBLIC);
  context.trace.record(FUNCTION,expression,functionDescriptor);
  return type;
}
