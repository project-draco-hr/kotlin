{
  if (selectorExpression instanceof JetCallExpression) {
    JetCallExpression callExpression=(JetCallExpression)selectorExpression;
    FunctionDescriptor functionDescriptor=context.resolveCall(receiver,callOperationNode,callExpression);
    checkSuper(receiver,functionDescriptor,context.trace,selectorExpression);
    return functionDescriptor != null ? functionDescriptor.getReturnType() : null;
  }
 else   if (selectorExpression instanceof JetSimpleNameExpression) {
    JetSimpleNameExpression nameExpression=(JetSimpleNameExpression)selectorExpression;
    TemporaryBindingTrace temporaryTrace=TemporaryBindingTrace.create(context.trace);
    OverloadResolutionResults<VariableDescriptor> resolutionResult=context.replaceBindingTrace(temporaryTrace).resolveSimpleProperty(receiver,callOperationNode,nameExpression);
    if (resolutionResult.isSuccess()) {
      temporaryTrace.commit();
      VariableDescriptor resultingDescriptor=resolutionResult.getResultingDescriptor();
      checkSuper(receiver,resultingDescriptor,context.trace,selectorExpression);
      return resultingDescriptor.getType();
    }
    if (resolutionResult.isSingleResult()) {
      temporaryTrace.commit();
      return resolutionResult.getResultingDescriptor().getReturnType();
    }
    if (resolutionResult.isAmbiguity()) {
      temporaryTrace.commit();
      return null;
    }
    ExpressionTypingContext newContext=receiver.exists() ? context.replaceScope(receiver.getType().getMemberScope()) : context;
    JetType jetType=lookupNamespaceOrClassObject(nameExpression,nameExpression.getReferencedName(),newContext);
    if (jetType == null) {
      context.trace.report(UNRESOLVED_REFERENCE.on(nameExpression));
    }
    return jetType;
  }
 else   if (selectorExpression instanceof JetQualifiedExpression) {
    JetQualifiedExpression qualifiedExpression=(JetQualifiedExpression)selectorExpression;
    JetExpression newReceiverExpression=qualifiedExpression.getReceiverExpression();
    JetType newReceiverType=getSelectorReturnType(receiver,callOperationNode,newReceiverExpression,context.replaceExpectedType(NO_EXPECTED_TYPE));
    JetExpression newSelectorExpression=qualifiedExpression.getSelectorExpression();
    if (newReceiverType != null && newSelectorExpression != null) {
      return getSelectorReturnType(new ExpressionReceiver(newReceiverExpression,newReceiverType),qualifiedExpression.getOperationTokenNode(),newSelectorExpression,context);
    }
  }
 else {
    context.trace.report(ILLEGAL_SELECTOR.on(selectorExpression,selectorExpression.getText()));
  }
  return null;
}
