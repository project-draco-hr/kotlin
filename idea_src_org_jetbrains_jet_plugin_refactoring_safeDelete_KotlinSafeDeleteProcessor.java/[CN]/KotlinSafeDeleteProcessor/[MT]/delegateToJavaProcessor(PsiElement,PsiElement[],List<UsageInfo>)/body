{
  if (element == null)   return null;
  List<UsageInfo> javaUsages=new ArrayList<UsageInfo>();
  NonCodeUsageSearchInfo searchInfo=super.findUsages(element,allElementsToDelete,javaUsages);
  for (  UsageInfo usageInfo : javaUsages) {
    if (usageInfo instanceof SafeDeleteOverridingMethodUsageInfo) {
      SafeDeleteOverridingMethodUsageInfo overrideUsageInfo=(SafeDeleteOverridingMethodUsageInfo)usageInfo;
      PsiElement usageElement=overrideUsageInfo.getSmartPointer().getElement();
      usageInfo=(usageElement != null) ? new KotlinSafeDeleteOverridingUsageInfo(usageElement,overrideUsageInfo.getReferencedElement()) : null;
    }
 else     if (usageInfo instanceof SafeDeleteOverrideAnnotation) {
      SafeDeleteOverrideAnnotation overrideAnnotationUsageInfo=(SafeDeleteOverrideAnnotation)usageInfo;
      PsiElement targetElement=overrideAnnotationUsageInfo.getSmartPointer().getElement();
      if (targetElement != null) {
        boolean noSuperMethods=ContainerUtil.and(AsJavaPackage.toLightMethods(targetElement),new Condition<PsiMethod>(){
          @Override public boolean value(          PsiMethod method){
            return method.findSuperMethods().length == 0;
          }
        }
);
        usageInfo=noSuperMethods ? new KotlinSafeDeleteOverrideAnnotation(targetElement,overrideAnnotationUsageInfo.getReferencedElement()) : null;
      }
 else {
        usageInfo=null;
      }
    }
 else     if (usageInfo instanceof SafeDeleteReferenceJavaDeleteUsageInfo) {
      SafeDeleteReferenceJavaDeleteUsageInfo javaDeleteUsageInfo=(SafeDeleteReferenceJavaDeleteUsageInfo)usageInfo;
      PsiElement usageElement=javaDeleteUsageInfo.getElement();
      JetImportDirective importDirective=PsiTreeUtil.getParentOfType(usageElement,JetImportDirective.class,false);
      if (importDirective != null) {
        usageInfo=new SafeDeleteImportDirectiveUsageInfo(importDirective,(JetDeclaration)AsJavaPackage.getUnwrapped(element));
      }
    }
    if (usageInfo != null) {
      result.add(usageInfo);
    }
  }
  return searchInfo;
}
