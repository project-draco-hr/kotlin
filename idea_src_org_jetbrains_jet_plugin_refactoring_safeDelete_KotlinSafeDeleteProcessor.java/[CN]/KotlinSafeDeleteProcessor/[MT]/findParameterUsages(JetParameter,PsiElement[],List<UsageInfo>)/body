{
  NonCodeUsageSearchInfo searchInfo=getSearchInfo(parameter,allElementsToDelete);
  final JetNamedFunction function=PsiTreeUtil.getParentOfType(parameter,JetNamedFunction.class);
  if (function == null || parameter.getParent() != function.getValueParameterList())   return searchInfo;
  final int parameterIndex=function.getValueParameters().indexOf(parameter);
  ReferencesSearch.search(parameter,parameter.getUseScope()).forEach(new Processor<PsiReference>(){
    @Override public boolean process(    PsiReference reference){
      PsiElement element=reference.getElement();
      if (!isInside(element,allElementsToDelete)) {
        result.add(new SafeDeleteReferenceSimpleDeleteUsageInfo(element,parameter,false));
      }
      return true;
    }
  }
);
  ReferencesSearch.search(function).forEach(new Processor<PsiReference>(){
    @Override public boolean process(    PsiReference reference){
      processParameterUsageInCall(reference,function,parameterIndex,result,parameter);
      return true;
    }
  }
);
  return searchInfo;
}
