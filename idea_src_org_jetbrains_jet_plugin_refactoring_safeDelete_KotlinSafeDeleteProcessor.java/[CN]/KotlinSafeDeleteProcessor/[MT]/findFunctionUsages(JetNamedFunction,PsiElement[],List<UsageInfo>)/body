{
  PsiMethod lightMethod=LightClassUtil.getLightClassMethod(function);
  if (lightMethod == null) {
    return getDefaultNonCodeUsageSearchInfo(function,allElementsToDelete);
  }
  Collection<PsiReference> references=ReferencesSearch.search(function).findAll();
  List<PsiMethod> overridingMethods=difference(OverridingMethodsSearch.search(lightMethod,true).findAll(),allElementsToDelete);
  for (  PsiReference reference : references) {
    PsiElement element=reference.getElement();
    if (!isInside(element,allElementsToDelete) && !isInside(element,overridingMethods)) {
      JetImportDirective importDirective=PsiTreeUtil.getParentOfType(element,JetImportDirective.class,false);
      if (importDirective != null) {
        result.add(new SafeDeleteImportDirectiveUsageInfo(importDirective,function));
      }
 else {
        result.add(new SafeDeleteReferenceSimpleDeleteUsageInfo(element,function,false));
      }
    }
  }
  HashMap<PsiMethod,Collection<PsiReference>> methodToReferences=new HashMap<PsiMethod,Collection<PsiReference>>();
  for (  PsiMethod overridingMethod : overridingMethods) {
    Collection<PsiReference> overridingReferences=ReferencesSearch.search(overridingMethod instanceof JetClsMethod ? ((JetClsMethod)overridingMethod).getOrigin() : overridingMethod).findAll();
    methodToReferences.put(overridingMethod,overridingReferences);
  }
  final Set<PsiMethod> safeOverriding=filterSafeOverridingMethods(lightMethod,references,overridingMethods,methodToReferences,result,allElementsToDelete);
  return new NonCodeUsageSearchInfo(new Condition<PsiElement>(){
    @Override public boolean value(    PsiElement usage){
      if (usage instanceof JetFile)       return false;
      return isInside(usage,allElementsToDelete) || isInside(usage,safeOverriding);
    }
  }
,function);
}
