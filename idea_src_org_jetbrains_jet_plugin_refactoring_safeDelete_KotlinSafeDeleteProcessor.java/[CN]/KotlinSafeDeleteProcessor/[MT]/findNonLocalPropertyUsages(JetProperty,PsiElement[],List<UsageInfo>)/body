{
  LightClassUtil.PropertyAccessorsPsiMethods propertyMethods=LightClassUtil.getLightClassPropertyMethods(property);
  PsiMethod getter=propertyMethods.getGetter();
  PsiMethod setter=propertyMethods.getSetter();
  Collection<PsiReference> references=ReferencesSearch.search(property).findAll();
  Collection<PsiMethod> getterOverriding=(getter != null) ? OverridingMethodsSearch.search(getter,true).findAll() : Collections.<PsiMethod>emptyList();
  Collection<PsiMethod> setterOverriding=(setter != null) ? OverridingMethodsSearch.search(setter,true).findAll() : Collections.<PsiMethod>emptyList();
  List<PsiMethod> overridingMethods=new ArrayList<PsiMethod>();
  overridingMethods.addAll(getterOverriding);
  overridingMethods.addAll(setterOverriding);
  overridingMethods=difference(overridingMethods,allElementsToDelete);
  for (  PsiReference reference : references) {
    PsiElement element=reference.getElement();
    if (!isInside(element,allElementsToDelete) && !isInside(element,overridingMethods)) {
      JetImportDirective importDirective=PsiTreeUtil.getParentOfType(element,JetImportDirective.class,false);
      if (importDirective != null) {
        result.add(new SafeDeleteImportDirectiveUsageInfo(importDirective,property));
      }
 else {
        result.add(new SafeDeleteReferenceSimpleDeleteUsageInfo(element,property,false));
      }
    }
  }
  HashMap<PsiMethod,Collection<PsiReference>> methodToReferences=new HashMap<PsiMethod,Collection<PsiReference>>();
  for (  PsiMethod overridingMethod : overridingMethods) {
    Collection<PsiReference> overridingReferences=ReferencesSearch.search(overridingMethod instanceof JetClsMethod ? ((JetClsMethod)overridingMethod).getOrigin() : overridingMethod).findAll();
    methodToReferences.put(overridingMethod,overridingReferences);
  }
  final Set<PsiMethod> safeGetterOverriding=filterSafeOverridingMethods(getter,references,getterOverriding,methodToReferences,result,allElementsToDelete);
  final Set<PsiMethod> safeSetterOverriding=filterSafeOverridingMethods(setter,references,setterOverriding,methodToReferences,result,allElementsToDelete);
  return new NonCodeUsageSearchInfo(new Condition<PsiElement>(){
    @Override public boolean value(    PsiElement usage){
      if (usage instanceof JetFile)       return false;
      return isInside(usage,allElementsToDelete) || isInside(usage,safeGetterOverriding) || isInside(usage,safeSetterOverriding);
    }
  }
,property);
}
