{
  NonCodeUsageSearchInfo searchInfo=getSearchInfo(parameter,allElementsToDelete);
  ReferencesSearch.search(parameter).forEach(new Processor<PsiReference>(){
    @Override public boolean process(    PsiReference reference){
      PsiElement element=reference.getElement();
      if (!isInside(element,allElementsToDelete)) {
        result.add(new SafeDeleteReferenceSimpleDeleteUsageInfo(element,parameter,false));
      }
      return true;
    }
  }
);
  JetTypeParameterListOwner owner=PsiTreeUtil.getParentOfType(parameter,JetTypeParameterListOwner.class);
  if (owner == null)   return searchInfo;
  List<JetTypeParameter> parameterList=owner.getTypeParameters();
  final int parameterCount=parameterList.size();
  final int parameterIndex=parameterList.indexOf(parameter);
  ReferencesSearch.search(owner).forEach(new Processor<PsiReference>(){
    @Override public boolean process(    PsiReference reference){
      if (reference instanceof PsiJavaCodeReferenceElement) {
        processJavaTypeArgumentListCandidate((PsiJavaCodeReferenceElement)reference,parameterIndex,parameterCount,result,parameter);
      }
 else {
        processKotlinTypeArgumentListCandidate(reference,parameterIndex,result,parameter);
      }
      return true;
    }
  }
);
  return searchInfo;
}
