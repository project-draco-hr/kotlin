{
  List<UsageInfo> javaUsages=new ArrayList<UsageInfo>();
  NonCodeUsageSearchInfo searchInfo=super.findUsages(method,allElementsToDelete,javaUsages);
  for (  UsageInfo usageInfo : javaUsages) {
    if (usageInfo instanceof SafeDeleteOverridingMethodUsageInfo) {
      SafeDeleteOverridingMethodUsageInfo overrideUsageInfo=(SafeDeleteOverridingMethodUsageInfo)usageInfo;
      usageInfo=new KotlinSafeDeleteOverridingUsageInfo(overrideUsageInfo.getSmartPointer().getElement(),overrideUsageInfo.getReferencedElement());
    }
 else     if (usageInfo instanceof SafeDeleteOverrideAnnotation) {
      SafeDeleteOverrideAnnotation overrideAnnotationUsageInfo=(SafeDeleteOverrideAnnotation)usageInfo;
      PsiElement targetElement=overrideAnnotationUsageInfo.getSmartPointer().getElement();
      if (AsJavaPackage.getRepresentativeLightMethod(targetElement).findSuperMethods().length > 0) {
        usageInfo=null;
      }
 else {
        usageInfo=new KotlinSafeDeleteOverrideAnnotation(targetElement,overrideAnnotationUsageInfo.getReferencedElement());
      }
    }
 else     if (usageInfo instanceof SafeDeleteReferenceJavaDeleteUsageInfo) {
      SafeDeleteReferenceJavaDeleteUsageInfo javaDeleteUsageInfo=(SafeDeleteReferenceJavaDeleteUsageInfo)usageInfo;
      PsiElement usageElement=javaDeleteUsageInfo.getElement();
      JetImportDirective importDirective=PsiTreeUtil.getParentOfType(usageElement,JetImportDirective.class,false);
      if (importDirective != null) {
        usageInfo=SafeDeleteImportDirectiveUsageInfo.object$.create(importDirective,(JetDeclaration)method.getNavigationElement());
      }
    }
    if (usageInfo != null) {
      result.add(usageInfo);
    }
  }
  return searchInfo;
}
