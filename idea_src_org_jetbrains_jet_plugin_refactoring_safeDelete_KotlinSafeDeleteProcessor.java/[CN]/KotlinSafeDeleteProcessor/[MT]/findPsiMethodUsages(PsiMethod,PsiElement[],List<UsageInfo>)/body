{
  List<UsageInfo> javaUsages=new ArrayList<UsageInfo>();
  NonCodeUsageSearchInfo searchInfo=super.findUsages(method,allElementsToDelete,javaUsages);
  for (  UsageInfo usageInfo : javaUsages) {
    if (usageInfo instanceof SafeDeleteOverridingMethodUsageInfo) {
      SafeDeleteOverridingMethodUsageInfo overrideUsageInfo=(SafeDeleteOverridingMethodUsageInfo)usageInfo;
      usageInfo=new KotlinSafeDeleteOverridingUsageInfo(overrideUsageInfo.getSmartPointer().getElement(),overrideUsageInfo.getReferencedElement());
    }
 else     if (usageInfo instanceof SafeDeleteOverrideAnnotation) {
      SafeDeleteOverrideAnnotation overrideAnnotationUsageInfo=(SafeDeleteOverrideAnnotation)usageInfo;
      usageInfo=new KotlinSafeDeleteOverrideAnnotation(overrideAnnotationUsageInfo.getSmartPointer().getElement(),overrideAnnotationUsageInfo.getReferencedElement());
    }
    result.add(usageInfo);
  }
  return searchInfo;
}
