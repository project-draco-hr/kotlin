{
  PsiElement element=reference.getElement();
  JetCallExpression callExpression=PsiTreeUtil.getParentOfType(reference.getElement(),JetCallExpression.class,false);
  if (callExpression == null)   return;
  JetExpression calleeExpression=callExpression.getCalleeExpression();
  if (!(calleeExpression instanceof JetReferenceExpression && PsiTreeUtil.isAncestor(calleeExpression,element,false)))   return;
  BindingContext bindingContext=AnalyzerFacadeWithCache.analyzeFileWithCache((JetFile)element.getContainingFile()).getBindingContext();
  DeclarationDescriptor descriptor=bindingContext.get(BindingContext.REFERENCE_TARGET,(JetReferenceExpression)calleeExpression);
  if (descriptor == null)   return;
  PsiElement declaration=BindingContextUtils.descriptorToDeclaration(bindingContext,descriptor);
  if (originalDeclaration.equals(declaration)) {
    List<? extends ValueArgument> args=callExpression.getValueArguments();
    int argCount=args.size();
    if (parameterIndex < argCount) {
      result.add(new SafeDeleteValueArgumentListUsageInfo((JetValueArgument)args.get(parameterIndex),parameter));
    }
 else {
      List<JetExpression> lambdaArgs=callExpression.getFunctionLiteralArguments();
      int lambdaIndex=parameterIndex - argCount;
      if (lambdaIndex < lambdaArgs.size()) {
        result.add(new SafeDeleteReferenceSimpleDeleteUsageInfo(lambdaArgs.get(lambdaIndex),parameter,true));
      }
    }
  }
}
