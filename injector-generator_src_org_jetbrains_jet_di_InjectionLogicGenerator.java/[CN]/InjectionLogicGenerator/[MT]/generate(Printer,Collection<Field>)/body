{
  List<Field> topOrder=DFS.topologicalOrder(fields,new DFS.Neighbors<Field>(){
    @NotNull @Override public Iterable<Field> getNeighbors(    Field current){
      Expression initialization=current.getInitialization();
      if (initialization instanceof ConstructorCall) {
        ConstructorCall call=(ConstructorCall)initialization;
        return call.getConstructorArguments();
      }
      return Collections.emptyList();
    }
  }
);
  Collections.reverse(topOrder);
  for (  Field field : topOrder) {
    p.println(prefixForInitialization(field),field.getName()," = ",field.getInitialization().renderAsCode(),";");
  }
  p.printlnWithNoIndent();
  for (  Field field : fields) {
    for (    SetterDependency dependency : field.getDependencies()) {
      String prefix=prefixForSetterCall(field);
      String dependencyName=dependency.getDependency().getName();
      String dependentName=dependency.getDependent().getName();
      p.println(prefix,dependentName,".",dependency.getSetterName(),"(",dependencyName,");");
    }
    if (!field.getDependencies().isEmpty()) {
      p.printlnWithNoIndent();
    }
  }
  for (  Field field : fields) {
    List<Method> postConstructMethods=InjectorGeneratorUtil.getPostConstructMethods(InjectorGeneratorUtil.getEffectiveFieldType(field).getClazz());
    for (    Method postConstruct : postConstructMethods) {
      p.println(prefixForPostConstructorCall(field),field.getName(),".",postConstruct.getName(),"();");
    }
    if (postConstructMethods.size() > 0) {
      p.printlnWithNoIndent();
    }
  }
}
