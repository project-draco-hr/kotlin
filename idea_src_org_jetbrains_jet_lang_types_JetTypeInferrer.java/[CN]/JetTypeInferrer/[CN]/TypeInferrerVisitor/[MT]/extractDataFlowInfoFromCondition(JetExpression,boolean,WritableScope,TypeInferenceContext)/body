{
  if (condition == null)   return context.dataFlowInfo;
  final DataFlowInfo[] result=new DataFlowInfo[]{context.dataFlowInfo};
  condition.accept(new JetVisitorVoid(){
    @Override public void visitIsExpression(    JetIsExpression expression){
      if (conditionValue && !expression.isNegated() || !conditionValue && expression.isNegated()) {
        JetPattern pattern=expression.getPattern();
        result[0]=patternsToDataFlowInfo.get(pattern);
        if (scopeToExtend != null) {
          List<VariableDescriptor> descriptors=patternsToBoundVariableLists.get(pattern);
          if (descriptors != null) {
            for (            VariableDescriptor variableDescriptor : descriptors) {
              scopeToExtend.addVariableDescriptor(variableDescriptor);
            }
          }
        }
      }
    }
    @Override public void visitBinaryExpression(    JetBinaryExpression expression){
      IElementType operationToken=expression.getOperationToken();
      if (operationToken == JetTokens.ANDAND || operationToken == JetTokens.OROR) {
        WritableScope actualScopeToExtend;
        if (operationToken == JetTokens.ANDAND) {
          actualScopeToExtend=conditionValue ? scopeToExtend : null;
        }
 else {
          actualScopeToExtend=conditionValue ? null : scopeToExtend;
        }
        DataFlowInfo dataFlowInfo=extractDataFlowInfoFromCondition(expression.getLeft(),conditionValue,actualScopeToExtend,context);
        JetExpression expressionRight=expression.getRight();
        if (expressionRight != null) {
          DataFlowInfo rightInfo=extractDataFlowInfoFromCondition(expressionRight,conditionValue,actualScopeToExtend,context);
          DataFlowInfo.CompositionOperator operator;
          if (operationToken == JetTokens.ANDAND) {
            operator=conditionValue ? DataFlowInfo.AND : DataFlowInfo.OR;
          }
 else {
            operator=conditionValue ? DataFlowInfo.OR : DataFlowInfo.AND;
          }
          dataFlowInfo=operator.compose(dataFlowInfo,rightInfo);
        }
        result[0]=dataFlowInfo;
      }
 else       if (operationToken == JetTokens.EQEQ || operationToken == JetTokens.EXCLEQ || operationToken == JetTokens.EQEQEQ || operationToken == JetTokens.EXCLEQEQEQ) {
        JetExpression left=expression.getLeft();
        JetExpression right=expression.getRight();
        if (right == null)         return;
        if (!(left instanceof JetSimpleNameExpression)) {
          JetExpression tmp=left;
          left=right;
          right=tmp;
          if (!(left instanceof JetSimpleNameExpression)) {
            return;
          }
        }
        VariableDescriptor variableDescriptor=context.services.getVariableDescriptorFromSimpleName(left,context);
        if (variableDescriptor == null)         return;
        JetType rhsType=context.trace.getBindingContext().getExpressionType(right);
        if (rhsType != null && !rhsType.isNullable()) {
          extendDataFlowWithNullComparison(operationToken,variableDescriptor,!conditionValue);
          return;
        }
        VariableDescriptor rightVariable=context.services.getVariableDescriptorFromSimpleName(right,context);
        if (rightVariable != null) {
          JetType lhsType=context.trace.getBindingContext().getExpressionType(left);
          if (lhsType != null && !lhsType.isNullable()) {
            extendDataFlowWithNullComparison(operationToken,rightVariable,!conditionValue);
            return;
          }
        }
        if (!(right instanceof JetConstantExpression)) {
          return;
        }
        JetConstantExpression constantExpression=(JetConstantExpression)right;
        if (constantExpression.getNode().getElementType() != JetNodeTypes.NULL) {
          return;
        }
        extendDataFlowWithNullComparison(operationToken,variableDescriptor,conditionValue);
      }
    }
    private void extendDataFlowWithNullComparison(    IElementType operationToken,    @NotNull VariableDescriptor variableDescriptor,    boolean equalsToNull){
      if (operationToken == JetTokens.EQEQ || operationToken == JetTokens.EQEQEQ) {
        result[0]=context.dataFlowInfo.equalsToNull(variableDescriptor,!equalsToNull);
      }
 else       if (operationToken == JetTokens.EXCLEQ || operationToken == JetTokens.EXCLEQEQEQ) {
        result[0]=context.dataFlowInfo.equalsToNull(variableDescriptor,equalsToNull);
      }
    }
    @Override public void visitUnaryExpression(    JetUnaryExpression expression){
      IElementType operationTokenType=expression.getOperationSign().getReferencedNameElementType();
      if (operationTokenType == JetTokens.EXCL) {
        JetExpression baseExpression=expression.getBaseExpression();
        if (baseExpression != null) {
          result[0]=extractDataFlowInfoFromCondition(baseExpression,!conditionValue,scopeToExtend,context);
        }
      }
    }
    @Override public void visitParenthesizedExpression(    JetParenthesizedExpression expression){
      JetExpression body=expression.getExpression();
      if (body != null) {
        body.accept(this);
      }
    }
  }
);
  if (result[0] == null) {
    return context.dataFlowInfo;
  }
  return result[0];
}
