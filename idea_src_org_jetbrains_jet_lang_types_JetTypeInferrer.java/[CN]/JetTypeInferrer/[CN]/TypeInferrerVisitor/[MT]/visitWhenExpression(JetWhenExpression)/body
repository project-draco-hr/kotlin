{
  final JetExpression subjectExpression=expression.getSubjectExpression();
  final JetType subjectType=subjectExpression != null ? safeGetType(scope,subjectExpression,false,NO_EXPECTED_TYPE) : ErrorUtils.createErrorType("Unknown type");
  final VariableDescriptor variableDescriptor=subjectExpression != null ? getVariableDescriptorFromSimpleName(subjectExpression) : null;
  Set<JetType> expressionTypes=Sets.newHashSet();
  for (  JetWhenEntry whenEntry : expression.getEntries()) {
    JetWhenCondition condition=whenEntry.getCondition();
    WritableScope scopeToExtend=newWritableScopeImpl().setDebugName("Scope extended in when entry");
    DataFlowInfo newDataFlowInfo=dataFlowInfo;
    if (condition != null) {
      newDataFlowInfo=checkWhenCondition(subjectExpression,subjectType,condition,scopeToExtend,variableDescriptor);
    }
    JetWhenExpression subWhen=whenEntry.getSubWhen();
    JetExpression bodyExpression=subWhen == null ? whenEntry.getExpression() : subWhen;
    if (bodyExpression != null) {
      JetType type=getTypeWithNewDataFlowInfo(scopeToExtend,bodyExpression,true,newDataFlowInfo);
      if (type != null) {
        expressionTypes.add(type);
      }
    }
  }
  if (!expressionTypes.isEmpty()) {
    result=semanticServices.getTypeChecker().commonSupertype(expressionTypes);
  }
 else   if (expression.getEntries().isEmpty()) {
    trace.getErrorHandler().genericError(expression.getNode(),"Entries required for when-expression");
  }
}
