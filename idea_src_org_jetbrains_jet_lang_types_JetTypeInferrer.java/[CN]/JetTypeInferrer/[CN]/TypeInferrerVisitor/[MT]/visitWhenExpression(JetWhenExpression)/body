{
  final JetExpression subjectExpression=expression.getSubjectExpression();
  final JetType subjectType=subjectExpression != null ? services.safeGetType(context.scope,subjectExpression,false,NO_EXPECTED_TYPE) : ErrorUtils.createErrorType("Unknown type");
  final VariableDescriptor variableDescriptor=subjectExpression != null ? getVariableDescriptorFromSimpleName(subjectExpression) : null;
  Set<JetType> expressionTypes=Sets.newHashSet();
  for (  JetWhenEntry whenEntry : expression.getEntries()) {
    JetWhenCondition[] conditions=whenEntry.getConditions();
    DataFlowInfo newDataFlowInfo;
    WritableScope scopeToExtend;
    if (conditions.length == 1) {
      scopeToExtend=newWritableScopeImpl().setDebugName("Scope extended in when entry");
      newDataFlowInfo=context.dataFlowInfo;
      JetWhenCondition condition=conditions[0];
      if (condition != null) {
        newDataFlowInfo=checkWhenCondition(subjectExpression,subjectType,condition,scopeToExtend,variableDescriptor);
      }
    }
 else {
      scopeToExtend=newWritableScopeImpl();
      newDataFlowInfo=null;
      for (      JetWhenCondition condition : conditions) {
        DataFlowInfo dataFlowInfo=checkWhenCondition(subjectExpression,subjectType,condition,newWritableScopeImpl(),variableDescriptor);
        if (newDataFlowInfo == null) {
          newDataFlowInfo=dataFlowInfo;
        }
 else {
          newDataFlowInfo=newDataFlowInfo.or(dataFlowInfo);
        }
      }
      if (newDataFlowInfo == null) {
        newDataFlowInfo=context.dataFlowInfo;
      }
 else {
        newDataFlowInfo=newDataFlowInfo.and(context.dataFlowInfo);
      }
    }
    JetExpression bodyExpression=whenEntry.getExpression();
    if (bodyExpression != null) {
      JetType type=getTypeWithNewDataFlowInfo(scopeToExtend,bodyExpression,true,newDataFlowInfo);
      if (type != null) {
        expressionTypes.add(type);
      }
    }
  }
  if (!expressionTypes.isEmpty()) {
    result=semanticServices.getTypeChecker().commonSupertype(expressionTypes);
  }
 else   if (expression.getEntries().isEmpty()) {
    context.trace.getErrorHandler().genericError(expression.getNode(),"Entries required for when-expression");
  }
}
