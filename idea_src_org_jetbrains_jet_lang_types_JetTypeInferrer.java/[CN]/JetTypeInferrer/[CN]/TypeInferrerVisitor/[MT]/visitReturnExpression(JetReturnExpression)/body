{
  if (extectedReturnType == FORBIDDEN) {
    trace.getErrorHandler().genericError(expression.getNode(),"'return' is not allowed here");
    return;
  }
  JetExpression returnedExpression=expression.getReturnedExpression();
  JetType returnedType=JetStandardClasses.getUnitType();
  if (returnedExpression != null) {
    returnedType=getType(scope,returnedExpression,false);
  }
 else {
    if (extectedReturnType != null && !JetStandardClasses.isUnit(extectedReturnType)) {
      trace.getErrorHandler().genericError(expression.getNode(),"This function must return a value of type " + extectedReturnType);
    }
  }
  if (extectedReturnType != null && returnedType != null) {
    if (!semanticServices.getTypeChecker().isSubtypeOf(returnedType,extectedReturnType)) {
      trace.getErrorHandler().typeMismatch(returnedExpression == null ? expression : returnedExpression,extectedReturnType,returnedType);
    }
  }
  result=JetStandardClasses.getNothingType();
}
