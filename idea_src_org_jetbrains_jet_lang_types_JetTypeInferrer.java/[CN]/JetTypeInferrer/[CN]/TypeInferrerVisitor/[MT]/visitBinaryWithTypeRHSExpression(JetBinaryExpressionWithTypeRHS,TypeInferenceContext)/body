{
  JetTypeReference right=expression.getRight();
  JetType result=null;
  if (right != null) {
    JetType targetType=context.typeResolver.resolveType(context.scope,right);
    if (isTypeFlexible(expression.getLeft())) {
      TemporaryBindingTrace temporaryTraceWithExpectedType=new TemporaryBindingTrace(context.trace.getBindingContext());
      boolean success=checkBinaryWithTypeRHS(expression,context,targetType,targetType,temporaryTraceWithExpectedType);
      if (success) {
        temporaryTraceWithExpectedType.addAllMyDataTo(context.trace);
      }
 else {
        TemporaryBindingTrace temporaryTraceWithoutExpectedType=new TemporaryBindingTrace(context.trace.getBindingContext());
        checkBinaryWithTypeRHS(expression,context,targetType,NO_EXPECTED_TYPE,temporaryTraceWithoutExpectedType);
        temporaryTraceWithoutExpectedType.addAllMyDataTo(context.trace);
      }
    }
 else {
      TemporaryBindingTrace temporaryTraceWithoutExpectedType=new TemporaryBindingTrace(context.trace.getBindingContext());
      checkBinaryWithTypeRHS(expression,context,targetType,NO_EXPECTED_TYPE,temporaryTraceWithoutExpectedType);
      temporaryTraceWithoutExpectedType.addAllMyDataTo(context.trace);
    }
    IElementType operationType=expression.getOperationSign().getReferencedNameElementType();
    result=operationType == JetTokens.AS_SAFE ? TypeUtils.makeNullable(targetType) : targetType;
  }
 else {
    getType(context.scope,expression.getLeft(),false,context.replaceExpectedType(NO_EXPECTED_TYPE));
  }
  return context.services.checkType(result,expression,context);
}
