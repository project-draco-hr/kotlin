{
  if (preferBlock && !expression.hasParameterSpecification()) {
    trace.recordBlock(expression);
    result=getBlockReturnedType(scope,expression.getBody());
    return;
  }
  FunctionDescriptorImpl functionDescriptor=new FunctionDescriptorImpl(scope.getContainingDeclaration(),Collections.<Annotation>emptyList(),"<anonymous>");
  JetTypeReference returnTypeRef=expression.getReturnTypeRef();
  JetTypeReference receiverTypeRef=expression.getReceiverTypeRef();
  final JetType receiverType;
  if (receiverTypeRef != null) {
    receiverType=typeResolver.resolveType(scope,receiverTypeRef);
  }
 else {
    receiverType=scope.getThisType();
  }
  List<JetElement> body=expression.getBody();
  final Map<String,VariableDescriptor> parameterDescriptors=new HashMap<String,VariableDescriptor>();
  List<JetType> parameterTypes=new ArrayList<JetType>();
  for (  JetParameter parameter : expression.getParameters()) {
    JetTypeReference typeReference=parameter.getTypeReference();
    if (typeReference == null) {
      throw new UnsupportedOperationException("Type inference for parameters is not implemented yet");
    }
    VariableDescriptor variableDescriptor=classDescriptorResolver.resolveLocalVariableDescriptor(functionDescriptor,scope,parameter);
    parameterDescriptors.put(parameter.getName(),variableDescriptor);
    parameterTypes.add(variableDescriptor.getOutType());
  }
  JetType returnType;
  if (returnTypeRef != null) {
    returnType=typeResolver.resolveType(scope,returnTypeRef);
  }
 else {
    WritableScope writableScope=semanticServices.createWritableScope(scope,functionDescriptor);
    for (    VariableDescriptor variableDescriptor : parameterDescriptors.values()) {
      writableScope.addVariableDescriptor(variableDescriptor);
    }
    writableScope.setThisType(receiverType);
    returnType=getBlockReturnedType(writableScope,body);
  }
  JetType effectiveReceiverType=receiverTypeRef == null ? null : receiverType;
  JetType safeReturnType=returnType == null ? ErrorUtils.createErrorType("<return type>") : returnType;
  result=JetStandardClasses.getFunctionType(Collections.<Annotation>emptyList(),effectiveReceiverType,parameterTypes,safeReturnType);
}
