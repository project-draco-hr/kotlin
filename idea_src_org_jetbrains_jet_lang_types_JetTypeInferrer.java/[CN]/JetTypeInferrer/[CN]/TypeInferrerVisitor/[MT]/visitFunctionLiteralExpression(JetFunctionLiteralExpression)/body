{
  if (preferBlock && !expression.hasParameterSpecification()) {
    trace.recordBlock(expression);
    result=getBlockReturnedType(scope,expression.getBody(),dataFlowInfo,extectedReturnType);
    return;
  }
  JetTypeReference receiverTypeRef=expression.getReceiverTypeRef();
  final JetType receiverType;
  if (receiverTypeRef != null) {
    receiverType=typeResolver.resolveType(scope,receiverTypeRef);
  }
 else {
    receiverType=scope.getThisType();
  }
  FunctionDescriptorImpl functionDescriptor=new FunctionDescriptorImpl(scope.getContainingDeclaration(),Collections.<Annotation>emptyList(),"<anonymous>");
  List<JetType> parameterTypes=new ArrayList<JetType>();
  List<ValueParameterDescriptor> valueParameterDescriptors=Lists.newArrayList();
  List<JetParameter> parameters=expression.getParameters();
  for (int i=0, parametersSize=parameters.size(); i < parametersSize; i++) {
    JetParameter parameter=parameters.get(i);
    JetTypeReference typeReference=parameter.getTypeReference();
    JetType type;
    if (typeReference != null) {
      type=typeResolver.resolveType(scope,typeReference);
    }
 else {
      trace.getErrorHandler().genericError(parameter.getNode(),"Type inference for parameters is not implemented yet");
      type=ErrorUtils.createErrorType("Not inferred");
    }
    ValueParameterDescriptor valueParameterDescriptor=classDescriptorResolver.resolveValueParameterDescriptor(functionDescriptor,parameter,i,type);
    parameterTypes.add(valueParameterDescriptor.getOutType());
    valueParameterDescriptors.add(valueParameterDescriptor);
  }
  JetType effectiveReceiverType=receiverTypeRef == null ? null : receiverType;
  functionDescriptor.initialize(effectiveReceiverType,Collections.<TypeParameterDescriptor>emptyList(),valueParameterDescriptors,null);
  trace.recordDeclarationResolution(expression,functionDescriptor);
  JetTypeReference returnTypeRef=expression.getReturnTypeRef();
  JetType returnType;
  if (returnTypeRef != null) {
    returnType=typeResolver.resolveType(scope,returnTypeRef);
  }
 else {
    WritableScope writableScope=new WritableScopeImpl(scope,functionDescriptor,trace.getErrorHandler());
    for (    VariableDescriptor variableDescriptor : valueParameterDescriptors) {
      writableScope.addVariableDescriptor(variableDescriptor);
    }
    writableScope.setThisType(receiverType);
    returnType=getBlockReturnedType(writableScope,expression.getBody(),dataFlowInfo,extectedReturnType);
  }
  JetType safeReturnType=returnType == null ? ErrorUtils.createErrorType("<return type>") : returnType;
  functionDescriptor.setReturnType(safeReturnType);
  result=JetStandardClasses.getFunctionType(Collections.<Annotation>emptyList(),effectiveReceiverType,parameterTypes,safeReturnType);
}
