{
  JetExpression tryBlock=expression.getTryBlock();
  List<JetCatchClause> catchClauses=expression.getCatchClauses();
  JetFinallySection finallyBlock=expression.getFinallyBlock();
  List<JetType> types=new ArrayList<JetType>();
  for (  JetCatchClause catchClause : catchClauses) {
    JetParameter catchParameter=catchClause.getCatchParameter();
    JetExpression catchBody=catchClause.getCatchBody();
    if (catchParameter != null) {
      VariableDescriptor variableDescriptor=context.classDescriptorResolver.resolveLocalVariableDescriptor(context.scope.getContainingDeclaration(),context.scope,catchParameter);
      if (catchBody != null) {
        WritableScope catchScope=newWritableScopeImpl(context.scope,context.trace).setDebugName("Catch scope");
        catchScope.addVariableDescriptor(variableDescriptor);
        JetType type=getType(catchScope,catchBody,true,context);
        if (type != null) {
          types.add(type);
        }
      }
    }
  }
  if (finallyBlock != null) {
    types.clear();
    JetType type=getType(context.scope,finallyBlock.getFinalExpression(),true,context);
    if (type != null) {
      types.add(type);
    }
  }
  JetType type=getType(context.scope,tryBlock,true,context);
  if (type != null) {
    types.add(type);
  }
  if (types.isEmpty()) {
    return null;
  }
 else {
    return semanticServices.getTypeChecker().commonSupertype(types);
  }
}
