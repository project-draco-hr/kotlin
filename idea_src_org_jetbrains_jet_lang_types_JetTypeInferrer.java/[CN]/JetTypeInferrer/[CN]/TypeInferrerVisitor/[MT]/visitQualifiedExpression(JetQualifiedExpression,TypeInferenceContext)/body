{
  TypeInferenceContext context=contextWithExpectedType.replaceExpectedType(NO_EXPECTED_TYPE);
  JetExpression selectorExpression=expression.getSelectorExpression();
  JetExpression receiverExpression=expression.getReceiverExpression();
  JetType receiverType=context.services.typeInferrerVisitorWithNamespaces.getType(receiverExpression,context.replaceExpectedTypes(NO_EXPECTED_TYPE,NO_EXPECTED_TYPE));
  if (selectorExpression == null)   return null;
  if (receiverType == null)   receiverType=ErrorUtils.createErrorType("Type for " + expression.getText());
  TemporaryBindingTrace cleanResolutionTrace=TemporaryBindingTrace.create(context.trace);
  TypeInferenceContext cleanResolutionContext=context.replaceBindingTrace(cleanResolutionTrace);
  JetType selectorReturnType=getSelectorReturnType(receiverType,selectorExpression,cleanResolutionContext);
  if (expression.getOperationSign() == JetTokens.SAFE_ACCESS) {
    if (selectorReturnType != null && !selectorReturnType.isNullable() && !JetStandardClasses.isUnit(selectorReturnType)) {
      selectorReturnType=TypeUtils.makeNullable(selectorReturnType);
    }
  }
  if (selectorReturnType != null) {
    cleanResolutionTrace.addAllMyDataTo(context.trace);
  }
 else {
    VariableDescriptor variableDescriptor=cleanResolutionContext.services.getVariableDescriptorFromSimpleName(receiverExpression,context);
    boolean somethingFound=false;
    if (variableDescriptor != null) {
      List<JetType> possibleTypes=Lists.newArrayList(context.dataFlowInfo.getPossibleTypes(variableDescriptor));
      Collections.reverse(possibleTypes);
      TemporaryBindingTrace autocastResolutionTrace=TemporaryBindingTrace.create(context.trace);
      TypeInferenceContext autocastResolutionContext=context.replaceBindingTrace(autocastResolutionTrace);
      for (      JetType possibleType : possibleTypes) {
        selectorReturnType=getSelectorReturnType(possibleType,selectorExpression,autocastResolutionContext);
        if (selectorReturnType != null) {
          context.services.checkAutoCast(receiverExpression,possibleType,variableDescriptor,autocastResolutionTrace);
          autocastResolutionTrace.commit();
          somethingFound=true;
          break;
        }
 else {
          autocastResolutionTrace=TemporaryBindingTrace.create(context.trace);
          autocastResolutionContext=context.replaceBindingTrace(autocastResolutionTrace);
        }
      }
    }
    if (!somethingFound) {
      cleanResolutionTrace.commit();
    }
  }
  JetType result;
  if (expression.getOperationSign() == JetTokens.QUEST) {
    if (selectorReturnType != null && !isBoolean(selectorReturnType) && selectorExpression != null) {
      context.trace.getErrorHandler().typeMismatch(selectorExpression,semanticServices.getStandardLibrary().getBooleanType(),selectorReturnType);
    }
    result=TypeUtils.makeNullable(receiverType);
  }
 else {
    result=selectorReturnType;
  }
  if (selectorExpression != null && result != null) {
    context.trace.record(BindingContext.EXPRESSION_TYPE,selectorExpression,result);
  }
  if (selectorReturnType != null) {
    if (selectorExpression != null) {
      receiverType=context.services.enrichOutType(receiverExpression,receiverType,context);
      context.services.checkNullSafety(receiverType,expression.getOperationTokenNode(),getCalleeFunctionDescriptor(selectorExpression,context));
    }
  }
  return context.services.checkType(result,expression,contextWithExpectedType);
}
