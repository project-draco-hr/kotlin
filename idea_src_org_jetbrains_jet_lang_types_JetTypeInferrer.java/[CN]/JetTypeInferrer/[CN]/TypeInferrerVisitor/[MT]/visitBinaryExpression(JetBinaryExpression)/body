{
  JetSimpleNameExpression operationSign=expression.getOperationReference();
  JetExpression left=expression.getLeft();
  JetExpression right=expression.getRight();
  IElementType operationType=operationSign.getReferencedNameElementType();
  if (operationType == JetTokens.IDENTIFIER) {
    String referencedName=operationSign.getReferencedName();
    if (referencedName != null) {
      result=getTypeForBinaryCall(expression,referencedName,scope,true);
    }
  }
 else   if (binaryOperationNames.containsKey(operationType)) {
    result=getTypeForBinaryCall(expression,binaryOperationNames.get(operationType),scope,true);
  }
 else   if (operationType == JetTokens.EQ) {
    visitAssignment(expression);
  }
 else   if (assignmentOperationNames.containsKey(operationType)) {
    visitAssignmentOperation(expression);
  }
 else   if (comparisonOperations.contains(operationType)) {
    JetType compareToReturnType=getTypeForBinaryCall(expression,"compareTo",scope,true);
    if (compareToReturnType != null) {
      TypeConstructor constructor=compareToReturnType.getConstructor();
      JetStandardLibrary standardLibrary=semanticServices.getStandardLibrary();
      TypeConstructor intTypeConstructor=standardLibrary.getInt().getTypeConstructor();
      if (constructor.equals(intTypeConstructor)) {
        result=standardLibrary.getBooleanType();
      }
 else {
        trace.getErrorHandler().genericError(operationSign.getNode(),"compareTo must return Int, but returns " + compareToReturnType);
      }
    }
  }
 else   if (equalsOperations.contains(operationType)) {
    String name="equals";
    if (right != null) {
      JetType leftType=getType(scope,left,false);
      if (leftType != null) {
        JetType rightType=getType(scope,right,false);
        if (rightType != null) {
          FunctionDescriptor equals=lookupFunction(scope,operationSign,"equals",leftType,Collections.singletonList(JetStandardClasses.getNullableAnyType()),false);
          if (equals != null) {
            if (ensureBooleanResult(operationSign,name,equals.getUnsubstitutedReturnType())) {
              ensureNonemptyIntersectionOfOperandTypes(expression);
            }
          }
 else {
            trace.getErrorHandler().genericError(operationSign.getNode(),"No method 'equals(Any?) : Boolean' available");
          }
        }
      }
    }
    result=semanticServices.getStandardLibrary().getBooleanType();
  }
 else   if (operationType == JetTokens.EQEQEQ || operationType == JetTokens.EXCLEQEQEQ) {
    ensureNonemptyIntersectionOfOperandTypes(expression);
    result=semanticServices.getStandardLibrary().getBooleanType();
  }
 else   if (inOperations.contains(operationType)) {
    if (right == null) {
      result=ErrorUtils.createErrorType("No right argument");
      return;
    }
    checkInExpression(operationSign,left,right);
    result=semanticServices.getStandardLibrary().getBooleanType();
  }
 else   if (operationType == JetTokens.ANDAND || operationType == JetTokens.OROR) {
    JetType leftType=getType(scope,left,false);
    DataFlowInfo flowInfoLeft=extractDataFlowInfoFromCondition(left,operationType == JetTokens.ANDAND,newWritableScopeImpl());
    JetType rightType=right == null ? null : getType(scope,right,false,flowInfoLeft);
    if (leftType != null && !isBoolean(leftType)) {
      trace.getErrorHandler().typeMismatch(left,semanticServices.getStandardLibrary().getBooleanType(),leftType);
    }
    if (rightType != null && !isBoolean(rightType)) {
      trace.getErrorHandler().typeMismatch(right,semanticServices.getStandardLibrary().getBooleanType(),rightType);
    }
    result=semanticServices.getStandardLibrary().getBooleanType();
  }
 else   if (operationType == JetTokens.ELVIS) {
    JetType leftType=getType(scope,left,false);
    JetType rightType=right == null ? null : getType(scope,right,false);
    if (leftType != null) {
      if (!leftType.isNullable()) {
        trace.getErrorHandler().genericWarning(left.getNode(),"Elvis operator (?:) is always returns the left operand of non-nullable type " + leftType);
      }
      if (rightType != null) {
        result=TypeUtils.makeNullableAsSpecified(semanticServices.getTypeChecker().commonSupertype(leftType,rightType),rightType.isNullable());
      }
    }
  }
 else {
    trace.getErrorHandler().genericError(operationSign.getNode(),"Unknown operation");
  }
}
