{
  TypeInferenceContext newContext=context.replaceExpectedTypeAndTrace(expectedType,temporaryTrace);
  JetType actualType=getType(expression.getLeft(),newContext);
  if (actualType == null)   return false;
  JetSimpleNameExpression operationSign=expression.getOperationSign();
  IElementType operationType=operationSign.getReferencedNameElementType();
  if (operationType == JetTokens.COLON) {
    if (targetType != NO_EXPECTED_TYPE && !semanticServices.getTypeChecker().isSubtypeOf(actualType,targetType)) {
      context.trace.getErrorHandler().typeMismatch(expression.getLeft(),targetType,actualType);
      return false;
    }
    return true;
  }
 else   if (operationType == JetTokens.AS_KEYWORD || operationType == JetTokens.AS_SAFE) {
    checkForCastImpossibility(expression,actualType,targetType,context);
    return true;
  }
 else {
    context.trace.getErrorHandler().genericError(operationSign.getNode(),"Unsupported binary operation");
    return false;
  }
}
