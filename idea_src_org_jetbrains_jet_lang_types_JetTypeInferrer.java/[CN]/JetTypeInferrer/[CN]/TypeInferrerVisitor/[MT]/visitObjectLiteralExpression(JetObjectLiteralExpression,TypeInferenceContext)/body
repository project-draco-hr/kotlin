{
  final JetType[] result=new JetType[1];
  BindingTraceAdapter.RecordHandler<PsiElement,DeclarationDescriptor> handler=new BindingTraceAdapter.RecordHandler<PsiElement,DeclarationDescriptor>(){
    @Override public void handleRecord(    WritableSlice<PsiElement,DeclarationDescriptor> slice,    PsiElement declaration,    final DeclarationDescriptor descriptor){
      if (declaration == expression.getObjectDeclaration()) {
        JetType defaultType=new DeferredType(new LazyValue<JetType>(){
          @Override protected JetType compute(){
            return ((ClassDescriptor)descriptor).getDefaultType();
          }
        }
);
        result[0]=defaultType;
        if (!context.trace.get(BindingContext.PROCESSED,expression)) {
          context.trace.record(BindingContext.EXPRESSION_TYPE,expression,defaultType);
          context.trace.record(BindingContext.PROCESSED,expression);
        }
      }
    }
  }
;
  BindingTraceAdapter traceAdapter=new BindingTraceAdapter(context.trace);
  for (  WritableSlice slice : BindingContext.DECLARATIONS_TO_DESCRIPTORS) {
    traceAdapter.addHandler(slice,handler);
  }
  TopDownAnalyzer.processObject(semanticServices,traceAdapter,context.scope,context.scope.getContainingDeclaration(),expression.getObjectDeclaration());
  return context.services.checkType(result[0],expression,context);
}
