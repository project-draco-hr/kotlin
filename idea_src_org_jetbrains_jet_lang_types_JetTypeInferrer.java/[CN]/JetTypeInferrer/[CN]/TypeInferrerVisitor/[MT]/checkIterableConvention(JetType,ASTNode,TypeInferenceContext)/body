{
  OverloadResolutionResult<FunctionDescriptor> iteratorResolutionResult=context.services.callResolver.resolveExactSignature(context.scope,type,"iterator",Collections.<JetType>emptyList());
  if (iteratorResolutionResult.isSuccess()) {
    JetType iteratorType=iteratorResolutionResult.getDescriptor().getReturnType();
    boolean hasNextFunctionSupported=checkHasNextFunctionSupport(reportErrorsOn,iteratorType,context);
    boolean hasNextPropertySupported=checkHasNextPropertySupport(reportErrorsOn,iteratorType,context);
    if (hasNextFunctionSupported && hasNextPropertySupported && !ErrorUtils.isErrorType(iteratorType)) {
      context.trace.getErrorHandler().genericError(reportErrorsOn,"An ambiguity between 'iterator().hasNext()' function and 'iterator().hasNext()' property");
    }
 else     if (!hasNextFunctionSupported && !hasNextPropertySupported) {
      context.trace.getErrorHandler().genericError(reportErrorsOn,"Loop range must have an 'iterator().hasNext()' function or an 'iterator().hasNext' property");
    }
    OverloadResolutionResult<FunctionDescriptor> nextResolutionResult=context.services.callResolver.resolveExactSignature(context.scope,iteratorType,"next",Collections.<JetType>emptyList());
    if (nextResolutionResult.isAmbiguity()) {
      context.trace.getErrorHandler().genericError(reportErrorsOn,"Method 'iterator().next()' is ambiguous for this expression");
    }
 else     if (nextResolutionResult.isNothing()) {
      context.trace.getErrorHandler().genericError(reportErrorsOn,"Loop range must have an 'iterator().next()' method");
    }
 else {
      return nextResolutionResult.getDescriptor().getReturnType();
    }
  }
 else {
    String errorMessage="For-loop range must have an iterator() method";
    if (iteratorResolutionResult.isAmbiguity()) {
      errorMessage="Method 'iterator()' is ambiguous for this expression";
    }
    context.trace.getErrorHandler().genericError(reportErrorsOn,errorMessage);
  }
  return null;
}
