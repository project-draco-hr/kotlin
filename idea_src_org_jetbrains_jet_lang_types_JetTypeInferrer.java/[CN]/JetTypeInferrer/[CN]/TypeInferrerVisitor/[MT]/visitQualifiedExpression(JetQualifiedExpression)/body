{
  JetExpression selectorExpression=expression.getSelectorExpression();
  JetExpression receiverExpression=expression.getReceiverExpression();
  JetType receiverType=new TypeInferrerVisitorWithNamespaces(scope,false,dataFlowInfo).getType(receiverExpression);
  if (receiverType != null) {
    JetType selectorReturnType=getSelectorReturnType(receiverType,selectorExpression);
    if (selectorReturnType == null) {
      VariableDescriptor variableDescriptor=getVariableDescriptorFromSimpleName(receiverExpression);
      if (variableDescriptor != null) {
        Collection<JetType> possibleTypes=dataFlowInfo.getPossibleTypes(variableDescriptor);
        for (        JetType possibleType : possibleTypes) {
          selectorReturnType=getSelectorReturnType(possibleType,selectorExpression);
          if (selectorReturnType != null) {
            break;
          }
        }
      }
    }
    if (expression.getOperationSign() == JetTokens.QUEST) {
      if (selectorReturnType != null && !isBoolean(selectorReturnType) && selectorExpression != null) {
        trace.getErrorHandler().typeMismatch(selectorExpression,semanticServices.getStandardLibrary().getBooleanType(),selectorReturnType);
      }
      result=TypeUtils.makeNullable(receiverType);
    }
 else {
      result=selectorReturnType;
    }
    if (selectorExpression != null && result != null) {
      trace.recordExpressionType(selectorExpression,result);
    }
    if (selectorReturnType != null) {
      if (selectorExpression != null) {
        receiverType=enrichOutType(receiverExpression,receiverType);
        checkNullSafety(receiverType,expression.getOperationTokenNode(),getCalleeFunctionDescriptor(selectorExpression));
      }
    }
  }
}
