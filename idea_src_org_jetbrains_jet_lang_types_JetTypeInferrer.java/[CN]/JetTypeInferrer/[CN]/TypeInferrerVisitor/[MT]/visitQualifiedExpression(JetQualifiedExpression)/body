{
  JetExpression selectorExpression=expression.getSelectorExpression();
  JetExpression receiverExpression=expression.getReceiverExpression();
  JetType receiverType=new TypeInferrerVisitorWithNamespaces(new TypeInferenceContext(context.trace,context.scope,false,context.dataFlowInfo,NO_EXPECTED_TYPE,null)).getType(receiverExpression);
  if (receiverType != null) {
    ErrorHandlerWithRegions errorHandler=context.trace.getErrorHandler();
    errorHandler.openRegion();
    JetType selectorReturnType=getSelectorReturnType(receiverType,selectorExpression);
    if (selectorReturnType != null) {
      errorHandler.closeAndCommitCurrentRegion();
    }
 else {
      ErrorHandlerWithRegions.DiagnosticsRegion regionToCommit=errorHandler.closeAndReturnCurrentRegion();
      VariableDescriptor variableDescriptor=getVariableDescriptorFromSimpleName(receiverExpression);
      if (variableDescriptor != null) {
        List<JetType> possibleTypes=Lists.newArrayList(context.dataFlowInfo.getPossibleTypes(variableDescriptor));
        Collections.reverse(possibleTypes);
        for (        JetType possibleType : possibleTypes) {
          errorHandler.openRegion();
          selectorReturnType=getSelectorReturnType(possibleType,selectorExpression);
          if (selectorReturnType != null) {
            regionToCommit=errorHandler.closeAndReturnCurrentRegion();
            context.trace.recordAutoCast(receiverExpression,possibleType);
            break;
          }
 else {
            errorHandler.closeAndReturnCurrentRegion();
          }
        }
      }
      regionToCommit.commit();
    }
    if (expression.getOperationSign() == JetTokens.QUEST) {
      if (selectorReturnType != null && !isBoolean(selectorReturnType) && selectorExpression != null) {
        errorHandler.typeMismatch(selectorExpression,semanticServices.getStandardLibrary().getBooleanType(),selectorReturnType);
      }
      result=TypeUtils.makeNullable(receiverType);
    }
 else {
      result=selectorReturnType;
    }
    if (selectorExpression != null && result != null) {
      context.trace.recordExpressionType(selectorExpression,result);
    }
    if (selectorReturnType != null) {
      if (selectorExpression != null) {
        receiverType=enrichOutType(receiverExpression,receiverType);
        services.checkNullSafety(receiverType,expression.getOperationTokenNode(),getCalleeFunctionDescriptor(selectorExpression));
      }
    }
  }
}
