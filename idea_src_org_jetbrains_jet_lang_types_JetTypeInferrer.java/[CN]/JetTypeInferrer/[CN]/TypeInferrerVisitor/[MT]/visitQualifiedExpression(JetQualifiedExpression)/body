{
  JetExpression selectorExpression=expression.getSelectorExpression();
  JetExpression receiverExpression=expression.getReceiverExpression();
  JetType receiverType=new TypeInferrerVisitorWithNamespaces(scope,false).getType(receiverExpression);
  if (receiverType != null) {
    checkNullSafety(receiverType,expression.getOperationTokenNode());
    JetType selectorReturnType=getSelectorReturnType(receiverType,selectorExpression);
    if (expression.getOperationSign() == JetTokens.QUEST) {
      if (selectorReturnType != null && !isBoolean(selectorReturnType) && selectorExpression != null) {
        trace.getErrorHandler().typeMismatch(selectorExpression,semanticServices.getStandardLibrary().getBooleanType(),selectorReturnType);
      }
      result=TypeUtils.makeNullable(receiverType);
    }
 else {
      result=selectorReturnType;
    }
    if (selectorExpression != null && result != null) {
      trace.recordExpressionType(selectorExpression,result);
    }
  }
}
