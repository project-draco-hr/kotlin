{
  TypeInferenceContext context=contextWithExpectedType.replaceExpectedType(NO_EXPECTED_TYPE);
  JetSimpleNameExpression operationSign=expression.getOperationReference();
  JetExpression left=expression.getLeft();
  JetExpression right=expression.getRight();
  JetType result=null;
  IElementType operationType=operationSign.getReferencedNameElementType();
  if (operationType == JetTokens.IDENTIFIER) {
    String referencedName=operationSign.getReferencedName();
    if (referencedName != null) {
      result=getTypeForBinaryCall(expression,referencedName,context.scope,true,context);
    }
  }
 else   if (binaryOperationNames.containsKey(operationType)) {
    result=getTypeForBinaryCall(expression,binaryOperationNames.get(operationType),context.scope,true,context);
  }
 else   if (operationType == JetTokens.EQ) {
    result=visitAssignment(expression,context);
  }
 else   if (assignmentOperationNames.containsKey(operationType)) {
    result=visitAssignmentOperation(expression,context);
  }
 else   if (comparisonOperations.contains(operationType)) {
    JetType compareToReturnType=getTypeForBinaryCall(expression,"compareTo",context.scope,true,context);
    if (compareToReturnType != null) {
      TypeConstructor constructor=compareToReturnType.getConstructor();
      JetStandardLibrary standardLibrary=semanticServices.getStandardLibrary();
      TypeConstructor intTypeConstructor=standardLibrary.getInt().getTypeConstructor();
      if (constructor.equals(intTypeConstructor)) {
        result=standardLibrary.getBooleanType();
      }
 else {
        context.trace.getErrorHandler().genericError(operationSign.getNode(),"compareTo must return Int, but returns " + compareToReturnType);
      }
    }
  }
 else   if (equalsOperations.contains(operationType)) {
    String name="equals";
    if (right != null) {
      JetType leftType=getType(context.scope,left,false,context);
      if (leftType != null) {
        JetType rightType=getType(context.scope,right,false,context);
        if (rightType != null) {
          FunctionDescriptor equals=context.services.lookupFunction(context.scope,operationSign,"equals",leftType,Collections.singletonList(JetStandardClasses.getNullableAnyType()),false);
          if (equals != null) {
            if (ensureBooleanResult(operationSign,name,equals.getReturnType(),context)) {
              ensureNonemptyIntersectionOfOperandTypes(expression,context);
            }
          }
 else {
            context.trace.getErrorHandler().genericError(operationSign.getNode(),"No method 'equals(Any?) : Boolean' available");
          }
        }
      }
    }
    result=semanticServices.getStandardLibrary().getBooleanType();
  }
 else   if (operationType == JetTokens.EQEQEQ || operationType == JetTokens.EXCLEQEQEQ) {
    ensureNonemptyIntersectionOfOperandTypes(expression,context);
    result=semanticServices.getStandardLibrary().getBooleanType();
  }
 else   if (inOperations.contains(operationType)) {
    if (right == null) {
      result=ErrorUtils.createErrorType("No right argument");
      return null;
    }
    checkInExpression(operationSign,left,right,context);
    result=semanticServices.getStandardLibrary().getBooleanType();
  }
 else   if (operationType == JetTokens.ANDAND || operationType == JetTokens.OROR) {
    JetType leftType=getType(context.scope,left,false,context);
    WritableScopeImpl leftScope=newWritableScopeImpl(context.scope,context.trace).setDebugName("Left scope of && or ||");
    DataFlowInfo flowInfoLeft=extractDataFlowInfoFromCondition(left,operationType == JetTokens.ANDAND,leftScope,context);
    WritableScopeImpl rightScope=operationType == JetTokens.ANDAND ? leftScope : newWritableScopeImpl(context.scope,context.trace).setDebugName("Right scope of && or ||");
    JetType rightType=right == null ? null : getTypeWithNewDataFlowInfo(rightScope,right,false,flowInfoLeft,context);
    if (leftType != null && !isBoolean(leftType)) {
      context.trace.getErrorHandler().typeMismatch(left,semanticServices.getStandardLibrary().getBooleanType(),leftType);
    }
    if (rightType != null && !isBoolean(rightType)) {
      context.trace.getErrorHandler().typeMismatch(right,semanticServices.getStandardLibrary().getBooleanType(),rightType);
    }
    result=semanticServices.getStandardLibrary().getBooleanType();
  }
 else   if (operationType == JetTokens.ELVIS) {
    JetType leftType=getType(context.scope,left,false,context);
    JetType rightType=right == null ? null : getType(context.scope,right,false,context);
    if (leftType != null) {
      if (!leftType.isNullable()) {
        context.trace.getErrorHandler().genericWarning(left.getNode(),"Elvis operator (?:) is always returns the left operand of non-nullable type " + leftType);
      }
      if (rightType != null) {
        result=TypeUtils.makeNullableAsSpecified(semanticServices.getTypeChecker().commonSupertype(leftType,rightType),rightType.isNullable());
      }
    }
  }
 else {
    context.trace.getErrorHandler().genericError(operationSign.getNode(),"Unknown operation");
  }
  return context.services.checkType(result,expression,contextWithExpectedType);
}
