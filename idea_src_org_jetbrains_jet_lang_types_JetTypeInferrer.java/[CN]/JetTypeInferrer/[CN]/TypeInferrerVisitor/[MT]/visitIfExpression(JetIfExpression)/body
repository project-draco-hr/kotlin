{
  JetExpression condition=expression.getCondition();
  checkCondition(scope,condition);
  JetExpression elseBranch=expression.getElse();
  JetExpression thenBranch=expression.getThen();
  WritableScopeImpl thenScope=newWritableScopeImpl();
  DataFlowInfo thenInfo=extractDataFlowInfoFromCondition(condition,true,thenScope);
  WritableScopeImpl elseScope=newWritableScopeImpl();
  DataFlowInfo elseInfo=extractDataFlowInfoFromCondition(condition,false,elseScope);
  if (elseBranch == null) {
    if (thenBranch != null) {
      JetType type=getType(thenScope,thenBranch,true,thenInfo);
      if (type != null && JetStandardClasses.isNothing(type)) {
        resultDataFlowInfo=elseInfo;
      }
      result=JetStandardClasses.getUnitType();
    }
  }
 else   if (thenBranch == null) {
    JetType type=getType(elseScope,elseBranch,true,elseInfo);
    if (type != null && JetStandardClasses.isNothing(type)) {
      resultDataFlowInfo=thenInfo;
    }
    result=JetStandardClasses.getUnitType();
  }
 else {
    JetType thenType=getType(thenScope,thenBranch,true,thenInfo);
    JetType elseType=getType(elseScope,elseBranch,true,elseInfo);
    if (thenType == null) {
      result=elseType;
    }
 else     if (elseType == null) {
      result=thenType;
    }
 else {
      result=semanticServices.getTypeChecker().commonSupertype(Arrays.asList(thenType,elseType));
    }
    boolean jumpInThen=thenType != null && JetStandardClasses.isNothing(thenType);
    boolean jumpInElse=elseType != null && JetStandardClasses.isNothing(elseType);
    if (jumpInThen && !jumpInElse) {
      resultDataFlowInfo=elseInfo;
    }
 else     if (jumpInElse && !jumpInThen) {
      resultDataFlowInfo=thenInfo;
    }
  }
}
