{
  JetType knownType=getType(scope,expression.getLeftHandSide(),false);
  JetPattern pattern=expression.getPattern();
  if (pattern instanceof JetTypePattern) {
    JetTypePattern typePattern=(JetTypePattern)pattern;
    JetTypeReference typeReference=typePattern.getTypeReference();
    if (typeReference != null && knownType != null) {
      JetType targetType=typeResolver.resolveType(scope,typeReference);
      if (!semanticServices.getTypeChecker().isSubtypeOf(targetType,knownType)) {
        trace.getErrorHandler().genericWarning(expression.getNode(),"Expression always evaluates to false");
      }
    }
  }
 else {
    if (pattern != null) {
      trace.getErrorHandler().genericError(pattern.getNode(),"Unsupported [JetTypeInferrer]");
    }
  }
  result=semanticServices.getStandardLibrary().getBooleanType();
}
