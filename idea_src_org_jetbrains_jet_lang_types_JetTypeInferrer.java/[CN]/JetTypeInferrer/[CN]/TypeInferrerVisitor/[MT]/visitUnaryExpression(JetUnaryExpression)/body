{
  JetSimpleNameExpression operationSign=expression.getOperationSign();
  if (JetTokens.LABELS.contains(operationSign.getReferencedNameElementType())) {
    result=getType(expression.getBaseExpression());
    return;
  }
  IElementType operationType=operationSign.getReferencedNameElementType();
  String name=unaryOperationNames.get(operationType);
  if (name == null) {
    trace.getErrorHandler().genericError(operationSign.getNode(),"Unknown unary operation");
  }
 else {
    JetType receiverType=getType(scope,expression.getBaseExpression(),false);
    if (receiverType != null) {
      FunctionDescriptor functionDescriptor=lookupFunction(scope,expression.getOperationSign(),name,receiverType,Collections.<JetType>emptyList(),true);
      if (functionDescriptor != null) {
        JetType returnType=functionDescriptor.getUnsubstitutedReturnType();
        if (operationType == JetTokens.PLUSPLUS || operationType == JetTokens.MINUSMINUS) {
          if (semanticServices.getTypeChecker().isSubtypeOf(returnType,JetStandardClasses.getUnitType())) {
            result=JetStandardClasses.getUnitType();
          }
 else {
            if (!semanticServices.getTypeChecker().isSubtypeOf(returnType,receiverType)) {
              trace.getErrorHandler().genericError(operationSign.getNode(),name + " must return " + receiverType+ " but returns "+ returnType);
            }
            result=receiverType;
          }
        }
 else {
          result=returnType;
        }
      }
    }
  }
}
