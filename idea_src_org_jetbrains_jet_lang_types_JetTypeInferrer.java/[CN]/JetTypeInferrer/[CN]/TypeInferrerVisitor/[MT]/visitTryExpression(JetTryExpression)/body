{
  JetExpression tryBlock=expression.getTryBlock();
  List<JetCatchClause> catchClauses=expression.getCatchClauses();
  JetFinallySection finallyBlock=expression.getFinallyBlock();
  List<JetType> types=new ArrayList<JetType>();
  for (  JetCatchClause catchClause : catchClauses) {
    JetParameter catchParameter=catchClause.getCatchParameter();
    JetExpression catchBody=catchClause.getCatchBody();
    if (catchParameter != null) {
      VariableDescriptor variableDescriptor=classDescriptorResolver.resolveLocalVariableDescriptor(scope.getContainingDeclaration(),scope,catchParameter);
      if (catchBody != null) {
        WritableScope catchScope=new WritableScopeImpl(scope,scope.getContainingDeclaration(),trace.getErrorHandler());
        catchScope.addVariableDescriptor(variableDescriptor);
        JetType type=getType(catchScope,catchBody,true);
        if (type != null) {
          types.add(type);
        }
      }
    }
  }
  if (finallyBlock != null) {
    types.clear();
    JetType type=getType(scope,finallyBlock.getFinalExpression(),true);
    if (type != null) {
      types.add(type);
    }
  }
  JetType type=getType(scope,tryBlock,true);
  if (type != null) {
    types.add(type);
  }
  if (types.isEmpty()) {
    result=null;
  }
 else {
    result=semanticServices.getTypeChecker().commonSupertype(types);
  }
}
