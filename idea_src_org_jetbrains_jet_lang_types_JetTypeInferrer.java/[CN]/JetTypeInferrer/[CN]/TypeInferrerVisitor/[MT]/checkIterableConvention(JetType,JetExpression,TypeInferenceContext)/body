{
  ASTNode reportErrorsOn=loopRange.getNode();
  OverloadResolutionResult iteratorResolutionResult=context.services.resolveNoParametersFunction(type,context.scope,"iterator");
  if (iteratorResolutionResult.isSuccess()) {
    FunctionDescriptor iteratorFunction=iteratorResolutionResult.getFunctionDescriptor();
    context.trace.record(LOOP_RANGE_ITERATOR,loopRange,iteratorFunction);
    JetType iteratorType=iteratorFunction.getReturnType();
    FunctionDescriptor hasNextFunction=checkHasNextFunctionSupport(loopRange,iteratorType,context);
    boolean hasNextFunctionSupported=hasNextFunction != null;
    VariableDescriptor hasNextProperty=checkHasNextPropertySupport(loopRange,iteratorType,context);
    boolean hasNextPropertySupported=hasNextProperty != null;
    if (hasNextFunctionSupported && hasNextPropertySupported && !ErrorUtils.isErrorType(iteratorType)) {
      context.trace.getErrorHandler().genericError(reportErrorsOn,"An ambiguity between 'iterator().hasNext()' function and 'iterator().hasNext' property");
    }
 else     if (!hasNextFunctionSupported && !hasNextPropertySupported) {
      context.trace.getErrorHandler().genericError(reportErrorsOn,"Loop range must have an 'iterator().hasNext()' function or an 'iterator().hasNext' property");
    }
 else {
      context.trace.record(LOOP_RANGE_HAS_NEXT,loopRange,hasNextFunctionSupported ? hasNextFunction : hasNextProperty);
    }
    OverloadResolutionResult nextResolutionResult=context.services.resolveNoParametersFunction(iteratorType,context.scope,"next");
    if (nextResolutionResult.isAmbiguity()) {
      context.trace.getErrorHandler().genericError(reportErrorsOn,"Method 'iterator().next()' is ambiguous for this expression");
    }
 else     if (nextResolutionResult.isNothing()) {
      context.trace.getErrorHandler().genericError(reportErrorsOn,"Loop range must have an 'iterator().next()' method");
    }
 else {
      FunctionDescriptor nextFunction=nextResolutionResult.getFunctionDescriptor();
      context.trace.record(LOOP_RANGE_NEXT,loopRange,nextFunction);
      return nextFunction.getReturnType();
    }
  }
 else {
    String errorMessage="For-loop range must have an iterator() method";
    if (iteratorResolutionResult.isAmbiguity()) {
      errorMessage="Method 'iterator()' is ambiguous for this expression";
    }
    context.trace.getErrorHandler().genericError(reportErrorsOn,errorMessage);
  }
  return null;
}
