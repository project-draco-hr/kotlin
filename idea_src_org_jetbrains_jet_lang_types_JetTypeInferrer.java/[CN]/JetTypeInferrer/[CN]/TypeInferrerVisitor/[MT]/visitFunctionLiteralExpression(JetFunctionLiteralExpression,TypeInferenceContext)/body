{
  JetFunctionLiteral functionLiteral=expression.getFunctionLiteral();
  JetTypeReference receiverTypeRef=functionLiteral.getReceiverTypeRef();
  final JetType receiverType;
  if (receiverTypeRef != null) {
    receiverType=context.typeResolver.resolveType(context.scope,receiverTypeRef);
  }
 else {
    receiverType=context.scope.getThisType();
  }
  FunctionDescriptorImpl functionDescriptor=new FunctionDescriptorImpl(context.scope.getContainingDeclaration(),Collections.<AnnotationDescriptor>emptyList(),"<anonymous>");
  List<JetType> parameterTypes=new ArrayList<JetType>();
  List<ValueParameterDescriptor> valueParameterDescriptors=Lists.newArrayList();
  List<JetParameter> parameters=functionLiteral.getValueParameters();
  JetType expectedType=context.expectedType;
  List<ValueParameterDescriptor> valueParameters=null;
  boolean functionTypeExpected=expectedType != NO_EXPECTED_TYPE && JetStandardClasses.isFunctionType(expectedType);
  if (functionTypeExpected) {
    valueParameters=JetStandardClasses.getValueParameters(functionDescriptor,expectedType);
  }
  for (int i=0, parametersSize=parameters.size(); i < parametersSize; i++) {
    JetParameter parameter=parameters.get(i);
    JetTypeReference typeReference=parameter.getTypeReference();
    JetType type;
    if (typeReference != null) {
      type=context.typeResolver.resolveType(context.scope,typeReference);
    }
 else {
      if (valueParameters != null) {
        type=valueParameters.get(i).getOutType();
      }
 else {
        context.trace.getErrorHandler().genericError(parameter.getNode(),"Cannot infer a type for this parameter. To specify it explicitly use the {(p : Type) => ...} notation");
        type=ErrorUtils.createErrorType("Cannot be inferred");
      }
    }
    ValueParameterDescriptor valueParameterDescriptor=context.classDescriptorResolver.resolveValueParameterDescriptor(functionDescriptor,parameter,i,type);
    parameterTypes.add(valueParameterDescriptor.getOutType());
    valueParameterDescriptors.add(valueParameterDescriptor);
  }
  JetType effectiveReceiverType;
  if (receiverTypeRef == null) {
    if (functionTypeExpected) {
      effectiveReceiverType=JetStandardClasses.getReceiverType(expectedType);
    }
 else {
      effectiveReceiverType=null;
    }
  }
 else {
    effectiveReceiverType=receiverType;
  }
  functionDescriptor.initialize(effectiveReceiverType,Collections.<TypeParameterDescriptor>emptyList(),valueParameterDescriptors,null);
  context.trace.record(BindingContext.FUNCTION,expression,functionDescriptor);
  JetType returnType=NO_EXPECTED_TYPE;
  JetScope functionInnerScope=FunctionDescriptorUtil.getFunctionInnerScope(context.scope,functionDescriptor,context.trace);
  JetTypeReference returnTypeRef=functionLiteral.getReturnTypeRef();
  if (returnTypeRef != null) {
    returnType=context.typeResolver.resolveType(context.scope,returnTypeRef);
    context.services.checkFunctionReturnType(functionInnerScope,expression,returnType,context.dataFlowInfo,CoercionStrategy.COERCION_TO_UNIT);
  }
 else {
    if (functionTypeExpected) {
      returnType=JetStandardClasses.getReturnType(expectedType);
    }
    returnType=context.services.getBlockReturnedType(functionInnerScope,functionLiteral.getBodyExpression(),CoercionStrategy.COERCION_TO_UNIT,context.replaceExpectedType(returnType));
  }
  JetType safeReturnType=returnType == null ? ErrorUtils.createErrorType("<return type>") : returnType;
  functionDescriptor.setReturnType(safeReturnType);
  if (functionTypeExpected) {
    JetType expectedReturnType=JetStandardClasses.getReturnType(expectedType);
    if (JetStandardClasses.isUnit(expectedReturnType)) {
      return context.services.checkType(JetStandardClasses.getFunctionType(Collections.<AnnotationDescriptor>emptyList(),effectiveReceiverType,parameterTypes,expectedReturnType),expression,context);
    }
  }
  return context.services.checkType(JetStandardClasses.getFunctionType(Collections.<AnnotationDescriptor>emptyList(),effectiveReceiverType,parameterTypes,safeReturnType),expression,context);
}
