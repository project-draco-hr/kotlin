{
  if (overloadDomain == null)   return OverloadDomain.EMPTY;
  return new OverloadDomain(){
    @Override public FunctionDescriptor getFunctionDescriptorForNamedArguments(    @NotNull List<JetType> typeArguments,    @NotNull Map<String,JetType> valueArgumentTypes,    @Nullable JetType functionLiteralArgumentType){
      FunctionDescriptor descriptor=overloadDomain.getFunctionDescriptorForNamedArguments(typeArguments,valueArgumentTypes,functionLiteralArgumentType);
      if (descriptor != null) {
        trace.recordReferenceResolution(referenceExpression,descriptor);
      }
 else {
        if (reportUnresolved) {
          semanticServices.getErrorHandler().unresolvedReference(referenceExpression);
        }
      }
      return descriptor;
    }
    @Override public FunctionDescriptor getFunctionDescriptorForPositionedArguments(    @NotNull List<JetType> typeArguments,    @NotNull List<JetType> positionedValueArgumentTypes){
      FunctionDescriptor descriptor=overloadDomain.getFunctionDescriptorForPositionedArguments(typeArguments,positionedValueArgumentTypes);
      if (descriptor != null) {
        trace.recordReferenceResolution(referenceExpression,descriptor);
      }
 else {
        if (reportUnresolved) {
          semanticServices.getErrorHandler().unresolvedReference(referenceExpression);
        }
      }
      return descriptor;
    }
  }
;
}
