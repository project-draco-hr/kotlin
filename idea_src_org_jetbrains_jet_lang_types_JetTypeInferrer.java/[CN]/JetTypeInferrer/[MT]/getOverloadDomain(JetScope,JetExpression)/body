{
  final OverloadDomain[] result=new OverloadDomain[1];
  final JetReferenceExpression[] reference=new JetReferenceExpression[1];
  calleeExpression.accept(new JetVisitor(){
    @Override public void visitHashQualifiedExpression(    JetHashQualifiedExpression expression){
      throw new UnsupportedOperationException();
    }
    @Override public void visitPredicateExpression(    JetPredicateExpression expression){
      throw new UnsupportedOperationException();
    }
    @Override public void visitQualifiedExpression(    JetQualifiedExpression expression){
      JetExpression selectorExpression=expression.getSelectorExpression();
      if (selectorExpression instanceof JetReferenceExpression) {
        JetReferenceExpression referenceExpression=(JetReferenceExpression)selectorExpression;
        Type receiverType=getType(scope,expression.getReceiverExpression(),false);
        result[0]=OverloadResolver.INSTANCE.getOverloadDomain(receiverType,scope,referenceExpression.getReferencedName());
        reference[0]=referenceExpression;
      }
 else {
        throw new UnsupportedOperationException();
      }
    }
    @Override public void visitReferenceExpression(    JetReferenceExpression expression){
      result[0]=OverloadResolver.INSTANCE.getOverloadDomain(null,scope,expression.getReferencedName());
      reference[0]=expression;
    }
    @Override public void visitExpression(    JetExpression expression){
      throw new UnsupportedOperationException();
    }
    @Override public void visitJetElement(    JetElement elem){
      throw new IllegalArgumentException("Unsupported element: " + elem);
    }
  }
);
  return new OverloadDomain(){
    @Override public FunctionDescriptor getFunctionDescriptorForNamedArguments(    @NotNull List<Type> typeArguments,    @NotNull Map<String,Type> valueArgumentTypes,    @Nullable Type functionLiteralArgumentType){
      FunctionDescriptor descriptor=result[0].getFunctionDescriptorForNamedArguments(typeArguments,valueArgumentTypes,functionLiteralArgumentType);
      if (descriptor != null) {
        trace.recordReferenceResolution(reference[0],descriptor);
      }
 else {
        semanticServices.getErrorHandler().unresolvedReference(reference[0]);
      }
      return descriptor;
    }
    @Override public FunctionDescriptor getFunctionDescriptorForPositionedArguments(    @NotNull List<Type> typeArguments,    @NotNull List<Type> positionedValueArgumentTypes){
      FunctionDescriptor descriptor=result[0].getFunctionDescriptorForPositionedArguments(typeArguments,positionedValueArgumentTypes);
      if (descriptor != null) {
        trace.recordReferenceResolution(reference[0],descriptor);
      }
 else {
        semanticServices.getErrorHandler().unresolvedReference(reference[0]);
      }
      return descriptor;
    }
  }
;
}
