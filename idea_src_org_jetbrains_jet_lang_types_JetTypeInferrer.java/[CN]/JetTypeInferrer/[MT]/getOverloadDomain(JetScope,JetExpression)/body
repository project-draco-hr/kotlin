{
  final OverloadDomain[] result=new OverloadDomain[1];
  final JetSimpleNameExpression[] reference=new JetSimpleNameExpression[1];
  calleeExpression.accept(new JetVisitor(){
    @Override public void visitHashQualifiedExpression(    JetHashQualifiedExpression expression){
      throw new UnsupportedOperationException();
    }
    @Override public void visitPredicateExpression(    JetPredicateExpression expression){
      throw new UnsupportedOperationException();
    }
    @Override public void visitQualifiedExpression(    JetQualifiedExpression expression){
      JetExpression selectorExpression=expression.getSelectorExpression();
      if (selectorExpression instanceof JetSimpleNameExpression) {
        JetSimpleNameExpression referenceExpression=(JetSimpleNameExpression)selectorExpression;
        JetType receiverType=getType(scope,expression.getReceiverExpression(),false);
        if (receiverType != null) {
          result[0]=semanticServices.getOverloadResolver().getOverloadDomain(receiverType,scope,referenceExpression.getReferencedName());
          reference[0]=referenceExpression;
        }
      }
 else {
        throw new UnsupportedOperationException();
      }
    }
    @Override public void visitReferenceExpression(    JetSimpleNameExpression expression){
      result[0]=semanticServices.getOverloadResolver().getOverloadDomain(null,scope,expression.getReferencedName());
      reference[0]=expression;
    }
    @Override public void visitExpression(    JetExpression expression){
      throw new UnsupportedOperationException();
    }
    @Override public void visitJetElement(    JetElement elem){
      throw new IllegalArgumentException("Unsupported element: " + elem);
    }
  }
);
  return wrapForTracing(result[0],reference[0]);
}
