{
  KotlinPaths paths=PathUtil.getKotlinPathsForDistDirectory();
  MessageCollector messageCollector=MessageCollectorPlainTextToStream.PLAIN_TEXT_TO_SYSTEM_ERR;
  Disposable rootDisposable=Disposer.newDisposable();
  try {
    CompilerConfiguration configuration=JetTestUtils.compilerConfigurationForTests(ConfigurationKind.JDK_AND_ANNOTATIONS,TestJdkKind.MOCK_JDK);
    configuration.put(CLIConfigurationKeys.MESSAGE_COLLECTOR_KEY,messageCollector);
    configuration.add(CommonConfigurationKeys.SOURCE_ROOTS_KEY,"compiler/testData/script/" + scriptPath);
    configuration.addAll(CommonConfigurationKeys.SCRIPT_DEFINITIONS_KEY,scriptDefinitions);
    configuration.put(JVMConfigurationKeys.SCRIPT_PARAMETERS,scriptParameters);
    JetCoreEnvironment environment=JetCoreEnvironment.createForProduction(rootDisposable,configuration);
    try {
      JetScriptDefinitionProvider.getInstance(environment.getProject()).markFileAsScript(environment.getSourceFiles().get(0));
      return KotlinToJVMBytecodeCompiler.compileScript(paths,environment);
    }
 catch (    CompilationException e) {
      messageCollector.report(CompilerMessageSeverity.EXCEPTION,OutputMessageUtil.renderException(e),MessageUtil.psiElementToMessageLocation(e.getElement()));
      return null;
    }
catch (    Throwable t) {
      MessageCollectorUtil.reportException(messageCollector,t);
      return null;
    }
  }
  finally {
    Disposer.dispose(rootDisposable);
  }
}
