{
  this.expressionTypingServices=new ExpressionTypingServices();
  this.project=project;
  CallResolver callResolver=new CallResolver();
  DescriptorResolver descriptorResolver=new DescriptorResolver();
  AnnotationResolver annotationResolver=new AnnotationResolver();
  TypeResolver typeResolver=new TypeResolver();
  OverloadingConflictResolver overloadingConflictResolver=new OverloadingConflictResolver();
  this.expressionTypingServices.setCallResolver(callResolver);
  this.expressionTypingServices.setDescriptorResolver(descriptorResolver);
  this.expressionTypingServices.setProject(project);
  this.expressionTypingServices.setTypeResolver(typeResolver);
  callResolver.setDescriptorResolver(descriptorResolver);
  callResolver.setExpressionTypingServices(expressionTypingServices);
  callResolver.setOverloadingConflictResolver(overloadingConflictResolver);
  callResolver.setTypeResolver(typeResolver);
  descriptorResolver.setAnnotationResolver(annotationResolver);
  descriptorResolver.setExpressionTypingServices(expressionTypingServices);
  descriptorResolver.setTypeResolver(typeResolver);
  annotationResolver.setCallResolver(callResolver);
  annotationResolver.setExpressionTypingServices(expressionTypingServices);
  typeResolver.setAnnotationResolver(annotationResolver);
  typeResolver.setDescriptorResolver(descriptorResolver);
}
