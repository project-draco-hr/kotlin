{
  this.project=project;
  this.moduleDescriptor=moduleDescriptor;
  this.platformToKotlinClassMap=moduleDescriptor.getPlatformToKotlinClassMap();
  this.expressionTypingComponents=new ExpressionTypingComponents();
  this.expressionTypingServices=new ExpressionTypingServices(getExpressionTypingComponents());
  this.callResolver=new CallResolver();
  this.globalContext=org.jetbrains.jet.context.ContextPackage.GlobalContext();
  this.storageManager=globalContext.getStorageManager();
  this.additionalCheckerProvider=org.jetbrains.jet.lang.resolve.AdditionalCheckerProvider.Empty.INSTANCE$;
  this.annotationResolver=new AnnotationResolver();
  this.qualifiedExpressionResolver=new QualifiedExpressionResolver();
  this.flexibleTypeCapabilitiesProvider=new FlexibleTypeCapabilitiesProvider();
  this.lazinessToken=new LazinessToken();
  this.dynamicTypesSettings=new DynamicTypesSettings();
  this.typeResolver=new TypeResolver(annotationResolver,qualifiedExpressionResolver,moduleDescriptor,flexibleTypeCapabilitiesProvider,storageManager,lazinessToken,dynamicTypesSettings);
  this.callExpressionResolver=new CallExpressionResolver();
  this.descriptorResolver=new DescriptorResolver();
  this.delegatedPropertyResolver=new DelegatedPropertyResolver();
  this.callResolverExtensionProvider=new CallResolverExtensionProvider();
  this.partialBodyResolveProvider=new PartialBodyResolveProvider();
  this.controlStructureTypingUtils=new ControlStructureTypingUtils(getExpressionTypingServices());
  this.expressionTypingUtils=new ExpressionTypingUtils(getExpressionTypingServices(),getCallResolver());
  this.forLoopConventionsChecker=new ForLoopConventionsChecker();
  this.reflectionTypes=new ReflectionTypes(moduleDescriptor);
  this.argumentTypeResolver=new ArgumentTypeResolver();
  this.candidateResolver=new CandidateResolver();
  this.callCompleter=new CallCompleter(argumentTypeResolver,candidateResolver);
  this.taskPrioritizer=new TaskPrioritizer(storageManager);
  this.expressionTypingServices.setAnnotationResolver(annotationResolver);
  this.expressionTypingServices.setCallExpressionResolver(callExpressionResolver);
  this.expressionTypingServices.setCallResolver(callResolver);
  this.expressionTypingServices.setDescriptorResolver(descriptorResolver);
  this.expressionTypingServices.setExtensionProvider(callResolverExtensionProvider);
  this.expressionTypingServices.setPartialBodyResolveProvider(partialBodyResolveProvider);
  this.expressionTypingServices.setProject(project);
  this.expressionTypingServices.setTypeResolver(typeResolver);
  this.expressionTypingComponents.setAdditionalCheckerProvider(additionalCheckerProvider);
  this.expressionTypingComponents.setCallResolver(callResolver);
  this.expressionTypingComponents.setControlStructureTypingUtils(controlStructureTypingUtils);
  this.expressionTypingComponents.setExpressionTypingServices(expressionTypingServices);
  this.expressionTypingComponents.setExpressionTypingUtils(expressionTypingUtils);
  this.expressionTypingComponents.setForLoopConventionsChecker(forLoopConventionsChecker);
  this.expressionTypingComponents.setGlobalContext(globalContext);
  this.expressionTypingComponents.setPlatformToKotlinClassMap(platformToKotlinClassMap);
  this.expressionTypingComponents.setReflectionTypes(reflectionTypes);
  this.callResolver.setArgumentTypeResolver(argumentTypeResolver);
  this.callResolver.setCallCompleter(callCompleter);
  this.callResolver.setCandidateResolver(candidateResolver);
  this.callResolver.setExpressionTypingServices(expressionTypingServices);
  this.callResolver.setTaskPrioritizer(taskPrioritizer);
  this.callResolver.setTypeResolver(typeResolver);
  annotationResolver.setCallResolver(callResolver);
  annotationResolver.setStorageManager(storageManager);
  annotationResolver.setTypeResolver(typeResolver);
  callExpressionResolver.setExpressionTypingServices(expressionTypingServices);
  descriptorResolver.setAnnotationResolver(annotationResolver);
  descriptorResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);
  descriptorResolver.setExpressionTypingServices(expressionTypingServices);
  descriptorResolver.setStorageManager(storageManager);
  descriptorResolver.setTypeResolver(typeResolver);
  delegatedPropertyResolver.setCallResolver(callResolver);
  delegatedPropertyResolver.setExpressionTypingServices(expressionTypingServices);
  forLoopConventionsChecker.setExpressionTypingServices(expressionTypingServices);
  forLoopConventionsChecker.setExpressionTypingUtils(expressionTypingUtils);
  forLoopConventionsChecker.setProject(project);
  argumentTypeResolver.setExpressionTypingServices(expressionTypingServices);
  argumentTypeResolver.setTypeResolver(typeResolver);
  candidateResolver.setArgumentTypeResolver(argumentTypeResolver);
}
