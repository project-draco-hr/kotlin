{
  this.expressionTypingServices=new ExpressionTypingServices();
  this.needSyntheticCallResolverExtension=new NeedSyntheticCallResolverExtension();
  this.platformToKotlinClassMap=moduleDescriptor.getPlatformToKotlinClassMap();
  this.project=project;
  this.moduleDescriptor=moduleDescriptor;
  this.annotationResolver=new AnnotationResolver();
  this.callResolver=new CallResolver();
  this.argumentTypeResolver=new ArgumentTypeResolver();
  this.typeResolver=new TypeResolver();
  this.descriptorResolver=new DescriptorResolver();
  this.qualifiedExpressionResolver=new QualifiedExpressionResolver();
  this.candidateResolver=new CandidateResolver();
  this.callExpressionResolver=new CallExpressionResolver();
  this.expressionTypingServices.setAnnotationResolver(annotationResolver);
  this.expressionTypingServices.setCallExpressionResolver(callExpressionResolver);
  this.expressionTypingServices.setCallResolver(callResolver);
  this.expressionTypingServices.setDescriptorResolver(descriptorResolver);
  this.expressionTypingServices.setPlatformToKotlinClassMap(platformToKotlinClassMap);
  this.expressionTypingServices.setProject(project);
  this.expressionTypingServices.setTypeResolver(typeResolver);
  annotationResolver.setCallResolver(callResolver);
  annotationResolver.setExpressionTypingServices(expressionTypingServices);
  callResolver.setArgumentTypeResolver(argumentTypeResolver);
  callResolver.setCandidateResolver(candidateResolver);
  callResolver.setExpressionTypingServices(expressionTypingServices);
  callResolver.setExtension(needSyntheticCallResolverExtension);
  callResolver.setTypeResolver(typeResolver);
  argumentTypeResolver.setExpressionTypingServices(expressionTypingServices);
  argumentTypeResolver.setTypeResolver(typeResolver);
  typeResolver.setAnnotationResolver(annotationResolver);
  typeResolver.setDescriptorResolver(descriptorResolver);
  typeResolver.setModuleDescriptor(moduleDescriptor);
  typeResolver.setQualifiedExpressionResolver(qualifiedExpressionResolver);
  descriptorResolver.setAnnotationResolver(annotationResolver);
  descriptorResolver.setExpressionTypingServices(expressionTypingServices);
  descriptorResolver.setTypeResolver(typeResolver);
  candidateResolver.setArgumentTypeResolver(argumentTypeResolver);
  callExpressionResolver.setExpressionTypingServices(expressionTypingServices);
}
