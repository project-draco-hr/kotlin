{
  final Map<TypeParameterDescriptor,Variance> parameters=new HashMap<TypeParameterDescriptor,Variance>();
  Function1<TypeParameterUsage,Unit> processor=new Function1<TypeParameterUsage,Unit>(){
    @Override public Unit invoke(    TypeParameterUsage parameterUsage){
      Variance howTheTypeIsUsedBefore=parameters.get(parameterUsage.typeParameterDescriptor);
      if (howTheTypeIsUsedBefore == null) {
        howTheTypeIsUsedBefore=Variance.INVARIANT;
      }
      parameters.put(parameterUsage.typeParameterDescriptor,parameterUsage.howTheTypeParameterIsUsed.superpose(howTheTypeIsUsedBefore));
      return Unit.INSTANCE;
    }
  }
;
  processAllTypeParameters(withParameters,Variance.INVARIANT,processor);
  processAllTypeParameters(expected,Variance.INVARIANT,processor);
  ConstraintSystem.Builder constraintSystem=new ConstraintSystemImpl();
  constraintSystem.registerTypeVariables(parameters.keySet(),new Function1<TypeParameterDescriptor,TypeParameterDescriptor>(){
    @Override public TypeParameterDescriptor invoke(    TypeParameterDescriptor descriptor){
      return descriptor;
    }
  }
,false);
  constraintSystem.addSubtypeConstraint(withParameters,expected,SPECIAL.position());
  return constraintSystem.build().getStatus().isSuccessful();
}
