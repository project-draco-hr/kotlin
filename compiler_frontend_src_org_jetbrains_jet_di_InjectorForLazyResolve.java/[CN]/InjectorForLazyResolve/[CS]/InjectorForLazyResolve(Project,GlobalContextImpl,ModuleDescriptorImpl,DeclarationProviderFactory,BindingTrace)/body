{
  this.project=project;
  this.globalContext=globalContext;
  this.lockBasedStorageManager=globalContext.getStorageManager();
  this.moduleDescriptor=moduleDescriptor;
  this.platformToKotlinClassMap=moduleDescriptor.getPlatformToKotlinClassMap();
  this.declarationProviderFactory=declarationProviderFactory;
  this.bindingTrace=bindingTrace;
  this.resolveSession=new ResolveSession(project,globalContext,moduleDescriptor,declarationProviderFactory,bindingTrace);
  this.annotationResolver=new AnnotationResolver();
  this.callResolver=new CallResolver();
  this.argumentTypeResolver=new ArgumentTypeResolver();
  this.expressionTypingComponents=new ExpressionTypingComponents();
  this.expressionTypingServices=new ExpressionTypingServices(expressionTypingComponents);
  this.controlStructureTypingUtils=new ControlStructureTypingUtils(expressionTypingServices);
  this.expressionTypingUtils=new ExpressionTypingUtils(expressionTypingServices,callResolver);
  this.forLoopConventionsChecker=new ForLoopConventionsChecker();
  this.callExpressionResolver=new CallExpressionResolver();
  this.descriptorResolver=new DescriptorResolver();
  this.delegatedPropertyResolver=new DelegatedPropertyResolver();
  this.typeResolver=new TypeResolver();
  this.qualifiedExpressionResolver=new QualifiedExpressionResolver();
  this.callResolverExtensionProvider=new CallResolverExtensionProvider();
  this.candidateResolver=new CandidateResolver();
  this.jetImportsFactory=new JetImportsFactory();
  this.scopeProvider=new ScopeProvider(getResolveSession());
  this.resolveSession.setAnnotationResolve(annotationResolver);
  this.resolveSession.setDescriptorResolver(descriptorResolver);
  this.resolveSession.setJetImportFactory(jetImportsFactory);
  this.resolveSession.setQualifiedExpressionResolver(qualifiedExpressionResolver);
  this.resolveSession.setScopeProvider(scopeProvider);
  this.resolveSession.setTypeResolver(typeResolver);
  annotationResolver.setCallResolver(callResolver);
  callResolver.setArgumentTypeResolver(argumentTypeResolver);
  callResolver.setCandidateResolver(candidateResolver);
  callResolver.setExpressionTypingServices(expressionTypingServices);
  callResolver.setTypeResolver(typeResolver);
  argumentTypeResolver.setExpressionTypingServices(expressionTypingServices);
  argumentTypeResolver.setTypeResolver(typeResolver);
  expressionTypingServices.setAnnotationResolver(annotationResolver);
  expressionTypingServices.setCallExpressionResolver(callExpressionResolver);
  expressionTypingServices.setCallResolver(callResolver);
  expressionTypingServices.setDescriptorResolver(descriptorResolver);
  expressionTypingServices.setExtensionProvider(callResolverExtensionProvider);
  expressionTypingServices.setProject(project);
  expressionTypingServices.setTypeResolver(typeResolver);
  expressionTypingComponents.setCallResolver(callResolver);
  expressionTypingComponents.setControlStructureTypingUtils(controlStructureTypingUtils);
  expressionTypingComponents.setExpressionTypingServices(expressionTypingServices);
  expressionTypingComponents.setExpressionTypingUtils(expressionTypingUtils);
  expressionTypingComponents.setForLoopConventionsChecker(forLoopConventionsChecker);
  expressionTypingComponents.setGlobalContext(globalContext);
  expressionTypingComponents.setPlatformToKotlinClassMap(platformToKotlinClassMap);
  forLoopConventionsChecker.setExpressionTypingServices(expressionTypingServices);
  forLoopConventionsChecker.setExpressionTypingUtils(expressionTypingUtils);
  forLoopConventionsChecker.setProject(project);
  callExpressionResolver.setExpressionTypingServices(expressionTypingServices);
  descriptorResolver.setAnnotationResolver(annotationResolver);
  descriptorResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);
  descriptorResolver.setExpressionTypingServices(expressionTypingServices);
  descriptorResolver.setStorageManager(lockBasedStorageManager);
  descriptorResolver.setTypeResolver(typeResolver);
  delegatedPropertyResolver.setCallResolver(callResolver);
  delegatedPropertyResolver.setExpressionTypingServices(expressionTypingServices);
  typeResolver.setAnnotationResolver(annotationResolver);
  typeResolver.setModuleDescriptor(moduleDescriptor);
  typeResolver.setQualifiedExpressionResolver(qualifiedExpressionResolver);
  candidateResolver.setArgumentTypeResolver(argumentTypeResolver);
  jetImportsFactory.setProject(project);
}
