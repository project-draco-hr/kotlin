{
  this.project=project;
  this.globalContext=globalContext;
  this.storageManager=globalContext.getStorageManager();
  this.moduleDescriptor=moduleDescriptor;
  this.kotlinBuiltIns=moduleDescriptor.getBuiltIns();
  this.platformToKotlinClassMap=moduleDescriptor.getPlatformToKotlinClassMap();
  this.declarationProviderFactory=declarationProviderFactory;
  this.bindingTrace=bindingTrace;
  this.additionalCheckerProvider=additionalCheckerProvider;
  this.dynamicTypesSettings=dynamicTypesSettings;
  this.resolveSession=new ResolveSession(project,globalContext,moduleDescriptor,declarationProviderFactory,bindingTrace);
  this.lazyResolveToken=new LazyResolveToken();
  this.annotationResolver=new AnnotationResolver();
  this.callResolver=new CallResolver();
  this.argumentTypeResolver=new ArgumentTypeResolver();
  this.expressionTypingComponents=new ExpressionTypingComponents();
  this.expressionTypingServices=new ExpressionTypingServices(expressionTypingComponents);
  this.controlStructureTypingUtils=new ControlStructureTypingUtils(expressionTypingServices);
  this.expressionTypingUtils=new ExpressionTypingUtils(expressionTypingServices,callResolver,kotlinBuiltIns);
  this.forLoopConventionsChecker=new ForLoopConventionsChecker();
  this.reflectionTypes=new ReflectionTypes(moduleDescriptor);
  this.callExpressionResolver=new CallExpressionResolver();
  this.descriptorResolver=new DescriptorResolver();
  this.delegatedPropertyResolver=new DelegatedPropertyResolver();
  this.qualifiedExpressionResolver=new QualifiedExpressionResolver();
  this.flexibleTypeCapabilitiesProvider=new FlexibleTypeCapabilitiesProvider();
  this.typeResolver=new TypeResolver(annotationResolver,qualifiedExpressionResolver,moduleDescriptor,flexibleTypeCapabilitiesProvider,storageManager,lazyResolveToken,dynamicTypesSettings);
  this.callResolverExtensionProvider=new CallResolverExtensionProvider();
  this.partialBodyResolveProvider=new PartialBodyResolveProvider();
  this.candidateResolver=new CandidateResolver();
  this.callCompleter=new CallCompleter(argumentTypeResolver,candidateResolver);
  this.taskPrioritizer=new TaskPrioritizer(storageManager);
  this.jetImportsFactory=new JetImportsFactory();
  this.scopeProvider=new ScopeProvider(getResolveSession());
  this.additionalFileScopeProvider=new AdditionalFileScopeProvider();
  this.scriptBodyResolver=new ScriptBodyResolver();
  this.resolveSession.setAnnotationResolve(annotationResolver);
  this.resolveSession.setDescriptorResolver(descriptorResolver);
  this.resolveSession.setJetImportFactory(jetImportsFactory);
  this.resolveSession.setQualifiedExpressionResolver(qualifiedExpressionResolver);
  this.resolveSession.setScopeProvider(scopeProvider);
  this.resolveSession.setScriptBodyResolver(scriptBodyResolver);
  this.resolveSession.setTypeResolver(typeResolver);
  annotationResolver.setCallResolver(callResolver);
  annotationResolver.setStorageManager(storageManager);
  annotationResolver.setTypeResolver(typeResolver);
  callResolver.setArgumentTypeResolver(argumentTypeResolver);
  callResolver.setCallCompleter(callCompleter);
  callResolver.setCandidateResolver(candidateResolver);
  callResolver.setExpressionTypingServices(expressionTypingServices);
  callResolver.setTaskPrioritizer(taskPrioritizer);
  callResolver.setTypeResolver(typeResolver);
  argumentTypeResolver.setBuiltIns(kotlinBuiltIns);
  argumentTypeResolver.setExpressionTypingServices(expressionTypingServices);
  argumentTypeResolver.setTypeResolver(typeResolver);
  expressionTypingServices.setAnnotationResolver(annotationResolver);
  expressionTypingServices.setBuiltIns(kotlinBuiltIns);
  expressionTypingServices.setCallExpressionResolver(callExpressionResolver);
  expressionTypingServices.setCallResolver(callResolver);
  expressionTypingServices.setDescriptorResolver(descriptorResolver);
  expressionTypingServices.setExtensionProvider(callResolverExtensionProvider);
  expressionTypingServices.setPartialBodyResolveProvider(partialBodyResolveProvider);
  expressionTypingServices.setProject(project);
  expressionTypingServices.setTypeResolver(typeResolver);
  expressionTypingComponents.setAdditionalCheckerProvider(additionalCheckerProvider);
  expressionTypingComponents.setBuiltIns(kotlinBuiltIns);
  expressionTypingComponents.setCallResolver(callResolver);
  expressionTypingComponents.setControlStructureTypingUtils(controlStructureTypingUtils);
  expressionTypingComponents.setDynamicTypesSettings(dynamicTypesSettings);
  expressionTypingComponents.setExpressionTypingServices(expressionTypingServices);
  expressionTypingComponents.setExpressionTypingUtils(expressionTypingUtils);
  expressionTypingComponents.setForLoopConventionsChecker(forLoopConventionsChecker);
  expressionTypingComponents.setGlobalContext(globalContext);
  expressionTypingComponents.setPlatformToKotlinClassMap(platformToKotlinClassMap);
  expressionTypingComponents.setReflectionTypes(reflectionTypes);
  forLoopConventionsChecker.setBuiltIns(kotlinBuiltIns);
  forLoopConventionsChecker.setExpressionTypingServices(expressionTypingServices);
  forLoopConventionsChecker.setExpressionTypingUtils(expressionTypingUtils);
  forLoopConventionsChecker.setProject(project);
  callExpressionResolver.setExpressionTypingServices(expressionTypingServices);
  descriptorResolver.setAnnotationResolver(annotationResolver);
  descriptorResolver.setBuiltIns(kotlinBuiltIns);
  descriptorResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);
  descriptorResolver.setExpressionTypingServices(expressionTypingServices);
  descriptorResolver.setStorageManager(storageManager);
  descriptorResolver.setTypeResolver(typeResolver);
  delegatedPropertyResolver.setBuiltIns(kotlinBuiltIns);
  delegatedPropertyResolver.setCallResolver(callResolver);
  delegatedPropertyResolver.setExpressionTypingServices(expressionTypingServices);
  candidateResolver.setArgumentTypeResolver(argumentTypeResolver);
  jetImportsFactory.setProject(project);
  scopeProvider.setAdditionalFileScopesProvider(additionalFileScopeProvider);
  scriptBodyResolver.setExpressionTypingServices(expressionTypingServices);
}
