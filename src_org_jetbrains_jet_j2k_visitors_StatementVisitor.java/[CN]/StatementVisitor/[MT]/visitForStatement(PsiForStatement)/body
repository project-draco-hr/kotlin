{
  super.visitForStatement(statement);
  final PsiStatement initialization=statement.getInitialization();
  final PsiStatement update=statement.getUpdate();
  final PsiExpression condition=statement.getCondition();
  final PsiLocalVariable firstChild=initialization != null && initialization.getFirstChild() instanceof PsiLocalVariable ? (PsiLocalVariable)initialization.getFirstChild() : null;
  final IElementType operationTokenType=condition != null && condition instanceof PsiBinaryExpression ? ((PsiBinaryExpression)condition).getOperationTokenType() : null;
  if (initialization != null && initialization instanceof PsiDeclarationStatement && initialization.getFirstChild() == initialization.getLastChild() && condition != null && update != null && update.getChildren().length == 1 && update.getChildren()[0] instanceof PsiPostfixExpression && ((PsiPostfixExpression)update.getChildren()[0]).getOperationTokenType() == JavaTokenType.PLUSPLUS && operationTokenType != null && (operationTokenType == JavaTokenType.LT || operationTokenType == JavaTokenType.LE) && initialization.getFirstChild() != null && initialization.getFirstChild() instanceof PsiLocalVariable && firstChild != null && firstChild.getNameIdentifier() != null && isOnceWritableIterator(firstChild)) {
    final Expression end=expressionToExpression(((PsiBinaryExpression)condition).getROperand());
    final Expression endExpression=operationTokenType == JavaTokenType.LT ? new BinaryExpression(end,new IdentifierImpl("1"),"-") : end;
    myResult=new ForeachWithRangeStatement(new IdentifierImpl(firstChild.getName()),expressionToExpression(firstChild.getInitializer()),endExpression,statementToStatement(statement.getBody()));
  }
 else {
    List<Statement> forStatements=new LinkedList<Statement>();
    forStatements.add(statementToStatement(initialization));
    forStatements.add(new WhileStatement(expressionToExpression(condition),new Block(Arrays.asList(statementToStatement(statement.getBody()),new Block(Arrays.asList(statementToStatement(update)))))));
    myResult=new Block(forStatements);
  }
}
