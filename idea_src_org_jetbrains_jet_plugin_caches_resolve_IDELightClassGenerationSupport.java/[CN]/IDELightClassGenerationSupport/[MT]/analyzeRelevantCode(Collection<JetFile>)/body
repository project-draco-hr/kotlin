{
  if (files.isEmpty()) {
    return new LightClassConstructionContext(BindingContext.EMPTY,null);
  }
  List<JetFile> sortedFiles=new ArrayList<JetFile>(files);
  Collections.sort(sortedFiles,jetFileComparator);
  Profiler p=Profiler.create((USE_LAZY ? "lazy" : "eager") + " analyze",LOG).start();
  try {
    if (USE_LAZY) {
      ResolveSessionForBodies session=AnalyzerFacadeWithCache.getLazyResolveSessionForFile(sortedFiles.get(0));
      forceResolveRelevantDeclarations(files,session);
      return new LightClassConstructionContext(session.getBindingContext(),null);
    }
 else {
      KotlinCacheManager cacheManager=KotlinCacheManager.getInstance(project);
      KotlinDeclarationsCache declarationsCache=cacheManager.getPossiblyIncompleteDeclarationsForLightClassGeneration();
      return new LightClassConstructionContext(declarationsCache.getBindingContext(),null);
    }
  }
  finally {
    p.end();
  }
}
