{
  Profiler p=Profiler.create((USE_LAZY ? "lazy" : "eager") + " analyze",LOG).start();
  try {
    if (USE_LAZY) {
      ResolveSessionForBodies session=AnalyzerFacadeWithCache.getLazyResolveSessionForFile((JetFile)classOrObject.getContainingFile());
      if (JetPsiUtil.isLocal(classOrObject)) {
        BindingContext bindingContext=session.resolveToElement(classOrObject);
        forceResolveAllContents(bindingContext.get(BindingContext.CLASS,classOrObject));
        return new LightClassConstructionContext(bindingContext,null);
      }
      forceResolveAllContents(session.getClassDescriptor(classOrObject));
      return new LightClassConstructionContext(session.getBindingContext(),null);
    }
 else {
      KotlinCacheManager cacheManager=KotlinCacheManager.getInstance(project);
      return new LightClassConstructionContext(cacheManager.getLightClassContextCache().getLightClassContext(classOrObject),null);
    }
  }
  finally {
    p.end();
  }
}
