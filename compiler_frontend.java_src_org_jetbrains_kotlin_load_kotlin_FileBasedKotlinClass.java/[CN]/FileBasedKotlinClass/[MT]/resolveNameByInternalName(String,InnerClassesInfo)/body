{
  if (!name.contains("$")) {
    return ClassId.topLevel(new FqName(name.replace('/','.')));
  }
  if (name.equals(JvmAnnotationNames.KotlinSyntheticClass.KIND_INTERNAL_NAME)) {
    return JvmAnnotationNames.KotlinSyntheticClass.KIND_CLASS_ID;
  }
  List<String> classes=new ArrayList<String>(1);
  boolean local=false;
  while (true) {
    OuterAndInnerName outer=innerClasses.get(name);
    if (outer == null)     break;
    if (outer.outerInternalName == null) {
      local=true;
      break;
    }
    classes.add(outer.innerSimpleName);
    name=outer.outerInternalName;
  }
  FqName outermostClassFqName=new FqName(name.replace('/','.'));
  classes.add(outermostClassFqName.shortName().asString());
  Collections.reverse(classes);
  FqName packageFqName=outermostClassFqName.parent();
  FqNameUnsafe relativeClassName=FqNameUnsafe.fromSegments(classes);
  return new ClassId(packageFqName,relativeClassName,local);
}
