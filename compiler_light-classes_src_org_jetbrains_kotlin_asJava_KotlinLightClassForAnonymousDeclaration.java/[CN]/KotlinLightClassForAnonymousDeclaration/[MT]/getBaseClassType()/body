{
  PsiClassType type=null;
  if (cachedBaseType != null)   type=cachedBaseType.get();
  if (type != null && type.isValid())   return type;
  String firstSupertypeFQName=getFirstSupertypeFQName();
  for (  PsiClassType superType : getSuperTypes()) {
    PsiClass superClass=superType.resolve();
    if (superClass != null && firstSupertypeFQName.equals(superClass.getQualifiedName())) {
      type=superType;
      break;
    }
  }
  if (type == null) {
    Project project=classOrObject.getProject();
    type=PsiType.getJavaLangObject(PsiManager.getInstance(project),GlobalSearchScope.allScope(project));
  }
  cachedBaseType=new SoftReference<PsiClassType>(type);
  return type;
}
