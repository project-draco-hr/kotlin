{
  ClassDescriptor descriptor=getDescriptor();
  if (descriptor == null)   return CommonClassNames.JAVA_LANG_OBJECT;
  Collection<KotlinType> superTypes=descriptor.getTypeConstructor().getSupertypes();
  if (superTypes.isEmpty())   return CommonClassNames.JAVA_LANG_OBJECT;
  KotlinType superType=superTypes.iterator().next();
  DeclarationDescriptor superClassDescriptor=superType.getConstructor().getDeclarationDescriptor();
  if (superClassDescriptor == null) {
    LOG.error("No declaration descriptor for supertype " + superType + " of "+ getDescriptor());
    return CommonClassNames.JAVA_LANG_OBJECT;
  }
  return DescriptorUtils.getFqName(superClassDescriptor).asString();
}
