{
  this.configuration=configuration.copy();
  this.configuration.setReadOnly(true);
  projectEnvironment=new JavaCoreProjectEnvironment(parentDisposable,applicationEnvironment){
    @Override protected void preregisterServices(){
      registerProjectExtensionPoints(Extensions.getArea(getProject()));
    }
  }
;
  MockProject project=projectEnvironment.getProject();
  annotationsManager=new CoreExternalAnnotationsManager(project.getComponent(PsiManager.class));
  project.registerService(ExternalAnnotationsManager.class,annotationsManager);
  project.registerService(DeclarationProviderFactoryService.class,new CliDeclarationProviderFactoryService(sourceFiles));
  registerProjectServicesForCLI(projectEnvironment);
  registerProjectServices(projectEnvironment);
  for (  File path : configuration.getList(JVMConfigurationKeys.CLASSPATH_KEY)) {
    addToClasspath(path);
  }
  for (  File path : configuration.getList(JVMConfigurationKeys.ANNOTATIONS_PATH_KEY)) {
    addExternalAnnotationsRoot(path);
  }
  sourceFiles.addAll(CompileEnvironmentUtil.getJetFiles(getProject(),getSourceRootsCheckingForDuplicates(),new Function1<String,Unit>(){
    @Override public Unit invoke(    String s){
      report(ERROR,s);
      return Unit.INSTANCE$;
    }
  }
));
  ContainerUtil.sort(sourceFiles,new Comparator<JetFile>(){
    @Override public int compare(    @NotNull JetFile o1,    @NotNull JetFile o2){
      return o1.getVirtualFile().getPath().compareToIgnoreCase(o2.getVirtualFile().getPath());
    }
  }
);
  JetScriptDefinitionProvider.getInstance(project).addScriptDefinitions(configuration.getList(CommonConfigurationKeys.SCRIPT_DEFINITIONS_KEY));
  project.registerService(VirtualFileFinderFactory.class,new CliVirtualFileFinderFactory(classPath));
}
