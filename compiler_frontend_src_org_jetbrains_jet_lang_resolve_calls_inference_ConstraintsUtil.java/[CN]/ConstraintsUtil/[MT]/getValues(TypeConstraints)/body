{
  Set<JetType> values=Sets.newLinkedHashSet();
  if (typeConstraints != null && !typeConstraints.isEmpty()) {
    if (typeConstraints.getExactBounds().size() == 1) {
      if (verifyOneExactBound(typeConstraints)) {
        JetType exactBound=typeConstraints.getExactBounds().iterator().next();
        return Collections.singleton(exactBound);
      }
    }
    values.addAll(typeConstraints.getExactBounds());
    if (!typeConstraints.getLowerBounds().isEmpty()) {
      JetType superTypeOfLowerBounds=CommonSupertypes.commonSupertype(typeConstraints.getLowerBounds());
      for (      JetType value : values) {
        if (!JetTypeChecker.INSTANCE.isSubtypeOf(superTypeOfLowerBounds,value)) {
          values.add(superTypeOfLowerBounds);
          break;
        }
      }
      if (values.isEmpty()) {
        values.add(superTypeOfLowerBounds);
      }
    }
    if (!typeConstraints.getUpperBounds().isEmpty()) {
      JetType subTypeOfUpperBounds=typeConstraints.getUpperBounds().iterator().next();
      for (      JetType value : values) {
        if (!JetTypeChecker.INSTANCE.isSubtypeOf(value,subTypeOfUpperBounds)) {
          values.add(subTypeOfUpperBounds);
          break;
        }
      }
      if (values.isEmpty()) {
        values.add(subTypeOfUpperBounds);
      }
    }
  }
  return values;
}
