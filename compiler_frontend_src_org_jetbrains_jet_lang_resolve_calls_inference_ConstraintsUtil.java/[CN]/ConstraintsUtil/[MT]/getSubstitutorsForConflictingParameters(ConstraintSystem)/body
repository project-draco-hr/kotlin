{
  TypeParameterDescriptor firstConflictingParameter=getFirstConflictingParameter(constraintSystem);
  if (firstConflictingParameter == null)   return Collections.emptyList();
  Collection<JetType> conflictingTypes=constraintSystem.getTypeBounds(firstConflictingParameter).getValues();
  List<Map<TypeConstructor,TypeProjection>> substitutionContexts=Lists.newArrayList();
  for (  JetType type : conflictingTypes) {
    Map<TypeConstructor,TypeProjection> context=Maps.newLinkedHashMap();
    context.put(firstConflictingParameter.getTypeConstructor(),new TypeProjectionImpl(type));
    substitutionContexts.add(context);
  }
  for (  TypeParameterDescriptor typeParameter : constraintSystem.getTypeVariables()) {
    if (typeParameter == firstConflictingParameter)     continue;
    JetType safeType=getSafeValue(constraintSystem,typeParameter);
    for (    Map<TypeConstructor,TypeProjection> context : substitutionContexts) {
      TypeProjection typeProjection=new TypeProjectionImpl(safeType);
      context.put(typeParameter.getTypeConstructor(),typeProjection);
    }
  }
  Collection<TypeSubstitutor> typeSubstitutors=Lists.newArrayList();
  for (  Map<TypeConstructor,TypeProjection> context : substitutionContexts) {
    typeSubstitutors.add(TypeSubstitutor.create(context));
  }
  return typeSubstitutors;
}
