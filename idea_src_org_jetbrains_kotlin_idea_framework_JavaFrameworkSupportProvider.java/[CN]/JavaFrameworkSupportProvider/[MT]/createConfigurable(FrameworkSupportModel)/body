{
  return new FrameworkSupportInModuleConfigurable(){
    private JavaRuntimeLibraryDescription description=null;
    @Nullable @Override public CustomLibraryDescription createLibraryDescription(){
      description=new JavaRuntimeLibraryDescription(model.getProject());
      return description;
    }
    @Nullable @Override public JComponent createComponent(){
      return null;
    }
    @Override public boolean isOnlyLibraryAdded(){
      return true;
    }
    @Override public void addSupport(    @NotNull Module module,    @NotNull ModifiableRootModel rootModel,    @NotNull ModifiableModelsProvider modifiableModelsProvider){
      FrameworksCompatibilityUtils.suggestRemoveIncompatibleFramework(rootModel,JSLibraryStdDescription.SUITABLE_LIBRARY_KINDS,JSFrameworkType.getInstance());
      description.finishLibConfiguration(module,rootModel);
    }
    @Override public void onFrameworkSelectionChanged(    boolean selected){
      if (selected) {
        String providerId=JSFrameworkType.getInstance().getId();
        if (model.isFrameworkSelected(providerId)) {
          model.setFrameworkComponentEnabled(providerId,false);
        }
      }
    }
  }
;
}
