{
  JetTypeReference propertyTypeRef=property.getPropertyTypeRef();
  if (propertyTypeRef == null) {
    final JetExpression initializer=property.getInitializer();
    if (initializer == null) {
      trace.getErrorHandler().genericError(property.getNode(),"This property must either have a type annotation or be initialized");
      return ErrorUtils.createErrorType("No type, no body");
    }
 else {
      LazyValue<JetType> lazyValue=new LazyValue<JetType>(){
        @Override protected JetType compute(){
          return semanticServices.getTypeInferrer(trace,JetFlowInformationProvider.THROW_EXCEPTION).safeGetType(scope,initializer,false);
        }
      }
;
      if (allowDeferred) {
        return new DeferredType(lazyValue);
      }
 else {
        return lazyValue.get();
      }
    }
  }
 else {
    return typeResolver.resolveType(scope,propertyTypeRef);
  }
}
