{
  final FunctionDescriptorImpl functionDescriptor=new FunctionDescriptorImpl(containingDescriptor,AnnotationResolver.INSTANCE.resolveAnnotations(function.getModifierList()),JetPsiUtil.safeName(function.getName()));
  WritableScope innerScope=new WritableScopeImpl(scope,functionDescriptor,trace.getErrorHandler());
  innerScope.addLabeledDeclaration(functionDescriptor);
  List<TypeParameterDescriptor> typeParameterDescriptors=resolveTypeParameters(functionDescriptor,innerScope,function.getTypeParameters());
  List<ValueParameterDescriptor> valueParameterDescriptors=resolveValueParameters(functionDescriptor,innerScope,function.getValueParameters());
  JetTypeReference returnTypeRef=function.getReturnTypeRef();
  JetType returnType=null;
  if (returnTypeRef != null) {
    returnType=typeResolver.resolveType(innerScope,returnTypeRef);
  }
 else {
    final JetExpression bodyExpression=function.getBodyExpression();
    if (bodyExpression != null) {
      returnType=new DeferredType(new LazyValue<JetType>(){
        @Override protected JetType compute(){
          JetFlowInformationProvider flowInformationProvider=computeFlowData(function,bodyExpression);
          return semanticServices.getTypeInferrer(trace,flowInformationProvider).getFunctionReturnType(scope,function,functionDescriptor);
        }
      }
);
    }
  }
  functionDescriptor.initialize(typeParameterDescriptors,valueParameterDescriptors,returnType);
  trace.recordDeclarationResolution(function,functionDescriptor);
  return functionDescriptor;
}
