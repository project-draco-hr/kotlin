{
  FunctionDescriptorImpl functionDescriptor=new FunctionDescriptorImpl(containingDescriptor,AttributeResolver.INSTANCE.resolveAttributes(function.getModifierList()),JetPsiUtil.safeName(function.getName()));
  WritableScope innerScope=semanticServices.createWritableScope(scope,functionDescriptor);
  innerScope.addLabeledDeclaration(functionDescriptor);
  List<TypeParameterDescriptor> typeParameterDescriptors=resolveTypeParameters(functionDescriptor,innerScope,function.getTypeParameters());
  List<ValueParameterDescriptor> valueParameterDescriptors=resolveValueParameters(functionDescriptor,innerScope,function.getValueParameters());
  JetType returnType;
  JetTypeReference returnTypeRef=function.getReturnTypeRef();
  JetExpression bodyExpression=function.getBodyExpression();
  if (returnTypeRef != null) {
    returnType=typeResolver.resolveType(innerScope,returnTypeRef);
    if (bodyExpression != null) {
      semanticServices.getTypeInferrer(trace).getType(innerScope,bodyExpression,function.hasBlockBody());
    }
  }
 else {
    if (bodyExpression == null) {
      semanticServices.getErrorHandler().genericError(function.getNode(),"This function must either declare a return type or have a body element");
      returnType=ErrorUtils.createErrorType("No type, no body");
    }
 else {
      returnType=semanticServices.getTypeInferrer(trace).safeGetType(innerScope,bodyExpression,function.hasBlockBody());
    }
  }
  functionDescriptor.initialize(typeParameterDescriptors,valueParameterDescriptors,returnType);
  trace.recordDeclarationResolution(function,functionDescriptor);
  return functionDescriptor;
}
