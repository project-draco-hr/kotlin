{
  descriptor.setName(classElement.getName());
  WritableScope parameterScope=descriptor.getUnsubstitutedMemberScope();
  List<TypeParameterDescriptor> typeParameters=resolveTypeParameters(descriptor,parameterScope,classElement.getTypeParameters());
  boolean open=classElement.hasModifier(JetTokens.OPEN_KEYWORD);
  List<JetType> supertypes=new ArrayList<JetType>();
  TypeConstructorImpl typeConstructor=new TypeConstructorImpl(descriptor,AttributeResolver.INSTANCE.resolveAttributes(classElement.getModifierList()),!open,classElement.getName(),typeParameters,supertypes);
  descriptor.setTypeConstructor(typeConstructor);
  List<JetDelegationSpecifier> delegationSpecifiers=classElement.getDelegationSpecifiers();
  Collection<? extends JetType> superclasses=delegationSpecifiers.isEmpty() ? Collections.singleton(JetStandardClasses.getAnyType()) : resolveTypes(parameterScope,delegationSpecifiers);
  supertypes.addAll(superclasses);
  for (  JetType supertype : superclasses) {
    parameterScope.importScope(supertype.getMemberScope());
  }
  trace.recordDeclarationResolution(classElement,descriptor);
}
