{
  JetType type=resolveParameterType(scope,parameter);
  String name=parameter.getName();
  boolean isMutable=parameter.isMutable();
  JetModifierList modifierList=parameter.getModifierList();
  if (modifierList != null) {
    ASTNode abstractNode=modifierList.getModifierNode(JetTokens.ABSTRACT_KEYWORD);
    if (abstractNode != null) {
      trace.getErrorHandler().genericError(abstractNode,"This property cannot be declared abstract");
    }
  }
  PropertyDescriptor propertyDescriptor=new PropertyDescriptor(classDescriptor,annotationResolver.resolveAnnotations(scope,modifierList),resolveModifiers(modifierList,DEFAULT_MODIFIERS),isMutable,null,name == null ? "<no name>" : name,isMutable ? type : null,type);
  propertyDescriptor.initialize(Collections.<TypeParameterDescriptor>emptyList(),null,null);
  trace.recordValueParameterAsPropertyResolution(parameter,propertyDescriptor);
  return propertyDescriptor;
}
