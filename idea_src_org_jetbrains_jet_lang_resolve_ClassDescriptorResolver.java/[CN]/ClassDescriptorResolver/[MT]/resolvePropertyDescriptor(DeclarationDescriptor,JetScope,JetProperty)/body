{
  JetScope scopeWithTypeParameters;
  List<TypeParameterDescriptor> typeParameterDescriptors;
  List<JetTypeParameter> typeParameters=property.getTypeParameters();
  if (typeParameters.isEmpty()) {
    scopeWithTypeParameters=scope;
    typeParameterDescriptors=Collections.emptyList();
  }
 else {
    WritableScope writableScope=new WritableScopeImpl(scope,containingDeclaration,trace.getErrorHandler()).setDebugName("Scope with type parameters of a property");
    typeParameterDescriptors=resolveTypeParameters(containingDeclaration,writableScope,typeParameters);
    resolveGenericBounds(property,writableScope,typeParameterDescriptors);
    scopeWithTypeParameters=writableScope;
  }
  JetType receiverType=null;
  JetTypeReference receiverTypeRef=property.getReceiverTypeRef();
  if (receiverTypeRef != null) {
    receiverType=typeResolver.resolveType(scopeWithTypeParameters,receiverTypeRef);
  }
  JetModifierList modifierList=property.getModifierList();
  boolean isVar=property.isVar();
  JetType type=getVariableType(scopeWithTypeParameters,property,true);
  PropertyDescriptor propertyDescriptor=new PropertyDescriptor(containingDeclaration,AnnotationResolver.INSTANCE.resolveAnnotations(modifierList),resolveModifiers(modifierList,DEFAULT_MODIFIERS),isVar,receiverType,JetPsiUtil.safeName(property.getName()),isVar ? type : null,type);
  propertyDescriptor.initialize(typeParameterDescriptors,resolvePropertyGetterDescriptor(scopeWithTypeParameters,property,propertyDescriptor),resolvePropertySetterDescriptor(scopeWithTypeParameters,property,propertyDescriptor));
  trace.recordDeclarationResolution(property,propertyDescriptor);
  return propertyDescriptor;
}
