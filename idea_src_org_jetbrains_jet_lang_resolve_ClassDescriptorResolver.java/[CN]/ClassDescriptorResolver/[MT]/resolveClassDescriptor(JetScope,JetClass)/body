{
  ClassDescriptorImpl classDescriptor=new ClassDescriptorImpl(scope.getContainingDeclaration(),AttributeResolver.INSTANCE.resolveAttributes(classElement.getModifierList()),classElement.getName());
  WritableScope parameterScope=semanticServices.createWritableScope(scope,classDescriptor);
  List<TypeParameterDescriptor> typeParameters=resolveTypeParameters(classDescriptor,parameterScope,classElement.getTypeParameters());
  List<JetDelegationSpecifier> delegationSpecifiers=classElement.getDelegationSpecifiers();
  Collection<? extends JetType> superclasses=delegationSpecifiers.isEmpty() ? Collections.singleton(JetStandardClasses.getAnyType()) : resolveTypes(parameterScope,delegationSpecifiers);
  boolean open=classElement.hasModifier(JetTokens.OPEN_KEYWORD);
  WritableScope members=resolveMembers(classDescriptor,classElement,typeParameters,scope,parameterScope,superclasses);
  WritableFunctionGroup constructors=new WritableFunctionGroup("<init>");
  for (  JetConstructor constructor : classElement.getSecondaryConstructors()) {
    constructors.addFunction(resolveConstructorDescriptor(members,classDescriptor,constructor,false));
  }
  ConstructorDescriptor primaryConstructorDescriptor=resolvePrimaryConstructor(scope,classDescriptor,classElement);
  if (primaryConstructorDescriptor != null) {
    constructors.addFunction(primaryConstructorDescriptor);
  }
  return classDescriptor.initialize(!open,typeParameters,superclasses,members,constructors);
}
