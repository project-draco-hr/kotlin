{
  ClassDescriptorImpl classDescriptor=new ClassDescriptorImpl(scope.getContainingDeclaration(),AttributeResolver.INSTANCE.resolveAttributes(classElement.getModifierList()),JetPsiUtil.safeName(classElement.getName()));
  trace.recordDeclarationResolution(classElement,classDescriptor);
  WritableScope parameterScope=semanticServices.createWritableScope(scope,classDescriptor);
  List<TypeParameterDescriptor> typeParameters=resolveTypeParameters(classDescriptor,parameterScope,classElement.getTypeParameters());
  List<JetDelegationSpecifier> delegationSpecifiers=classElement.getDelegationSpecifiers();
  Collection<? extends JetType> supertypes=delegationSpecifiers.isEmpty() ? Collections.singleton(JetStandardClasses.getAnyType()) : resolveDelegationSpecifiers(parameterScope,delegationSpecifiers);
  boolean open=classElement.hasModifier(JetTokens.OPEN_KEYWORD);
  WritableScope members=resolveMembers(classDescriptor,classElement,typeParameters,scope,parameterScope,supertypes);
  WritableFunctionGroup constructors=new WritableFunctionGroup("<init>");
  for (  JetConstructor constructor : classElement.getSecondaryConstructors()) {
    constructors.addFunction(resolveSecondaryConstructorDescriptor(members,classDescriptor,constructor));
  }
  ConstructorDescriptor primaryConstructorDescriptor=resolvePrimaryConstructorDescriptor(scope,classDescriptor,classElement);
  if (primaryConstructorDescriptor != null) {
    constructors.addFunction(primaryConstructorDescriptor);
  }
  return classDescriptor.initialize(!open,typeParameters,supertypes,members,constructors,primaryConstructorDescriptor);
}
