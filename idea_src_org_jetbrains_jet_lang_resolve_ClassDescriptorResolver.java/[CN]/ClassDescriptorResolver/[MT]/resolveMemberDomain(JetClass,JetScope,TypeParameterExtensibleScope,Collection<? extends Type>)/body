{
  return new TypeMemberDomain(){
    @Override public PropertyDescriptor getProperty(    Type contextType,    @NotNull String name){
      List<JetDeclaration> declarations=classElement.getDeclarations();
      for (      JetDeclaration declaration : declarations) {
        if (!name.equals(declaration.getName())) {
          continue;
        }
        if (declaration instanceof JetProperty) {
          JetProperty property=(JetProperty)declaration;
          if (property.getPropertyTypeRef() != null) {
            return substituteInPropertyDescriptor(contextType,resolvePropertyDescriptor(typeParameterScope,property));
          }
 else {
            throw new UnsupportedOperationException();
          }
        }
      }
      for (      Type supertype : supertypes) {
        PropertyDescriptor property=supertype.getMemberDomain().getProperty(JetTypeChecker.INSTANCE.substitute(contextType,supertype,Variance.INVARIANT),name);
        if (property != null) {
          return property;
        }
      }
      return null;
    }
    @Override public ClassDescriptor getClassDescriptor(    @NotNull Type contextType,    String name){
      throw new UnsupportedOperationException();
    }
    @NotNull @Override public Collection<MethodDescriptor> getMethods(    Type contextType,    String name){
      throw new UnsupportedOperationException();
    }
    @Override public ExtensionDescriptor getExtension(    Type contextType,    String name){
      throw new UnsupportedOperationException();
    }
  }
;
}
