{
  PsiBuilder.Marker currentPosition=mark();
  int beginOffset=myBuilder.getCurrentOffset();
  Stack<IElementType> opens=new Stack<IElementType>();
  int openAngleBrackets=0;
  int openBraces=0;
  int openParentheses=0;
  int openBrackets=0;
  while (!eof()) {
    if (pattern.processToken(myBuilder.getCurrentOffset(),pattern.isTopLevel(openAngleBrackets,openBrackets,openBraces,openParentheses))) {
      break;
    }
    if (at(LPAR)) {
      openParentheses++;
      opens.push(LPAR);
    }
 else     if (at(LT)) {
      openAngleBrackets++;
      opens.push(LT);
    }
 else     if (at(LBRACE)) {
      openBraces++;
      opens.push(LBRACE);
    }
 else     if (at(LBRACKET)) {
      openBrackets++;
      opens.push(LBRACKET);
    }
 else     if (at(RPAR)) {
      openParentheses--;
      if (opens.isEmpty() || opens.pop() != LPAR) {
        if (pattern.handleUnmatchedClosing(RPAR)) {
          break;
        }
      }
    }
 else     if (at(GT)) {
      openAngleBrackets--;
    }
 else     if (at(RBRACE)) {
      openBraces--;
    }
 else     if (at(RBRACKET)) {
      openBrackets--;
    }
    advance();
  }
  int endOffset=myBuilder.getCurrentOffset();
  currentPosition.rollbackTo();
  if (endOffset - beginOffset > LOOK_AHEAD_SIZE_WARN && !ApplicationManager.getApplication().isHeadlessEnvironment()) {
    String text=new StringBuilder(myBuilder.getOriginalText()).insert(endOffset,"<~~!END!~~>").insert(beginOffset,"<~~!BEGIN!~~>").toString();
    LOGGER.warn("Suspicious big range: \n" + text);
  }
  return pattern.result();
}
