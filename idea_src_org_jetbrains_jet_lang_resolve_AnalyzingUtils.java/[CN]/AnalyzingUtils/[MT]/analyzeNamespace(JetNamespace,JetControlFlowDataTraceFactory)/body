{
  Project project=namespace.getProject();
  BindingTraceContext bindingTraceContext=new BindingTraceContext();
  JetSemanticServices semanticServices=JetSemanticServices.createSemanticServices(project);
  JavaSemanticServices javaSemanticServices=new JavaSemanticServices(project,semanticServices,bindingTraceContext);
  JetScope libraryScope=semanticServices.getStandardLibrary().getLibraryScope();
  ModuleDescriptor owner=new ModuleDescriptor("<module>");
  final WritableScope scope=new WritableScopeImpl(libraryScope,owner,bindingTraceContext.getErrorHandler(),null);
  scope.importScope(new JavaPackageScope("",null,javaSemanticServices));
  scope.importScope(new JavaPackageScope("java.lang",null,javaSemanticServices));
  TopDownAnalyzer topDownAnalyzer=new TopDownAnalyzer(semanticServices,bindingTraceContext,flowDataTraceFactory);
  topDownAnalyzer.process(scope,new NamespaceLike.Adapter(owner){
    @Override public NamespaceDescriptorImpl getNamespace(    String name){
      return null;
    }
    @Override public void addNamespace(    @NotNull NamespaceDescriptor namespaceDescriptor){
      scope.addNamespace(namespaceDescriptor);
    }
    @Override public void addClassifierDescriptor(    @NotNull MutableClassDescriptor classDescriptor){
      scope.addClassifierDescriptor(classDescriptor);
    }
    @Override public void addFunctionDescriptor(    @NotNull FunctionDescriptor functionDescriptor){
      scope.addFunctionDescriptor(functionDescriptor);
    }
    @Override public void addPropertyDescriptor(    @NotNull PropertyDescriptor propertyDescriptor){
      scope.addVariableDescriptor(propertyDescriptor);
    }
  }
,Collections.<JetDeclaration>singletonList(namespace));
  return bindingTraceContext;
}
