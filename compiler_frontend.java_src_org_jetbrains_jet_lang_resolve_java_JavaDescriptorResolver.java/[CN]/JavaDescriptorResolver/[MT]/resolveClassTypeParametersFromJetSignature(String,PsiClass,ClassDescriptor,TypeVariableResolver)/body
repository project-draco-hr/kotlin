{
  final List<TypeParameterDescriptorInitialization> r=new ArrayList<TypeParameterDescriptorInitialization>();
class MyTypeVariableResolver implements TypeVariableResolver {
    @NotNull @Override public TypeParameterDescriptor getTypeVariable(    @NotNull String name){
      for (      TypeParameterDescriptorInitialization typeParameter : r) {
        if (typeParameter.descriptor.getName().equals(name)) {
          return typeParameter.descriptor;
        }
      }
      return outerClassTypeVariableResolver.getTypeVariable(name);
    }
  }
  new JetSignatureReader(jetSignature).accept(new JetSignatureExceptionsAdapter(){
    private int formalTypeParameterIndex=0;
    @Override public JetSignatureVisitor visitFormalTypeParameter(    final String name,    final TypeInfoVariance variance,    boolean reified){
      return new JetSignatureTypeParameterVisitor(classDescriptor,clazz,name,reified,formalTypeParameterIndex++,variance,new MyTypeVariableResolver()){
        @Override protected void done(        TypeParameterDescriptorInitialization typeParameterDescriptor){
          r.add(typeParameterDescriptor);
        }
      }
;
    }
    @Override public JetSignatureVisitor visitSuperclass(){
      return new JetSignatureAdapter();
    }
    @Override public JetSignatureVisitor visitInterface(){
      return new JetSignatureAdapter();
    }
  }
);
  return r;
}
