{
  final List<TypeParameterDescriptorInitialization> r=new ArrayList<TypeParameterDescriptorInitialization>();
  final List<TypeParameterDescriptor> previousTypeParameters=new ArrayList<TypeParameterDescriptor>();
  final TypeVariableResolver typeVariableResolver=new TypeVariableResolverFromTypeDescriptors(previousTypeParameters,outerClassTypeVariableResolver);
  new JetSignatureReader(jetSignature).accept(new JetSignatureExceptionsAdapter(){
    private int formalTypeParameterIndex=0;
    @Override public JetSignatureVisitor visitFormalTypeParameter(    final String name,    final TypeInfoVariance variance,    boolean reified){
      return new JetSignatureTypeParameterVisitor(classDescriptor,clazz,name,reified,formalTypeParameterIndex++,variance,typeVariableResolver){
        @Override protected void done(        TypeParameterDescriptorInitialization typeParameterDescriptor){
          r.add(typeParameterDescriptor);
          previousTypeParameters.add(typeParameterDescriptor.descriptor);
        }
      }
;
    }
    @Override public JetSignatureVisitor visitSuperclass(){
      return new JetSignatureAdapter();
    }
    @Override public JetSignatureVisitor visitInterface(){
      return new JetSignatureAdapter();
    }
  }
);
  return r;
}
