{
  PsiType returnType=method.getReturnType();
  if (returnType == null) {
    return null;
  }
  FunctionDescriptor functionDescriptor=methodDescriptorCache.get(method);
  if (functionDescriptor != null) {
    if (method.getContainingClass() != psiClass) {
      functionDescriptor=functionDescriptor.substitute(typeSubstitutorForGenericSuperclasses);
    }
    return functionDescriptor;
  }
  DeclarationDescriptor classDescriptor=method.hasModifierProperty(PsiModifier.STATIC) ? resolveNamespace(method.getContainingClass()) : resolveClass(method.getContainingClass());
  PsiParameter[] parameters=method.getParameterList().getParameters();
  FunctionDescriptorImpl functionDescriptorImpl=new FunctionDescriptorImpl(owner,Collections.<AnnotationDescriptor>emptyList(),method.getName());
  methodDescriptorCache.put(method,functionDescriptorImpl);
  List<TypeParameterDescriptor> typeParameters=resolveMethodTypeParameters(method,functionDescriptorImpl);
  ValueParameterDescriptors valueParameterDescriptors=resolveParameterDescriptors(functionDescriptorImpl,parameters);
  functionDescriptorImpl.initialize(valueParameterDescriptors.receiverType,DescriptorUtils.getExpectedThisObjectIfNeeded(classDescriptor),typeParameters,valueParameterDescriptors.descriptors,makeReturnType(returnType,method),Modality.convertFromFlags(method.hasModifierProperty(PsiModifier.ABSTRACT),!method.hasModifierProperty(PsiModifier.FINAL)),resolveVisibilityFromPsiModifiers(method));
  semanticServices.getTrace().record(BindingContext.FUNCTION,method,functionDescriptorImpl);
  FunctionDescriptor substitutedFunctionDescriptor=functionDescriptorImpl;
  if (method.getContainingClass() != psiClass) {
    substitutedFunctionDescriptor=functionDescriptorImpl.substitute(typeSubstitutorForGenericSuperclasses);
  }
  return substitutedFunctionDescriptor;
}
