{
  PsiType returnType=method.getReturnType();
  if (returnType == null) {
    return null;
  }
  FunctionDescriptor functionDescriptor=methodDescriptorCache.get(method);
  if (functionDescriptor != null) {
    if (method.getContainingClass() != psiClass) {
      functionDescriptor=functionDescriptor.substitute(typeSubstitutorForGenericSuperclasses);
    }
    return functionDescriptor;
  }
  boolean kotlin;
  if (owner instanceof JavaNamespaceDescriptor) {
    JavaNamespaceDescriptor javaNamespaceDescriptor=(JavaNamespaceDescriptor)owner;
    ResolverNamespaceData namespaceData=namespaceDescriptorCacheByFqn.get(javaNamespaceDescriptor.getQualifiedName());
    if (namespaceData == null) {
      throw new IllegalStateException("namespaceData not found by name " + javaNamespaceDescriptor.getQualifiedName());
    }
    kotlin=namespaceData.kotlin;
  }
 else {
    ResolverClassData classData=classDescriptorCache.get(psiClass.getQualifiedName());
    if (classData == null) {
      throw new IllegalStateException("classData not found by name " + psiClass.getQualifiedName());
    }
    kotlin=classData.kotlin;
  }
  if (kotlin) {
    if (method.getName().startsWith(JvmAbi.GETTER_PREFIX) && method.getParameterList().getParametersCount() == 0) {
      if (method.getModifierList().findAnnotation(JvmStdlibNames.JET_PROPERTY.getFqName()) != null)       return null;
    }
    if (method.getName().startsWith(JvmAbi.SETTER_PREFIX) && method.getParameterList().getParametersCount() == 1) {
      if (method.getModifierList().findAnnotation(JvmStdlibNames.JET_PROPERTY.getFqName()) != null)       return null;
    }
  }
  DeclarationDescriptor classDescriptor;
  final List<TypeParameterDescriptor> classTypeParameters;
  if (method.hasModifierProperty(PsiModifier.STATIC)) {
    classDescriptor=resolveNamespace(method.getContainingClass());
    classTypeParameters=Collections.emptyList();
  }
 else {
    ClassDescriptor classClassDescriptor=resolveClass(method.getContainingClass());
    classDescriptor=classClassDescriptor;
    classTypeParameters=classClassDescriptor.getTypeConstructor().getParameters();
  }
  if (classDescriptor == null) {
    return null;
  }
  PsiParameter[] parameters=method.getParameterList().getParameters();
  FunctionDescriptorImpl functionDescriptorImpl=new FunctionDescriptorImpl(owner,Collections.<AnnotationDescriptor>emptyList(),method.getName());
  methodDescriptorCache.put(method,functionDescriptorImpl);
  TypeParameterListTypeVariableResolver typeVariableResolverForParameters=new TypeParameterListTypeVariableResolver(classTypeParameters);
  final List<TypeParameterDescriptor> methodTypeParameters=resolveMethodTypeParameters(method,functionDescriptorImpl,typeVariableResolverForParameters);
class MethodTypeVariableResolver implements TypeVariableResolver {
    @NotNull @Override public TypeParameterDescriptor getTypeVariable(    @NotNull String name){
      for (      TypeParameterDescriptor typeParameter : methodTypeParameters) {
        if (typeParameter.getName().equals(name)) {
          return typeParameter;
        }
      }
      for (      TypeParameterDescriptor typeParameter : classTypeParameters) {
        if (typeParameter.getName().equals(name)) {
          return typeParameter;
        }
      }
      throw new IllegalStateException("unresolver variable: " + name);
    }
  }
  ValueParameterDescriptors valueParameterDescriptors=resolveParameterDescriptors(functionDescriptorImpl,parameters,new MethodTypeVariableResolver());
  functionDescriptorImpl.initialize(valueParameterDescriptors.receiverType,DescriptorUtils.getExpectedThisObjectIfNeeded(classDescriptor),methodTypeParameters,valueParameterDescriptors.descriptors,makeReturnType(returnType,method,new MethodTypeVariableResolver()),Modality.convertFromFlags(method.hasModifierProperty(PsiModifier.ABSTRACT),!method.hasModifierProperty(PsiModifier.FINAL)),resolveVisibilityFromPsiModifiers(method));
  semanticServices.getTrace().record(BindingContext.FUNCTION,method,functionDescriptorImpl);
  FunctionDescriptor substitutedFunctionDescriptor=functionDescriptorImpl;
  if (method.getContainingClass() != psiClass) {
    substitutedFunctionDescriptor=functionDescriptorImpl.substitute(typeSubstitutorForGenericSuperclasses);
  }
  return substitutedFunctionDescriptor;
}
