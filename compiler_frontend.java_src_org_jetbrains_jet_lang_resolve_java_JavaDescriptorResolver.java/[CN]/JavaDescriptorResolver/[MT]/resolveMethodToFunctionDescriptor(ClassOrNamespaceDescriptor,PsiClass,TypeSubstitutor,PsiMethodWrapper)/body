{
  PsiType returnType=method.getReturnType();
  if (returnType == null) {
    return null;
  }
  FunctionDescriptor functionDescriptor=methodDescriptorCache.get(method.getPsiMethod());
  if (functionDescriptor != null) {
    if (method.getPsiMethod().getContainingClass() != psiClass) {
      functionDescriptor=functionDescriptor.substitute(typeSubstitutorForGenericSuperclasses);
    }
    return functionDescriptor;
  }
  ResolverScopeData scopeData=getResolverScopeData(owner,new PsiClassWrapper(psiClass));
  boolean kotlin;
  if (owner instanceof JavaNamespaceDescriptor) {
    JavaNamespaceDescriptor javaNamespaceDescriptor=(JavaNamespaceDescriptor)owner;
    ResolverNamespaceData namespaceData=namespaceDescriptorCacheByFqn.get(javaNamespaceDescriptor.getQualifiedName());
    if (namespaceData == null) {
      throw new IllegalStateException("namespaceData not found by name " + javaNamespaceDescriptor.getQualifiedName());
    }
    kotlin=namespaceData.kotlin;
  }
 else {
    ResolverBinaryClassData classData=classDescriptorCache.get(psiClass.getQualifiedName());
    if (classData == null) {
      throw new IllegalStateException("classData not found by name " + psiClass.getQualifiedName());
    }
    kotlin=classData.kotlin;
  }
  if (method.getJetMethod().kind() == JvmStdlibNames.JET_METHOD_KIND_PROPERTY) {
    return null;
  }
  if (kotlin) {
    String ownerClassName=method.getPsiMethod().getContainingClass().getQualifiedName();
    if (ownerClassName.equals("java.lang.Object")) {
      return null;
    }
    if (method.getName().equals(JvmStdlibNames.JET_OBJECT_GET_TYPEINFO_METHOD) && method.getParameters().size() == 0) {
      return null;
    }
    if (method.getName().equals(JvmStdlibNames.JET_OBJECT_GET_OUTER_OBJECT_METHOD) && method.getParameters().size() == 0) {
      return null;
    }
    if (method.getName().equals(JvmAbi.SET_TYPE_INFO_METHOD)) {
      return null;
    }
  }
  DeclarationDescriptor classDescriptor;
  final List<TypeParameterDescriptor> classTypeParameters;
  final List<TypeParameterDescriptorInitialization> classTypeParameterDescriptorsInitialization;
  if (scopeData instanceof ResolverBinaryClassData) {
    ClassDescriptor classClassDescriptor=resolveClass(method.getPsiMethod().getContainingClass());
    classDescriptor=classClassDescriptor;
    classTypeParameters=classClassDescriptor.getTypeConstructor().getParameters();
    classTypeParameterDescriptorsInitialization=new ArrayList<TypeParameterDescriptorInitialization>();
    getAllTypeParameterDescriptorInitialization(psiClass,classTypeParameterDescriptorsInitialization);
  }
 else {
    classDescriptor=resolveNamespace(method.getPsiMethod().getContainingClass());
    classTypeParameters=new ArrayList<TypeParameterDescriptor>(0);
    classTypeParameterDescriptorsInitialization=new ArrayList<TypeParameterDescriptorInitialization>(0);
  }
  if (classDescriptor == null) {
    return null;
  }
  NamedFunctionDescriptorImpl functionDescriptorImpl=new NamedFunctionDescriptorImpl(owner,Collections.<AnnotationDescriptor>emptyList(),method.getName(),CallableMemberDescriptor.Kind.DECLARATION);
  methodDescriptorCache.put(method.getPsiMethod(),functionDescriptorImpl);
  TypeVariableResolver typeVariableResolverForParameters=new TypeVariableResoverFromTypeDescriptorsInitialization(classTypeParameterDescriptorsInitialization,null);
  final List<TypeParameterDescriptorInitialization> methodTypeParametersInitialization=resolveMethodTypeParameters(method,functionDescriptorImpl,typeVariableResolverForParameters);
  List<TypeParameterDescriptor> methodTypeParameters=new ArrayList<TypeParameterDescriptor>();
  for (  TypeParameterDescriptorInitialization typeParameterDescriptorInitialization : methodTypeParametersInitialization) {
    methodTypeParameters.add(typeParameterDescriptorInitialization.descriptor);
  }
class MethodTypeVariableResolver implements TypeVariableResolver {
    @NotNull @Override public TypeParameterDescriptor getTypeVariable(    @NotNull PsiTypeParameter psiTypeParameter){
      for (      TypeParameterDescriptorInitialization typeParameter : methodTypeParametersInitialization) {
        if (equal(typeParameter.psiTypeParameter,psiTypeParameter)) {
          return typeParameter.descriptor;
        }
      }
      for (      TypeParameterDescriptorInitialization typeParameter : classTypeParameterDescriptorsInitialization) {
        if (equal(typeParameter.psiTypeParameter,psiTypeParameter)) {
          return typeParameter.descriptor;
        }
      }
      throw new IllegalStateException("unresolved PsiTypeParameter " + psiTypeParameter.getName() + " in method "+ method.getName()+ " in class "+ psiClass.getQualifiedName());
    }
    @NotNull @Override public TypeParameterDescriptor getTypeVariableByPsiByName(    @NotNull String name){
      for (      TypeParameterDescriptorInitialization typeParameter : methodTypeParametersInitialization) {
        if (typeParameter.psiTypeParameter.getName().equals(name)) {
          return typeParameter.descriptor;
        }
      }
      for (      TypeParameterDescriptorInitialization typeParameter : classTypeParameterDescriptorsInitialization) {
        if (typeParameter.psiTypeParameter.getName().equals(name)) {
          return typeParameter.descriptor;
        }
      }
      throw new IllegalStateException("unresolved PsiTypeParameter " + name + " in method "+ method.getName()+ " in class "+ psiClass.getQualifiedName());
    }
    @NotNull @Override public TypeParameterDescriptor getTypeVariable(    @NotNull String name){
      for (      TypeParameterDescriptorInitialization typeParameter : methodTypeParametersInitialization) {
        if (typeParameter.descriptor.getName().equals(name)) {
          return typeParameter.descriptor;
        }
      }
      for (      TypeParameterDescriptor typeParameter : classTypeParameters) {
        if (typeParameter.getName().equals(name)) {
          return typeParameter;
        }
      }
      throw new IllegalStateException("unresolver variable: " + name);
    }
  }
  ValueParameterDescriptors valueParameterDescriptors=resolveParameterDescriptors(functionDescriptorImpl,method.getParameters(),new MethodTypeVariableResolver());
  functionDescriptorImpl.initialize(valueParameterDescriptors.receiverType,DescriptorUtils.getExpectedThisObjectIfNeeded(classDescriptor),methodTypeParameters,valueParameterDescriptors.descriptors,makeReturnType(returnType,method,new MethodTypeVariableResolver()),Modality.convertFromFlags(method.getPsiMethod().hasModifierProperty(PsiModifier.ABSTRACT),!method.isFinal()),resolveVisibilityFromPsiModifiers(method.getPsiMethod()));
  semanticServices.getTrace().record(BindingContext.FUNCTION,method.getPsiMethod(),functionDescriptorImpl);
  FunctionDescriptor substitutedFunctionDescriptor=functionDescriptorImpl;
  if (method.getPsiMethod().getContainingClass() != psiClass) {
    substitutedFunctionDescriptor=functionDescriptorImpl.substitute(typeSubstitutorForGenericSuperclasses);
  }
  return substitutedFunctionDescriptor;
}
