{
  final List<JetType> result=new ArrayList<JetType>();
  if (psiClass.getJetClass().signature().length() > 0) {
    final TypeVariableResolver typeVariableResolver=new TypeVariableResolverFromTypeDescriptors(typeParameters,null);
    new JetSignatureReader(psiClass.getJetClass().signature()).accept(new JetSignatureExceptionsAdapter(){
      @Override public JetSignatureVisitor visitFormalTypeParameter(      String name,      TypeInfoVariance variance,      boolean reified){
        return new JetSignatureAdapter();
      }
      @Override public JetSignatureVisitor visitSuperclass(){
        return new JetTypeJetSignatureReader(semanticServices,semanticServices.getJetSemanticServices().getStandardLibrary(),typeVariableResolver){
          @Override protected void done(          @NotNull JetType jetType){
            if (!jetType.equals(JetStandardClasses.getAnyType())) {
              result.add(jetType);
            }
          }
        }
;
      }
      @Override public JetSignatureVisitor visitInterface(){
        return visitSuperclass();
      }
    }
);
  }
 else {
    transformSupertypeList(result,psiClass.getPsiClass().getExtendsListTypes(),new TypeVariableResolverFromTypeDescriptors(typeParameters,null));
    transformSupertypeList(result,psiClass.getPsiClass().getImplementsListTypes(),new TypeVariableResolverFromTypeDescriptors(typeParameters,null));
  }
  if (result.isEmpty()) {
    result.add(JetStandardClasses.getAnyType());
  }
  return result;
}
