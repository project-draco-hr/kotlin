{
  getResolverScopeData(scopeData);
  PsiType returnPsiType=method.getReturnType();
  if (returnPsiType == null) {
    return null;
  }
  if (method.getJetMethod().flags().get(JvmStdlibNames.FLAG_PROPERTY_BIT)) {
    return null;
  }
  if (scopeData.kotlin) {
    String ownerClassName=method.getPsiMethod().getContainingClass().getQualifiedName();
    if (JdkNames.JL_OBJECT.getFqName().getFqName().equals(ownerClassName)) {
      return null;
    }
  }
  SimpleFunctionDescriptorImpl functionDescriptorImpl=new SimpleFunctionDescriptorImpl(scopeData.classOrNamespaceDescriptor,resolveAnnotations(method.getPsiMethod()),Name.identifier(method.getName()),CallableMemberDescriptor.Kind.DECLARATION);
  String context="method " + method.getName() + " in class "+ psiClass.getQualifiedName();
  List<TypeParameterDescriptor> methodTypeParameters=javaDescriptorSignatureResolver.resolveMethodTypeParameters(method,functionDescriptorImpl);
  TypeVariableResolver methodTypeVariableResolver=TypeVariableResolvers.typeVariableResolverFromTypeParameters(methodTypeParameters,functionDescriptorImpl,context);
  ValueParameterDescriptors valueParameterDescriptors=resolveParameterDescriptors(functionDescriptorImpl,method.getParameters(),methodTypeVariableResolver);
  JetType returnType=makeReturnType(returnPsiType,method,methodTypeVariableResolver);
  AlternativeSignatureData alternativeSignatureData=new AlternativeSignatureData(method,valueParameterDescriptors,returnType,methodTypeParameters);
  if (!alternativeSignatureData.isNone() && alternativeSignatureData.getError() == null) {
    valueParameterDescriptors=alternativeSignatureData.getValueParameters();
    returnType=alternativeSignatureData.getReturnType();
    methodTypeParameters=alternativeSignatureData.getTypeParameters();
  }
  functionDescriptorImpl.initialize(valueParameterDescriptors.receiverType,DescriptorUtils.getExpectedThisObjectIfNeeded(scopeData.classOrNamespaceDescriptor),methodTypeParameters,valueParameterDescriptors.descriptors,returnType,resolveModality(method,method.isFinal()),resolveVisibility(method.getPsiMethod(),method.getJetMethod()),false);
  BindingContextUtils.recordFunctionDeclarationToDescriptor(tempTrace,method.getPsiMethod(),functionDescriptorImpl);
  if (method.getPsiMethod().getContainingClass() != psiClass && !method.isStatic()) {
    throw new IllegalStateException("non-static method in subclass");
  }
  return functionDescriptorImpl;
}
