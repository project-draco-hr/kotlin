{
  if (namedMembers.propertyDescriptors != null) {
    return;
  }
  if (namedMembers.propertyAccessors == null) {
    namedMembers.propertyDescriptors=Collections.emptySet();
    return;
  }
  final List<TypeParameterDescriptor> classTypeParameterDescriptorInitialization=scopeData.getTypeParameters();
  TypeVariableResolver typeVariableResolver=new TypeVariableResolverFromTypeDescriptors(scopeData.getTypeParameters(),null);
class GroupingValue {
    PropertyAccessorData getter;
    PropertyAccessorData setter;
    PropertyAccessorData field;
    boolean ext;
  }
  Map<Object,GroupingValue> map=new HashMap<Object,GroupingValue>();
  for (  PropertyAccessorData propertyAccessor : namedMembers.propertyAccessors) {
    Object key=propertyKeyForGrouping(propertyAccessor);
    GroupingValue value=map.get(key);
    if (value == null) {
      value=new GroupingValue();
      value.ext=propertyAccessor.getReceiverType() != null;
      map.put(key,value);
    }
    if (value.ext != (propertyAccessor.getReceiverType() != null)) {
      throw new IllegalStateException("internal error, incorrect key");
    }
    if (propertyAccessor.isGetter()) {
      if (value.getter != null) {
        throw new IllegalStateException("oops, duplicate key");
      }
      value.getter=propertyAccessor;
    }
 else     if (propertyAccessor.isSetter()) {
      if (value.setter != null) {
        throw new IllegalStateException("oops, duplicate key");
      }
      value.setter=propertyAccessor;
    }
 else     if (propertyAccessor.isField()) {
      if (value.field != null) {
        throw new IllegalStateException("oops, duplicate key");
      }
      value.field=propertyAccessor;
    }
 else {
      throw new IllegalStateException();
    }
  }
  Set<VariableDescriptor> r=new HashSet<VariableDescriptor>(1);
  int regularProperitesCount=0;
  for (  GroupingValue members : map.values()) {
    if (!members.ext) {
      ++regularProperitesCount;
    }
  }
  for (  GroupingValue members : map.values()) {
    if (!members.ext && regularProperitesCount > 1) {
      continue;
    }
    boolean isFinal;
    if (members.setter == null && members.getter == null) {
      isFinal=false;
    }
 else     if (members.getter != null) {
      isFinal=members.getter.getMember().isFinal();
    }
 else     if (members.setter != null) {
      isFinal=members.setter.getMember().isFinal();
    }
 else {
      isFinal=false;
    }
    PropertyAccessorData anyMember;
    if (members.getter != null) {
      anyMember=members.getter;
    }
 else     if (members.field != null) {
      anyMember=members.field;
    }
 else     if (members.setter != null) {
      anyMember=members.setter;
    }
 else {
      throw new IllegalStateException();
    }
    boolean isVar;
    if (members.getter == null && members.setter == null) {
      isVar=!members.field.getMember().isFinal();
    }
 else {
      isVar=members.setter != null;
    }
    PropertyDescriptor propertyDescriptor=new PropertyDescriptor(owner,Collections.<AnnotationDescriptor>emptyList(),isFinal && !staticMembers ? Modality.FINAL : Modality.OPEN,resolveVisibilityFromPsiModifiers(anyMember.getMember().psiMember),isVar,false,propertyName,CallableMemberDescriptor.Kind.DECLARATION);
    PropertyGetterDescriptor getterDescriptor=null;
    PropertySetterDescriptor setterDescriptor=null;
    if (members.getter != null) {
      getterDescriptor=new PropertyGetterDescriptor(propertyDescriptor,Collections.<AnnotationDescriptor>emptyList(),Modality.OPEN,Visibility.PUBLIC,true,false,CallableMemberDescriptor.Kind.DECLARATION);
    }
    if (members.setter != null) {
      setterDescriptor=new PropertySetterDescriptor(propertyDescriptor,Collections.<AnnotationDescriptor>emptyList(),Modality.OPEN,Visibility.PUBLIC,true,false,CallableMemberDescriptor.Kind.DECLARATION);
    }
    propertyDescriptor.initialize(getterDescriptor,setterDescriptor);
    List<TypeParameterDescriptor> typeParametersInitialization=new ArrayList<TypeParameterDescriptor>(0);
    if (members.setter != null) {
      PsiMethodWrapper method=(PsiMethodWrapper)members.setter.getMember();
      if (anyMember == members.setter) {
        typeParametersInitialization=resolveMethodTypeParameters(method,setterDescriptor,typeVariableResolver);
      }
    }
    if (members.getter != null) {
      PsiMethodWrapper method=(PsiMethodWrapper)members.getter.getMember();
      if (anyMember == members.getter) {
        typeParametersInitialization=resolveMethodTypeParameters(method,getterDescriptor,typeVariableResolver);
      }
    }
    List<TypeParameterDescriptor> typeParameters=new ArrayList<TypeParameterDescriptor>();
    for (    TypeParameterDescriptor typeParameter : typeParametersInitialization) {
      typeParameters.add(typeParameter);
    }
    List<TypeParameterDescriptor> typeParametersForReceiver=new ArrayList<TypeParameterDescriptor>();
    typeParametersForReceiver.addAll(classTypeParameterDescriptorInitialization);
    typeParametersForReceiver.addAll(typeParametersInitialization);
    TypeVariableResolver typeVariableResolverForPropertyInternals=new TypeVariableResolverFromTypeDescriptors(typeParametersForReceiver,null);
    JetType propertyType;
    if (anyMember.getType().getTypeString().length() > 0) {
      propertyType=semanticServices.getTypeTransformer().transformToType(anyMember.getType().getTypeString(),typeVariableResolverForPropertyInternals);
    }
 else {
      propertyType=semanticServices.getTypeTransformer().transformToType(anyMember.getType().getPsiType(),typeVariableResolverForPropertyInternals);
      if (anyMember.getType().getPsiNotNullOwner().getModifierList().findAnnotation(JvmAbi.JETBRAINS_NOT_NULL_ANNOTATION.getFqName()) != null) {
        propertyType=TypeUtils.makeNullableAsSpecified(propertyType,false);
      }
    }
    JetType receiverType;
    if (anyMember.getReceiverType() == null) {
      receiverType=null;
    }
 else     if (anyMember.getReceiverType().getTypeString().length() > 0) {
      receiverType=semanticServices.getTypeTransformer().transformToType(anyMember.getReceiverType().getTypeString(),typeVariableResolverForPropertyInternals);
    }
 else {
      receiverType=semanticServices.getTypeTransformer().transformToType(anyMember.getReceiverType().getPsiType(),typeVariableResolverForPropertyInternals);
    }
    propertyDescriptor.setType(propertyType,typeParameters,DescriptorUtils.getExpectedThisObjectIfNeeded(owner),receiverType);
    if (getterDescriptor != null) {
      getterDescriptor.initialize(propertyType);
    }
    if (setterDescriptor != null) {
      setterDescriptor.initialize(new ValueParameterDescriptorImpl(setterDescriptor,0,Collections.<AnnotationDescriptor>emptyList(),"p0",false,propertyDescriptor.getType(),false,null));
    }
    semanticServices.getTrace().record(BindingContext.VARIABLE,anyMember.getMember().psiMember,propertyDescriptor);
    r.add(propertyDescriptor);
  }
  namedMembers.propertyDescriptors=r;
}
