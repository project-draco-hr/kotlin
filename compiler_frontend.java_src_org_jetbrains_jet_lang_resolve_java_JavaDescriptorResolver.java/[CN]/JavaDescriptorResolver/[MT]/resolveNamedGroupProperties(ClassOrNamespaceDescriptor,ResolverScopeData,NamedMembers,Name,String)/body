{
  getResolverScopeData(scopeData);
  if (namedMembers.propertyDescriptors != null) {
    return;
  }
  if (namedMembers.propertyAccessors == null) {
    namedMembers.propertyAccessors=Collections.emptyList();
  }
class GroupingValue {
    PropertyAccessorData getter;
    PropertyAccessorData setter;
    PropertyAccessorData field;
    boolean ext;
  }
  Map<Object,GroupingValue> map=new HashMap<Object,GroupingValue>();
  for (  PropertyAccessorData propertyAccessor : namedMembers.propertyAccessors) {
    Object key=propertyKeyForGrouping(propertyAccessor);
    GroupingValue value=map.get(key);
    if (value == null) {
      value=new GroupingValue();
      value.ext=propertyAccessor.getReceiverType() != null;
      map.put(key,value);
    }
    if (value.ext != (propertyAccessor.getReceiverType() != null)) {
      throw new IllegalStateException("internal error, incorrect key");
    }
    if (propertyAccessor.isGetter()) {
      if (value.getter != null) {
        throw new IllegalStateException("oops, duplicate key");
      }
      value.getter=propertyAccessor;
    }
 else     if (propertyAccessor.isSetter()) {
      if (value.setter != null) {
        throw new IllegalStateException("oops, duplicate key");
      }
      value.setter=propertyAccessor;
    }
 else     if (propertyAccessor.isField()) {
      if (value.field != null) {
        throw new IllegalStateException("oops, duplicate key");
      }
      value.field=propertyAccessor;
    }
 else {
      throw new IllegalStateException();
    }
  }
  Set<PropertyDescriptor> propertiesFromCurrent=new HashSet<PropertyDescriptor>(1);
  int regularProperitesCount=0;
  for (  GroupingValue members : map.values()) {
    if (!members.ext) {
      ++regularProperitesCount;
    }
  }
  for (  GroupingValue members : map.values()) {
    if (!members.ext && regularProperitesCount > 1) {
      continue;
    }
    boolean isFinal;
    if (!scopeData.kotlin) {
      isFinal=true;
    }
 else     if (members.setter == null && members.getter == null) {
      isFinal=false;
    }
 else     if (members.getter != null) {
      isFinal=members.getter.getMember().isFinal();
    }
 else     if (members.setter != null) {
      isFinal=members.setter.getMember().isFinal();
    }
 else {
      isFinal=false;
    }
    PropertyAccessorData anyMember;
    if (members.getter != null) {
      anyMember=members.getter;
    }
 else     if (members.field != null) {
      anyMember=members.field;
    }
 else     if (members.setter != null) {
      anyMember=members.setter;
    }
 else {
      throw new IllegalStateException();
    }
    boolean isVar;
    if (members.getter == null && members.setter == null) {
      isVar=!members.field.getMember().isFinal();
    }
 else {
      isVar=members.setter != null;
    }
    Visibility visibility=resolveVisibility(anyMember.getMember().psiMember,null);
    if (members.getter != null && members.getter.getMember() instanceof PsiMethodWrapper) {
      visibility=resolveVisibility(anyMember.getMember().psiMember,((PsiMethodWrapper)members.getter.getMember()).getJetMethod());
    }
    PropertyDescriptor propertyDescriptor=new PropertyDescriptor(owner,resolveAnnotations(anyMember.getMember().psiMember),resolveModality(anyMember.getMember(),isFinal),visibility,isVar,false,propertyName,CallableMemberDescriptor.Kind.DECLARATION);
    PropertyGetterDescriptor getterDescriptor=null;
    PropertySetterDescriptor setterDescriptor=null;
    if (members.getter != null) {
      getterDescriptor=new PropertyGetterDescriptor(propertyDescriptor,resolveAnnotations(members.getter.getMember().psiMember),Modality.OPEN,visibility,true,false,CallableMemberDescriptor.Kind.DECLARATION);
    }
    if (members.setter != null) {
      Visibility setterVisibility=resolveVisibility(members.setter.getMember().psiMember,null);
      if (members.setter.getMember() instanceof PsiMethodWrapper) {
        setterVisibility=resolveVisibility(members.setter.getMember().psiMember,((PsiMethodWrapper)members.setter.getMember()).getJetMethod());
      }
      setterDescriptor=new PropertySetterDescriptor(propertyDescriptor,resolveAnnotations(members.setter.getMember().psiMember),Modality.OPEN,setterVisibility,true,false,CallableMemberDescriptor.Kind.DECLARATION);
    }
    propertyDescriptor.initialize(getterDescriptor,setterDescriptor);
    List<TypeParameterDescriptor> typeParameters=new ArrayList<TypeParameterDescriptor>(0);
    if (members.setter != null) {
      PsiMethodWrapper method=(PsiMethodWrapper)members.setter.getMember();
      if (anyMember == members.setter) {
        typeParameters=resolveMethodTypeParameters(method,propertyDescriptor);
      }
    }
    if (members.getter != null) {
      PsiMethodWrapper method=(PsiMethodWrapper)members.getter.getMember();
      if (anyMember == members.getter) {
        typeParameters=resolveMethodTypeParameters(method,propertyDescriptor);
      }
    }
    TypeVariableResolver typeVariableResolverForPropertyInternals=TypeVariableResolvers.typeVariableResolverFromTypeParameters(typeParameters,propertyDescriptor,"property " + propertyName + " in "+ context);
    JetType propertyType;
    if (anyMember.getType().getTypeString().length() > 0) {
      propertyType=semanticServices.getTypeTransformer().transformToType(anyMember.getType().getTypeString(),typeVariableResolverForPropertyInternals);
    }
 else {
      propertyType=semanticServices.getTypeTransformer().transformToType(anyMember.getType().getPsiType(),typeVariableResolverForPropertyInternals);
      if (anyMember.getType().getPsiNotNullOwner().getModifierList().findAnnotation(JvmAbi.JETBRAINS_NOT_NULL_ANNOTATION.getFqName().getFqName()) != null) {
        propertyType=TypeUtils.makeNullableAsSpecified(propertyType,false);
      }
 else       if (members.getter == null && members.setter == null && members.field.getMember().isFinal() && members.field.getMember().isStatic()) {
        propertyType=TypeUtils.makeNotNullable(propertyType);
      }
    }
    JetType receiverType;
    if (anyMember.getReceiverType() == null) {
      receiverType=null;
    }
 else     if (anyMember.getReceiverType().getTypeString().length() > 0) {
      receiverType=semanticServices.getTypeTransformer().transformToType(anyMember.getReceiverType().getTypeString(),typeVariableResolverForPropertyInternals);
    }
 else {
      receiverType=semanticServices.getTypeTransformer().transformToType(anyMember.getReceiverType().getPsiType(),typeVariableResolverForPropertyInternals);
    }
    propertyDescriptor.setType(propertyType,typeParameters,DescriptorUtils.getExpectedThisObjectIfNeeded(owner),receiverType);
    if (getterDescriptor != null) {
      getterDescriptor.initialize(propertyType);
    }
    if (setterDescriptor != null) {
      setterDescriptor.initialize(new ValueParameterDescriptorImpl(setterDescriptor,0,Collections.<AnnotationDescriptor>emptyList(),Name.identifier("p0"),false,propertyDescriptor.getType(),false,null));
    }
    trace.record(BindingContext.VARIABLE,anyMember.getMember().psiMember,propertyDescriptor);
    propertiesFromCurrent.add(propertyDescriptor);
  }
  Set<PropertyDescriptor> propertiesFromSupertypes=getPropertiesFromSupertypes(scopeData,propertyName);
  final Set<VariableDescriptor> properties=Sets.newHashSet();
  if (owner instanceof ClassDescriptor) {
    ClassDescriptor classDescriptor=(ClassDescriptor)owner;
    OverrideResolver.generateOverridesInFunctionGroup(propertyName,propertiesFromSupertypes,propertiesFromCurrent,classDescriptor,new OverrideResolver.DescriptorSink(){
      @Override public void addToScope(      @NotNull CallableMemberDescriptor fakeOverride){
        properties.add((PropertyDescriptor)fakeOverride);
      }
      @Override public void conflict(      @NotNull CallableMemberDescriptor fromSuper,      @NotNull CallableMemberDescriptor fromCurrent){
      }
    }
);
  }
  properties.addAll(propertiesFromCurrent);
  namedMembers.propertyDescriptors=properties;
}
