{
  final List<TypeParameterDescriptor> r=new ArrayList<TypeParameterDescriptor>();
  new JetSignatureReader(jetSignature).acceptFormalTypeParametersOnly(new JetSignatureExceptionsAdapter(){
    @Override public JetSignatureVisitor visitFormalTypeParameter(    final String name,    TypeInfoVariance variance){
      return new JetSignatureExceptionsAdapter(){
        int index=0;
        @Override public JetSignatureVisitor visitClassBound(){
          return new JetTypeJetSignatureReader(JavaDescriptorResolver.this,semanticServices.getJetSemanticServices().getStandardLibrary()){
            @Override protected void done(            @NotNull JetType jetType){
            }
          }
;
        }
        @Override public JetSignatureVisitor visitInterfaceBound(){
          return new JetTypeJetSignatureReader(JavaDescriptorResolver.this,semanticServices.getJetSemanticServices().getStandardLibrary()){
            @Override protected void done(            @NotNull JetType jetType){
            }
          }
;
        }
        @Override public void visitFormalTypeParameterEnd(){
          TypeParameterDescriptor typeParameter=TypeParameterDescriptor.createForFurtherModification(functionDescriptor,Collections.<AnnotationDescriptor>emptyList(),true,Variance.INVARIANT,name,++index);
          r.add(typeParameter);
        }
      }
;
    }
  }
);
  return r;
}
