{
  Map<PropertyKey,MembersForProperty> membersMap=Maps.newHashMap();
  if (!kotlin) {
    for (    PsiField field : clazz.getFields()) {
      if (field.getModifierList().hasExplicitModifier(PsiModifier.STATIC) != staticMembers) {
        continue;
      }
      if (field.hasModifierProperty(PsiModifier.PRIVATE)) {
        continue;
      }
      MembersForProperty members=new MembersForProperty();
      members.field=field;
      membersMap.put(new PropertyKey(field.getName(),field.getType(),null),members);
    }
  }
  for (  PsiMethod method : clazz.getMethods()) {
    if (method.getModifierList().hasExplicitModifier(PsiModifier.STATIC) != staticMembers) {
      continue;
    }
    if (method.hasModifierProperty(PsiModifier.PRIVATE)) {
      continue;
    }
    if (method.getName().startsWith(JvmAbi.GETTER_PREFIX)) {
      if (method.getModifierList().findAnnotation(JvmStdlibNames.JET_PROPERTY.getFqName()) != null) {
        PsiType receiverType;
        if (method.getParameterList().getParametersCount() == 0) {
          receiverType=null;
        }
 else         if (method.getParameterList().getParametersCount() == 1) {
          if (method.getParameterList().getParameters()[0].getModifierList().findAnnotation(JvmStdlibNames.JET_TYPE_PARAMETER.getFqName()) != null) {
            receiverType=null;
          }
 else {
            receiverType=method.getParameterList().getParameters()[0].getType();
          }
        }
 else         if (method.getParameterList().getParametersCount() == 2) {
          if (method.getParameterList().getParameters()[1].getModifierList().findAnnotation(JvmStdlibNames.JET_TYPE_PARAMETER.getFqName()) == null) {
            throw new IllegalStateException();
          }
          receiverType=method.getParameterList().getParameters()[0].getType();
        }
 else {
          throw new IllegalStateException();
        }
        if (method.getName().equals(JvmStdlibNames.JET_OBJECT_GET_TYPEINFO_METHOD)) {
          continue;
        }
        String propertyName=StringUtil.decapitalize(method.getName().substring(JvmAbi.GETTER_PREFIX.length()));
        PropertyKey key=new PropertyKey(propertyName,method.getReturnType(),receiverType);
        MembersForProperty members=membersMap.get(key);
        if (members == null) {
          members=new MembersForProperty();
          membersMap.put(key,members);
        }
        members.getter=method;
      }
    }
 else     if (method.getName().startsWith(JvmAbi.SETTER_PREFIX)) {
      if (method.getModifierList().findAnnotation(JvmStdlibNames.JET_PROPERTY.getFqName()) != null) {
        if (method.getParameterList().getParametersCount() == 0) {
          throw new IllegalStateException();
        }
        int i=0;
        PsiType receiverType=null;
        PsiParameter p1=method.getParameterList().getParameters()[0];
        PsiAnnotation p1a=p1.getModifierList().findAnnotation(JvmStdlibNames.JET_VALUE_PARAMETER.getFqName());
        if (p1a != null) {
          if (getBooleanAnnotationAttributeValue(p1a,JvmStdlibNames.JET_VALUE_PARAMETER_RECEIVER_FIELD,false)) {
            receiverType=p1.getType();
            ++i;
          }
        }
        while (i < method.getParameterList().getParametersCount() && method.getParameterList().getParameters()[i].getModifierList().findAnnotation(JvmStdlibNames.JET_TYPE_PARAMETER.getFqName()) != null) {
          ++i;
        }
        if (i + 1 != method.getParameterList().getParametersCount()) {
          throw new IllegalStateException();
        }
        PsiType propertyType=method.getParameterList().getParameters()[i].getType();
        String propertyName=StringUtil.decapitalize(method.getName().substring(JvmAbi.SETTER_PREFIX.length()));
        PropertyKey key=new PropertyKey(propertyName,propertyType,receiverType);
        MembersForProperty members=membersMap.get(key);
        if (members == null) {
          members=new MembersForProperty();
          membersMap.put(key,members);
        }
        members.setter=method;
      }
    }
  }
  return membersMap;
}
