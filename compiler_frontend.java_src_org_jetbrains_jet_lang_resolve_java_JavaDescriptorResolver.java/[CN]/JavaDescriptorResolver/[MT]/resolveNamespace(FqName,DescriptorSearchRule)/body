{
  NamespaceDescriptor kotlinNamespaceDescriptor=semanticServices.getKotlinNamespaceDescriptor(qualifiedName);
  if (kotlinNamespaceDescriptor != null) {
    if (searchRule == DescriptorSearchRule.ERROR_IF_FOUND_IN_KOTLIN) {
      throw new IllegalStateException("class must not be found in kotlin: " + qualifiedName);
    }
 else     if (searchRule == DescriptorSearchRule.IGNORE_IF_FOUND_IN_KOTLIN) {
      return null;
    }
 else     if (searchRule == DescriptorSearchRule.INCLUDE_KOTLIN) {
      return kotlinNamespaceDescriptor;
    }
 else {
      throw new IllegalStateException("unknown searchRule: " + searchRule);
    }
  }
  PsiPackage psiPackage=findPackage(qualifiedName);
  if (psiPackage == null) {
    PsiClass psiClass=findClass(qualifiedName);
    if (psiClass == null)     return null;
    return resolveNamespace(psiClass);
  }
  return resolveNamespace(psiPackage);
}
