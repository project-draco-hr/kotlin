{
  checkPsiClassIsNotJet(psiClass);
  if (psiClass.isEnum()) {
    return createClassObjectDescriptorForEnum(containing,psiClass);
  }
  if (!isKotlinClass(psiClass)) {
    return null;
  }
  for (  PsiClass innerClass : psiClass.getInnerClasses()) {
    if (isInnerEnum(innerClass,containing)) {
      return createSyntheticClassObject(containing,psiClass);
    }
  }
  PsiClass classObjectPsiClass=getInnerClassClassObject(psiClass);
  if (classObjectPsiClass == null) {
    return null;
  }
  FqName fqName=new FqName(classObjectPsiClass.getQualifiedName());
  ResolverClassData classData=new ClassDescriptorFromJvmBytecode(containing,ClassKind.CLASS_OBJECT,classObjectPsiClass,fqName,this).getResolverBinaryClassData();
  ClassDescriptorFromJvmBytecode classObjectDescriptor=classData.classDescriptor;
  classObjectDescriptor.setSupertypes(getSupertypes(new PsiClassWrapper(classObjectPsiClass),classData,new ArrayList<TypeParameterDescriptor>(0)));
  setUpClassObjectDescriptor(containing,fqName,classData,getClassObjectName(containing.getName()));
  return classObjectDescriptor;
}
