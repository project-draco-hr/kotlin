{
  PsiClass classObjectPsiClass=getInnerClassClassObject(psiClass);
  if (classObjectPsiClass == null) {
    return null;
  }
  checkPsiClassIsNotJet(psiClass);
  FqName fqName=new FqName(classObjectPsiClass.getQualifiedName());
  ResolverBinaryClassData classData=new ResolverBinaryClassData(classObjectPsiClass,fqName,new MutableClassDescriptorLite(containing,ClassKind.OBJECT));
  classDescriptorCache.put(fqName,classData);
  classData.kotlin=true;
  classData.classDescriptor.setSupertypes(getSupertypes(new PsiClassWrapper(classObjectPsiClass),classData.classDescriptor,new ArrayList<TypeParameterDescriptor>(0)));
  classData.classDescriptor.setName(JetPsiUtil.NO_NAME_PROVIDED);
  classData.classDescriptor.setModality(Modality.FINAL);
  classData.classDescriptor.setVisibility(containing.getVisibility());
  classData.classDescriptor.setTypeParameterDescriptors(new ArrayList<TypeParameterDescriptor>(0));
  classData.classDescriptor.createTypeConstructor();
  classData.classDescriptor.setScopeForMemberLookup(new JavaClassMembersScope(semanticServices,classData));
  ConstructorDescriptorImpl constructor=new ConstructorDescriptorImpl(classData.classDescriptor,new ArrayList<AnnotationDescriptor>(0),true);
  constructor.setReturnType(classData.classDescriptor.getDefaultType());
  constructor.initialize(new ArrayList<TypeParameterDescriptor>(0),new ArrayList<ValueParameterDescriptor>(0),Visibilities.PUBLIC);
  classData.classDescriptor.addConstructor(constructor,null);
  return classData.classDescriptor;
}
