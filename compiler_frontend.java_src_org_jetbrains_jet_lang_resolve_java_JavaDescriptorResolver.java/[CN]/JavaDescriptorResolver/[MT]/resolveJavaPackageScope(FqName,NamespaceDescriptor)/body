{
  PsiClassOrPsiPackage psi=findPsiElementForNamespace(fqName);
  if (psi == null) {
    return null;
  }
  ResolverNamespaceData namespaceData=namespaceDescriptorCacheByFqn.get(fqName);
  if (namespaceData != null) {
    throw new IllegalStateException("cache must be empty for ns " + fqName);
  }
  namespaceData=new ResolverNamespaceData();
  namespaceDescriptorCache.put(psi.getPsiElement(),namespaceData);
  namespaceDescriptorCacheByFqn.put(fqName,namespaceData);
  if (psi.isClass()) {
    checkPsiClassIsNotJet(psi.getPsiClass());
  }
  namespaceData.namespaceDescriptor=namespace;
  namespaceData.kotlin=psi.isPackage();
  trace.record(JavaBindingContext.NAMESPACE_IS_CLASS_STATICS,namespaceData.namespaceDescriptor,psi.isClass());
  if (psi.isClass()) {
    namespaceData.scope=new JavaClassMembersScope(namespace,psi.getPsiClass(),semanticServices,true,namespaceData);
  }
 else {
    namespaceData.scope=new JavaPackageScope(fqName,namespace,semanticServices,namespaceData);
  }
  return namespaceData.scope;
}
