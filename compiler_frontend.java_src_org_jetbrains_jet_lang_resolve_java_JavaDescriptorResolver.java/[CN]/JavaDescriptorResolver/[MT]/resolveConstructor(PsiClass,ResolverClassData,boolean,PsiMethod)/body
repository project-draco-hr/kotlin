{
  PsiMethodWrapper constructor=new PsiMethodWrapper(psiConstructor);
  if (constructor.getJetConstructor().hidden()) {
    return null;
  }
  if (trace.get(BindingContext.CONSTRUCTOR,psiConstructor) != null) {
    return trace.get(BindingContext.CONSTRUCTOR,psiConstructor);
  }
  ConstructorDescriptorImpl constructorDescriptor=new ConstructorDescriptorImpl(classData.classDescriptor,Collections.<AnnotationDescriptor>emptyList(),false);
  String context="constructor of class " + psiClass.getQualifiedName();
  ValueParameterDescriptors valueParameterDescriptors=resolveParameterDescriptors(constructorDescriptor,constructor.getParameters(),TypeVariableResolvers.classTypeVariableResolver(classData.classDescriptor,context));
  if (valueParameterDescriptors.receiverType != null) {
    throw new IllegalStateException();
  }
  constructorDescriptor.initialize(classData.classDescriptor.getTypeConstructor().getParameters(),valueParameterDescriptors.descriptors,resolveVisibility(psiConstructor,constructor.getJetConstructor()),aStatic);
  trace.record(BindingContext.CONSTRUCTOR,psiConstructor,constructorDescriptor);
  return constructorDescriptor;
}
