{
  boolean changeNullable=false;
  boolean nullable=true;
  String returnTypeFromAnnotation=null;
  for (  PsiAnnotation annotation : method.getModifierList().getAnnotations()) {
    if (annotation.getQualifiedName().equals(JvmStdlibNames.JET_METHOD.getFqName())) {
      PsiLiteralExpression nullableExpression=(PsiLiteralExpression)annotation.findAttributeValue(JvmStdlibNames.JET_METHOD_NULLABLE_RETURN_TYPE_FIELD);
      if (nullableExpression != null) {
        nullable=(Boolean)nullableExpression.getValue();
      }
 else {
        nullable=false;
        changeNullable=true;
      }
      PsiLiteralExpression returnTypeExpression=(PsiLiteralExpression)annotation.findAttributeValue(JvmStdlibNames.JET_METHOD_RETURN_TYPE_FIELD);
      if (returnTypeExpression != null) {
        returnTypeFromAnnotation=(String)returnTypeExpression.getValue();
      }
    }
  }
  JetType transformedType;
  if (returnTypeFromAnnotation != null && returnTypeFromAnnotation.length() > 0) {
    transformedType=semanticServices.getTypeTransformer().transformToType(returnTypeFromAnnotation,typeVariableResolver);
  }
 else {
    transformedType=semanticServices.getTypeTransformer().transformToType(returnType);
  }
  if (changeNullable) {
    return TypeUtils.makeNullableAsSpecified(transformedType,nullable);
  }
 else {
    return transformedType;
  }
}
