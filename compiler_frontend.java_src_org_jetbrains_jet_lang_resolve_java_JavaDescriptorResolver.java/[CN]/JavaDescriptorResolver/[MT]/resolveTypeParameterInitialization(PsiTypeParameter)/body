{
  PsiTypeParameterListOwner owner=typeParameter.getOwner();
  if (owner instanceof PsiClass) {
    PsiClass psiClass=(PsiClass)owner;
    return resolveTypeParameter(resolveClass(psiClass),typeParameter);
  }
  if (owner instanceof PsiMethod) {
    PsiMethod psiMethod=(PsiMethod)owner;
    PsiClass containingClass=psiMethod.getContainingClass();
    DeclarationDescriptor ownerOwner;
    TypeSubstitutor substitutorForGenericSupertypes;
    if (psiMethod.hasModifierProperty(PsiModifier.STATIC)) {
      substitutorForGenericSupertypes=TypeSubstitutor.EMPTY;
      return resolveTypeParameter(JAVA_METHOD_TYPE_PARAMETER_PARENT,typeParameter);
    }
 else {
      ClassDescriptor classDescriptor=resolveClass(containingClass);
      ownerOwner=classDescriptor;
      substitutorForGenericSupertypes=semanticServices.getDescriptorResolver().createSubstitutorForGenericSupertypes(classDescriptor);
    }
    FunctionDescriptor functionDescriptor=resolveMethodToFunctionDescriptor(ownerOwner,containingClass,substitutorForGenericSupertypes,new PsiMethodWrapper(psiMethod));
    return resolveTypeParameter(functionDescriptor,typeParameter);
  }
  throw new IllegalStateException("Unknown parent type: " + owner);
}
