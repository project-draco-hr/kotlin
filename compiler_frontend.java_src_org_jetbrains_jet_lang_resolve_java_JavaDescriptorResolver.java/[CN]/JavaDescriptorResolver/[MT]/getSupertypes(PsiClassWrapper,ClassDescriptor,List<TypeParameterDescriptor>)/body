{
  final List<JetType> result=new ArrayList<JetType>();
  String context="class " + psiClass.getQualifiedName();
  if (psiClass.getJetClass().signature().length() > 0) {
    final TypeVariableResolver typeVariableResolver=TypeVariableResolvers.typeVariableResolverFromTypeParameters(typeParameters,classDescriptor,context);
    new JetSignatureReader(psiClass.getJetClass().signature()).accept(new JetSignatureExceptionsAdapter(){
      @Override public JetSignatureVisitor visitFormalTypeParameter(      String name,      TypeInfoVariance variance,      boolean reified){
        return new JetSignatureAdapter();
      }
      @Override public JetSignatureVisitor visitSuperclass(){
        return new JetTypeJetSignatureReader(semanticServices,JetStandardLibrary.getInstance(),typeVariableResolver){
          @Override protected void done(          @NotNull JetType jetType){
            if (!jetType.equals(JetStandardClasses.getAnyType())) {
              result.add(jetType);
            }
          }
        }
;
      }
      @Override public JetSignatureVisitor visitInterface(){
        return visitSuperclass();
      }
    }
);
  }
 else {
    TypeVariableResolver typeVariableResolverForSupertypes=TypeVariableResolvers.typeVariableResolverFromTypeParameters(typeParameters,classDescriptor,context);
    transformSupertypeList(result,psiClass.getPsiClass().getExtendsListTypes(),typeVariableResolverForSupertypes,classDescriptor.getKind() == ClassKind.ANNOTATION_CLASS);
    transformSupertypeList(result,psiClass.getPsiClass().getImplementsListTypes(),typeVariableResolverForSupertypes,classDescriptor.getKind() == ClassKind.ANNOTATION_CLASS);
  }
  for (  JetType supertype : result) {
    if (ErrorUtils.isErrorType(supertype)) {
      trace.record(BindingContext.INCOMPLETE_HIERARCHY,classDescriptor);
    }
  }
  if (result.isEmpty()) {
    result.add(JetStandardClasses.getAnyType());
  }
  return result;
}
