{
  ResolverScopeData scopeData;
  if (owner instanceof JavaNamespaceDescriptor) {
    scopeData=namespaceDescriptorCacheByFqn.get(((JavaNamespaceDescriptor)owner).getQualifiedName());
  }
 else   if (owner instanceof ClassDescriptor) {
    scopeData=classDescriptorCache.get(psiClass.getQualifiedName());
  }
 else {
    throw new IllegalStateException();
  }
  if (scopeData == null) {
    throw new IllegalStateException();
  }
  if (scopeData.properties != null) {
    return scopeData.properties;
  }
  Set<VariableDescriptor> descriptors=Sets.newHashSet();
  Map<PropertyKey,MembersForProperty> membersForProperties=getMembersForProperties(psiClass,staticMembers,scopeData.kotlin);
  for (  Map.Entry<PropertyKey,MembersForProperty> entry : membersForProperties.entrySet()) {
    String propertyName=entry.getKey().name;
    PsiType propertyType=entry.getValue().type;
    PsiType receiverType=entry.getValue().receiverType;
    MembersForProperty members=entry.getValue();
    boolean isFinal;
    if (members.setter == null && members.getter == null) {
      isFinal=false;
    }
 else     if (members.getter != null) {
      isFinal=members.getter.isFinal();
    }
 else     if (members.setter != null) {
      isFinal=members.setter.isFinal();
    }
 else {
      isFinal=false;
    }
    PsiMemberWrapper anyMember;
    if (members.getter != null) {
      anyMember=members.getter;
    }
 else     if (members.field != null) {
      anyMember=members.field;
    }
 else     if (members.setter != null) {
      anyMember=members.setter;
    }
 else {
      throw new IllegalStateException();
    }
    boolean isVar;
    if (members.getter == null && members.setter == null) {
      isVar=true;
    }
 else {
      isVar=members.setter != null;
    }
    PropertyDescriptor propertyDescriptor=new PropertyDescriptor(owner,Collections.<AnnotationDescriptor>emptyList(),isFinal && !staticMembers ? Modality.FINAL : Modality.OPEN,resolveVisibilityFromPsiModifiers(anyMember.psiMember),isVar,false,propertyName);
    PropertyGetterDescriptor getterDescriptor=null;
    PropertySetterDescriptor setterDescriptor=null;
    if (members.getter != null) {
      getterDescriptor=new PropertyGetterDescriptor(propertyDescriptor,Collections.<AnnotationDescriptor>emptyList(),Modality.OPEN,Visibility.PUBLIC,true,false);
    }
    if (members.setter != null) {
      setterDescriptor=new PropertySetterDescriptor(propertyDescriptor,Collections.<AnnotationDescriptor>emptyList(),Modality.OPEN,Visibility.PUBLIC,true,false);
    }
    propertyDescriptor.initialize(getterDescriptor,setterDescriptor);
    final List<TypeParameterDescriptor> classTypeParameters;
    if (anyMember instanceof PsiMethodWrapper && !anyMember.isStatic()) {
      classTypeParameters=((ClassDescriptor)owner).getTypeConstructor().getParameters();
    }
 else {
      classTypeParameters=new ArrayList<TypeParameterDescriptor>(0);
    }
    TypeParameterListTypeVariableResolver typeVariableResolver=new TypeParameterListTypeVariableResolver(classTypeParameters);
    List<TypeParameterDescriptor> typeParameters=new ArrayList<TypeParameterDescriptor>(0);
    if (members.setter != null) {
      typeParameters=resolveMethodTypeParameters(members.setter,propertyDescriptor.getSetter(),typeVariableResolver);
    }
    if (members.getter != null) {
      typeParameters=resolveMethodTypeParameters(members.getter,propertyDescriptor.getGetter(),typeVariableResolver);
    }
    JetType receiverJetType;
    if (receiverType == null) {
      receiverJetType=null;
    }
 else {
      receiverJetType=semanticServices.getTypeTransformer().transformToType(receiverType);
    }
    JetType type=semanticServices.getTypeTransformer().transformToType(propertyType);
    propertyDescriptor.setType(type,typeParameters,DescriptorUtils.getExpectedThisObjectIfNeeded(owner),receiverJetType);
    if (getterDescriptor != null) {
      getterDescriptor.initialize(type);
    }
    if (setterDescriptor != null) {
    }
    semanticServices.getTrace().record(BindingContext.VARIABLE,anyMember.psiMember,propertyDescriptor);
    descriptors.add(propertyDescriptor);
  }
  scopeData.properties=descriptors;
  return descriptors;
}
