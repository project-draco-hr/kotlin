{
  if (signature.length() == 0) {
    throw new IllegalStateException();
  }
  char c;
  int start;
  int end;
  boolean visited;
  boolean inner;
  boolean nullable;
  if (signature.charAt(pos) == '?') {
    nullable=true;
    pos++;
  }
 else {
    nullable=false;
  }
switch (c=signature.charAt(pos++)) {
case 'Z':
case 'C':
case 'B':
case 'S':
case 'I':
case 'F':
case 'J':
case 'D':
case 'V':
    v.visitBaseType(c,nullable);
  return pos;
case '[':
return parseType(signature,pos,v.visitArrayType(nullable));
case 'T':
end=signature.indexOf(';',pos);
v.visitTypeVariable(signature.substring(pos,end),nullable);
return end + 1;
case 'L':
case 'M':
boolean forceReal=signature.charAt(pos - 1) == 'M';
start=pos;
visited=false;
inner=false;
while (true) {
switch (c=signature.charAt(pos++)) {
case '.':
case ';':
if (!visited) {
parseTypeConstructor(signature,v,start,pos,inner,nullable,forceReal);
}
if (c == ';') {
v.visitEnd();
return pos;
}
start=pos;
visited=false;
inner=true;
break;
case '<':
parseTypeConstructor(signature,v,start,pos,inner,nullable,forceReal);
visited=true;
pos=parseTypeArguments(signature,pos,v);
default :
break;
}
}
default :
throw new IllegalStateException();
}
}
