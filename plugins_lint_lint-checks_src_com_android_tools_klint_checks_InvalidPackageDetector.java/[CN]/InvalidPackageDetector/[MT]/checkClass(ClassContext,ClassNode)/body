{
  if (!context.isFromClassLibrary() || shouldSkip(context.file)) {
    return;
  }
  if (mApiDatabase == null) {
    return;
  }
  if ((classNode.access & Opcodes.ACC_ANNOTATION) != 0 || classNode.superName.startsWith("javax/annotation/")) {
    return;
  }
  if (classNode.name.startsWith(JAVAX_PKG_PREFIX)) {
    mJavaxLibraryClasses.add(classNode.name);
  }
  List methodList=classNode.methods;
  for (  Object m : methodList) {
    MethodNode method=(MethodNode)m;
    InsnList nodes=method.instructions;
    String signature=method.desc;
    if (signature != null) {
      int args=signature.indexOf(')');
      if (args != -1 && signature.charAt(args + 1) == 'L') {
        String type=signature.substring(args + 2,signature.length() - 1);
        if (isInvalidPackage(type)) {
          AbstractInsnNode first=nodes.size() > 0 ? nodes.get(0) : null;
          record(context,method,first,type);
        }
      }
    }
    for (int i=0, n=nodes.size(); i < n; i++) {
      AbstractInsnNode instruction=nodes.get(i);
      int type=instruction.getType();
      if (type == AbstractInsnNode.METHOD_INSN) {
        MethodInsnNode node=(MethodInsnNode)instruction;
        String owner=node.owner;
        if (node.getOpcode() == Opcodes.INVOKEVIRTUAL && owner.equals(classNode.name)) {
          owner=classNode.superName;
        }
        while (owner != null) {
          if (isInvalidPackage(owner)) {
            record(context,method,instruction,owner);
          }
          if (owner.startsWith("android/") || owner.startsWith(JAVA_PKG_PREFIX) || owner.startsWith(JAVAX_PKG_PREFIX)) {
            owner=null;
          }
 else           if (node.getOpcode() == Opcodes.INVOKEVIRTUAL) {
            owner=context.getDriver().getSuperClass(owner);
          }
 else           if (node.getOpcode() == Opcodes.INVOKESTATIC) {
            owner=context.getDriver().getSuperClass(owner);
          }
 else {
            owner=null;
          }
        }
      }
 else       if (type == AbstractInsnNode.FIELD_INSN) {
        FieldInsnNode node=(FieldInsnNode)instruction;
        String owner=node.owner;
        if (isInvalidPackage(owner)) {
          record(context,method,instruction,owner);
        }
      }
 else       if (type == AbstractInsnNode.LDC_INSN) {
        LdcInsnNode node=(LdcInsnNode)instruction;
        if (node.cst instanceof Type) {
          Type t=(Type)node.cst;
          String className=t.getInternalName();
          if (isInvalidPackage(className)) {
            record(context,method,instruction,className);
          }
        }
      }
    }
  }
}
