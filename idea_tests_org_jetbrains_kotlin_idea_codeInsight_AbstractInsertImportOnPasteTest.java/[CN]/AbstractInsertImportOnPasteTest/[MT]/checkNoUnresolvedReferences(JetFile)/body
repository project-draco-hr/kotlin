{
  BindingContext bindingContext=ResolvePackage.analyzeFully(file);
  for (  Diagnostic diagnostic : bindingContext.getDiagnostics()) {
    if (Errors.UNRESOLVED_REFERENCE_DIAGNOSTICS.contains(diagnostic.getFactory())) {
      List<TextRange> textRanges=diagnostic.getTextRanges();
      String diagnosticText=DefaultErrorMessages.render(diagnostic);
      if (diagnostic.getPsiFile() == file) {
        fail(diagnostic.getFactory().getName() + ": " + diagnosticText+ " "+ DiagnosticUtils.atLocation(file,textRanges.get(0)));
      }
    }
  }
  DebugInfoUtil.markDebugAnnotations(file,bindingContext,new DebugInfoUtil.DebugInfoReporter(){
    @Override public void preProcessReference(    @NotNull JetReferenceExpression expression){
      ResolvePackage.analyze(expression);
    }
    @Override public void reportElementWithErrorType(    @NotNull JetReferenceExpression expression){
    }
    @Override public void reportMissingUnresolved(    @NotNull JetReferenceExpression expression){
      fail(expression.getText() + " is unresolved but not marked " + DiagnosticUtils.atLocation(file,expression.getTextRange()));
    }
    @Override public void reportUnresolvedWithTarget(    @NotNull JetReferenceExpression expression,    @NotNull String target){
    }
  }
);
}
