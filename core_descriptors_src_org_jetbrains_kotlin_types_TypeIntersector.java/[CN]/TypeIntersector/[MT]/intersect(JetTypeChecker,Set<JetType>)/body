{
  if (types.isEmpty()) {
    return builtIns.getNullableAnyType();
  }
  if (types.size() == 1) {
    return types.iterator().next();
  }
  boolean allNullable=true;
  boolean nothingTypePresent=false;
  List<JetType> nullabilityStripped=new ArrayList<JetType>(types.size());
  for (  JetType type : types) {
    if (type.isError())     continue;
    nothingTypePresent|=KotlinBuiltIns.isNothingOrNullableNothing(type);
    allNullable&=type.isMarkedNullable();
    nullabilityStripped.add(TypeUtils.makeNotNullable(type));
  }
  if (nothingTypePresent) {
    return allNullable ? builtIns.getNullableNothingType() : builtIns.getNothingType();
  }
  if (nullabilityStripped.isEmpty()) {
    return ErrorUtils.createErrorType("Intersection of errors types: " + types);
  }
  List<JetType> resultingTypes=new ArrayList<JetType>();
  outer:   for (  JetType type : nullabilityStripped) {
    if (!TypeUtils.canHaveSubtypes(typeChecker,type)) {
      for (      JetType other : nullabilityStripped) {
        if (!TypeUnifier.mayBeEqual(type,other) && !typeChecker.isSubtypeOf(type,other) && !typeChecker.isSubtypeOf(other,type)) {
          return null;
        }
      }
      return TypeUtils.makeNullableAsSpecified(type,allNullable);
    }
 else {
      for (      JetType other : nullabilityStripped) {
        if (!type.equals(other) && typeChecker.isSubtypeOf(other,type)) {
          continue outer;
        }
      }
    }
    for (    JetType other : resultingTypes) {
      if (typeChecker.equalTypes(other,type)) {
        continue outer;
      }
    }
    resultingTypes.add(type);
  }
  if (resultingTypes.isEmpty()) {
    JetType bestRepresentative=TypesPackage.singleBestRepresentative(nullabilityStripped);
    if (bestRepresentative == null) {
      throw new AssertionError("Empty intersection for types " + types);
    }
    return TypeUtils.makeNullableAsSpecified(bestRepresentative,allNullable);
  }
  if (resultingTypes.size() == 1) {
    return TypeUtils.makeNullableAsSpecified(resultingTypes.get(0),allNullable);
  }
  TypeConstructor constructor=new IntersectionTypeConstructor(Annotations.EMPTY,resultingTypes);
  JetScope[] scopes=new JetScope[resultingTypes.size()];
  int i=0;
  for (  JetType type : resultingTypes) {
    scopes[i]=type.getMemberScope();
    i++;
  }
  return JetTypeImpl.create(Annotations.EMPTY,constructor,allNullable,Collections.<TypeProjection>emptyList(),new IntersectionScope(constructor,scopes));
}
