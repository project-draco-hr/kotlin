{
  String packageName=getTargetPackage();
  RecentsManager.getInstance(myProject).registerRecentEntry(RECENTS_KEY,packageName);
  PackageWrapper targetPackage=new PackageWrapper(PsiManager.getInstance(myProject),packageName);
  if (!targetPackage.exists() && askIfDoesNotExist) {
    int ret=Messages.showYesNoDialog(myProject,RefactoringBundle.message("package.does.not.exist",packageName),RefactoringBundle.message("move.title"),Messages.getQuestionIcon());
    if (ret != Messages.YES)     return null;
  }
  DirectoryChooser.ItemWrapper selectedItem=(DirectoryChooser.ItemWrapper)destinationFolderCB.getComboBox().getSelectedItem();
  PsiDirectory selectedPsiDirectory=selectedItem.getDirectory();
  if (selectedPsiDirectory == null)   return Pair.create(null,new MultipleRootsMoveDestination(targetPackage));
  VirtualFile targetDirectory=selectedPsiDirectory.getVirtualFile();
  List<VirtualFile> sourceRoots=JavaProjectRootsUtil.getSuitableDestinationSourceRoots(getProject());
  if (initialTargetDirectory != null && Comparing.equal(targetDirectory,initialTargetDirectory.getVirtualFile()) && sourceRoots.size() > 1) {
    targetDirectory=MoveClassesOrPackagesUtil.chooseSourceRoot(targetPackage,sourceRoots,initialTargetDirectory);
  }
  if (targetDirectory == null)   return null;
  return Pair.create(targetDirectory,new AutocreatingSingleSourceRootMoveDestination(targetPackage,targetDirectory));
}
