{
  KotlinMoveTarget target=selectMoveTarget();
  if (target == null)   return;
  saveRefactoringSettings();
  List<KtNamedDeclaration> elementsToMove=getSelectedElementsToMove();
  List<KtFile> sourceFiles=getSourceFiles(elementsToMove);
  final PsiDirectory sourceDirectory=getSourceDirectory(sourceFiles);
  for (  PsiElement element : elementsToMove) {
    String message=target.verify(element.getContainingFile());
    if (message != null) {
      CommonRefactoringUtil.showErrorMessage(RefactoringBundle.message("error.title"),message,null,myProject);
      return;
    }
  }
  try {
    boolean deleteSourceFile=false;
    if (isFullFileMove()) {
      if (isMoveToPackage()) {
        Pair<VirtualFile,? extends MoveDestination> sourceRootWithMoveDestination=selectPackageBasedTargetDirAndDestination(false);
        final MoveDestination moveDestination=sourceRootWithMoveDestination.getSecond();
        PsiDirectory targetDir=moveDestination.getTargetIfExists(sourceDirectory);
        String targetFileName=sourceFiles.size() > 1 ? null : tfFileNameInPackage.getText();
        List<PsiFile> filesExistingInTargetDir=getFilesExistingInTargetDir(sourceFiles,targetFileName,targetDir);
        if (filesExistingInTargetDir.isEmpty()) {
          PsiDirectory targetDirectory=ApplicationUtilsKt.runWriteAction(new Function0<PsiDirectory>(){
            @Override public PsiDirectory invoke(){
              return moveDestination.getTargetDirectory(sourceDirectory);
            }
          }
);
          for (          KtFile sourceFile : sourceFiles) {
            MoveUtilsKt.setUpdatePackageDirective(sourceFile,cbUpdatePackageDirective.isSelected());
          }
          invokeRefactoring(new MoveFilesWithDeclarationsProcessor(myProject,sourceFiles,targetDirectory,targetFileName,isSearchInComments(),isSearchInNonJavaFiles(),moveCallback));
          return;
        }
      }
      int ret=Messages.showYesNoCancelDialog(myProject,"You are about to move all declarations out of the source file(s). Do you want to delete empty files?",RefactoringBundle.message("move.title"),Messages.getQuestionIcon());
      if (ret == Messages.CANCEL)       return;
      deleteSourceFile=ret == Messages.YES;
    }
    MoveDeclarationsDescriptor options=new MoveDeclarationsDescriptor(elementsToMove,target,MoveDeclarationsDelegate.TopLevel.INSTANCE,isSearchInComments(),isSearchInNonJavaFiles(),true,deleteSourceFile,moveCallback,false);
    invokeRefactoring(new MoveKotlinDeclarationsProcessor(myProject,options,Mover.Default.INSTANCE));
  }
 catch (  IncorrectOperationException e) {
    CommonRefactoringUtil.showErrorMessage(RefactoringBundle.message("error.title"),e.getMessage(),null,myProject);
  }
}
