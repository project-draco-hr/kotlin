{
  if (!super.checkAvailable(editor,file,info,down))   return false;
switch (checkForMovableClosingBrace(editor,file,info,down)) {
case NOT_MOVABLE:
{
      info.toMove2=null;
      return true;
    }
case MOVABLE:
  return true;
default :
break;
}
LineRange oldRange=info.toMove;
Pair<PsiElement,PsiElement> psiRange=getElementRange(editor,file,oldRange);
if (psiRange == null) return false;
PsiElement firstElement=getMovableElement(psiRange.getFirst(),false);
PsiElement lastElement=getMovableElement(psiRange.getSecond(),true);
if (firstElement == null || lastElement == null) return false;
MoveStatus firstMoveStatus=getMoveStatus(firstElement,down);
MoveStatus lastMoveStatus=getMoveStatus(lastElement,down);
if (firstMoveStatus == MoveStatus.DEFAULT || lastMoveStatus == MoveStatus.DEFAULT) {
return true;
}
if (firstMoveStatus == MoveStatus.FORBIDDEN || lastMoveStatus == MoveStatus.FORBIDDEN) {
info.toMove2=null;
return true;
}
LineRange sourceRange=getSourceRange(firstElement,lastElement,editor,oldRange);
if (sourceRange == null) return false;
PsiElement sibling=adjustWhiteSpaceSibling(editor,sourceRange,info,down);
if (sibling == null) return true;
info.toMove=sourceRange;
info.toMove2=getTargetRange(editor,sourceRange.firstElement,sibling,down);
return true;
}
