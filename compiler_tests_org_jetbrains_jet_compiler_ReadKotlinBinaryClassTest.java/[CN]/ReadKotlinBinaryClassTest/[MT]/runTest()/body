{
  jetCoreEnvironment=JetTestUtils.createEnvironmentWithMockJdk(myTestRootDisposable);
  String text=FileUtil.loadFile(testFile);
  LightVirtualFile virtualFile=new LightVirtualFile(testFile.getName(),JetLanguage.INSTANCE,text);
  virtualFile.setCharset(CharsetToolkit.UTF8_CHARSET);
  JetFile psiFile=(JetFile)((PsiFileFactoryImpl)PsiFileFactory.getInstance(jetCoreEnvironment.getProject())).trySetupPsiForFile(virtualFile,JetLanguage.INSTANCE,true,false);
  GenerationState state=GenerationUtils.compileFileGetGenerationState(psiFile);
  ClassFileFactory classFileFactory=state.getFactory();
  CompileEnvironment.writeToOutputDirectory(classFileFactory,tmpdir.getPath());
  NamespaceDescriptor namespaceFromSource=(NamespaceDescriptor)state.getBindingContext().get(BindingContext.DECLARATION_TO_DESCRIPTOR,psiFile);
  Assert.assertEquals("test",namespaceFromSource.getName());
  Disposer.dispose(myTestRootDisposable);
  jetCoreEnvironment=JetTestUtils.createEnvironmentWithMockJdk(myTestRootDisposable);
  jetCoreEnvironment.addToClasspath(tmpdir);
  jetCoreEnvironment.addToClasspath(new File("out/production/runtime"));
  JavaDescriptorResolver javaDescriptorResolver=new InjectorForJavaSemanticServices(jetCoreEnvironment.getProject()).getJavaDescriptorResolver();
  NamespaceDescriptor namespaceFromClass=javaDescriptorResolver.resolveNamespace(FqName.topLevel("test"),DescriptorSearchRule.ERROR_IF_FOUND_IN_KOTLIN);
  NamespaceComparator.compareNamespaces(namespaceFromSource,namespaceFromClass,false,txtFile);
}
