{
  if (arguments.freeArgs.isEmpty()) {
    messageCollector.report(CompilerMessageSeverity.ERROR,"Specify at least one source file or directory",NO_LOCATION);
    return ExitCode.INTERNAL_ERROR;
  }
  CompilerConfiguration configuration=new CompilerConfiguration();
  configuration.put(CLIConfigurationKeys.MESSAGE_COLLECTOR_KEY,messageCollector);
  CompileEnvironmentUtil.addSourceFilesCheckingForDuplicates(configuration,arguments.freeArgs);
  JetCoreEnvironment environmentForJS=JetCoreEnvironment.createForProduction(rootDisposable,configuration,EnvironmentConfigFiles.JS_CONFIG_FILES);
  Project project=environmentForJS.getProject();
  List<JetFile> sourcesFiles=environmentForJS.getSourceFiles();
  ClassPathLibrarySourcesLoader sourceLoader=new ClassPathLibrarySourcesLoader(project);
  List<JetFile> additionalSourceFiles=sourceLoader.findSourceFiles();
  sourcesFiles.addAll(additionalSourceFiles);
  if (arguments.verbose) {
    reportCompiledSourcesList(messageCollector,sourcesFiles);
  }
  if (arguments.outputFile == null) {
    messageCollector.report(CompilerMessageSeverity.ERROR,"Specify output file via -output",CompilerMessageLocation.NO_LOCATION);
    return ExitCode.INTERNAL_ERROR;
  }
  File outputFile=new File(arguments.outputFile);
  Config config=getConfig(arguments,project);
  if (analyzeAndReportErrors(messageCollector,sourcesFiles,config)) {
    return COMPILATION_ERROR;
  }
  File outputPrefixFile=null;
  if (arguments.outputPrefix != null) {
    outputPrefixFile=new File(arguments.outputPrefix);
    if (!outputPrefixFile.exists()) {
      messageCollector.report(CompilerMessageSeverity.ERROR,"Output prefix file '" + arguments.outputPrefix + "' not found",CompilerMessageLocation.NO_LOCATION);
      return ExitCode.COMPILATION_ERROR;
    }
  }
  File outputPostfixFile=null;
  if (arguments.outputPostfix != null) {
    outputPostfixFile=new File(arguments.outputPostfix);
    if (!outputPostfixFile.exists()) {
      messageCollector.report(CompilerMessageSeverity.ERROR,"Output postfix file '" + arguments.outputPostfix + "' not found",CompilerMessageLocation.NO_LOCATION);
      return ExitCode.COMPILATION_ERROR;
    }
  }
  MainCallParameters mainCallParameters=createMainCallParameters(arguments.main);
  OutputFileCollection outputFiles=translate(mainCallParameters,config,sourcesFiles,outputFile,outputPrefixFile,outputPostfixFile);
  if (outputFile.isDirectory()) {
    messageCollector.report(CompilerMessageSeverity.ERROR,"Cannot open output file '" + outputFile.getPath() + "': is a directory",CompilerMessageLocation.NO_LOCATION);
    return ExitCode.COMPILATION_ERROR;
  }
  File outputDir=outputFile.getParentFile();
  if (outputDir == null) {
    outputDir=outputFile.getAbsoluteFile().getParentFile();
  }
  OutputUtilsPackage.writeAll(outputFiles,outputDir,messageCollector);
  return OK;
}
