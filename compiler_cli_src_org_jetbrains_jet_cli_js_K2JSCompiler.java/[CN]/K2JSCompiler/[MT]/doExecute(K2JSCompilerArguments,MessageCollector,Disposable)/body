{
  if (arguments.sourceFiles == null) {
    messageCollector.report(CompilerMessageSeverity.ERROR,"Specify sources location via -sourceFiles",NO_LOCATION);
    return ExitCode.INTERNAL_ERROR;
  }
  CompilerConfiguration configuration=new CompilerConfiguration();
  configuration.addAll(CommonConfigurationKeys.SOURCE_ROOTS_KEY,Arrays.asList(arguments.sourceFiles));
  JetCoreEnvironment environmentForJS=JetCoreEnvironment.createForProduction(rootDisposable,configuration);
  Project project=environmentForJS.getProject();
  ClassPathLibrarySourcesLoader sourceLoader=new ClassPathLibrarySourcesLoader(project);
  List<JetFile> sourceFiles=sourceLoader.findSourceFiles();
  environmentForJS.getSourceFiles().addAll(sourceFiles);
  if (arguments.verbose) {
    reportCompiledSourcesList(messageCollector,environmentForJS);
  }
  String outputFile=arguments.outputFile;
  if (outputFile == null) {
    messageCollector.report(CompilerMessageSeverity.ERROR,"Specify output file via -output",CompilerMessageLocation.NO_LOCATION);
    return ExitCode.INTERNAL_ERROR;
  }
  Config config=getConfig(arguments,project);
  if (analyzeAndReportErrors(messageCollector,environmentForJS.getSourceFiles(),config)) {
    return COMPILATION_ERROR;
  }
  File outputPrefixFile=null;
  if (arguments.outputPrefix != null) {
    outputPrefixFile=new File(arguments.outputPrefix);
    if (!outputPrefixFile.exists()) {
      messageCollector.report(CompilerMessageSeverity.ERROR,"Output prefix file '" + arguments.outputPrefix + "' not found",CompilerMessageLocation.NO_LOCATION);
      return ExitCode.COMPILATION_ERROR;
    }
  }
  File outputPostfixFile=null;
  if (arguments.outputPostfix != null) {
    outputPostfixFile=new File(arguments.outputPostfix);
    if (!outputPostfixFile.exists()) {
      messageCollector.report(CompilerMessageSeverity.ERROR,"Output postfix file '" + arguments.outputPostfix + "' not found",CompilerMessageLocation.NO_LOCATION);
      return ExitCode.COMPILATION_ERROR;
    }
  }
  MainCallParameters mainCallParameters=createMainCallParameters(arguments.main);
  return translateAndGenerateOutputFile(mainCallParameters,environmentForJS,config,outputFile,outputPrefixFile,outputPostfixFile);
}
