{
  if (arguments.srcdir == null && arguments.sourceFiles == null) {
    messageCollector.report(CompilerMessageSeverity.ERROR,"Specify sources location via -srcdir",NO_LOCATION);
    return ExitCode.INTERNAL_ERROR;
  }
  JetCoreEnvironment environmentForJS=JetCoreEnvironment.getCoreEnvironmentForJS(rootDisposable);
  Project project=environmentForJS.getProject();
  Config config=getConfig(arguments,project);
  if (analyzeAndReportErrors(messageCollector,environmentForJS.getSourceFiles(),config)) {
    return ExitCode.COMPILATION_ERROR;
  }
  if (arguments.srcdir != null) {
    environmentForJS.addSources(arguments.srcdir);
  }
  if (arguments.sourceFiles != null) {
    for (    String sourceFile : arguments.sourceFiles) {
      environmentForJS.addSources(sourceFile);
    }
  }
  ClassPathLibrarySourcesLoader sourceLoader=new ClassPathLibrarySourcesLoader(project);
  List<JetFile> sourceFiles=sourceLoader.findSourceFiles();
  environmentForJS.getSourceFiles().addAll(sourceFiles);
  if (arguments.isVerbose()) {
    reportCompiledSourcesList(messageCollector,environmentForJS);
  }
  String outputFile=arguments.outputFile;
  if (outputFile == null) {
    messageCollector.report(CompilerMessageSeverity.ERROR,"Specify output file via -output",CompilerMessageLocation.NO_LOCATION);
    return ExitCode.INTERNAL_ERROR;
  }
  MainCallParameters mainCallParameters=arguments.createMainCallParameters();
  return translateAndGenerateOutputFile(mainCallParameters,messageCollector,environmentForJS,config,outputFile);
}
