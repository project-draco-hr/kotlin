{
  StartupManager.getInstance(myProject).registerPostStartupActivity(new Runnable(){
    @Override public void run(){
      final String pluginVersion=JetPluginUtil.getPluginVersion();
      if ("@snapshot@".equals(pluginVersion))       return;
      if (pluginVersion.equals(PropertiesComponent.getInstance(myProject).getValue(SUPPRESSED_PROPERTY_NAME)))       return;
      Collection<VersionedLibrary> versionedOutdatedLibraries=findOutdatedKotlinLibraries(myProject,pluginVersion);
      if (versionedOutdatedLibraries.isEmpty()) {
        return;
      }
      Collection<Library> outdatedLibraries=extractLibraries(versionedOutdatedLibraries);
      String message;
      if (versionedOutdatedLibraries.size() == 1) {
        VersionedLibrary versionedLibrary=versionedOutdatedLibraries.iterator().next();
        String version=versionedLibrary.getVersion();
        String readableVersion=version == null ? "unknown" : version;
        String libraryName=versionedLibrary.getLibrary().getName();
        message=String.format("<p>Your version of Kotlin runtime in '%s' library is %s, while plugin version is %s.</p>" + "<p>Runtime library should be updated to avoid compatibility problems.</p>" + "<p><a href=\"update\">Update Runtime</a> <a href=\"ignore\">Ignore</a></p>",libraryName,readableVersion,pluginVersion);
      }
 else {
        String libraryNames=StringUtil.join(outdatedLibraries,new Function<Library,String>(){
          @Override public String fun(          Library library){
            return library.getName();
          }
        }
,", ");
        message=String.format("<p>Version of Kotlin runtime is outdated in several libraries (%s). Plugin version is %s.</p>" + "<p>Runtime libraries should be updated to avoid compatibility problems.</p>" + "<p><a href=\"update\">Update All</a> <a href=\"ignore\">Ignore</a></p>",libraryNames,pluginVersion);
      }
      Notifications.Bus.notify(new Notification(OUTDATED_RUNTIME_GROUP_DISPLAY_ID,"Outdated Kotlin Runtime",message,NotificationType.WARNING,new NotificationListener(){
        @Override public void hyperlinkUpdate(        @NotNull Notification notification,        @NotNull HyperlinkEvent event){
          if (event.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
            if ("update".equals(event.getDescription())) {
              Collection<VersionedLibrary> versionedOutdatedLibraries=findOutdatedKotlinLibraries(myProject,pluginVersion);
              Collection<Library> outdatedLibraries=extractLibraries(versionedOutdatedLibraries);
              KotlinRuntimeLibraryUtil.updateLibraries(myProject,outdatedLibraries);
              suggestDeleteKotlinJsIfNeeded(outdatedLibraries);
            }
 else             if ("ignore".equals(event.getDescription())) {
              PropertiesComponent.getInstance(myProject).setValue(SUPPRESSED_PROPERTY_NAME,pluginVersion);
            }
 else {
              throw new AssertionError();
            }
            notification.expire();
          }
        }
      }
),myProject);
    }
  }
);
}
