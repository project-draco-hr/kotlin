{
  PsiBuilder.Marker pattern=mark();
  myJetParsing.parseAnnotations(false);
  if (at(NAMESPACE_KEYWORD) || at(IDENTIFIER) || at(FUN_KEYWORD)|| at(THIS_KEYWORD)) {
    PsiBuilder.Marker rollbackMarker=mark();
    parseBinaryExpression(Precedence.ELVIS);
    if (at(HASH)) {
      rollbackMarker.drop();
      PsiBuilder.Marker list=mark();
      parseTuplePattern(DECOMPOSER_ARGUMENT);
      list.done(DECOMPOSER_ARGUMENT_LIST);
      pattern.done(DECOMPOSER_PATTERN);
    }
 else {
      int expressionEndOffset=myBuilder.getCurrentOffset();
      rollbackMarker.rollbackTo();
      rollbackMarker=mark();
      myJetParsing.parseTypeRef();
      if (myBuilder.getCurrentOffset() < expressionEndOffset) {
        rollbackMarker.rollbackTo();
        parseBinaryExpression(Precedence.ELVIS);
        pattern.done(DECOMPOSER_PATTERN);
      }
 else {
        rollbackMarker.drop();
        pattern.done(TYPE_PATTERN);
      }
    }
  }
 else   if (at(HASH)) {
    parseTuplePattern(TUPLE_PATTERN_ENTRY);
    pattern.done(TUPLE_PATTERN);
  }
 else   if (at(MUL)) {
    advance();
    pattern.done(WILDCARD_PATTERN);
  }
 else   if (at(VAL_KEYWORD)) {
    parseBindingPattern();
    pattern.done(BINDING_PATTERN);
  }
 else   if (at(OPEN_QUOTE)) {
    parseStringTemplate();
    pattern.done(EXPRESSION_PATTERN);
  }
 else   if (parseLiteralConstant()) {
    pattern.done(EXPRESSION_PATTERN);
  }
 else {
    errorUntil("Pattern expected",TokenSet.create(RBRACE,ARROW));
    pattern.drop();
  }
}
