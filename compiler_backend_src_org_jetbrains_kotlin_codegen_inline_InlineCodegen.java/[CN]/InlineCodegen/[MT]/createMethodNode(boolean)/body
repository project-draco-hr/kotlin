{
  JvmMethodSignature jvmSignature=typeMapper.mapSignature(functionDescriptor,context.getContextKind());
  Method asmMethod;
  if (callDefault) {
    asmMethod=typeMapper.mapDefaultMethod(functionDescriptor,context.getContextKind());
  }
 else {
    asmMethod=jvmSignature.getAsmMethod();
  }
  SMAPAndMethodNode nodeAndSMAP;
  if (functionDescriptor instanceof DeserializedSimpleFunctionDescriptor) {
    ClassId containerClassId=InlineCodegenUtil.getContainerClassIdForInlineCallable((DeserializedSimpleFunctionDescriptor)functionDescriptor);
    VirtualFile file=InlineCodegenUtil.getVirtualFileForCallable(containerClassId,state);
    nodeAndSMAP=InlineCodegenUtil.getMethodNode(file.contentsToByteArray(),asmMethod.getName(),asmMethod.getDescriptor(),containerClassId);
    if (nodeAndSMAP == null) {
      throw new RuntimeException("Couldn't obtain compiled function body for " + descriptorName(functionDescriptor));
    }
  }
 else {
    PsiElement element=DescriptorToSourceUtils.descriptorToDeclaration(functionDescriptor);
    if (element == null || !(element instanceof JetNamedFunction)) {
      throw new RuntimeException("Couldn't find declaration for function " + descriptorName(functionDescriptor));
    }
    JetNamedFunction inliningFunction=(JetNamedFunction)element;
    MethodNode node=new MethodNode(InlineCodegenUtil.API,getMethodAsmFlags(functionDescriptor,context.getContextKind()) | (callDefault ? Opcodes.ACC_STATIC : 0),asmMethod.getName(),asmMethod.getDescriptor(),jvmSignature.getGenericsSignature(),null);
    MethodVisitor maxCalcAdapter=InlineCodegenUtil.wrapWithMaxLocalCalc(node);
    MethodContext methodContext=context.getParentContext().intoFunction(functionDescriptor);
    SMAP smap;
    if (callDefault) {
      Type implementationOwner=typeMapper.mapImplementationOwner(functionDescriptor);
      FakeMemberCodegen parentCodegen=new FakeMemberCodegen(codegen.getParentCodegen(),inliningFunction,(FieldOwnerContext)methodContext.getParentContext(),implementationOwner.getInternalName());
      FunctionCodegen.generateDefaultImplBody(methodContext,functionDescriptor,maxCalcAdapter,DefaultParameterValueLoader.DEFAULT,inliningFunction,parentCodegen);
      smap=createSMAPWithDefaultMapping(inliningFunction,parentCodegen.getOrCreateSourceMapper().getResultMappings());
    }
 else {
      smap=generateMethodBody(maxCalcAdapter,functionDescriptor,methodContext,inliningFunction,jvmSignature,false);
    }
    nodeAndSMAP=new SMAPAndMethodNode(node,smap);
    maxCalcAdapter.visitMaxs(-1,-1);
    maxCalcAdapter.visitEnd();
  }
  return nodeAndSMAP;
}
