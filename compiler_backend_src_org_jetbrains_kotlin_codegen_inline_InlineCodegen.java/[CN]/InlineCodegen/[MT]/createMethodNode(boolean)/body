{
  Method asmMethod=callDefault ? typeMapper.mapDefaultMethod(functionDescriptor,context.getContextKind()) : jvmSignature.getAsmMethod();
  SMAPAndMethodNode nodeAndSMAP;
  if (functionDescriptor instanceof FictitiousArrayConstructor) {
    nodeAndSMAP=InlineCodegenUtil.getMethodNode(IntrinsicArrayConstructorsKt.getBytecode(),asmMethod.getName(),asmMethod.getDescriptor(),IntrinsicArrayConstructorsKt.getClassId());
    if (nodeAndSMAP == null) {
      throw new IllegalStateException("Couldn't obtain array constructor body for " + descriptorName(functionDescriptor));
    }
  }
 else   if (functionDescriptor instanceof DeserializedSimpleFunctionDescriptor) {
    JetTypeMapper.ContainingClassesInfo containingClasses=typeMapper.getContainingClassesForDeserializedCallable((DeserializedSimpleFunctionDescriptor)functionDescriptor);
    ClassId containerId=containingClasses.getImplClassId();
    VirtualFile file=InlineCodegenUtil.findVirtualFile(state,containerId);
    if (file == null) {
      throw new IllegalStateException("Couldn't find declaration file for " + containerId);
    }
    nodeAndSMAP=InlineCodegenUtil.getMethodNode(file.contentsToByteArray(),asmMethod.getName(),asmMethod.getDescriptor(),containerId);
    if (nodeAndSMAP == null) {
      throw new IllegalStateException("Couldn't obtain compiled function body for " + descriptorName(functionDescriptor));
    }
  }
 else {
    PsiElement element=DescriptorToSourceUtils.descriptorToDeclaration(functionDescriptor);
    if (!(element instanceof KtNamedFunction)) {
      throw new IllegalStateException("Couldn't find declaration for function " + descriptorName(functionDescriptor));
    }
    KtNamedFunction inliningFunction=(KtNamedFunction)element;
    MethodNode node=new MethodNode(InlineCodegenUtil.API,getMethodAsmFlags(functionDescriptor,context.getContextKind()) | (callDefault ? Opcodes.ACC_STATIC : 0),asmMethod.getName(),asmMethod.getDescriptor(),jvmSignature.getGenericsSignature(),null);
    MethodVisitor maxCalcAdapter=InlineCodegenUtil.wrapWithMaxLocalCalc(node);
    MethodContext methodContext=context.getParentContext().intoFunction(functionDescriptor);
    SMAP smap;
    if (callDefault) {
      Type implementationOwner=typeMapper.mapImplementationOwner(functionDescriptor);
      FakeMemberCodegen parentCodegen=new FakeMemberCodegen(codegen.getParentCodegen(),inliningFunction,(FieldOwnerContext)methodContext.getParentContext(),implementationOwner.getInternalName());
      FunctionCodegen.generateDefaultImplBody(methodContext,functionDescriptor,maxCalcAdapter,DefaultParameterValueLoader.DEFAULT,inliningFunction,parentCodegen,asmMethod);
      smap=createSMAPWithDefaultMapping(inliningFunction,parentCodegen.getOrCreateSourceMapper().getResultMappings());
    }
 else {
      smap=generateMethodBody(maxCalcAdapter,functionDescriptor,methodContext,inliningFunction,jvmSignature,false);
    }
    nodeAndSMAP=new SMAPAndMethodNode(node,smap);
    maxCalcAdapter.visitMaxs(-1,-1);
    maxCalcAdapter.visitEnd();
  }
  return nodeAndSMAP;
}
