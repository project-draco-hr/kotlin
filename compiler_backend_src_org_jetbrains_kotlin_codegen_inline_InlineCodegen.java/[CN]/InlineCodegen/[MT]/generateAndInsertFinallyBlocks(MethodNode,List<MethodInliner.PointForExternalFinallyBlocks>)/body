{
  if (!codegen.hasFinallyBlocks())   return;
  Map<AbstractInsnNode,MethodInliner.PointForExternalFinallyBlocks> extensionPoints=new HashMap<AbstractInsnNode,MethodInliner.PointForExternalFinallyBlocks>();
  for (  MethodInliner.PointForExternalFinallyBlocks insertPoint : insertPoints) {
    extensionPoints.put(insertPoint.beforeIns,insertPoint);
  }
  DefaultProcessor processor=new DefaultProcessor(intoNode);
  AbstractInsnNode curInstr=intoNode.instructions.getFirst();
  while (curInstr != null) {
    processor.updateCoveringTryBlocks(curInstr,true);
    processor.updateCoveringLocalVars(curInstr,true);
    MethodInliner.PointForExternalFinallyBlocks extension=extensionPoints.get(curInstr);
    if (extension != null) {
      Label start=new Label();
      Label end=new Label();
      MethodNode finallyNode=InlineCodegenUtil.createEmptyMethodNode();
      finallyNode.visitLabel(start);
      ExpressionCodegen finallyCodegen=new ExpressionCodegen(finallyNode,codegen.getFrameMap(),codegen.getReturnType(),codegen.getContext(),codegen.getState(),codegen.getParentCodegen());
      finallyCodegen.addBlockStackElementsForNonLocalReturns(codegen.getBlockStackElements());
      finallyCodegen.generateFinallyBlocksIfNeeded(extension.returnType);
      finallyNode.visitLabel(end);
      InlineCodegenUtil.insertNodeBefore(finallyNode,intoNode,curInstr);
      List<TryCatchBlockNodeInfo> blocks=new ArrayList<TryCatchBlockNodeInfo>(processor.getTryBlocksMetaInfo().getCurrentIntervals());
      for (      TryCatchBlockNodeInfo block : blocks) {
        processor.getTryBlocksMetaInfo().split(block,new SimpleInterval((LabelNode)start.info,(LabelNode)end.info),false);
      }
    }
    curInstr=curInstr.getNext();
  }
  processor.sortTryCatchBlocks();
  Iterable<TryCatchBlockNodeInfo> nodes=processor.getNonEmptyNodes();
  intoNode.tryCatchBlocks.clear();
  for (  TryCatchBlockNodeInfo node : nodes) {
    intoNode.tryCatchBlocks.add(node.getNode());
  }
  intoNode.localVariables.clear();
  for (  LocalVarNodeWrapper interval : processor.getLocalVarsMetaInfo().getAllIntervals()) {
    intoNode.localVariables.add(interval.getNode());
  }
}
