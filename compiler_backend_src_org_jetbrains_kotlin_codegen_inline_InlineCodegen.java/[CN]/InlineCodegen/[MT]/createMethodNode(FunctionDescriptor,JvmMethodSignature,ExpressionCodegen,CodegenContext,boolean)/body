{
  final GenerationState state=codegen.getState();
  final Method asmMethod=callDefault ? state.getTypeMapper().mapDefaultMethod(functionDescriptor,context.getContextKind()) : jvmSignature.getAsmMethod();
  MethodId methodId=new MethodId(DescriptorUtils.getFqNameSafe(functionDescriptor.getContainingDeclaration()),asmMethod);
  final CallableMemberDescriptor directMember=getDirectMemberAndCallableFromObject(functionDescriptor);
  if (!isBuiltInArrayIntrinsic(functionDescriptor) && !(directMember instanceof DeserializedCallableMemberDescriptor)) {
    return doCreateMethodNodeFromSource(functionDescriptor,jvmSignature,codegen,context,callDefault,state,asmMethod);
  }
  SMAPAndMethodNode resultInCache=InlineCacheKt.getOrPut(state.getInlineCache().getMethodNodeById(),methodId,new Function0<SMAPAndMethodNode>(){
    @Override public SMAPAndMethodNode invoke(){
      SMAPAndMethodNode result=doCreateMethodNodeFromCompiled(directMember,state,asmMethod);
      if (result == null) {
        throw new IllegalStateException("Couldn't obtain compiled function body for " + functionDescriptor);
      }
      return result;
    }
  }
);
  return resultInCache.copyWithNewNode(cloneMethodNode(resultInCache.getNode()));
}
