{
  DefaultSourceMapper defaultSourceMapper=codegen.getParentCodegen().getOrCreateSourceMapper();
  defaultSourceMapper.setCallSiteMarker(new CallSiteMarker(codegen.getLastLineNumber()));
  MethodNode node=nodeAndSmap.getNode();
  ReifiedTypeParametersUsages reificationResult=reifiedTypeInliner.reifyInstructions(node);
  generateClosuresBodies();
  putClosureParametersOnStack();
  addInlineMarker(codegen.v,true);
  Parameters parameters=invocationParamBuilder.buildParameters();
  InliningContext info=new RootInliningContext(expressionMap,state,codegen.getInlineNameGenerator().subGenerator(jvmSignature.getAsmMethod().getName()),callElement,getInlineCallSiteInfo(),reifiedTypeInliner,typeParameterMappings);
  MethodInliner inliner=new MethodInliner(node,parameters,info,new FieldRemapper(null,null,parameters),isSameModule,"Method inlining " + callElement.getText(),createNestedSourceMapper(nodeAndSmap,sourceMapper),info.getCallSiteInfo(),AnnotationUtilKt.hasInlineOnlyAnnotation(functionDescriptor) ? new InlineOnlySmapSkipper(codegen) : null);
  LocalVarRemapper remapper=new LocalVarRemapper(parameters,initialFrameSize);
  MethodNode adapter=InlineCodegenUtil.createEmptyMethodNode();
  adapter.visitInsn(Opcodes.NOP);
  InlineResult result=inliner.doInline(adapter,remapper,true,LabelOwner.SKIP_ALL);
  result.getReifiedTypeParametersUsages().mergeAll(reificationResult);
  CallableMemberDescriptor descriptor=getLabelOwnerDescriptor(codegen.getContext());
  final Set<String> labels=getDeclarationLabels(DescriptorToSourceUtils.descriptorToDeclaration(descriptor),descriptor);
  LabelOwner labelOwner=new LabelOwner(){
    @Override public boolean isMyLabel(    @NotNull String name){
      return labels.contains(name);
    }
  }
;
  List<MethodInliner.PointForExternalFinallyBlocks> infos=MethodInliner.processReturns(adapter,labelOwner,true,null);
  generateAndInsertFinallyBlocks(adapter,infos,((StackValue.Local)remapper.remap(parameters.getArgsSizeOnStack() + 1).value).index);
  removeStaticInitializationTrigger(adapter);
  removeFinallyMarkers(adapter);
  adapter.accept(new MethodBodyVisitor(codegen.v));
  addInlineMarker(codegen.v,false);
  defaultSourceMapper.setCallSiteMarker(null);
  return result;
}
