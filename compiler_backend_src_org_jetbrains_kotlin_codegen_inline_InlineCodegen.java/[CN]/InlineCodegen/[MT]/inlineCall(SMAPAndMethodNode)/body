{
  MethodNode node=nodeAndSmap.getNode();
  ReifiedTypeParametersUsages reificationResult=reifiedTypeInliner.reifyInstructions(node.instructions);
  generateClosuresBodies();
  putClosureParametersOnStack();
  addInlineMarker(codegen.v,true);
  Parameters parameters=invocationParamBuilder.buildParameters();
  InliningContext info=new RootInliningContext(expressionMap,state,codegen.getInlineNameGenerator().subGenerator(functionDescriptor.getName().asString()),codegen.getContext(),callElement,codegen.getParentCodegen().getClassName(),reifiedTypeInliner);
  MethodInliner inliner=new MethodInliner(node,parameters,info,new FieldRemapper(null,null,parameters),isSameModule,"Method inlining " + callElement.getText(),createNestedSourceMapper(nodeAndSmap));
  LocalVarRemapper remapper=new LocalVarRemapper(parameters,initialFrameSize);
  MethodNode adapter=InlineCodegenUtil.createEmptyMethodNode();
  adapter.visitInsn(Opcodes.NOP);
  InlineResult result=inliner.doInline(adapter,remapper,true,LabelOwner.SKIP_ALL);
  result.getReifiedTypeParametersUsages().mergeAll(reificationResult);
  LabelOwner labelOwner=new LabelOwner(){
    final CallableMemberDescriptor descriptor=codegen.getContext().getContextDescriptor();
    @Override public boolean isMyLabel(    @NotNull String name){
      if (InlineCodegenUtil.ROOT_LABEL.equals(name)) {
        return !isFunctionLiteral(descriptor);
      }
      if (descriptor.getName().asString().equals(name)) {
        return true;
      }
      if (isFunctionExpression(descriptor)) {
        PsiElement element=DescriptorToSourceUtils.descriptorToDeclaration(descriptor);
        if (element != null && element.getParent() instanceof JetLabeledExpression) {
          String labelName=((JetLabeledExpression)element.getParent()).getLabelName();
          return name.equals(labelName);
        }
      }
      return false;
    }
  }
;
  List<MethodInliner.PointForExternalFinallyBlocks> infos=MethodInliner.processReturns(adapter,labelOwner,true,null);
  generateAndInsertFinallyBlocks(adapter,infos,((StackValue.Local)remapper.remap(parameters.totalSize() + 1).value).index);
  adapter.accept(new InliningInstructionAdapter(codegen.v));
  addInlineMarker(codegen.v,false);
  return result;
}
