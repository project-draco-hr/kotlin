{
  JetExpression selectorExpression=expression.getSelectorExpression();
  JetExpression receiverExpression=expression.getReceiverExpression();
  boolean safeCall=(expression.getOperationSign() == JetTokens.SAFE_ACCESS);
  ResolutionContext contextForReceiver=context.replaceExpectedType(NO_EXPECTED_TYPE).replaceContextDependency(INDEPENDENT).replaceInsideCallChain(true);
  JetTypeInfo receiverTypeInfo=expressionTypingServices.getTypeInfo(receiverExpression,contextForReceiver);
  JetType receiverType=receiverTypeInfo.getType();
  QualifierReceiver qualifierReceiver=(QualifierReceiver)context.trace.get(BindingContext.QUALIFIER,receiverExpression);
  if (receiverType == null)   receiverType=ErrorUtils.createErrorType("Type for " + expression.getText());
  ReceiverValue receiver=qualifierReceiver == null ? new ExpressionReceiver(receiverExpression,receiverType) : qualifierReceiver;
  DataFlowInfo receiverDataFlowInfo=receiverTypeInfo.getDataFlowInfo();
  context=context.replaceDataFlowInfo(receiverDataFlowInfo);
  JetTypeInfo selectorReturnTypeInfo=getSelectorReturnTypeInfo(receiver,expression.getOperationTokenNode(),selectorExpression,context);
  JetType selectorReturnType=selectorReturnTypeInfo.getType();
  resolveDeferredReceiverInQualifiedExpression(qualifierReceiver,expression,context);
  checkNestedClassAccess(expression,context);
  if (safeCall) {
    if (selectorReturnType != null && !KotlinBuiltIns.isUnit(selectorReturnType)) {
      if (TypeUtils.isNullableType(receiverType)) {
        selectorReturnType=TypeUtils.makeNullable(selectorReturnType);
      }
    }
  }
  if (selectorReturnType != null) {
    context.trace.record(BindingContext.EXPRESSION_TYPE,selectorExpression,selectorReturnType);
  }
  CompileTimeConstant<?> value=ConstantExpressionEvaluator.evaluate(expression,context.trace,context.expectedType);
  if (value instanceof IntegerValueConstant && ((IntegerValueConstant)value).isPure()) {
    return BasicExpressionTypingVisitor.createCompileTimeConstantTypeInfo(value,expression,context);
  }
  JetTypeInfo typeInfo;
  DataFlowInfo safeCallChainInfo;
  if (receiverTypeInfo instanceof JetTypeInfoInsideSafeCall) {
    safeCallChainInfo=((JetTypeInfoInsideSafeCall)receiverTypeInfo).getSafeCallChainInfo();
  }
 else {
    safeCallChainInfo=null;
  }
  if (safeCall) {
    if (safeCallChainInfo == null)     safeCallChainInfo=receiverDataFlowInfo;
    if (context.insideCallChain) {
      typeInfo=new JetTypeInfoInsideSafeCall(selectorReturnType,selectorReturnTypeInfo.getDataFlowInfo(),safeCallChainInfo);
    }
 else {
      typeInfo=JetTypeInfo.create(selectorReturnType,safeCallChainInfo);
    }
  }
 else {
    if (context.insideCallChain || safeCallChainInfo == null) {
      typeInfo=new JetTypeInfoInsideSafeCall(selectorReturnType,selectorReturnTypeInfo.getDataFlowInfo(),selectorReturnTypeInfo.getDataFlowInfo());
    }
 else {
      typeInfo=JetTypeInfo.create(selectorReturnType,safeCallChainInfo);
    }
  }
  if (context.contextDependency == INDEPENDENT) {
    DataFlowUtils.checkType(typeInfo,expression,context);
  }
  return typeInfo;
}
