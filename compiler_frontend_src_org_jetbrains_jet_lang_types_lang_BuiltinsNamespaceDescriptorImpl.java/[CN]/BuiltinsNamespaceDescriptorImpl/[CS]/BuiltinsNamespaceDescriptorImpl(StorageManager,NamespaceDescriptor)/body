{
  super(containingDeclaration,Collections.<AnnotationDescriptor>emptyList(),KotlinBuiltIns.BUILT_INS_PACKAGE_NAME);
  try {
    nameResolver=NameSerializationUtil.deserializeNameResolver(getStream(BuiltInsSerializationUtil.getNameTableFilePath(this)));
    DescriptorFinder descriptorFinder=new AbstractDescriptorFinder(storageManager,AnnotationDeserializer.UNSUPPORTED){
      @Nullable @Override protected ClassData getClassData(      @NotNull ClassId classId){
        InputStream stream=getStreamNullable(BuiltInsSerializationUtil.getClassMetadataPath(classId));
        if (stream == null) {
          return null;
        }
        try {
          ProtoBuf.Class classProto=ProtoBuf.Class.parseFrom(stream);
          Name expectedShortName=classId.getRelativeClassName().shortName();
          Name actualShortName=nameResolver.getName(classProto.getName());
          if (!actualShortName.isSpecial() && !actualShortName.equals(expectedShortName)) {
            return null;
          }
          return new ClassData(nameResolver,classProto);
        }
 catch (        IOException e) {
          throw new IllegalStateException(e);
        }
      }
      @Nullable @Override public NamespaceDescriptor findPackage(      @NotNull FqName fqName){
        return fqName.equals(KotlinBuiltIns.BUILT_INS_PACKAGE_FQ_NAME) ? BuiltinsNamespaceDescriptorImpl.this : null;
      }
      @Override protected void classDescriptorCreated(      @NotNull ClassDescriptor classDescriptor){
      }
    }
;
    members=new DeserializedPackageMemberScope(storageManager,this,DescriptorDeserializer.create(storageManager,this,nameResolver,descriptorFinder,AnnotationDeserializer.UNSUPPORTED),loadCallables(),descriptorFinder){
      private final NotNullLazyValue<Collection<Name>> classNames=storageManager.createLazyValue(new Computable<Collection<Name>>(){
        @Override public Collection<Name> compute(){
          InputStream namesStream=getStream(BuiltInsSerializationUtil.getClassNamesFilePath(BuiltinsNamespaceDescriptorImpl.this));
          List<Name> result=new ArrayList<Name>();
          try {
            DataInputStream data=new DataInputStream(namesStream);
            while (true) {
              result.add(nameResolver.getName(data.readInt()));
            }
          }
 catch (          EOFException e) {
          }
catch (          IOException e) {
            throw new IllegalStateException(e);
          }
          return result;
        }
      }
);
      @NotNull @Override protected Collection<Name> getClassNames(){
        return classNames.compute();
      }
      @Nullable @Override protected ReceiverParameterDescriptor getImplicitReceiver(){
        return null;
      }
    }
;
  }
 catch (  IOException e) {
    throw new IllegalStateException(e);
  }
}
