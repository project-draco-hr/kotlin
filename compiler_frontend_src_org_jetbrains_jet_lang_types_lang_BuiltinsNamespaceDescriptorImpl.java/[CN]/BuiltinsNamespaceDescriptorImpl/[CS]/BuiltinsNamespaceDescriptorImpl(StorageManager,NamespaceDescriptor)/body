{
  super(containingDeclaration,Collections.<AnnotationDescriptor>emptyList(),KotlinBuiltIns.BUILT_INS_PACKAGE_NAME);
  nameResolver=NameSerializationUtil.deserializeNameResolver(getStream(BuiltInsSerializationUtil.getNameTableFilePath(this)));
  final NotNullLazyValue<Collection<Name>> classNames=storageManager.createLazyValue(new Computable<Collection<Name>>(){
    @Override @NotNull public Collection<Name> compute(){
      InputStream in=getStream(BuiltInsSerializationUtil.getClassNamesFilePath(BuiltinsNamespaceDescriptorImpl.this));
      try {
        DataInputStream data=new DataInputStream(in);
        try {
          int size=data.readInt();
          List<Name> result=new ArrayList<Name>(size);
          for (int i=0; i < size; i++) {
            result.add(nameResolver.getName(data.readInt()));
          }
          return result;
        }
  finally {
          data.close();
        }
      }
 catch (      IOException e) {
        throw new IllegalStateException(e);
      }
    }
  }
);
  DescriptorFinder descriptorFinder=new AbstractDescriptorFinder(storageManager,UNSUPPORTED){
    @Nullable @Override protected ClassData getClassData(    @NotNull ClassId classId){
      InputStream stream=getStreamNullable(BuiltInsSerializationUtil.getClassMetadataPath(classId));
      if (stream == null) {
        return null;
      }
      try {
        ProtoBuf.Class classProto=ProtoBuf.Class.parseFrom(stream);
        Name expectedShortName=classId.getRelativeClassName().shortName();
        Name actualShortName=nameResolver.getName(classProto.getName());
        if (!actualShortName.isSpecial() && !actualShortName.equals(expectedShortName)) {
          return null;
        }
        return new ClassData(nameResolver,classProto);
      }
 catch (      IOException e) {
        throw new IllegalStateException(e);
      }
    }
    @Nullable @Override public NamespaceDescriptor findPackage(    @NotNull FqName fqName){
      return fqName.equals(KotlinBuiltIns.BUILT_INS_PACKAGE_FQ_NAME) ? BuiltinsNamespaceDescriptorImpl.this : null;
    }
    @NotNull @Override public Collection<Name> getClassNames(    @NotNull FqName packageName){
      return packageName.equals(KotlinBuiltIns.BUILT_INS_PACKAGE_FQ_NAME) ? classNames.compute() : Collections.<Name>emptyList();
    }
  }
;
  members=new DeserializedPackageMemberScope(storageManager,this,UNSUPPORTED,descriptorFinder,loadPackage(),nameResolver);
}
