{
  D candidate=candidateCall.getCandidateDescriptor();
  List<ValueParameterDescriptor> valueParameters=candidate.getValueParameters();
  List<JetFunctionLiteralArgument> functionLiteralArguments=call.getFunctionLiteralArguments();
  if (!functionLiteralArguments.isEmpty()) {
    JetFunctionLiteralArgument functionLiteralArgument=functionLiteralArguments.get(0);
    JetExpression possiblyLabeledFunctionLiteral=functionLiteralArgument.getArgumentExpression();
    if (valueParameters.isEmpty()) {
      report(TOO_MANY_ARGUMENTS.on(possiblyLabeledFunctionLiteral,candidate));
      setStatus(ERROR);
    }
 else {
      ValueParameterDescriptor valueParameterDescriptor=valueParameters.get(valueParameters.size() - 1);
      if (valueParameterDescriptor.getVarargElementType() != null) {
        report(VARARG_OUTSIDE_PARENTHESES.on(possiblyLabeledFunctionLiteral));
        setStatus(ERROR);
      }
 else {
        if (!usedParameters.add(valueParameterDescriptor)) {
          report(TOO_MANY_ARGUMENTS.on(possiblyLabeledFunctionLiteral,candidate));
          setStatus(WEAK_ERROR);
        }
 else {
          putVararg(valueParameterDescriptor,functionLiteralArgument);
        }
      }
    }
    for (int i=1; i < functionLiteralArguments.size(); i++) {
      JetExpression argument=functionLiteralArguments.get(i).getArgumentExpression();
      report(MANY_FUNCTION_LITERAL_ARGUMENTS.on(argument));
      setStatus(WEAK_ERROR);
    }
  }
}
