{
  FunctionDescriptor newDescriptor=descriptor.copy(descriptor.getContainingDeclaration(),Modality.OPEN,descriptor.getVisibility(),descriptor.getKind(),true);
  newDescriptor.addOverriddenDescriptor(descriptor);
  JetType returnType=descriptor.getReturnType();
  KotlinBuiltIns builtIns=KotlinBuiltIns.getInstance();
  boolean returnsNotUnit=returnType != null && !builtIns.getUnitType().equals(returnType);
  boolean isAbstract=descriptor.getModality() == Modality.ABSTRACT;
  String delegation=generateUnsupportedOrSuperCall(classOrObject,descriptor);
  String body="{" + (returnsNotUnit && !isAbstract ? "return " : "") + delegation+ "}";
  return JetPsiFactory(classOrObject.getProject()).createFunction(OVERRIDE_RENDERER.render(newDescriptor) + body);
}
