{
  MethodNode transformedNode=markPlacesForInlineAndRemoveInlinable(node,labelOwner,finallyDeepShift);
  Label end=new Label();
  transformedNode=doInline(transformedNode);
  removeClosureAssertions(transformedNode);
  transformedNode.instructions.resetLabels();
  MethodNode resultNode=new MethodNode(InlineCodegenUtil.API,transformedNode.access,transformedNode.name,transformedNode.desc,transformedNode.signature,ArrayUtil.toStringArray(transformedNode.exceptions));
  RemapVisitor visitor=new RemapVisitor(resultNode,remapper,nodeRemapper);
  try {
    transformedNode.accept(visitor);
  }
 catch (  Exception e) {
    throw wrapException(e,transformedNode,"couldn't inline method call");
  }
  resultNode.visitLabel(end);
  if (inliningContext.isRoot()) {
    StackValue remapValue=remapper.remap(parameters.getArgsSizeOnStack() + 1).value;
    InternalFinallyBlockInliner.processInlineFunFinallyBlocks(resultNode,lambdasFinallyBlocks,((StackValue.Local)remapValue).index);
  }
  processReturns(resultNode,labelOwner,remapReturn,end);
  resultNode.accept(new MethodBodyVisitor(adapter));
  sourceMapper.endMapping();
  return result;
}
