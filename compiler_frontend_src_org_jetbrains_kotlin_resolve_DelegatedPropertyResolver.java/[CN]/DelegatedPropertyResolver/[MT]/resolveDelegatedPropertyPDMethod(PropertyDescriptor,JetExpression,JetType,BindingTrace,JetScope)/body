{
  TemporaryBindingTrace traceToResolvePDMethod=TemporaryBindingTrace.create(trace,"Trace to resolve propertyDelegated method in delegated property");
  ExpressionTypingContext context=ExpressionTypingContext.newContext(additionalCheckerProvider,traceToResolvePDMethod,scope,DataFlowInfo.EMPTY,TypeUtils.NO_EXPECTED_TYPE);
  List<JetExpression> arguments=Lists.newArrayList();
  JetPsiFactory psiFactory=JetPsiFactory(delegateExpression);
  arguments.add(createExpressionForPropertyMetadata(psiFactory,propertyDescriptor));
  JetReferenceExpression fakeCalleeExpression=psiFactory.createSimpleName(PROPERTY_DELEGATED_FUNCTION_NAME.asString());
  ExpressionReceiver receiver=new ExpressionReceiver(delegateExpression,delegateType);
  Call call=CallMaker.makeCallWithExpressions(fakeCalleeExpression,receiver,null,fakeCalleeExpression,arguments,Call.CallType.DEFAULT);
  OverloadResolutionResults<FunctionDescriptor> functionResults=callResolver.resolveCallWithGivenName(context,call,fakeCalleeExpression,PROPERTY_DELEGATED_FUNCTION_NAME);
  if (!functionResults.isSuccess()) {
    String expectedFunction=renderCall(call,traceToResolvePDMethod.getBindingContext());
    if (functionResults.isIncomplete() || functionResults.isSingleResult() || functionResults.getResultCode() == OverloadResolutionResults.Code.MANY_FAILED_CANDIDATES) {
      trace.report(DELEGATE_PD_METHOD_NONE_APPLICABLE.on(delegateExpression,expectedFunction,functionResults.getResultingCalls()));
    }
 else     if (functionResults.isAmbiguity()) {
      trace.report(DELEGATE_SPECIAL_FUNCTION_AMBIGUITY.on(delegateExpression,expectedFunction,functionResults.getResultingCalls()));
    }
    return;
  }
  trace.record(DELEGATED_PROPERTY_PD_RESOLVED_CALL,propertyDescriptor,functionResults.getResultingCall());
}
