{
  KtPropertyAccessor getter=property.getGetter();
  if (getter != null && getter.hasBody()) {
    trace.report(ACCESSOR_FOR_DELEGATED_PROPERTY.on(getter));
  }
  KtPropertyAccessor setter=property.getSetter();
  if (setter != null && setter.hasBody()) {
    trace.report(ACCESSOR_FOR_DELEGATED_PROPERTY.on(setter));
  }
  LexicalScope delegateFunctionsScope;
  LexicalScope initializerScope;
  if (variableDescriptor instanceof PropertyDescriptor) {
    PropertyDescriptor propertyDescriptor=(PropertyDescriptor)variableDescriptor;
    delegateFunctionsScope=ScopeUtils.makeScopeForDelegateConventionFunctions(propertyHeaderScope,propertyDescriptor);
    initializerScope=ScopeUtils.makeScopeForPropertyInitializer(propertyHeaderScope,propertyDescriptor);
  }
 else {
    delegateFunctionsScope=initializerScope=propertyHeaderScope;
  }
  KotlinType delegateType=resolveDelegateExpression(delegateExpression,property,variableDescriptor,initializerScope,trace,outerDataFlowInfo);
  resolveDelegatedPropertyGetMethod(variableDescriptor,delegateExpression,delegateType,trace,delegateFunctionsScope,outerDataFlowInfo);
  if (property.isVar()) {
    resolveDelegatedPropertySetMethod(variableDescriptor,delegateExpression,delegateType,trace,delegateFunctionsScope,outerDataFlowInfo);
  }
  resolveDelegatedPropertyPDMethod(variableDescriptor,delegateExpression,delegateType,trace,delegateFunctionsScope,outerDataFlowInfo);
}
