{
  if (successfulCandidates.size() > 0) {
    if (successfulCandidates.size() != 1) {
      Map<Descriptor,Descriptor> cleanCandidates=Maps.newLinkedHashMap(successfulCandidates);
      cleanCandidates.keySet().removeAll(dirtyCandidates);
      if (cleanCandidates.isEmpty()) {
        cleanCandidates=successfulCandidates;
      }
      Descriptor maximallySpecific=overloadingConflictResolver.findMaximallySpecific(cleanCandidates,traces,false);
      if (maximallySpecific != null) {
        return OverloadResolutionResult.success(maximallySpecific);
      }
      Descriptor maximallySpecificGenericsDiscriminated=overloadingConflictResolver.findMaximallySpecific(cleanCandidates,traces,true);
      if (maximallySpecificGenericsDiscriminated != null) {
        return OverloadResolutionResult.success(maximallySpecificGenericsDiscriminated);
      }
      Set<Descriptor> noOverrides=filterOverrides(successfulCandidates.keySet());
      if (dirtyCandidates.isEmpty()) {
        tracing.ambiguity(trace,noOverrides);
      }
      tracing.recordAmbiguity(trace,noOverrides);
      return OverloadResolutionResult.ambiguity(noOverrides);
    }
 else {
      Map.Entry<Descriptor,Descriptor> entry=successfulCandidates.entrySet().iterator().next();
      Descriptor functionDescriptor=entry.getKey();
      Descriptor result=entry.getValue();
      TemporaryBindingTrace temporaryTrace=traces.get(functionDescriptor);
      temporaryTrace.commit();
      return OverloadResolutionResult.success(result);
    }
  }
 else   if (!failedCandidates.isEmpty()) {
    if (failedCandidates.size() != 1) {
      Set<Descriptor> noOverrides=filterOverrides(failedCandidates);
      if (noOverrides.size() != 1) {
        tracing.noneApplicable(trace,noOverrides);
        tracing.recordAmbiguity(trace,noOverrides);
        return OverloadResolutionResult.manyFailedCandidates(noOverrides);
      }
      failedCandidates=noOverrides;
    }
    Descriptor functionDescriptor=failedCandidates.iterator().next();
    TemporaryBindingTrace temporaryTrace=traces.get(functionDescriptor);
    temporaryTrace.commit();
    return OverloadResolutionResult.singleFailedCandidate(failedCandidates.iterator().next());
  }
 else {
    tracing.unresolvedReference(trace);
    return OverloadResolutionResult.nameNotFound();
  }
}
