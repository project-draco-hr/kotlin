{
  ResolvedCallImpl<D> candidateCall=context.candidateCall;
  candidateCall.setTrace(temporaryTrace);
  D candidate=candidateCall.getCandidateDescriptor();
  context.tracing.bindReference(context.trace,candidateCall);
  if (ErrorUtils.isError(candidate)) {
    candidateCall.addStatus(SUCCESS);
    checkTypesWithNoCallee(context.toBasic());
    return;
  }
  if (!Visibilities.isVisible(candidate,context.scope.getContainingDeclaration())) {
    candidateCall.addStatus(OTHER_ERROR);
    context.tracing.invisibleMember(context.trace,candidate);
    return;
  }
  ValueArgumentsToParametersMapper.Status argumentMappingStatus=ValueArgumentsToParametersMapper.mapValueArgumentsToParameters(context.call,context.tracing,candidateCall);
  if (!argumentMappingStatus.isSuccess()) {
    candidateCall.addStatus(OTHER_ERROR);
    if (argumentMappingStatus == ValueArgumentsToParametersMapper.Status.ERROR) {
      checkTypesWithNoCallee(context.toBasic());
      return;
    }
  }
  List<JetTypeProjection> jetTypeArguments=context.call.getTypeArguments();
  if (jetTypeArguments.isEmpty()) {
    if (!candidate.getTypeParameters().isEmpty()) {
      candidateCall.addStatus(inferTypeArguments(context));
    }
 else {
      candidateCall.addStatus(checkAllValueArguments(context));
    }
  }
 else {
    List<JetType> typeArguments=new ArrayList<JetType>();
    for (    JetTypeProjection projection : jetTypeArguments) {
      if (projection.getProjectionKind() != JetProjectionKind.NONE) {
        context.trace.report(PROJECTION_ON_NON_CLASS_TYPE_ARGUMENT.on(projection));
      }
      JetTypeReference typeReference=projection.getTypeReference();
      if (typeReference != null) {
        typeArguments.add(typeResolver.resolveType(context.scope,typeReference,context.trace,true));
      }
 else {
        typeArguments.add(ErrorUtils.createErrorType("Star projection in a call"));
      }
    }
    int expectedTypeArgumentCount=candidate.getTypeParameters().size();
    if (expectedTypeArgumentCount == jetTypeArguments.size()) {
      checkGenericBoundsInAFunctionCall(jetTypeArguments,typeArguments,candidate,context.trace);
      Map<TypeConstructor,TypeProjection> substitutionContext=FunctionDescriptorUtil.createSubstitutionContext((FunctionDescriptor)candidate,typeArguments);
      D substitutedDescriptor=(D)candidate.substitute(TypeSubstitutor.create(substitutionContext));
      candidateCall.setResultingDescriptor(substitutedDescriptor);
      replaceValueParametersWithSubstitutedOnes(candidateCall,substitutedDescriptor);
      List<TypeParameterDescriptor> typeParameters=candidateCall.getCandidateDescriptor().getTypeParameters();
      for (int i=0; i < typeParameters.size(); i++) {
        TypeParameterDescriptor typeParameterDescriptor=typeParameters.get(i);
        candidateCall.recordTypeArgument(typeParameterDescriptor,typeArguments.get(i));
      }
      candidateCall.addStatus(checkAllValueArguments(context));
    }
 else {
      candidateCall.addStatus(OTHER_ERROR);
      context.tracing.wrongNumberOfTypeArguments(context.trace,expectedTypeArgumentCount);
    }
  }
  task.performAdvancedChecks(candidate,context.trace,context.tracing);
  JetSuperExpression superExpression=TaskPrioritizer.getReceiverSuper(candidateCall.getReceiverArgument());
  if (superExpression != null) {
    context.trace.report(SUPER_IS_NOT_AN_EXPRESSION.on(superExpression,superExpression.getText()));
    candidateCall.addStatus(OTHER_ERROR);
  }
  recordAutoCastIfNecessary(candidateCall.getReceiverArgument(),candidateCall.getTrace());
  recordAutoCastIfNecessary(candidateCall.getThisObject(),candidateCall.getTrace());
}
