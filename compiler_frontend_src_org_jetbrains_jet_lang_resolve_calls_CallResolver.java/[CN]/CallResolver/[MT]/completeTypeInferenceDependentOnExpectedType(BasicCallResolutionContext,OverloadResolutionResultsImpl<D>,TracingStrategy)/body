{
  if (CallResolverUtil.isInvokeCallOnVariable(context.call))   return results;
  if (!results.isSingleResult()) {
    argumentTypeResolver.checkTypesForFunctionArgumentsWithNoCallee(context);
    candidateResolver.completeNestedCallsForNotResolvedInvocation(context);
    return results;
  }
  ResolvedCallWithTrace<D> resolvedCall=results.getResultingCall();
  ResolvedCallImpl<D> callToCompleteInference=resolvedCall.getCallToCompleteTypeArgumentInference();
  Set<ValueArgument> unmappedArguments=callToCompleteInference.getUnmappedArguments();
  argumentTypeResolver.checkUnmappedArgumentTypes(context,unmappedArguments);
  candidateResolver.completeUnmappedArguments(context,unmappedArguments);
  CallCandidateResolutionContext<D> callCandidateResolutionContext=CallCandidateResolutionContext.createForCallBeingAnalyzed(callToCompleteInference,context,tracing);
  candidateResolver.completeTypeInferenceDependentOnExpectedTypeForCall(callCandidateResolutionContext,false);
  resolvedCall.markCallAsCompleted();
  if (callToCompleteInference.getStatus().isSuccess()) {
    return OverloadResolutionResultsImpl.success(resolvedCall);
  }
  return results;
}
