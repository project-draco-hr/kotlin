{
  if (CallResolverUtil.isInvokeCallOnVariable(context.call))   return results;
  if (!results.isSingleResult()) {
    argumentTypeResolver.checkTypesForFunctionArgumentsWithNoCallee(context);
    candidateResolver.completeNestedCallsForNotResolvedInvocation(context);
    candidateResolver.completeTypeInferenceForAllCandidates(context,results);
    return results;
  }
  MutableResolvedCall<D> resolvedCall=results.getResultingCall();
  Set<ValueArgument> unmappedArguments=resolvedCall.getUnmappedArguments();
  argumentTypeResolver.checkUnmappedArgumentTypes(context,unmappedArguments);
  candidateResolver.completeUnmappedArguments(context,unmappedArguments);
  CallCandidateResolutionContext<D> callCandidateResolutionContext=CallCandidateResolutionContext.createForCallBeingAnalyzed(resolvedCall,context,tracing);
  candidateResolver.completeTypeInferenceDependentOnExpectedTypeForCall(callCandidateResolutionContext,false);
  candidateResolver.completeTypeInferenceForAllCandidates(context,results);
  if (resolvedCall.getStatus().isSuccess()) {
    return OverloadResolutionResultsImpl.success(resolvedCall);
  }
  return results;
}
