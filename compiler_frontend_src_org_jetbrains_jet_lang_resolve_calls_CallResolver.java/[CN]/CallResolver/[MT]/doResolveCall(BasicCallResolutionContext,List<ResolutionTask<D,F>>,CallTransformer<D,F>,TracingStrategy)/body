{
  if (context.checkArguments == CheckValueArgumentsMode.ENABLED) {
    argumentTypeResolver.analyzeArgumentsAndRecordTypes(context);
  }
  TemporaryBindingTrace traceForFirstNonemptyCandidateSet=null;
  OverloadResolutionResultsImpl<F> resultsForFirstNonemptyCandidateSet=null;
  for (  ResolutionTask<D,F> task : prioritizedTasks) {
    TemporaryBindingTrace taskTrace=TemporaryBindingTrace.create(context.trace,"trace to resolve a task for",task.call.getCalleeExpression());
    OverloadResolutionResultsImpl<F> results=performResolutionGuardedForExtraFunctionLiteralArguments(task.replaceBindingTrace(taskTrace),callTransformer);
    if (results.isSuccess() || results.isAmbiguity()) {
      taskTrace.commit();
      return results;
    }
    if (results.getResultCode() == INCOMPLETE_TYPE_INFERENCE) {
      results.setTrace(taskTrace);
      return results;
    }
    boolean updateResults=traceForFirstNonemptyCandidateSet == null || (resultsForFirstNonemptyCandidateSet.getResultCode() == CANDIDATES_WITH_WRONG_RECEIVER && results.getResultCode() != CANDIDATES_WITH_WRONG_RECEIVER);
    if (!task.getCandidates().isEmpty() && !results.isNothing() && updateResults) {
      traceForFirstNonemptyCandidateSet=taskTrace;
      resultsForFirstNonemptyCandidateSet=results;
    }
  }
  if (traceForFirstNonemptyCandidateSet == null) {
    tracing.unresolvedReference(context.trace);
    argumentTypeResolver.checkTypesWithNoCallee(context,SHAPE_FUNCTION_ARGUMENTS);
    return OverloadResolutionResultsImpl.<F>nameNotFound();
  }
  traceForFirstNonemptyCandidateSet.commit();
  return resultsForFirstNonemptyCandidateSet;
}
