{
  ResolvedCallImpl<D> candidateCall=context.candidateCall;
  D candidate=candidateCall.getCandidateDescriptor();
  ResolutionDebugInfo.Data debugInfo=context.trace.get(ResolutionDebugInfo.RESOLUTION_DEBUG_INFO,context.call.getCallElement());
  ConstraintsSystemImpl constraintsSystem=new ConstraintsSystemImpl();
  CallableDescriptor candidateWithFreshVariables=FunctionDescriptorUtil.alphaConvertTypeParameters(candidate);
  for (  TypeParameterDescriptor typeParameterDescriptor : candidateWithFreshVariables.getTypeParameters()) {
    constraintsSystem.registerTypeVariable(typeParameterDescriptor,Variance.INVARIANT);
  }
  TypeSubstitutor substituteDontCare=ConstraintSystemWithPriorities.makeConstantSubstitutor(candidateWithFreshVariables.getTypeParameters(),ConstraintsSystemImpl.DONT_CARE);
  for (  Map.Entry<ValueParameterDescriptor,ResolvedValueArgument> entry : candidateCall.getValueArguments().entrySet()) {
    ResolvedValueArgument resolvedValueArgument=entry.getValue();
    ValueParameterDescriptor valueParameterDescriptor=candidateWithFreshVariables.getValueParameters().get(entry.getKey().getIndex());
    for (    ValueArgument valueArgument : resolvedValueArgument.getArguments()) {
      if (JetPsiUtil.isFunctionLiteralWithoutDeclaredParameterTypes(valueArgument.getArgumentExpression()))       continue;
      boolean success=addConstraintForValueArgument(valueArgument,valueParameterDescriptor,substituteDontCare,constraintsSystem,context);
      if (!success) {
        candidateCall.argumentHasNoType();
      }
    }
  }
  ReceiverDescriptor receiverArgument=candidateCall.getReceiverArgument();
  ReceiverDescriptor receiverParameter=candidateWithFreshVariables.getReceiverParameter();
  if (receiverArgument.exists() && receiverParameter.exists()) {
    constraintsSystem.addSupertypeConstraint(receiverParameter.getType(),receiverArgument.getType(),ConstraintPosition.RECEIVER_POSITION);
  }
  Map<TypeParameterDescriptor,TypeParameterDescriptor> typeVariablesMap=Maps.newLinkedHashMap();
  for (  TypeParameterDescriptor typeParameterDescriptor : candidate.getTypeParameters()) {
    typeVariablesMap.put(candidateWithFreshVariables.getTypeParameters().get(typeParameterDescriptor.getIndex()),typeParameterDescriptor);
  }
  ConstraintsSystem constraintsBuilderWithRightTypeParameters=constraintsSystem.replaceTypeVariables(typeVariablesMap);
  candidateCall.setConstraintsSystem(constraintsBuilderWithRightTypeParameters);
  if (!constraintsSystem.hasTypeConstructorMismatch() && !constraintsSystem.hasConflictingConstraints()) {
    candidateCall.setHasUnknownTypeParameters(true);
    return SUCCESS;
  }
 else {
    ValueArgumentsCheckingResult checkingResult=checkAllValueArguments(context);
    ResolutionStatus argumentsStatus=checkingResult.status;
    List<JetType> argumentTypes=checkingResult.argumentTypes;
    JetType receiverType=candidateCall.getReceiverArgument().exists() ? candidateCall.getReceiverArgument().getType() : null;
    reportTypeInferenceFailed(context.trace,context.call,InferenceErrorData.create(candidate,constraintsBuilderWithRightTypeParameters,argumentTypes,receiverType));
    return TYPE_INFERENCE_ERROR.combine(argumentsStatus);
  }
}
