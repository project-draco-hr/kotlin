{
  ResolvedCallImpl<D> candidateCall=context.candidateCall;
  D candidate=candidateCall.getCandidateDescriptor();
  ResolutionDebugInfo.Data debugInfo=context.trace.get(ResolutionDebugInfo.RESOLUTION_DEBUG_INFO,context.call.getCallElement());
  ConstraintSystem constraintSystem=new ConstraintSystemImpl();
  CallableDescriptor candidateWithFreshVariables=FunctionDescriptorUtil.alphaConvertTypeParameters(candidate);
  for (  TypeParameterDescriptor typeParameterDescriptor : candidateWithFreshVariables.getTypeParameters()) {
    constraintSystem.registerTypeVariable(typeParameterDescriptor,Variance.INVARIANT);
  }
  TypeSubstitutor substituteDontCare=ConstraintSystemWithPriorities.makeConstantSubstitutor(candidateWithFreshVariables.getTypeParameters(),ConstraintSystem.DONT_CARE);
  for (  Map.Entry<ValueParameterDescriptor,ResolvedValueArgument> entry : candidateCall.getValueArguments().entrySet()) {
    ResolvedValueArgument resolvedValueArgument=entry.getValue();
    ValueParameterDescriptor valueParameterDescriptor=candidateWithFreshVariables.getValueParameters().get(entry.getKey().getIndex());
    for (    ValueArgument valueArgument : resolvedValueArgument.getArguments()) {
      if (JetPsiUtil.isFunctionLiteralWithoutDeclaredParameterTypes(valueArgument.getArgumentExpression()))       continue;
      JetType effectiveExpectedType=getEffectiveExpectedType(valueParameterDescriptor,valueArgument);
      TemporaryBindingTrace traceForUnknown=TemporaryBindingTrace.create(context.trace);
      JetExpression argumentExpression=valueArgument.getArgumentExpression();
      JetType type=argumentExpression != null ? expressionTypingServices.getType(context.scope,argumentExpression,substituteDontCare.substitute(valueParameterDescriptor.getType(),Variance.INVARIANT),context.dataFlowInfo,traceForUnknown) : null;
      if (type != null && !ErrorUtils.isErrorType(type)) {
        constraintSystem.addSubtypingConstraint(type,effectiveExpectedType,ConstraintPosition.valueParameterPosition(valueParameterDescriptor.getIndex()));
      }
 else {
        candidateCall.argumentHasNoType();
      }
    }
  }
  ReceiverDescriptor receiverArgument=candidateCall.getReceiverArgument();
  ReceiverDescriptor receiverParameter=candidateWithFreshVariables.getReceiverParameter();
  if (receiverArgument.exists() && receiverParameter.exists()) {
    constraintSystem.addSubtypingConstraint(receiverArgument.getType(),receiverParameter.getType(),ConstraintPosition.RECEIVER_POSITION);
  }
  ConstraintSystemImpl constraintSystemWithRightTypeParameters=new ConstraintSystemImpl(constraintSystem.hasError(),constraintSystem.getErrorConstraintPositions());
  for (  TypeParameterDescriptor typeParameterDescriptor : candidate.getTypeParameters()) {
    TypeBounds typeBounds=constraintSystem.getTypeBounds(candidateWithFreshVariables.getTypeParameters().get(typeParameterDescriptor.getIndex()));
    candidateCall.recordTypeBounds(typeParameterDescriptor,typeBounds);
    constraintSystemWithRightTypeParameters.registerTypeVariable(typeParameterDescriptor,typeBounds);
  }
  if (!constraintSystem.hasContradiction()) {
    candidateCall.setHasUnknownTypeParameters(true);
    return SUCCESS;
  }
 else {
    List<JetType> argumentTypes=Lists.newArrayList();
    ResolutionStatus argumentsStatus=checkAllValueArguments(context,argumentTypes);
    JetType receiverType=candidateCall.getReceiverArgument().exists() ? candidateCall.getReceiverArgument().getType() : null;
    reportTypeInferenceFailed(context.trace,context.call,InferenceErrorData.create(candidate,constraintSystemWithRightTypeParameters,argumentTypes,receiverType));
    return TYPE_INFERENCE_ERROR.combine(argumentsStatus);
  }
}
