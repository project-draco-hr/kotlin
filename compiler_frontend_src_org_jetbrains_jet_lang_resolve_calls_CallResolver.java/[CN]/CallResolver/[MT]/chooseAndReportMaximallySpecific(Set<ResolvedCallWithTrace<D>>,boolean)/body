{
  if (candidates.size() != 1) {
    boolean dirty=false;
    Set<ResolvedCallWithTrace<D>> cleanCandidates=Sets.newLinkedHashSet(candidates);
    for (Iterator<ResolvedCallWithTrace<D>> iterator=cleanCandidates.iterator(); iterator.hasNext(); ) {
      ResolvedCallWithTrace<D> candidate=iterator.next();
      if (candidate.hasUnknownTypeParameters()) {
        dirty=true;
      }
      if (candidate.isDirty()) {
        iterator.remove();
      }
    }
    if (cleanCandidates.isEmpty()) {
      cleanCandidates=candidates;
    }
    ResolvedCallWithTrace<D> maximallySpecific=overloadingConflictResolver.findMaximallySpecific(cleanCandidates,false);
    if (maximallySpecific != null) {
      return OverloadResolutionResultsImpl.success(maximallySpecific);
    }
    if (discriminateGenerics) {
      ResolvedCallWithTrace<D> maximallySpecificGenericsDiscriminated=overloadingConflictResolver.findMaximallySpecific(cleanCandidates,true);
      if (maximallySpecificGenericsDiscriminated != null) {
        return OverloadResolutionResultsImpl.success(maximallySpecificGenericsDiscriminated);
      }
    }
    Set<ResolvedCallWithTrace<D>> noOverrides=OverridingUtil.filterOverrides(candidates,MAP_TO_RESULT);
    if (dirty) {
      return OverloadResolutionResultsImpl.dirty(candidates);
    }
    return OverloadResolutionResultsImpl.ambiguity(noOverrides);
  }
 else {
    ResolvedCallWithTrace<D> result=candidates.iterator().next();
    TemporaryBindingTrace temporaryTrace=result.getTrace();
    temporaryTrace.commit();
    if (result.hasUnknownTypeParameters()) {
      return OverloadResolutionResultsImpl.dirty(result);
    }
    return OverloadResolutionResultsImpl.success(result);
  }
}
