{
  ResolutionDebugInfo.Data debugInfo=ResolutionDebugInfo.create();
  context.trace.record(ResolutionDebugInfo.RESOLUTION_DEBUG_INFO,context.call.getCallElement(),debugInfo);
  context.trace.record(RESOLUTION_SCOPE,context.call.getCalleeExpression(),context.scope);
  if (context.dataFlowInfo.hasTypeInfoConstraints()) {
    context.trace.record(NON_DEFAULT_EXPRESSION_DATA_FLOW,context.call.getCalleeExpression(),context.dataFlowInfo);
  }
  debugInfo.set(ResolutionDebugInfo.TASKS,prioritizedTasks);
  if (context.checkArguments == CheckValueArgumentsMode.ENABLED) {
    argumentTypeResolver.analyzeArgumentsAndRecordTypes(context);
  }
  TemporaryBindingTrace traceForFirstNonemptyCandidateSet=null;
  OverloadResolutionResultsImpl<F> resultsForFirstNonemptyCandidateSet=null;
  for (  ResolutionTask<D,F> task : prioritizedTasks) {
    TemporaryBindingTrace taskTrace=TemporaryBindingTrace.create(context.trace,"trace to resolve a task for",task.reference);
    OverloadResolutionResultsImpl<F> results=performResolutionGuardedForExtraFunctionLiteralArguments(task.replaceBindingTrace(taskTrace),callTransformer);
    if (results.isSuccess() || results.isAmbiguity()) {
      taskTrace.commit();
      if (results.isSuccess()) {
        debugInfo.set(ResolutionDebugInfo.RESULT,results.getResultingCall());
      }
      return results;
    }
    if (results.getResultCode() == INCOMPLETE_TYPE_INFERENCE) {
      results.setTrace(taskTrace);
      return results;
    }
    boolean updateResults=traceForFirstNonemptyCandidateSet == null || (resultsForFirstNonemptyCandidateSet.getResultCode() == CANDIDATES_WITH_WRONG_RECEIVER && results.getResultCode() != CANDIDATES_WITH_WRONG_RECEIVER);
    if (!task.getCandidates().isEmpty() && !results.isNothing() && updateResults) {
      traceForFirstNonemptyCandidateSet=taskTrace;
      resultsForFirstNonemptyCandidateSet=results;
    }
  }
  if (traceForFirstNonemptyCandidateSet != null) {
    traceForFirstNonemptyCandidateSet.commit();
    if (resultsForFirstNonemptyCandidateSet.isSingleResult()) {
      debugInfo.set(ResolutionDebugInfo.RESULT,resultsForFirstNonemptyCandidateSet.getResultingCall());
    }
  }
 else {
    context.trace.report(UNRESOLVED_REFERENCE.on(reference,reference));
    argumentTypeResolver.checkTypesWithNoCallee(context,RESOLVE_FUNCTION_ARGUMENTS);
  }
  return resultsForFirstNonemptyCandidateSet != null ? resultsForFirstNonemptyCandidateSet : OverloadResolutionResultsImpl.<F>nameNotFound();
}
