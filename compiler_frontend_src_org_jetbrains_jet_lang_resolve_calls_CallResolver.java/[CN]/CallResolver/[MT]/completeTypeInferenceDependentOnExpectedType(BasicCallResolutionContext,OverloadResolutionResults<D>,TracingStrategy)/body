{
  if (resultsWithIncompleteTypeInference.getResultCode() != OverloadResolutionResults.Code.INCOMPLETE_TYPE_INFERENCE) {
    return resultsWithIncompleteTypeInference;
  }
  Set<ResolvedCallWithTrace<D>> resultingCalls=null;
  if (resultsWithIncompleteTypeInference.isSingleResult()) {
    ResolvedCallWithTrace<D> resolvedCall=(ResolvedCallWithTrace<D>)resultsWithIncompleteTypeInference.getResultingCall();
    if (resolvedCall.hasUnknownTypeParameters() && resolvedCall instanceof ResolvedCallImpl) {
      ResolvedCallImpl<D> copy=CallResolverUtil.copy((ResolvedCallImpl<D>)resolvedCall,context);
      candidateResolver.completeTypeInferenceDependentOnExpectedTypeForCall(CallCandidateResolutionContext.createForCallBeingAnalyzed(copy,context,tracing));
      resultingCalls=Collections.<ResolvedCallWithTrace<D>>singleton(copy);
    }
  }
  if (resultingCalls == null) {
    resultingCalls=(Set<ResolvedCallWithTrace<D>>)resultsWithIncompleteTypeInference.getResultingCalls();
  }
  OverloadResolutionResultsImpl<D> results=ResolutionResultsHandler.INSTANCE.computeResultAndReportErrors(context.trace,tracing,resultingCalls);
  if (!results.isSingleResult()) {
    argumentTypeResolver.checkTypesWithNoCallee(context,RESOLVE_FUNCTION_ARGUMENTS);
  }
  return results;
}
