{
  for (  ResolutionCandidate<D> resolutionCandidate : task.getCandidates()) {
    TemporaryBindingTrace candidateTrace=TemporaryBindingTrace.create(task.trace,"trace to resolve candidate");
    Collection<CallCandidateResolutionContext<D>> contexts=callTransformer.createCallContexts(resolutionCandidate,task,candidateTrace);
    for (    CallCandidateResolutionContext<D> context : contexts) {
      candidateResolver.performResolutionForCandidateCall(context,task);
      task.tracing.bindReference(context.candidateCall.getTrace(),context.candidateCall);
      Collection<MutableResolvedCall<F>> calls=callTransformer.transformCall(context,this,task);
      for (      MutableResolvedCall<F> call : calls) {
        task.tracing.bindReference(call.getTrace(),call);
        task.tracing.bindResolvedCall(call.getTrace(),call);
        task.addResolvedCall(call);
      }
    }
  }
  OverloadResolutionResultsImpl<F> results=ResolutionResultsHandler.INSTANCE.computeResultAndReportErrors(task.trace,task.tracing,task.getResolvedCalls());
  if (!results.isSingleResult() && !results.isIncomplete()) {
    argumentTypeResolver.checkTypesWithNoCallee(task.toBasic());
  }
  return results;
}
