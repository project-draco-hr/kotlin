{
  List<ResolvedCall<FunctionDescriptor>> result=Lists.newArrayList();
  if (receiver.exists()) {
    Collection<ResolvedCall<FunctionDescriptor>> extensionFunctionDescriptors=ResolvedCall.convertCollection(scope.getFunctions(name));
    List<ResolvedCall<FunctionDescriptor>> nonlocal=Lists.newArrayList();
    List<ResolvedCall<FunctionDescriptor>> local=Lists.newArrayList();
    TaskPrioritizer.splitLexicallyLocalDescriptors(extensionFunctionDescriptors,scope.getContainingDeclaration(),local,nonlocal);
    if (findExtensionFunctions(local,receiver,parameterTypes,result)) {
      return result;
    }
    Collection<ResolvedCall<FunctionDescriptor>> functionDescriptors=ResolvedCall.convertCollection(receiver.getType().getMemberScope().getFunctions(name));
    if (lookupExactSignature(functionDescriptors,parameterTypes,result)) {
      return result;
    }
    findExtensionFunctions(nonlocal,receiver,parameterTypes,result);
    return result;
  }
 else {
    lookupExactSignature(ResolvedCall.convertCollection(scope.getFunctions(name)),parameterTypes,result);
    return result;
  }
}
