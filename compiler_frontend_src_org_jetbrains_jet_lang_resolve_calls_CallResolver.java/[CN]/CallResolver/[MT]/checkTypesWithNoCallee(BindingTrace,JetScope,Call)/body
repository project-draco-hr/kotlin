{
  for (  ValueArgument valueArgument : call.getValueArguments()) {
    JetExpression argumentExpression=valueArgument.getArgumentExpression();
    if (argumentExpression != null) {
      typeInferrer.getServices(trace).getType(scope,argumentExpression,NO_EXPECTED_TYPE);
    }
  }
  for (  JetExpression expression : call.getFunctionLiteralArguments()) {
    typeInferrer.getServices(trace).getType(scope,expression,NO_EXPECTED_TYPE);
  }
  for (  JetTypeProjection typeProjection : call.getTypeArguments()) {
    new TypeResolver(semanticServices,trace,true).resolveType(scope,typeProjection.getTypeReference());
  }
}
