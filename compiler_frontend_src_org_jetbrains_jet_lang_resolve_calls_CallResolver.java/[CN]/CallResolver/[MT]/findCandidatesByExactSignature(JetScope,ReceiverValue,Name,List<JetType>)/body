{
  List<ResolutionCandidate<FunctionDescriptor>> result=Lists.newArrayList();
  if (receiver.exists()) {
    Collection<ResolutionCandidate<FunctionDescriptor>> extensionFunctionDescriptors=ResolutionCandidate.convertCollection(scope.getFunctions(name),false);
    List<ResolutionCandidate<FunctionDescriptor>> nonlocal=Lists.newArrayList();
    List<ResolutionCandidate<FunctionDescriptor>> local=Lists.newArrayList();
    TaskPrioritizer.splitLexicallyLocalDescriptors(extensionFunctionDescriptors,scope.getContainingDeclaration(),local,nonlocal);
    if (findExtensionFunctions(local,receiver,parameterTypes,result)) {
      return result;
    }
    Collection<ResolutionCandidate<FunctionDescriptor>> functionDescriptors=ResolutionCandidate.convertCollection(receiver.getType().getMemberScope().getFunctions(name),false);
    if (lookupExactSignature(functionDescriptors,parameterTypes,result)) {
      return result;
    }
    findExtensionFunctions(nonlocal,receiver,parameterTypes,result);
    return result;
  }
 else {
    lookupExactSignature(ResolutionCandidate.convertCollection(scope.getFunctions(name),false),parameterTypes,result);
    return result;
  }
}
