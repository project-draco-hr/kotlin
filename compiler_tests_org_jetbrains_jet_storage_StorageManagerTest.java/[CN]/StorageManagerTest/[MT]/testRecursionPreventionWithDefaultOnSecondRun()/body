{
@SuppressWarnings("unchecked") class C {
    NotNullLazyValue<String> rec=m.createLazyValueWithPostCompute(new Computable<String>(){
      @Override public String compute(){
        return rec.compute();
      }
    }
,new Function<Boolean,String>(){
      @Override public String fun(      Boolean firstTime){
        if (firstTime) {
          throw new ReenteringLazyValueComputationException();
        }
        return "second";
      }
    }
,new Consumer<String>(){
      @Override public void consume(      String s){
        fail("Recursion-tolerating value should not be post computed");
      }
    }
);
  }
  C c=new C();
  try {
    c.rec.compute();
    fail();
  }
 catch (  ReenteringLazyValueComputationException e) {
  }
  assertEquals("second",c.rec.compute());
}
