{
  final Set<FunctionDescriptor> functions=new HashSet<FunctionDescriptor>();
  Set<SimpleFunctionDescriptor> functionsFromSupertypes=null;
  if (owner instanceof ClassDescriptor) {
    functionsFromSupertypes=getFunctionsFromSupertypes(methodName,owner);
  }
  Set<SimpleFunctionDescriptor> functionsFromCurrent=Sets.newHashSet();
  for (  PsiMethodWrapper method : namedMembers.getMethods()) {
    SimpleFunctionDescriptor function=resolveMethodToFunctionDescriptor(psiClass,method,scopeData,owner);
    if (function != null) {
      functionsFromCurrent.add(function);
    }
  }
  if (owner instanceof ClassDescriptor) {
    ClassDescriptor classDescriptor=(ClassDescriptor)owner;
    OverrideResolver.generateOverridesInFunctionGroup(methodName,functionsFromSupertypes,functionsFromCurrent,classDescriptor,new OverrideResolver.DescriptorSink(){
      @Override public void addToScope(      @NotNull CallableMemberDescriptor fakeOverride){
        functions.add((FunctionDescriptor)fakeOverride);
      }
      @Override public void conflict(      @NotNull CallableMemberDescriptor fromSuper,      @NotNull CallableMemberDescriptor fromCurrent){
      }
    }
);
  }
  OverrideResolver.resolveUnknownVisibilities(functions,trace);
  functions.addAll(functionsFromCurrent);
  if (DescriptorUtils.isEnumClassObject(owner)) {
    for (    FunctionDescriptor functionDescriptor : Lists.newArrayList(functions)) {
      if (isEnumSpecialMethod(functionDescriptor)) {
        functions.remove(functionDescriptor);
      }
    }
  }
  return functions;
}
