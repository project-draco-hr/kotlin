{
  List<FunctionDescriptor> superFunctions=SignaturesPropagation.getSuperFunctionsForMethod(method,trace);
  for (  FunctionDescriptor superFunction : superFunctions) {
    TypeSubstitutor substitutor=SubstitutionUtils.buildDeepSubstitutor(((ClassDescriptor)functionDescriptor.getContainingDeclaration()).getDefaultType());
    FunctionDescriptor superFunctionSubstituted=superFunction.substitute(substitutor);
    if (!OverridingUtil.isReturnTypeOkForOverride(JetTypeChecker.INSTANCE,superFunctionSubstituted,functionDescriptor)) {
      throw new IllegalStateException("Loaded Java method overrides another, but resolved as Kotlin function, doesn't.\n" + "super function = " + superFunction + "\n"+ "this function = "+ functionDescriptor+ "\n"+ "this method = "+ PsiFormatUtil.getExternalName(method.getPsiMethod())+ "\n"+ "@KotlinSignature = "+ method.getSignatureAnnotation().signature());
    }
  }
}
