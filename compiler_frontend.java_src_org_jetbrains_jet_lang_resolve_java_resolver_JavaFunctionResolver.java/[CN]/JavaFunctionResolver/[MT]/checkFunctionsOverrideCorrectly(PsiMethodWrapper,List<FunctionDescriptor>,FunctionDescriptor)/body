{
  for (  FunctionDescriptor superFunction : superFunctions) {
    TypeSubstitutor substitutor=SubstitutionUtils.buildDeepSubstitutor(((ClassDescriptor)functionDescriptor.getContainingDeclaration()).getDefaultType());
    FunctionDescriptor superFunctionSubstituted=superFunction.substitute(substitutor);
    OverrideCompatibilityInfo.Result overridableResult=isOverridableBy(superFunctionSubstituted,functionDescriptor).getResult();
    boolean paramsOk=overridableResult == OverrideCompatibilityInfo.Result.OVERRIDABLE;
    boolean returnTypeOk=isReturnTypeOkForOverride(JetTypeChecker.INSTANCE,superFunctionSubstituted,functionDescriptor);
    if (!paramsOk || !returnTypeOk) {
      throw new IllegalStateException("Loaded Java method overrides another, but resolved as Kotlin function, doesn't.\n" + "super function = " + superFunction + "\n"+ "this function = "+ functionDescriptor+ "\n"+ "this method = "+ PsiFormatUtil.getExternalName(method.getPsiMethod())+ "\n"+ "@KotlinSignature = "+ method.getSignatureAnnotation().signature());
    }
  }
}
