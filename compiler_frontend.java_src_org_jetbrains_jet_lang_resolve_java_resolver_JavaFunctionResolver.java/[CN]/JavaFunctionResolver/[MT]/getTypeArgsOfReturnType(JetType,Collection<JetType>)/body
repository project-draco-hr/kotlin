{
  TypeConstructor typeConstructor=autoType.getConstructor();
  List<TypeProjection> autoArguments=autoType.getArguments();
  if (!(typeConstructor.getDeclarationDescriptor() instanceof ClassDescriptor)) {
    return autoArguments;
  }
  List<List<JetType>> typeArgumentsFromSuper=calculateTypeArgumentsFromSuper(autoType,typesFromSuper);
  List<TypeProjection> resultArguments=Lists.newArrayList();
  for (int i=0; i < autoArguments.size(); i++) {
    TypeProjection argument=autoArguments.get(i);
    TypeCheckingProcedure.EnrichedProjectionKind effectiveProjectionKind=TypeCheckingProcedure.getEffectiveProjectionKind(typeConstructor.getParameters().get(i),argument);
    JetType argumentType=argument.getType();
    Collection<JetType> argumentTypesFromSuper=typeArgumentsFromSuper.get(i);
    boolean covariantPosition=effectiveProjectionKind == TypeCheckingProcedure.EnrichedProjectionKind.OUT;
    JetType type=modifyReturnTypeAccordingToSuperMethods(argumentType,argumentTypesFromSuper,covariantPosition);
    resultArguments.add(new TypeProjection(argument.getProjectionKind(),type));
  }
  return resultArguments;
}
