{
  if (!DescriptorResolverUtils.isCorrectOwnerForEnumMember(ownerDescriptor,method)) {
    return null;
  }
  JavaType returnJavaType=method.getReturnType();
  if (returnJavaType == null) {
    return null;
  }
  PsiMethod psiMethod=method.getPsi();
  SimpleFunctionDescriptor alreadyResolved=trace.get(BindingContext.FUNCTION,psiMethod);
  if (alreadyResolved != null) {
    return alreadyResolved;
  }
  SimpleFunctionDescriptorImpl functionDescriptorImpl=new SimpleFunctionDescriptorImpl(ownerDescriptor,annotationResolver.resolveAnnotations(psiMethod),method.getName(),CallableMemberDescriptor.Kind.DECLARATION);
  List<TypeParameterDescriptor> methodTypeParameters=signatureResolver.resolveMethodTypeParameters(method,functionDescriptorImpl);
  TypeVariableResolver methodTypeVariableResolver=new TypeVariableResolver(methodTypeParameters,functionDescriptorImpl,"method " + method.getName() + " in class "+ method.getContainingClass());
  JavaDescriptorResolver.ValueParameterDescriptors valueParameterDescriptors=parameterResolver.resolveParameterDescriptors(functionDescriptorImpl,method,methodTypeVariableResolver);
  JetType returnType=makeReturnType(returnJavaType,method,methodTypeVariableResolver);
  List<String> signatureErrors=Lists.newArrayList();
  List<FunctionDescriptor> superFunctions;
  if (ownerDescriptor instanceof ClassDescriptor) {
    SignaturesPropagationData signaturesPropagationData=new SignaturesPropagationData((ClassDescriptor)ownerDescriptor,returnType,valueParameterDescriptors,methodTypeParameters,method,trace);
    superFunctions=signaturesPropagationData.getSuperFunctions();
    returnType=signaturesPropagationData.getModifiedReturnType();
    valueParameterDescriptors=signaturesPropagationData.getModifiedValueParameters();
    methodTypeParameters=signaturesPropagationData.getModifiedTypeParameters();
    signatureErrors.addAll(signaturesPropagationData.getSignatureErrors());
  }
 else {
    superFunctions=Collections.emptyList();
  }
  AlternativeMethodSignatureData alternativeMethodSignatureData=new AlternativeMethodSignatureData(method,valueParameterDescriptors,returnType,methodTypeParameters,!superFunctions.isEmpty());
  if (alternativeMethodSignatureData.isAnnotated() && !alternativeMethodSignatureData.hasErrors()) {
    valueParameterDescriptors=alternativeMethodSignatureData.getValueParameters();
    returnType=alternativeMethodSignatureData.getReturnType();
    methodTypeParameters=alternativeMethodSignatureData.getTypeParameters();
  }
 else   if (alternativeMethodSignatureData.hasErrors()) {
    signatureErrors.add(alternativeMethodSignatureData.getError());
  }
  functionDescriptorImpl.initialize(valueParameterDescriptors.getReceiverType(),DescriptorUtils.getExpectedThisObjectIfNeeded(ownerDescriptor),methodTypeParameters,valueParameterDescriptors.getDescriptors(),returnType,Modality.convertFromFlags(method.isAbstract(),!method.isFinal()),method.getVisibility(),false);
  if (functionDescriptorImpl.getKind() == CallableMemberDescriptor.Kind.DECLARATION && record) {
    BindingContextUtils.recordFunctionDeclarationToDescriptor(trace,psiMethod,functionDescriptorImpl);
  }
  if (record) {
    trace.record(JavaBindingContext.IS_DECLARED_IN_JAVA,functionDescriptorImpl);
  }
  if (!RawTypesCheck.hasRawTypesInHierarchicalSignature(psiMethod) && JavaMethodSignatureUtil.isMethodReturnTypeCompatible(psiMethod) && !containsErrorType(superFunctions,functionDescriptorImpl)) {
    if (signatureErrors.isEmpty()) {
      checkFunctionsOverrideCorrectly(method,superFunctions,functionDescriptorImpl);
    }
 else {
      if (record) {
        trace.record(JavaBindingContext.LOAD_FROM_JAVA_SIGNATURE_ERRORS,functionDescriptorImpl,signatureErrors);
      }
    }
  }
  return functionDescriptorImpl;
}
