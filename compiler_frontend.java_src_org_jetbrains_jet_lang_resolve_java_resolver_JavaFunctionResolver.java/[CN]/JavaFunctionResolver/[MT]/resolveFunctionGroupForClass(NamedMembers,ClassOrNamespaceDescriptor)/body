{
  Name methodName=members.getName();
  Set<SimpleFunctionDescriptor> functionsFromCurrent=new HashSet<SimpleFunctionDescriptor>();
  for (  JavaMethod method : members.getMethods()) {
    SimpleFunctionDescriptor function=resolveMethodToFunctionDescriptor(method,owner,true);
    if (function != null) {
      functionsFromCurrent.add(function);
      SimpleFunctionDescriptor samAdapter=resolveSamAdapter(function);
      if (samAdapter != null) {
        functionsFromCurrent.add(samAdapter);
      }
    }
  }
  if (owner instanceof NamespaceDescriptor) {
    SamConstructorDescriptor samConstructor=resolveSamConstructor((NamespaceDescriptor)owner,members);
    if (samConstructor != null) {
      functionsFromCurrent.add(samConstructor);
    }
  }
  Set<FunctionDescriptor> functions=new HashSet<FunctionDescriptor>();
  if (owner instanceof ClassDescriptor) {
    ClassDescriptor classDescriptor=(ClassDescriptor)owner;
    Collection<SimpleFunctionDescriptor> functionsFromSupertypes=getFunctionsFromSupertypes(methodName,classDescriptor);
    functions.addAll(resolveOverrides(methodName,functionsFromSupertypes,functionsFromCurrent,classDescriptor,fakeOverrideVisibilityResolver));
  }
  if (isEnumClassObject(owner)) {
    for (    FunctionDescriptor functionDescriptor : functionsFromCurrent) {
      if (!(isEnumValueOfMethod(functionDescriptor) || isEnumValuesMethod(functionDescriptor))) {
        functions.add(functionDescriptor);
      }
    }
  }
 else {
    functions.addAll(functionsFromCurrent);
  }
  return functions;
}
