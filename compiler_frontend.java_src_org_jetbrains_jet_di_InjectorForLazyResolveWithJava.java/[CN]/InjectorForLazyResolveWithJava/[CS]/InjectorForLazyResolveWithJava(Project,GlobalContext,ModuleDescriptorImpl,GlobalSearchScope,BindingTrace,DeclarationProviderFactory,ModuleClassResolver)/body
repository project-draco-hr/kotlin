{
  this.project=project;
  this.globalContext=globalContext;
  this.storageManager=globalContext.getStorageManager();
  this.module=module;
  this.platformToKotlinClassMap=module.getPlatformToKotlinClassMap();
  this.moduleContentScope=moduleContentScope;
  this.bindingTrace=bindingTrace;
  this.declarationProviderFactory=declarationProviderFactory;
  this.moduleClassResolver=moduleClassResolver;
  this.resolveSession=new ResolveSession(project,globalContext,module,declarationProviderFactory,bindingTrace);
  this.javaClassFinder=new JavaClassFinderImpl();
  this.virtualFileFinder=org.jetbrains.jet.lang.resolve.kotlin.VirtualFileFinderFactory.SERVICE.getInstance(project).create(moduleContentScope);
  this.deserializedDescriptorResolver=new DeserializedDescriptorResolver();
  this.psiBasedExternalAnnotationResolver=new PsiBasedExternalAnnotationResolver();
  this.traceBasedExternalSignatureResolver=new TraceBasedExternalSignatureResolver();
  this.traceBasedErrorReporter=new TraceBasedErrorReporter();
  this.psiBasedMethodSignatureChecker=new PsiBasedMethodSignatureChecker();
  this.lazyResolveBasedCache=new LazyResolveBasedCache();
  this.javaPropertyInitializerEvaluator=new JavaPropertyInitializerEvaluatorImpl();
  this.javaSourceElementFactory=new JavaSourceElementFactoryImpl();
  this.globalJavaResolverContext=new GlobalJavaResolverContext(storageManager,javaClassFinder,virtualFileFinder,deserializedDescriptorResolver,psiBasedExternalAnnotationResolver,traceBasedExternalSignatureResolver,traceBasedErrorReporter,psiBasedMethodSignatureChecker,lazyResolveBasedCache,javaPropertyInitializerEvaluator,javaSourceElementFactory,moduleClassResolver);
  this.lazyJavaPackageFragmentProvider=new LazyJavaPackageFragmentProvider(globalJavaResolverContext,module);
  this.javaDescriptorResolver=new JavaDescriptorResolver(lazyJavaPackageFragmentProvider,module);
  this.javaFlexibleTypeCapabilitiesProvider=new JavaFlexibleTypeCapabilitiesProvider();
  this.additionalCheckerProvider=org.jetbrains.jet.lang.resolve.kotlin.JavaDeclarationCheckerProvider.INSTANCE$;
  this.annotationResolver=new AnnotationResolver();
  this.callResolver=new CallResolver();
  this.argumentTypeResolver=new ArgumentTypeResolver();
  this.expressionTypingComponents=new ExpressionTypingComponents();
  this.expressionTypingServices=new ExpressionTypingServices(expressionTypingComponents);
  this.controlStructureTypingUtils=new ControlStructureTypingUtils(expressionTypingServices);
  this.expressionTypingUtils=new ExpressionTypingUtils(expressionTypingServices,callResolver);
  this.forLoopConventionsChecker=new ForLoopConventionsChecker();
  this.reflectionTypes=new ReflectionTypes(module);
  this.callExpressionResolver=new CallExpressionResolver();
  this.descriptorResolver=new DescriptorResolver();
  this.delegatedPropertyResolver=new DelegatedPropertyResolver();
  this.typeResolver=new TypeResolver();
  this.qualifiedExpressionResolver=new QualifiedExpressionResolver();
  this.callResolverExtensionProvider=new CallResolverExtensionProvider();
  this.candidateResolver=new CandidateResolver();
  this.callCompleter=new CallCompleter(argumentTypeResolver,candidateResolver);
  this.jetImportsFactory=new JetImportsFactory();
  this.scopeProvider=new ScopeProvider(getResolveSession());
  this.scriptBodyResolver=new ScriptBodyResolver();
  this.javaClassDataFinder=new JavaClassDataFinder(virtualFileFinder,deserializedDescriptorResolver);
  this.annotationDescriptorLoader=new AnnotationDescriptorLoader();
  this.constantDescriptorLoader=new ConstantDescriptorLoader();
  this.deserializationGlobalContextForJava=new DeserializationGlobalContextForJava(storageManager,module,javaClassDataFinder,annotationDescriptorLoader,constantDescriptorLoader,lazyJavaPackageFragmentProvider);
  this.descriptorLoadersStorage=new DescriptorLoadersStorage(storageManager);
  this.resolveSession.setAnnotationResolve(annotationResolver);
  this.resolveSession.setDescriptorResolver(descriptorResolver);
  this.resolveSession.setJetImportFactory(jetImportsFactory);
  this.resolveSession.setQualifiedExpressionResolver(qualifiedExpressionResolver);
  this.resolveSession.setScopeProvider(scopeProvider);
  this.resolveSession.setScriptBodyResolver(scriptBodyResolver);
  this.resolveSession.setTypeResolver(typeResolver);
  javaClassFinder.setProject(project);
  javaClassFinder.setScope(moduleContentScope);
  traceBasedExternalSignatureResolver.setExternalAnnotationResolver(psiBasedExternalAnnotationResolver);
  traceBasedExternalSignatureResolver.setProject(project);
  traceBasedExternalSignatureResolver.setTrace(bindingTrace);
  lazyResolveBasedCache.setSession(resolveSession);
  traceBasedErrorReporter.setTrace(bindingTrace);
  psiBasedMethodSignatureChecker.setExternalAnnotationResolver(psiBasedExternalAnnotationResolver);
  psiBasedMethodSignatureChecker.setExternalSignatureResolver(traceBasedExternalSignatureResolver);
  annotationResolver.setCallResolver(callResolver);
  annotationResolver.setStorageManager(storageManager);
  annotationResolver.setTypeResolver(typeResolver);
  callResolver.setArgumentTypeResolver(argumentTypeResolver);
  callResolver.setCallCompleter(callCompleter);
  callResolver.setCandidateResolver(candidateResolver);
  callResolver.setExpressionTypingServices(expressionTypingServices);
  callResolver.setTypeResolver(typeResolver);
  argumentTypeResolver.setExpressionTypingServices(expressionTypingServices);
  argumentTypeResolver.setTypeResolver(typeResolver);
  expressionTypingServices.setAnnotationResolver(annotationResolver);
  expressionTypingServices.setCallExpressionResolver(callExpressionResolver);
  expressionTypingServices.setCallResolver(callResolver);
  expressionTypingServices.setDescriptorResolver(descriptorResolver);
  expressionTypingServices.setExtensionProvider(callResolverExtensionProvider);
  expressionTypingServices.setProject(project);
  expressionTypingServices.setTypeResolver(typeResolver);
  expressionTypingComponents.setAdditionalCheckerProvider(additionalCheckerProvider);
  expressionTypingComponents.setCallResolver(callResolver);
  expressionTypingComponents.setControlStructureTypingUtils(controlStructureTypingUtils);
  expressionTypingComponents.setExpressionTypingServices(expressionTypingServices);
  expressionTypingComponents.setExpressionTypingUtils(expressionTypingUtils);
  expressionTypingComponents.setForLoopConventionsChecker(forLoopConventionsChecker);
  expressionTypingComponents.setGlobalContext(globalContext);
  expressionTypingComponents.setPlatformToKotlinClassMap(platformToKotlinClassMap);
  expressionTypingComponents.setReflectionTypes(reflectionTypes);
  forLoopConventionsChecker.setExpressionTypingServices(expressionTypingServices);
  forLoopConventionsChecker.setExpressionTypingUtils(expressionTypingUtils);
  forLoopConventionsChecker.setProject(project);
  callExpressionResolver.setExpressionTypingServices(expressionTypingServices);
  descriptorResolver.setAnnotationResolver(annotationResolver);
  descriptorResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);
  descriptorResolver.setExpressionTypingServices(expressionTypingServices);
  descriptorResolver.setStorageManager(storageManager);
  descriptorResolver.setTypeResolver(typeResolver);
  delegatedPropertyResolver.setCallResolver(callResolver);
  delegatedPropertyResolver.setExpressionTypingServices(expressionTypingServices);
  typeResolver.setAnnotationResolver(annotationResolver);
  typeResolver.setFlexibleTypeCapabilitiesProvider(javaFlexibleTypeCapabilitiesProvider);
  typeResolver.setModuleDescriptor(module);
  typeResolver.setQualifiedExpressionResolver(qualifiedExpressionResolver);
  candidateResolver.setArgumentTypeResolver(argumentTypeResolver);
  jetImportsFactory.setProject(project);
  scriptBodyResolver.setExpressionTypingServices(expressionTypingServices);
  deserializedDescriptorResolver.setContext(deserializationGlobalContextForJava);
  deserializedDescriptorResolver.setErrorReporter(traceBasedErrorReporter);
  annotationDescriptorLoader.setErrorReporter(traceBasedErrorReporter);
  annotationDescriptorLoader.setKotlinClassFinder(virtualFileFinder);
  annotationDescriptorLoader.setModule(module);
  annotationDescriptorLoader.setStorage(descriptorLoadersStorage);
  descriptorLoadersStorage.setErrorReporter(traceBasedErrorReporter);
  descriptorLoadersStorage.setModule(module);
  constantDescriptorLoader.setErrorReporter(traceBasedErrorReporter);
  constantDescriptorLoader.setKotlinClassFinder(virtualFileFinder);
  constantDescriptorLoader.setStorage(descriptorLoadersStorage);
  javaClassFinder.initialize();
}
