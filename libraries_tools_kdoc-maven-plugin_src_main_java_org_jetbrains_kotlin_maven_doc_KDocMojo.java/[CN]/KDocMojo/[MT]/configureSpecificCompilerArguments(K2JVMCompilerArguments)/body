{
  if (arguments instanceof KDocArguments) {
    KDocArguments kdoc=(KDocArguments)arguments;
    KDocConfig docConfig=kdoc.getDocConfig();
    docConfig.setDocOutputDir(docOutputDir);
    kdoc.noJdkAnnotations=true;
    kdoc.annotations=getFullAnnotationsPath(getLog(),annotationPaths);
    if (ignorePackages != null) {
      docConfig.getIgnorePackages().addAll(ignorePackages);
    }
    if (packageDescriptionFiles != null) {
      docConfig.getPackageDescriptionFiles().putAll(packageDescriptionFiles);
    }
    if (packagePrefixToUrls != null) {
      docConfig.getPackagePrefixToUrls().putAll(packagePrefixToUrls);
    }
    if (packageSummaryText != null) {
      docConfig.getPackageSummaryText().putAll(packageSummaryText);
    }
    docConfig.setIncludeProtected(includeProtected);
    docConfig.setTitle(title);
    docConfig.setVersion(version);
    docConfig.setWarnNoComments(warnNoComments);
    docConfig.setSourceRootHref(sourceRootHref);
    docConfig.setProjectRootDir(projectRootDir);
    LOG.info("API docs output to: " + docConfig.getDocOutputDir());
    LOG.info("classpath: " + classpath);
    LOG.info("title: " + title);
    LOG.info("sources: " + sources);
    LOG.info("sourceRootHref: " + sourceRootHref);
    LOG.info("projectRootDir: " + projectRootDir);
    LOG.info("kotlin annotations: " + kdoc.annotations);
    LOG.info("packageDescriptionFiles: " + packageDescriptionFiles);
    LOG.info("packagePrefixToUrls: " + packagePrefixToUrls);
    LOG.info("API docs ignore packages: " + ignorePackages);
  }
 else {
    LOG.warn("No KDocArguments available!");
  }
}
