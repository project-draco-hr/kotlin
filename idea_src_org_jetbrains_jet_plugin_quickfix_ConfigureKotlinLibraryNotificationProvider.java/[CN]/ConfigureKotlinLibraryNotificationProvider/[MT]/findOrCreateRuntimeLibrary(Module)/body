{
  LibraryTable table=ProjectLibraryTable.getInstance(myProject);
  Library kotlinRuntime=table.getLibraryByName(LIBRARY_NAME);
  if (kotlinRuntime != null) {
    for (    VirtualFile root : kotlinRuntime.getFiles(OrderRootType.CLASSES)) {
      if (root.getName().equals(PathUtil.KOTLIN_RUNTIME_JAR)) {
        return kotlinRuntime;
      }
    }
  }
  File runtimePath=PluginPathUtil.getRuntimePath(module);
  if (runtimePath == null) {
    Messages.showErrorDialog(myProject,"\"kotlin-runtime.jar\" is not found. Make sure Kotlin SDK is configured for module \"" + module.getName() + "\".","No Runtime Found");
    return null;
  }
  ChoosePathDialog dlg=new ChoosePathDialog(myProject);
  dlg.show();
  if (!dlg.isOK())   return null;
  String path=dlg.getPath();
  final File targetJar=new File(path,"kotlin-runtime.jar");
  try {
    FileUtil.copy(runtimePath,targetJar);
    VirtualFile jarVfs=LocalFileSystem.getInstance().refreshAndFindFileByIoFile(targetJar);
    if (jarVfs != null) {
      jarVfs.refresh(false,false);
    }
  }
 catch (  IOException e) {
    Messages.showErrorDialog(myProject,"Error copying jar: " + e.getLocalizedMessage(),"Error Copying File");
    return null;
  }
  if (kotlinRuntime == null) {
    kotlinRuntime=table.createLibrary("KotlinRuntime");
  }
  final Library finalKotlinRuntime=kotlinRuntime;
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    @Override public void run(){
      Library.ModifiableModel model=finalKotlinRuntime.getModifiableModel();
      model.addRoot(VfsUtil.getUrlForLibraryRoot(targetJar),OrderRootType.CLASSES);
      model.addRoot(VfsUtil.getUrlForLibraryRoot(targetJar) + "src",OrderRootType.SOURCES);
      model.commit();
    }
  }
);
  return kotlinRuntime;
}
