{
  if (true)   return;
  createMockCoreEnvironment();
  LanguageASTFactory.INSTANCE.addExplicitExtension(JavaLanguage.INSTANCE,new JavaASTFactory());
  String text=FileUtil.loadFile(testFile);
  LightVirtualFile virtualFile=new LightVirtualFile("Hello.kt",JetLanguage.INSTANCE,text);
  virtualFile.setCharset(CharsetToolkit.UTF8_CHARSET);
  JetFile psiFile=(JetFile)((PsiFileFactoryImpl)PsiFileFactory.getInstance(jetCoreEnvironment.getProject())).trySetupPsiForFile(virtualFile,JetLanguage.INSTANCE,true,false);
  GenerationState state=new GenerationState(jetCoreEnvironment.getProject(),ClassBuilderFactory.BINARIES);
  AnalyzingUtils.checkForSyntacticErrors(psiFile);
  BindingContext bindingContext=state.compile(psiFile);
  ClassFileFactory classFileFactory=state.getFactory();
  CompileEnvironment.writeToOutputDirectory(classFileFactory,tmpdir.getPath());
  NamespaceDescriptor namespaceFromSource=(NamespaceDescriptor)bindingContext.get(BindingContext.DECLARATION_TO_DESCRIPTOR,psiFile.getRootNamespace());
  Assert.assertEquals("test",namespaceFromSource.getName());
  Disposer.dispose(myTestRootDisposable);
  createMockCoreEnvironment();
  jetCoreEnvironment.addToClasspath(tmpdir);
  JetSemanticServices jetSemanticServices=JetSemanticServices.createSemanticServices(jetCoreEnvironment.getProject());
  JavaSemanticServices semanticServices=new JavaSemanticServices(jetCoreEnvironment.getProject(),jetSemanticServices,new BindingTraceContext());
  JavaDescriptorResolver javaDescriptorResolver=semanticServices.getDescriptorResolver();
  NamespaceDescriptor namespaceFromClass=javaDescriptorResolver.resolveNamespace("test");
  compareNamespaces(namespaceFromSource,namespaceFromClass);
}
