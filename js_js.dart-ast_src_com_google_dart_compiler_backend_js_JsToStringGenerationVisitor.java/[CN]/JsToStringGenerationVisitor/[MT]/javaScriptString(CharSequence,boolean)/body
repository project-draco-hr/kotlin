{
  final int n=chars.length();
  int quoteCount=0;
  int aposCount=0;
  for (int i=0; i < n; i++) {
switch (chars.charAt(i)) {
case '"':
      ++quoteCount;
    break;
case '\'':
  ++aposCount;
break;
}
}
StringBuilder result=new StringBuilder(n + 16);
char quoteChar=(quoteCount < aposCount || forceDoubleQuote) ? '"' : '\'';
result.append(quoteChar);
for (int i=0; i < n; i++) {
char c=chars.charAt(i);
if (' ' <= c && c <= '~' && c != quoteChar && c != '\\') {
result.append(c);
continue;
}
int escape=-1;
switch (c) {
case '\b':
escape='b';
break;
case '\f':
escape='f';
break;
case '\n':
escape='n';
break;
case '\r':
escape='r';
break;
case '\t':
escape='t';
break;
case '"':
escape='"';
break;
case '\'':
escape='\'';
break;
case '\\':
escape='\\';
break;
}
if (escape >= 0) {
result.append('\\');
result.append((char)escape);
}
 else {
if (c < ' ' && (i == n - 1 || chars.charAt(i + 1) < '0' || chars.charAt(i + 1) > '9')) {
result.append('\\');
if (c > 0x7) {
result.append((char)('0' + (0x7 & (c >> 3))));
}
result.append((char)('0' + (0x7 & c)));
}
 else {
int hexSize;
if (c < 256) {
result.append("\\x");
hexSize=2;
}
 else {
result.append("\\u");
hexSize=4;
}
for (int shift=(hexSize - 1) * 4; shift >= 0; shift-=4) {
int digit=0xf & (c >> shift);
result.append(HEX_DIGITS[digit]);
}
}
}
}
result.append(quoteChar);
escapeClosingTags(result);
return result;
}
