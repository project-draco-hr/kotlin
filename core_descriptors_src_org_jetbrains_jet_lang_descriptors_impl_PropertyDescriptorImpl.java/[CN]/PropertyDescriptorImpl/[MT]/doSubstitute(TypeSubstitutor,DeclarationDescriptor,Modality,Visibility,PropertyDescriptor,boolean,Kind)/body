{
  PropertyDescriptorImpl substitutedDescriptor=createSubstitutedCopy(newOwner,newModality,newVisibility,original,kind);
  List<TypeParameterDescriptor> substitutedTypeParameters=Lists.newArrayList();
  TypeSubstitutor substitutor=DescriptorSubstitutor.substituteTypeParameters(getTypeParameters(),originalSubstitutor,substitutedDescriptor,substitutedTypeParameters);
  JetType originalOutType=getType();
  JetType outType=substitutor.substitute(originalOutType,Variance.OUT_VARIANCE);
  if (outType == null) {
    return null;
  }
  ReceiverParameterDescriptor substitutedExpectedThisObject;
  ReceiverParameterDescriptor expectedThisObject=getExpectedThisObject();
  if (expectedThisObject != null) {
    substitutedExpectedThisObject=expectedThisObject.substitute(substitutor);
    if (substitutedExpectedThisObject == null)     return null;
  }
 else {
    substitutedExpectedThisObject=null;
  }
  JetType substitutedReceiverType;
  if (receiverParameter != null) {
    substitutedReceiverType=substitutor.substitute(receiverParameter.getType(),Variance.IN_VARIANCE);
    if (substitutedReceiverType == null)     return null;
  }
 else {
    substitutedReceiverType=null;
  }
  substitutedDescriptor.setType(outType,substitutedTypeParameters,substitutedExpectedThisObject,substitutedReceiverType);
  PropertyGetterDescriptorImpl newGetter=getter == null ? null : new PropertyGetterDescriptorImpl(substitutedDescriptor,getter.getAnnotations(),DescriptorUtils.convertModality(getter.getModality(),false),convertVisibility(getter.getVisibility(),newVisibility),getter.hasBody(),getter.isDefault(),kind,getter.getOriginal());
  if (newGetter != null) {
    JetType returnType=getter.getReturnType();
    newGetter.initialize(returnType != null ? substitutor.substitute(returnType,Variance.OUT_VARIANCE) : null);
  }
  PropertySetterDescriptorImpl newSetter=setter == null ? null : new PropertySetterDescriptorImpl(substitutedDescriptor,setter.getAnnotations(),DescriptorUtils.convertModality(setter.getModality(),false),convertVisibility(setter.getVisibility(),newVisibility),setter.hasBody(),setter.isDefault(),kind,setter.getOriginal());
  if (newSetter != null) {
    List<ValueParameterDescriptor> substitutedValueParameters=FunctionDescriptorImpl.getSubstitutedValueParameters(newSetter,setter,substitutor);
    if (substitutedValueParameters == null) {
      substitutedDescriptor.setSetterProjectedOut(true);
      substitutedValueParameters=Collections.<ValueParameterDescriptor>singletonList(PropertySetterDescriptorImpl.createSetterParameter(newSetter,KotlinBuiltIns.getInstance().getNothingType()));
    }
    if (substitutedValueParameters.size() != 1) {
      throw new IllegalStateException();
    }
    newSetter.initialize(substitutedValueParameters.get(0));
  }
  substitutedDescriptor.initialize(newGetter,newSetter);
  if (copyOverrides) {
    for (    PropertyDescriptor propertyDescriptor : overriddenProperties) {
      OverridingUtil.bindOverride(substitutedDescriptor,propertyDescriptor.substitute(substitutor));
    }
  }
  return substitutedDescriptor;
}
