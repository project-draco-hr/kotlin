{
  Project project=module.getProject();
  RuntimeLibraryFiles files=getExistingJarFiles();
  File runtimeJar=files.getRuntimeJar();
switch (libraryState) {
case LIBRARY:
switch (jarState) {
case EXISTS:
{
        break;
      }
case COPY:
{
      copyFileToDir(runtimeJar,dirToCopyJarTo);
      break;
    }
case DO_NOT_COPY:
{
    throw new IllegalStateException("Kotlin library exists, so path to copy should be hidden in configuration dialog and jar should be copied using path in library table");
  }
}
break;
case NON_CONFIGURED_LIBRARY:
switch (jarState) {
case EXISTS:
{
addJarToExistingLibrary(project,files.getRuntimeDestination(dirToCopyJarTo));
break;
}
case COPY:
{
File file=copyFileToDir(runtimeJar,dirToCopyJarTo);
addJarToExistingLibrary(project,file);
break;
}
case DO_NOT_COPY:
{
addJarToExistingLibrary(project,runtimeJar);
break;
}
}
break;
case NEW_LIBRARY:
switch (jarState) {
case EXISTS:
{
addJarToNewLibrary(project,files.getRuntimeDestination(dirToCopyJarTo));
break;
}
case COPY:
{
File file=copyFileToDir(runtimeJar,dirToCopyJarTo);
addJarToNewLibrary(project,file);
break;
}
case DO_NOT_COPY:
{
addJarToNewLibrary(project,runtimeJar);
break;
}
}
break;
}
addLibraryToModuleIfNeeded(module);
}
