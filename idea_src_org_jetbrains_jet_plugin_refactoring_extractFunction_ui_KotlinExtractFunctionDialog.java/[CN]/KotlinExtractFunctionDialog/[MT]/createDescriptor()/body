{
  List<KotlinParameterTablePanel.ParameterInfo> parameterInfos=parameterTablePanel.getParameterInfos();
  Map<Parameter,Parameter> oldToNewParameters=ContainerUtil.newLinkedHashMap();
  for (  KotlinParameterTablePanel.ParameterInfo parameterInfo : parameterInfos) {
    oldToNewParameters.put(parameterInfo.getOriginalParameter(),parameterInfo.toParameter());
  }
  ControlFlow controlFlow=originalDescriptor.getControlFlow();
  if (controlFlow instanceof ParameterUpdate) {
    controlFlow=new ParameterUpdate(oldToNewParameters.get(((ParameterUpdate)controlFlow).getParameter()));
  }
  Map<Integer,Replacement> replacementMap=ContainerUtil.newHashMap();
  for (  Map.Entry<Integer,Replacement> e : originalDescriptor.getReplacementMap().entrySet()) {
    Integer offset=e.getKey();
    Replacement replacement=e.getValue();
    if (replacement instanceof ParameterReplacement) {
      ParameterReplacement parameterReplacement=(ParameterReplacement)replacement;
      Parameter parameter=parameterReplacement.getParameter();
      Parameter newParameter=oldToNewParameters.get(parameter);
      if (newParameter != null) {
        replacementMap.put(offset,parameterReplacement.copy(newParameter));
      }
    }
 else {
      replacementMap.put(offset,replacement);
    }
  }
  return new ExtractionDescriptor(originalDescriptor.getExtractionData(),getFunctionName(),getVisibility(),ContainerUtil.newArrayList(oldToNewParameters.values()),originalDescriptor.getReceiverParameter(),replacementMap,controlFlow);
}
