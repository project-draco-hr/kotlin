{
  super.init();
  functionNameLabel.setLabelFor(functionNameField);
  functionNameField.setText(originalDescriptor.getDescriptor().getName());
  functionNameField.addDocumentListener(new DocumentAdapter(){
    @Override public void documentChanged(    DocumentEvent event){
      update();
    }
  }
);
  boolean enableVisibility=isVisibilitySectionAvailable();
  visibilityBox.setEnabled(enableVisibility);
  if (enableVisibility) {
    visibilityBox.setSelectedItem("private");
  }
  visibilityBox.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    @NotNull ItemEvent e){
      update();
    }
  }
);
  parameterTablePanel=new KotlinParameterTablePanel(){
    @Override protected void updateSignature(){
      KotlinExtractFunctionDialog.this.update();
    }
    @Override protected void onEnterAction(){
      doOKAction();
    }
    @Override protected void onCancelAction(){
      doCancelAction();
    }
  }
;
  parameterTablePanel.init(originalDescriptor.getDescriptor().getParameters());
  inputParametersPanel.setText("&Parameters");
  inputParametersPanel.setLabelFor(parameterTablePanel.getTable());
  inputParametersPanel.add(parameterTablePanel);
}
