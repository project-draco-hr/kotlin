{
  if (mCheckEllipsis) {
    int ellipsis=text.indexOf("...");
    if (ellipsis != -1 && !text.startsWith(".",ellipsis + 3)) {
      context.report(ELLIPSIS,element,context.getLocation(textNode),ELLIPSIS_MESSAGE);
    }
  }
  if (mCheckDashes) {
    int hyphen=text.indexOf('-');
    if (hyphen != -1) {
      Matcher matcher=HYPHEN_RANGE_PATTERN.matcher(text);
      if (matcher.matches()) {
        boolean isNegativeNumber=!Character.isWhitespace(matcher.group(2).charAt(0)) && Character.isWhitespace(matcher.group(1).charAt(matcher.group(1).length() - 1));
        if (!isNegativeNumber && !isAnalyticsTrackingId((Element)element)) {
          context.report(DASHES,element,context.getLocation(textNode),EN_DASH_MESSAGE);
        }
      }
      int emdash=text.indexOf("--");
      if (emdash > 1 && !text.startsWith("-",emdash + 2)) {
        context.report(DASHES,element,context.getLocation(textNode),EM_DASH_MESSAGE);
      }
    }
  }
  if (mCheckQuotes) {
    int quoteStart=text.indexOf('\'');
    if (quoteStart != -1) {
      int quoteEnd=text.indexOf('\'',quoteStart + 1);
      if (quoteEnd != -1 && quoteEnd > quoteStart + 1 && (quoteEnd < text.length() - 1 || quoteStart > 0) && SINGLE_QUOTE.matcher(text).matches()) {
        context.report(QUOTES,element,context.getLocation(textNode),SINGLE_QUOTE_MESSAGE);
        return;
      }
      if (quoteEnd == -1 && quoteStart > 0 && Character.isLetterOrDigit(text.charAt(quoteStart - 1))) {
        context.report(QUOTES,element,context.getLocation(textNode),TYPOGRAPHIC_APOSTROPHE_MESSAGE);
        return;
      }
    }
    quoteStart=text.indexOf('"');
    if (quoteStart != -1) {
      int quoteEnd=text.indexOf('"',quoteStart + 1);
      if (quoteEnd != -1 && quoteEnd > quoteStart + 1) {
        if (quoteEnd < text.length() - 1 || quoteStart > 0) {
          context.report(QUOTES,element,context.getLocation(textNode),DBL_QUOTES_MESSAGE);
          return;
        }
      }
    }
    if (text.indexOf('`') != -1 && GRAVE_QUOTATION.matcher(text).matches()) {
      context.report(QUOTES,element,context.getLocation(textNode),GRAVE_QUOTE_MESSAGE);
      return;
    }
  }
  if (mCheckFractions && text.indexOf('/') != -1) {
    Matcher matcher=FRACTION_PATTERN.matcher(text);
    if (matcher.matches()) {
      String top=matcher.group(1);
      String bottom=matcher.group(2);
      if (top.equals("1") && bottom.equals("2")) {
        context.report(FRACTIONS,element,context.getLocation(textNode),String.format(FRACTION_MESSAGE,'\u00BD',"&#189;","1/2"));
      }
 else       if (top.equals("1") && bottom.equals("4")) {
        context.report(FRACTIONS,element,context.getLocation(textNode),String.format(FRACTION_MESSAGE,'\u00BC',"&#188;","1/4"));
      }
 else       if (top.equals("3") && bottom.equals("4")) {
        context.report(FRACTIONS,element,context.getLocation(textNode),String.format(FRACTION_MESSAGE,'\u00BE',"&#190;","3/4"));
      }
 else       if (top.equals("1") && bottom.equals("3")) {
        context.report(FRACTIONS,element,context.getLocation(textNode),String.format(FRACTION_MESSAGE,'\u2153',"&#8531;","1/3"));
      }
 else       if (top.equals("2") && bottom.equals("3")) {
        context.report(FRACTIONS,element,context.getLocation(textNode),String.format(FRACTION_MESSAGE,'\u2154',"&#8532;","2/3"));
      }
    }
  }
  if (mCheckMisc) {
    if (text.indexOf('(') != -1 && (text.contains("(c)") || text.contains("(C)"))) {
      context.report(OTHER,element,context.getLocation(textNode),COPYRIGHT_MESSAGE);
    }
  }
}
