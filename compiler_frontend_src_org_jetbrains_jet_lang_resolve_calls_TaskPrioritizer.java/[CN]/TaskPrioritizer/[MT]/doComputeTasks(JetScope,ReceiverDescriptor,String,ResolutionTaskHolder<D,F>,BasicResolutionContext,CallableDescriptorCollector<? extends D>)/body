{
  AutoCastServiceImpl autoCastService=new AutoCastServiceImpl(context.dataFlowInfo,context.trace.getBindingContext());
  List<ReceiverDescriptor> implicitReceivers=Lists.newArrayList();
  scope.getImplicitReceiversHierarchy(implicitReceivers);
  boolean hasExplicitThisObject=context.call.getThisObject().exists();
  if (hasExplicitThisObject) {
    implicitReceivers.add(context.call.getThisObject());
  }
  if (receiver.exists()) {
    List<ReceiverDescriptor> variantsForExplicitReceiver=autoCastService.getVariantsForReceiver(receiver);
    Collection<ResolutionCandidate<D>> extensionFunctions=convertWithImpliedThis(scope,variantsForExplicitReceiver,callableDescriptorCollector.getNonMembersByName(scope,name));
    List<ResolutionCandidate<D>> nonlocals=Lists.newArrayList();
    List<ResolutionCandidate<D>> locals=Lists.newArrayList();
    TaskPrioritizer.<D>splitLexicallyLocalDescriptors(extensionFunctions,scope.getContainingDeclaration(),locals,nonlocals);
    Collection<ResolutionCandidate<D>> members=Lists.newArrayList();
    for (    ReceiverDescriptor variant : variantsForExplicitReceiver) {
      Collection<? extends D> membersForThisVariant=callableDescriptorCollector.getMembersByName(variant.getType(),name);
      convertWithReceivers(membersForThisVariant,Collections.singletonList(variant),Collections.singletonList(NO_RECEIVER),members,hasExplicitThisObject);
    }
    result.addLocalExtensions(locals);
    result.addMembers(members);
    for (    ReceiverDescriptor implicitReceiver : implicitReceivers) {
      Collection<? extends D> memberExtensions=callableDescriptorCollector.getNonMembersByName(implicitReceiver.getType().getMemberScope(),name);
      List<ReceiverDescriptor> variantsForImplicitReceiver=autoCastService.getVariantsForReceiver(implicitReceiver);
      result.addNonLocalExtensions(convertWithReceivers(memberExtensions,variantsForImplicitReceiver,variantsForExplicitReceiver,hasExplicitThisObject));
    }
    result.addNonLocalExtensions(nonlocals);
  }
 else {
    Collection<ResolutionCandidate<D>> functions=convertWithImpliedThis(scope,Collections.singletonList(receiver),callableDescriptorCollector.getNonExtensionsByName(scope,name));
    List<ResolutionCandidate<D>> nonlocals=Lists.newArrayList();
    List<ResolutionCandidate<D>> locals=Lists.newArrayList();
    TaskPrioritizer.<D>splitLexicallyLocalDescriptors(functions,scope.getContainingDeclaration(),locals,nonlocals);
    result.addLocalExtensions(locals);
    result.addNonLocalExtensions(nonlocals);
    for (    ReceiverDescriptor implicitReceiver : implicitReceivers) {
      doComputeTasks(scope,implicitReceiver,name,result,context,callableDescriptorCollector);
    }
  }
}
