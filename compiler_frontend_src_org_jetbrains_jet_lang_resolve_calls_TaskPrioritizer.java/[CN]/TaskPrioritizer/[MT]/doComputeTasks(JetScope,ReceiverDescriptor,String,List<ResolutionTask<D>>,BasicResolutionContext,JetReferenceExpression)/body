{
  AutoCastServiceImpl autoCastService=new AutoCastServiceImpl(context.dataFlowInfo,context.trace.getBindingContext());
  DataFlowInfo dataFlowInfo=autoCastService.getDataFlowInfo();
  List<ReceiverDescriptor> implicitReceivers=Lists.newArrayList();
  scope.getImplicitReceiversHierarchy(implicitReceivers);
  if (receiver.exists()) {
    List<ReceiverDescriptor> variantsForExplicitReceiver=autoCastService.getVariantsForReceiver(receiver);
    Collection<ResolvedCallImpl<D>> extensionFunctions=convertWithImpliedThis(scope,variantsForExplicitReceiver,getExtensionsByName(scope,name));
    List<ResolvedCallImpl<D>> nonlocals=Lists.newArrayList();
    List<ResolvedCallImpl<D>> locals=Lists.newArrayList();
    TaskPrioritizer.<D>splitLexicallyLocalDescriptors(extensionFunctions,scope.getContainingDeclaration(),locals,nonlocals);
    Collection<ResolvedCallImpl<D>> members=Lists.newArrayList();
    for (    ReceiverDescriptor variant : variantsForExplicitReceiver) {
      Collection<D> membersForThisVariant=getMembersByName(variant.getType(),name);
      convertWithReceivers(membersForThisVariant,Collections.singletonList(variant),Collections.singletonList(NO_RECEIVER),members);
    }
    if (getReceiverSuper(receiver) != null) {
      addTask(result,members,context,functionReference);
      addTask(result,locals,context,functionReference);
    }
 else {
      addTask(result,locals,context,functionReference);
      addTask(result,members,context,functionReference);
    }
    for (    ReceiverDescriptor implicitReceiver : implicitReceivers) {
      Collection<D> memberExtensions=getExtensionsByName(implicitReceiver.getType().getMemberScope(),name);
      List<ReceiverDescriptor> variantsForImplicitReceiver=autoCastService.getVariantsForReceiver(implicitReceiver);
      addTask(result,convertWithReceivers(memberExtensions,variantsForImplicitReceiver,variantsForExplicitReceiver),context,functionReference);
    }
    addTask(result,nonlocals,context,functionReference);
  }
 else {
    Collection<ResolvedCallImpl<D>> functions=convertWithImpliedThis(scope,Collections.singletonList(receiver),getNonExtensionsByName(scope,name));
    List<ResolvedCallImpl<D>> nonlocals=Lists.newArrayList();
    List<ResolvedCallImpl<D>> locals=Lists.newArrayList();
    TaskPrioritizer.<D>splitLexicallyLocalDescriptors(functions,scope.getContainingDeclaration(),locals,nonlocals);
    addTask(result,locals,context,functionReference);
    for (    ReceiverDescriptor implicitReceiver : implicitReceivers) {
      doComputeTasks(scope,implicitReceiver,name,result,context,functionReference);
    }
    addTask(result,nonlocals,context,functionReference);
  }
}
