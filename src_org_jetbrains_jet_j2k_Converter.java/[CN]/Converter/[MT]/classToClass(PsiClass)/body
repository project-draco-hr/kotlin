{
  final List<Function> methods=methodsToFunctionList(psiClass.getMethods(),true);
  final Set<String> modifiers=modifiersListToModifiersSet(psiClass.getModifierList());
  final List<Class> innerClasses=classesToClassList(psiClass.getAllInnerClasses());
  final List<Field> fields=fieldsToFieldList(psiClass.getAllFields());
  final List<Element> typeParameters=elementsToElementList(psiClass.getTypeParameters());
  final List<Type> implementsTypes=typesToNotNullableTypeList(psiClass.getImplementsListTypes());
  final List<PsiClassType> extendsListTypes=new LinkedList<PsiClassType>();
  for (  PsiClassType e : psiClass.getExtendsListTypes())   if (!e.getCanonicalText().equals("java.lang.Enum"))   extendsListTypes.add(e);
  final List<Type> extendsTypes=typesToNotNullableTypeList(extendsListTypes.toArray(new PsiType[extendsListTypes.size()]));
  final IdentifierImpl name=new IdentifierImpl(psiClass.getName());
  if (psiClass.isInterface())   return new Trait(name,modifiers,typeParameters,extendsTypes,implementsTypes,innerClasses,methods,fields);
  if (psiClass.isEnum())   return new Enum(name,modifiers,typeParameters,new LinkedList<Type>(),implementsTypes,innerClasses,methods,fieldsToFieldListForEnums(psiClass.getAllFields()));
  return new Class(name,modifiers,typeParameters,extendsTypes,implementsTypes,innerClasses,methods,fields);
}
