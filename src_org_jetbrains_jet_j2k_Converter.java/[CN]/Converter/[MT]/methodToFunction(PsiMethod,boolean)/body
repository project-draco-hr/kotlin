{
  final IdentifierImpl identifier=new IdentifierImpl(method.getName());
  final Type type=typeToType(method.getReturnType());
  final Block body=blockToBlock(method.getBody(),notEmpty);
  final Element params=elementToElement(method.getParameterList());
  final List<Element> typeParameters=elementsToElementList(method.getTypeParameters());
  final Set<String> modifiers=modifiersListToModifiersSet(method.getModifierList());
  if (method.getHierarchicalMethodSignature().getSuperSignatures().size() > 0)   modifiers.add(Modifier.OVERRIDE);
  if (method.getParent() instanceof PsiClass && ((PsiClass)method.getParent()).isInterface())   modifiers.remove(Modifier.ABSTRACT);
  if (method.isConstructor()) {
    boolean isPrimary=false;
    if (method.getParent() instanceof PsiClass && ((PsiClass)method.getParent()).getConstructors().length == 1)     isPrimary=true;
    return new Constructor(identifier,modifiers,type,typeParameters,params,body,isPrimary);
  }
  return new Function(identifier,modifiers,type,typeParameters,params,body);
}
