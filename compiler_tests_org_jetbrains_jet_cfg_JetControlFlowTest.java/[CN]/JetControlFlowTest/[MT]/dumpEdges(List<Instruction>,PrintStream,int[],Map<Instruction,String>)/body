{
  for (  Instruction fromInst : instructions) {
    fromInst.accept(new InstructionVisitor(){
      @Override public void visitLocalDeclarationInstruction(      LocalDeclarationInstruction instruction){
        int index=count[0];
        printEdge(out,nodeToName.get(instruction),nodeToName.get(((PseudocodeImpl)instruction.getBody()).getAllInstructions().get(0)),null);
        visitInstructionWithNext(instruction);
      }
      @Override public void visitUnconditionalJump(      UnconditionalJumpInstruction instruction){
        printEdge(out,nodeToName.get(instruction),nodeToName.get(instruction.getResolvedTarget()),null);
      }
      @Override public void visitJump(      AbstractJumpInstruction instruction){
        printEdge(out,nodeToName.get(instruction),nodeToName.get(instruction.getResolvedTarget()),null);
      }
      @Override public void visitNondeterministicJump(      NondeterministicJumpInstruction instruction){
        for (        Instruction nextInstruction : instruction.getNextInstructions()) {
          printEdge(out,nodeToName.get(instruction),nodeToName.get(nextInstruction),null);
        }
      }
      @Override public void visitReturnValue(      ReturnValueInstruction instruction){
        super.visitReturnValue(instruction);
      }
      @Override public void visitReturnNoValue(      ReturnNoValueInstruction instruction){
        super.visitReturnNoValue(instruction);
      }
      @Override public void visitConditionalJump(      ConditionalJumpInstruction instruction){
        String from=nodeToName.get(instruction);
        printEdge(out,from,nodeToName.get(instruction.getNextOnFalse()),"no");
        printEdge(out,from,nodeToName.get(instruction.getNextOnTrue()),"yes");
      }
      @Override public void visitInstructionWithNext(      InstructionWithNext instruction){
        printEdge(out,nodeToName.get(instruction),nodeToName.get(instruction.getNext()),null);
      }
      @Override public void visitSubroutineExit(      SubroutineExitInstruction instruction){
        if (!instruction.getNextInstructions().isEmpty()) {
          printEdge(out,nodeToName.get(instruction),nodeToName.get(instruction.getNextInstructions().iterator().next()),null);
        }
      }
      @Override public void visitSubroutineSink(      SubroutineSinkInstruction instruction){
      }
      @Override public void visitInstruction(      Instruction instruction){
        throw new UnsupportedOperationException(instruction.toString());
      }
    }
);
  }
}
