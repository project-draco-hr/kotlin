{
  JetFile file=loadPsiFile(myName + ".jet");
  final Map<JetElement,Pseudocode> data=new LinkedHashMap<JetElement,Pseudocode>();
  AnalyzeExhaust analyzeExhaust=JetTestUtils.analyzeFile(file);
  List<JetDeclaration> declarations=file.getDeclarations();
  final BindingContext bindingContext=analyzeExhaust.getBindingContext();
  BindingTrace mockTrace=new BindingTrace(){
    @Override public BindingContext getBindingContext(){
      return bindingContext;
    }
    @Override public <K,V>void record(    WritableSlice<K,V> slice,    K key,    V value){
    }
    @Override public <K>void record(    WritableSlice<K,Boolean> slice,    K key){
    }
    @Override public <K,V>V get(    ReadOnlySlice<K,V> slice,    K key){
      return bindingContext.get(slice,key);
    }
    @NotNull @Override public <K,V>Collection<K> getKeys(    WritableSlice<K,V> slice){
      return bindingContext.getKeys(slice);
    }
    @Override public void report(    @NotNull Diagnostic diagnostic){
    }
  }
;
  for (  JetDeclaration declaration : declarations) {
    Pseudocode pseudocode=new JetControlFlowProcessor(mockTrace).generatePseudocode(declaration);
    data.put(declaration,pseudocode);
    for (    Pseudocode localPseudocode : pseudocode.getLocalDeclarations()) {
      data.put(localPseudocode.getCorrespondingElement(),localPseudocode);
    }
  }
  try {
    processCFData(myName,data);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
 finally {
    if ("true".equals(System.getProperty("jet.control.flow.test.dump.graphs"))) {
      dumpDot(myName,data.values());
    }
  }
}
