{
  configureByFile(getTestFilePath());
  JetFile file=(JetFile)getFile();
  final Map<JetElement,Pseudocode> data=new LinkedHashMap<JetElement,Pseudocode>();
  final JetPseudocodeTrace pseudocodeTrace=new JetPseudocodeTrace(){
    @Override public void recordControlFlowData(    @NotNull JetElement element,    @NotNull Pseudocode pseudocode){
      data.put(element,pseudocode);
    }
    @Override public void close(){
      for (      Pseudocode pseudocode : data.values()) {
        pseudocode.postProcess();
      }
    }
    @Override public void recordLoopInfo(    JetExpression expression,    LoopInfo blockInfo){
    }
    @Override public void recordRepresentativeInstruction(    @NotNull JetElement element,    @NotNull Instruction instruction){
    }
  }
;
  AnalyzerFacade.analyzeNamespace(file.getRootNamespace(),new JetControlFlowDataTraceFactory(){
    @NotNull @Override public JetPseudocodeTrace createTrace(    JetElement element){
      return pseudocodeTrace;
    }
  }
);
  try {
    processCFData(name,data);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
 finally {
    if ("true".equals(System.getProperty("jet.control.flow.test.dump.graphs"))) {
      dumpDot(name,data.values());
    }
  }
}
