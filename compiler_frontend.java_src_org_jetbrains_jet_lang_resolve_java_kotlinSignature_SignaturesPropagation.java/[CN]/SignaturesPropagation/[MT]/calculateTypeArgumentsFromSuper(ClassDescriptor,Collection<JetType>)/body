{
  Multimap<TypeConstructor,TypeProjection> substitution=SubstitutionUtils.buildDeepSubstitutionMultimap(TypeUtils.makeUnsubstitutedType(klass,JetScope.EMPTY));
  List<List<TypeProjection>> parameterToArgumentsFromSuper=Lists.newArrayList();
  for (  TypeParameterDescriptor ignored : klass.getTypeConstructor().getParameters()) {
    parameterToArgumentsFromSuper.add(new ArrayList<TypeProjection>());
  }
  for (  JetType typeFromSuper : typesFromSuper) {
    List<TypeParameterDescriptor> typeFromSuperParameters=typeFromSuper.getConstructor().getParameters();
    for (int i=0; i < typeFromSuperParameters.size(); i++) {
      TypeParameterDescriptor parameter=typeFromSuperParameters.get(i);
      TypeProjection argument=typeFromSuper.getArguments().get(i);
      for (      TypeProjection projection : substitution.get(parameter.getTypeConstructor())) {
        ClassifierDescriptor classifier=projection.getType().getConstructor().getDeclarationDescriptor();
        if (classifier instanceof TypeParameterDescriptor && classifier.getContainingDeclaration() == klass) {
          int parameterIndex=((TypeParameterDescriptor)classifier).getIndex();
          parameterToArgumentsFromSuper.get(parameterIndex).add(argument);
        }
      }
    }
  }
  return parameterToArgumentsFromSuper;
}
