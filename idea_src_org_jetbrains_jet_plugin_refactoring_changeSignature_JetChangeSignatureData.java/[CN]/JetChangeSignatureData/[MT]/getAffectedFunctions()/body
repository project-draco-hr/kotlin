{
  if (affectedFunctions == null) {
    affectedFunctions=KotlinPackage.flatMapTo(getPrimaryFunctions(),new HashSet<UsageInfo>(),new Function1<JetFunctionDefinitionUsage<PsiElement>,Iterable<? extends UsageInfo>>(){
      @Override public Iterable<? extends UsageInfo> invoke(      final JetFunctionDefinitionUsage<PsiElement> primaryFunction){
        Set<UsageInfo> result=Sets.newHashSet();
        result.add(primaryFunction);
        PsiElement primaryDeclaration=primaryFunction.getDeclaration();
        if (!(primaryDeclaration instanceof JetNamedFunction))         return result;
        final PsiMethod baseLightMethod=LightClassUtil.getLightClassMethod((JetNamedFunction)primaryDeclaration);
        if (baseLightMethod == null)         return result;
        return KotlinPackage.filterNotNullTo(KotlinPackage.map(OverridingMethodsSearch.search(baseLightMethod).findAll(),new Function1<PsiMethod,UsageInfo>(){
          @Override public UsageInfo invoke(          PsiMethod method){
            if (method instanceof KotlinLightMethod) {
              JetDeclaration declaration=((KotlinLightMethod)method).getOrigin();
              if (declaration == null)               return null;
              FunctionDescriptor currentDescriptor=(FunctionDescriptor)ResolvePackage.resolveToDescriptor(declaration);
              return new JetFunctionDefinitionUsage<PsiElement>(declaration,currentDescriptor,primaryFunction,null);
            }
            return new OverriderUsageInfo(method,baseLightMethod,true,true,true);
          }
        }
),result);
      }
    }
);
  }
  return affectedFunctions;
}
