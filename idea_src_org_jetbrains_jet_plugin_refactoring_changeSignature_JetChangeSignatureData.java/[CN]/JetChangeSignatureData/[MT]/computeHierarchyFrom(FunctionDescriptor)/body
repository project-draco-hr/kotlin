{
  PsiElement declaration=BindingContextUtils.callableDescriptorToDeclaration(bindingContext,baseDescriptor);
  Set<PsiElement> result=Sets.newHashSet();
  result.add(declaration);
  if (!(declaration instanceof JetNamedFunction)) {
    return result;
  }
  PsiMethod lightMethod=LightClassUtil.getLightClassMethod((JetNamedFunction)declaration);
  if (lightMethod == null) {
    return result;
  }
  Collection<PsiMethod> overridingMethods=OverridingMethodsSearch.search(lightMethod).findAll();
  List<PsiMethod> jetLightMethods=ContainerUtil.filter(overridingMethods,new Condition<PsiMethod>(){
    @Override public boolean value(    PsiMethod method){
      return method instanceof JetClsMethod;
    }
  }
);
  List<JetDeclaration> jetFunctions=ContainerUtil.map(jetLightMethods,new Function<PsiMethod,JetDeclaration>(){
    @Override public JetDeclaration fun(    PsiMethod method){
      return ((JetClsMethod)method).getOrigin();
    }
  }
);
  result.addAll(jetFunctions);
  return result;
}
