{
  if (context.getLintContext().getMainProject().getTargetSdk() < 17) {
    return;
  }
  if (node.getValueArgumentCount() != 2) {
    return;
  }
  if (!isCallOnWebView(context,node)) {
    return;
  }
  UExpression first=node.getValueArguments().get(0);
  UElement resolved=node.resolve(context);
  if (resolved instanceof UVariable) {
    UFunction method=UastUtils.getContainingFunction(node);
    if (method != null) {
      ConcreteTypeVisitor v=new ConcreteTypeVisitor(context,node);
      method.accept(v);
      resolved=v.getType();
      if (resolved == null) {
        return;
      }
    }
 else {
      return;
    }
  }
 else   if (resolved instanceof UFunction) {
    UFunction method=(UFunction)resolved;
    if (method.getKind() == UastFunctionKind.CONSTRUCTOR) {
      resolved=UastUtils.getContainingClass(method);
    }
 else {
      UType returnType=method.getReturnType();
      if (returnType != null) {
        UClass resolvedClass=returnType.resolve(context);
        if (resolvedClass != null) {
          resolved=resolvedClass;
        }
      }
    }
  }
 else {
    UType type=first.getExpressionType();
    if (type != null) {
      UClass resolvedClass=type.resolve(context);
      if (resolvedClass != null) {
        resolved=resolvedClass;
      }
    }
  }
  if (resolved instanceof UClass) {
    UClass cls=(UClass)resolved;
    if (isJavaScriptAnnotated(context,cls)) {
      return;
    }
    Location location=UastAndroidUtils.getLocation(node.getFunctionNameElement());
    String message=String.format("None of the methods in the added interface (%1$s) have been annotated " + "with `@android.webkit.JavascriptInterface`; they will not " + "be visible in API 17",cls.getName());
    context.report(ISSUE,node,location,message);
  }
}
