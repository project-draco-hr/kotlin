{
  if (context.getMainProject().getTargetSdk() < 17) {
    return;
  }
  if (call.astArguments().size() != 2) {
    return;
  }
  if (!isCallOnWebView(context,call)) {
    return;
  }
  Expression first=call.astArguments().first();
  ResolvedNode resolved=context.resolve(first);
  if (resolved instanceof ResolvedVariable) {
    Node method=JavaContext.findSurroundingMethod(call);
    if (method != null) {
      ConcreteTypeVisitor v=new ConcreteTypeVisitor(context,call);
      method.accept(v);
      resolved=v.getType();
      if (resolved == null) {
        return;
      }
    }
 else {
      return;
    }
  }
 else   if (resolved instanceof ResolvedMethod) {
    ResolvedMethod method=(ResolvedMethod)resolved;
    if (method.isConstructor()) {
      resolved=method.getContainingClass();
    }
 else {
      TypeDescriptor returnType=method.getReturnType();
      if (returnType != null) {
        resolved=returnType.getTypeClass();
      }
    }
  }
 else {
    TypeDescriptor type=context.getType(first);
    if (type != null) {
      resolved=type.getTypeClass();
    }
  }
  if (resolved instanceof ResolvedClass) {
    ResolvedClass cls=(ResolvedClass)resolved;
    if (isJavaScriptAnnotated(cls)) {
      return;
    }
    Location location=context.getLocation(call.astName());
    String message=String.format("None of the methods in the added interface (%1$s) have been annotated " + "with `@android.webkit.JavascriptInterface`; they will not " + "be visible in API 17",cls.getSimpleName());
    context.report(ISSUE,call,location,message);
  }
}
