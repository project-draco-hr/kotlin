{
  this.javaSemanticServices=new JavaSemanticServices();
  this.javaDescriptorResolver=new JavaDescriptorResolver();
  this.bindingTrace=new org.jetbrains.jet.lang.resolve.BindingTraceContext();
  JavaBridgeConfiguration javaBridgeConfiguration=new JavaBridgeConfiguration();
  this.psiClassFinderForJvm=new PsiClassFinderForJvm();
  ModuleDescriptor moduleDescriptor=new org.jetbrains.jet.lang.descriptors.ModuleDescriptor("<dummy>");
  CompilerSpecialMode compilerSpecialMode=compilerDependencies.getCompilerSpecialMode();
  this.project=project;
  JavaTypeTransformer javaTypeTransformer=new JavaTypeTransformer();
  NamespaceFactoryImpl namespaceFactoryImpl=new NamespaceFactoryImpl();
  this.javaSemanticServices.setDescriptorResolver(javaDescriptorResolver);
  this.javaSemanticServices.setPsiClassFinder(psiClassFinderForJvm);
  this.javaSemanticServices.setTrace(bindingTrace);
  this.javaSemanticServices.setTypeTransformer(javaTypeTransformer);
  this.javaDescriptorResolver.setNamespaceFactory(namespaceFactoryImpl);
  this.javaDescriptorResolver.setProject(project);
  this.javaDescriptorResolver.setPsiClassFinder(psiClassFinderForJvm);
  this.javaDescriptorResolver.setSemanticServices(javaSemanticServices);
  this.javaDescriptorResolver.setTrace(bindingTrace);
  javaBridgeConfiguration.setJavaSemanticServices(javaSemanticServices);
  javaBridgeConfiguration.setMode(compilerSpecialMode);
  javaBridgeConfiguration.setProject(project);
  this.psiClassFinderForJvm.setCompilerDependencies(compilerDependencies);
  this.psiClassFinderForJvm.setProject(project);
  javaTypeTransformer.setJavaSemanticServices(javaSemanticServices);
  javaTypeTransformer.setResolver(javaDescriptorResolver);
  namespaceFactoryImpl.setConfiguration(javaBridgeConfiguration);
  namespaceFactoryImpl.setModuleDescriptor(moduleDescriptor);
  namespaceFactoryImpl.setTrace(bindingTrace);
  javaBridgeConfiguration.init();
  psiClassFinderForJvm.initialize();
}
