{
  this.javaSemanticServices=new JavaSemanticServices();
  this.javaDescriptorResolver=new JavaDescriptorResolver();
  this.bindingTrace=new org.jetbrains.jet.lang.resolve.BindingTraceContext();
  this.javaBridgeConfiguration=new JavaBridgeConfiguration();
  this.psiClassFinder=new PsiClassFinderImpl();
  this.moduleDescriptor=new org.jetbrains.jet.lang.descriptors.ModuleDescriptor(org.jetbrains.jet.lang.resolve.name.Name.special("<dummy>"));
  this.builtinsScopeExtensionMode=builtinsScopeExtensionMode;
  this.project=project;
  this.javaTypeTransformer=new JavaTypeTransformer();
  this.javaClassResolver=new JavaClassResolver();
  this.javaAnnotationResolver=new JavaAnnotationResolver();
  this.javaCompileTimeConstResolver=new JavaCompileTimeConstResolver();
  this.javaNamespaceResolver=new JavaNamespaceResolver();
  this.javaDescriptorSignatureResolver=new JavaDescriptorSignatureResolver();
  this.javaConstructorResolver=new JavaConstructorResolver();
  this.javaValueParameterResolver=new JavaValueParameterResolver();
  this.javaFunctionResolver=new JavaFunctionResolver();
  this.javaInnerClassResolver=new JavaInnerClassResolver();
  this.javaPropertiesResolver=new JavaPropertiesResolver();
  this.javaSemanticServices.setDescriptorResolver(javaDescriptorResolver);
  this.javaSemanticServices.setPsiClassFinder(psiClassFinder);
  this.javaSemanticServices.setTrace(bindingTrace);
  this.javaSemanticServices.setTypeTransformer(javaTypeTransformer);
  this.javaDescriptorResolver.setClassResolver(javaClassResolver);
  this.javaDescriptorResolver.setConstructorResolver(javaConstructorResolver);
  this.javaDescriptorResolver.setFunctionResolver(javaFunctionResolver);
  this.javaDescriptorResolver.setInnerClassResolver(javaInnerClassResolver);
  this.javaDescriptorResolver.setNamespaceResolver(javaNamespaceResolver);
  this.javaDescriptorResolver.setPropertiesResolver(javaPropertiesResolver);
  javaBridgeConfiguration.setBuiltinsScopeExtensionMode(builtinsScopeExtensionMode);
  javaBridgeConfiguration.setJavaSemanticServices(javaSemanticServices);
  javaBridgeConfiguration.setProject(project);
  this.psiClassFinder.setProject(project);
  javaTypeTransformer.setJavaSemanticServices(javaSemanticServices);
  javaTypeTransformer.setResolver(javaDescriptorResolver);
  javaClassResolver.setAnnotationResolver(javaAnnotationResolver);
  javaClassResolver.setJavaDescriptorResolver(javaDescriptorResolver);
  javaClassResolver.setNamespaceResolver(javaNamespaceResolver);
  javaClassResolver.setPsiClassFinder(psiClassFinder);
  javaClassResolver.setSemanticServices(javaSemanticServices);
  javaClassResolver.setSignatureResolver(javaDescriptorSignatureResolver);
  javaClassResolver.setTrace(bindingTrace);
  javaClassResolver.setTypeTransformer(javaTypeTransformer);
  javaAnnotationResolver.setClassResolver(javaClassResolver);
  javaAnnotationResolver.setCompileTimeConstResolver(javaCompileTimeConstResolver);
  javaCompileTimeConstResolver.setAnnotationResolver(javaAnnotationResolver);
  javaCompileTimeConstResolver.setClassResolver(javaClassResolver);
  javaNamespaceResolver.setJavaSemanticServices(javaSemanticServices);
  javaNamespaceResolver.setPsiClassFinder(psiClassFinder);
  javaNamespaceResolver.setTrace(bindingTrace);
  javaDescriptorSignatureResolver.setJavaSemanticServices(javaSemanticServices);
  javaConstructorResolver.setTrace(bindingTrace);
  javaConstructorResolver.setTypeTransformer(javaTypeTransformer);
  javaConstructorResolver.setValueParameterResolver(javaValueParameterResolver);
  javaValueParameterResolver.setTypeTransformer(javaTypeTransformer);
  javaFunctionResolver.setAnnotationResolver(javaAnnotationResolver);
  javaFunctionResolver.setParameterResolver(javaValueParameterResolver);
  javaFunctionResolver.setSignatureResolver(javaDescriptorSignatureResolver);
  javaFunctionResolver.setTrace(bindingTrace);
  javaFunctionResolver.setTypeTransformer(javaTypeTransformer);
  javaInnerClassResolver.setClassResolver(javaClassResolver);
  javaPropertiesResolver.setAnnotationResolver(javaAnnotationResolver);
  javaPropertiesResolver.setClassResolver(javaClassResolver);
  javaPropertiesResolver.setJavaDescriptorSignatureResolver(javaDescriptorSignatureResolver);
  javaPropertiesResolver.setSemanticServices(javaSemanticServices);
  javaPropertiesResolver.setTrace(bindingTrace);
  javaBridgeConfiguration.init();
  psiClassFinder.initialize();
}
