{
  if (offset < 0)   throw new IntroduceRefactoringException(JetRefactoringBundle.message("cannot.refactor.not.expression"));
  PsiElement element=file.findElementAt(offset);
  if (element == null)   throw new IntroduceRefactoringException(JetRefactoringBundle.message("cannot.refactor.not.expression"));
  if (element instanceof PsiWhiteSpace) {
    smartSelectExpression(editor,file,offset - 1,callback);
    return;
  }
  ArrayList<JetExpression> expressions=new ArrayList<JetExpression>();
  while (element != null && !(element instanceof JetBlockExpression) && !(element instanceof JetNamedFunction) && !(element instanceof JetClassBody) && !(element instanceof JetSecondaryConstructor)) {
    if (element instanceof JetExpression && !(element instanceof JetStatementExpression)) {
      expressions.add((JetExpression)element);
    }
    element=element.getParent();
  }
  if (expressions.size() == 0)   throw new IntroduceRefactoringException(JetRefactoringBundle.message("cannot.refactor.not.expression"));
  final DefaultListModel model=new DefaultListModel();
  for (  JetExpression expression : expressions) {
    model.addElement(expression);
  }
  final ScopeHighlighter highlighter=new ScopeHighlighter(editor);
  final JList list=new JBList(model);
  list.setCellRenderer(new DefaultListCellRenderer(){
    @Override public Component getListCellRendererComponent(    JList list,    Object value,    int index,    boolean isSelected,    boolean cellHasFocus){
      Component rendererComponent=super.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
      StringBuilder buffer=new StringBuilder();
      JetExpression element=(JetExpression)value;
      if (element.isValid()) {
        setText(getExpressionShortText(element));
      }
      return rendererComponent;
    }
  }
);
  list.addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      highlighter.dropHighlight();
      int selectedIndex=list.getSelectedIndex();
      if (selectedIndex < 0)       return;
      JetExpression expression=(JetExpression)model.get(selectedIndex);
      ArrayList<PsiElement> toExtract=new ArrayList<PsiElement>();
      toExtract.add(expression);
      highlighter.highlight(expression,toExtract);
    }
  }
);
  JBPopupFactory.getInstance().createListPopupBuilder(list).setTitle(JetRefactoringBundle.message("expressions.title")).setMovable(false).setResizable(false).setRequestFocus(true).setItemChoosenCallback(new Runnable(){
    @Override public void run(){
      callback.run((JetExpression)list.getSelectedValue());
    }
  }
).addListener(new JBPopupAdapter(){
    @Override public void onClosed(    LightweightWindowEvent event){
      highlighter.dropHighlight();
    }
  }
).createPopup().showInBestPositionFor(editor);
}
