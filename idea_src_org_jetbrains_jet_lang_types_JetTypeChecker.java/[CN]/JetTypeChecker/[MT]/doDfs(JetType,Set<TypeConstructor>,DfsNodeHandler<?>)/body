{
  if (!visited.add(current.getConstructor())) {
    return;
  }
  handler.beforeChildren(current);
  Map<TypeConstructor,TypeProjection> substitutionContext=TypeUtils.buildSubstitutionContext(current);
  for (  JetType supertype : current.getConstructor().getSupertypes()) {
    TypeConstructor supertypeConstructor=supertype.getConstructor();
    if (visited.contains(supertypeConstructor)) {
      continue;
    }
    JetType substitutedSupertype=TypeSubstitutor.INSTANCE.safeSubstitute(substitutionContext,supertype,Variance.INVARIANT);
    dfs(substitutedSupertype,visited,handler);
  }
  handler.afterChildren(current);
}
