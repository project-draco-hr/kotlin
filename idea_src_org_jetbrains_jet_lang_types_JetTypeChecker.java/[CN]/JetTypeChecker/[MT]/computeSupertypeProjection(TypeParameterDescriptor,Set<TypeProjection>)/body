{
  if (typeProjections.size() == 1) {
    return typeProjections.iterator().next();
  }
  Set<Type> ins=new HashSet<Type>();
  Set<Type> outs=new HashSet<Type>();
  Variance variance=parameterDescriptor.getVariance();
switch (variance) {
case INVARIANT:
    break;
case IN_VARIANCE:
  outs=null;
break;
case OUT_VARIANCE:
ins=null;
break;
}
for (TypeProjection projection : typeProjections) {
ProjectionKind projectionKind=projection.getProjectionKind();
if (projectionKind.allowsInCalls()) {
if (ins != null) {
ins.add(projection.getType());
}
}
 else {
ins=null;
}
if (projectionKind.allowsOutCalls()) {
if (outs != null) {
outs.add(projection.getType());
}
}
 else {
outs=null;
}
}
if (ins != null) {
ProjectionKind projectionKind=variance == Variance.IN_VARIANCE ? ProjectionKind.NO_PROJECTION : ProjectionKind.IN_ONLY;
return new TypeProjection(projectionKind,TypeUtils.intersect(ins));
}
 else if (outs != null) {
ProjectionKind projectionKind=variance == Variance.OUT_VARIANCE ? ProjectionKind.NO_PROJECTION : ProjectionKind.OUT_ONLY;
return new TypeProjection(projectionKind,commonSupertype(outs));
}
 else {
ProjectionKind projectionKind=variance == Variance.OUT_VARIANCE ? ProjectionKind.NO_PROJECTION : ProjectionKind.OUT_ONLY;
return new TypeProjection(projectionKind,commonSupertype(parameterDescriptor.getUpperBounds()));
}
}
