{
  boolean nullable=expectedType.getSort() == Type.OBJECT;
  if (nullable) {
    expectedType=JetTypeMapper.unboxType(expectedType);
  }
  if (arguments.size() > 0) {
    JetExpression operand=arguments.get(0);
    while (operand instanceof JetParenthesizedExpression) {
      operand=((JetParenthesizedExpression)operand).getExpression();
    }
    if (operand instanceof JetReferenceExpression) {
      final int index=codegen.indexOfLocal((JetReferenceExpression)operand);
      if (index >= 0 && JetTypeMapper.isIntPrimitive(expectedType)) {
        return StackValue.preIncrement(index,myDelta);
      }
    }
    StackValue value=codegen.genQualified(receiver,operand);
    value.dupReceiver(v);
    value.dupReceiver(v);
    value.put(expectedType,v);
    plusMinus(v,expectedType);
    value.store(expectedType,v);
    value.put(expectedType,v);
  }
 else {
    receiver.put(expectedType,v);
    plusMinus(v,expectedType);
  }
  return StackValue.onStack(expectedType);
}
