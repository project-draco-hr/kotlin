{
  IElementType operationType=expression.getOperationReference().getReferencedNameElementType();
  String name=OperatorConventions.ASSIGNMENT_OPERATIONS.get(operationType);
  TemporaryBindingTrace temporaryBindingTrace=TemporaryBindingTrace.create(context.trace);
  JetType assignmentOperationType=getTypeForBinaryCall(scope,name,context.replaceBindingTrace(temporaryBindingTrace),expression);
  if (assignmentOperationType == null) {
    String counterpartName=OperatorConventions.BINARY_OPERATION_NAMES.get(OperatorConventions.ASSIGNMENT_OPERATION_COUNTERPARTS.get(operationType));
    JetType typeForBinaryCall=getTypeForBinaryCall(scope,counterpartName,context,expression);
    if (typeForBinaryCall != null) {
      JetExpression left=JetPsiUtil.deparenthesize(expression.getLeft());
      if (left instanceof JetArrayAccessExpression) {
        resolveArrayAccessToLValue((JetArrayAccessExpression)left,expression.getRight(),expression.getOperationReference(),context);
      }
      context.trace.record(BindingContext.VARIABLE_REASSIGNMENT,expression);
      ExpressionTypingUtils.checkWrappingInRef(expression.getLeft(),context);
    }
  }
 else {
    temporaryBindingTrace.commit();
  }
  return checkExpectedType(expression,context);
}
