{
  ExpressionTypingContext context=contextWithExpectedType.replaceExpectedType(TypeUtils.NO_EXPECTED_TYPE).replaceExpectedReturnType(TypeUtils.NO_EXPECTED_TYPE);
  JetSimpleNameExpression operationSign=expression.getOperationReference();
  IElementType operationType=operationSign.getReferencedNameElementType();
  String name=OperatorConventions.ASSIGNMENT_OPERATIONS.get(operationType);
  TemporaryBindingTrace temporaryBindingTrace=TemporaryBindingTrace.create(context.trace);
  JetType assignmentOperationType=basic.getTypeForBinaryCall(scope,name,context.replaceBindingTrace(temporaryBindingTrace),expression);
  JetExpression left=JetPsiUtil.deparenthesize(expression.getLeft());
  if (assignmentOperationType == null) {
    String counterpartName=OperatorConventions.BINARY_OPERATION_NAMES.get(OperatorConventions.ASSIGNMENT_OPERATION_COUNTERPARTS.get(operationType));
    if (left instanceof JetArrayAccessExpression) {
      JetArrayAccessExpression arrayAccessExpression=(JetArrayAccessExpression)left;
      resolveArrayAccessToLValue(arrayAccessExpression,expression.getRight(),operationSign,context);
    }
    assignmentOperationType=basic.getTypeForBinaryCall(scope,counterpartName,context,expression);
    if (assignmentOperationType != null) {
      context.trace.record(VARIABLE_REASSIGNMENT,expression);
      ExpressionTypingUtils.checkWrappingInRef(expression.getLeft(),context);
    }
  }
 else {
    temporaryBindingTrace.commit();
    checkReassignment(expression,context,assignmentOperationType,left);
  }
  basic.checkLValue(context.trace,expression.getLeft());
  return checkAssignmentType(assignmentOperationType,expression,contextWithExpectedType);
}
