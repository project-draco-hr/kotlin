{
  ExpressionTypingContext context=typingContext.replaceContextDependency(INDEPENDENT).replaceScope(scope);
  JetTypeReference receiverTypeRef=property.getReceiverTypeRef();
  if (receiverTypeRef != null) {
    context.trace.report(LOCAL_EXTENSION_PROPERTY.on(receiverTypeRef));
  }
  JetPropertyAccessor getter=property.getGetter();
  if (getter != null) {
    context.trace.report(LOCAL_VARIABLE_WITH_GETTER.on(getter));
  }
  JetPropertyAccessor setter=property.getSetter();
  if (setter != null) {
    context.trace.report(LOCAL_VARIABLE_WITH_SETTER.on(setter));
  }
  JetExpression delegateExpression=property.getDelegateExpression();
  if (delegateExpression != null) {
    components.expressionTypingServices.getTypeInfo(delegateExpression,context);
    context.trace.report(LOCAL_VARIABLE_WITH_DELEGATE.on(property.getDelegate()));
  }
  for (  JetTypeParameter typeParameter : property.getTypeParameters()) {
    AnnotationResolver.reportUnsupportedAnnotationForTypeParameter(typeParameter,context.trace);
  }
  VariableDescriptor propertyDescriptor=components.expressionTypingServices.getDescriptorResolver().resolveLocalVariableDescriptor(scope,property,context.dataFlowInfo,context.trace);
  JetExpression initializer=property.getInitializer();
  DataFlowInfo dataFlowInfo=context.dataFlowInfo;
  if (initializer != null) {
    JetType outType=propertyDescriptor.getType();
    JetTypeInfo typeInfo=facade.getTypeInfo(initializer,context.replaceExpectedType(outType));
    dataFlowInfo=typeInfo.getDataFlowInfo();
  }
{
    VariableDescriptor olderVariable=scope.getLocalVariable(propertyDescriptor.getName());
    ExpressionTypingUtils.checkVariableShadowing(context,propertyDescriptor,olderVariable);
  }
  scope.addVariableDescriptor(propertyDescriptor);
  ModifiersChecker.create(context.trace).checkModifiersForLocalDeclaration(property,propertyDescriptor);
  return DataFlowUtils.checkStatementType(property,context,dataFlowInfo);
}
