{
  components.expressionTypingServices.getAnnotationResolver().resolveAnnotationsWithArguments(scope,multiDeclaration.getModifierList(),context.trace);
  JetExpression initializer=multiDeclaration.getInitializer();
  if (initializer == null) {
    context.trace.report(INITIALIZER_REQUIRED_FOR_MULTIDECLARATION.on(multiDeclaration));
    return JetTypeInfo.create(null,context.dataFlowInfo);
  }
  ExpressionReceiver expressionReceiver=ExpressionTypingUtils.getExpressionReceiver(facade,initializer,context.replaceExpectedType(NO_EXPECTED_TYPE).replaceContextDependency(INDEPENDENT));
  DataFlowInfo dataFlowInfo=facade.getTypeInfo(initializer,context).getDataFlowInfo();
  if (expressionReceiver == null) {
    return JetTypeInfo.create(null,dataFlowInfo);
  }
  components.expressionTypingUtils.defineLocalVariablesFromMultiDeclaration(scope,multiDeclaration,expressionReceiver,initializer,context);
  return DataFlowUtils.checkStatementType(multiDeclaration,context,dataFlowInfo);
}
