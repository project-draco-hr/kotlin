{
  ExpressionTypingContext context=contextWithExpectedType.replaceExpectedType(TypeUtils.NO_EXPECTED_TYPE).replaceScope(scope);
  JetExpression leftOperand=expression.getLeft();
  JetExpression left=leftOperand == null ? null : context.expressionTypingServices.deparenthesize(leftOperand,context);
  JetExpression right=expression.getRight();
  if (left instanceof JetArrayAccessExpression) {
    JetArrayAccessExpression arrayAccessExpression=(JetArrayAccessExpression)left;
    if (right == null)     return JetTypeInfo.create(null,context.dataFlowInfo);
    JetTypeInfo typeInfo=basic.resolveArrayAccessSetMethod(arrayAccessExpression,right,context,context.trace);
    BasicExpressionTypingVisitor.checkLValue(context.trace,arrayAccessExpression);
    return JetTypeInfo.create(checkAssignmentType(typeInfo.getType(),expression,contextWithExpectedType),typeInfo.getDataFlowInfo());
  }
  JetTypeInfo leftInfo=ExpressionTypingUtils.getTypeInfoOrNullType(left,context,facade);
  JetType leftType=leftInfo.getType();
  DataFlowInfo dataFlowInfo=leftInfo.getDataFlowInfo();
  if (right != null) {
    JetTypeInfo rightInfo=facade.getTypeInfo(right,context.replaceDataFlowInfo(dataFlowInfo).replaceExpectedType(leftType));
    dataFlowInfo=rightInfo.getDataFlowInfo();
  }
  if (leftType != null && leftOperand != null) {
    BasicExpressionTypingVisitor.checkLValue(context.trace,leftOperand);
  }
  return DataFlowUtils.checkStatementType(expression,contextWithExpectedType,dataFlowInfo);
}
