{
  ExpressionTypingContext context=contextWithExpectedType.replaceExpectedType(TypeUtils.NO_EXPECTED_TYPE);
  JetExpression left=JetPsiUtil.deparenthesize(expression.getLeft());
  JetExpression right=expression.getRight();
  if (left instanceof JetArrayAccessExpression) {
    JetArrayAccessExpression arrayAccessExpression=(JetArrayAccessExpression)left;
    if (right == null)     return null;
    JetType assignmentType=basic.resolveArrayAccessSetMethod(arrayAccessExpression,right,context.replaceScope(scope),context.trace);
    basic.checkLValue(context.trace,arrayAccessExpression);
    return checkAssignmentType(assignmentType,expression,contextWithExpectedType);
  }
  JetType leftType=facade.getType(expression.getLeft(),context.replaceScope(scope)).getType();
  if (right != null) {
    JetType rightType=facade.getType(right,context.replaceExpectedType(leftType).replaceScope(scope)).getType();
  }
  if (leftType != null) {
    basic.checkLValue(context.trace,expression.getLeft());
  }
  return DataFlowUtils.checkStatementType(expression,contextWithExpectedType);
}
