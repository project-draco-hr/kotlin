{
  final Map<PsiMethod,JetNamedFunction> mappingToJava=Maps.newHashMap();
  for (  JetNamedFunction function : functions) {
    if (isOverridableHeuristic(function)) {
      PsiMethod method=LightClassUtil.getLightClassMethod(function);
      if (method != null) {
        mappingToJava.put(method,function);
      }
    }
  }
  Set<PsiClass> classes=new THashSet<PsiClass>();
  for (  PsiMethod method : mappingToJava.keySet()) {
    ProgressManager.checkCanceled();
    PsiClass parentClass=method.getContainingClass();
    if (parentClass != null && !CommonClassNames.JAVA_LANG_OBJECT.equals(parentClass.getQualifiedName())) {
      classes.add(parentClass);
    }
  }
  final Set<JetNamedFunction> overridden=Sets.newHashSet();
  for (  PsiClass aClass : classes) {
    AllOverridingMethodsSearch.search(aClass).forEach(new Processor<Pair<PsiMethod,PsiMethod>>(){
      @Override public boolean process(      Pair<PsiMethod,PsiMethod> pair){
        ProgressManager.checkCanceled();
        PsiMethod superMethod=pair.getFirst();
        JetNamedFunction function=mappingToJava.get(superMethod);
        if (function != null) {
          mappingToJava.remove(superMethod);
          overridden.add(function);
        }
        return !mappingToJava.isEmpty();
      }
    }
);
  }
  for (  JetNamedFunction function : overridden) {
    ProgressManager.checkCanceled();
    PsiElement anchor=function.getNameIdentifier();
    if (anchor == null)     anchor=function;
    LineMarkerInfo info=new LineMarkerInfo<PsiElement>(anchor,anchor.getTextOffset(),isImplemented(function) ? IMPLEMENTED_MARK : OVERRIDDEN_MARK,Pass.UPDATE_OVERRIDEN_MARKERS,OVERRIDDEN_FUNCTION.getTooltip(),OVERRIDDEN_FUNCTION.getNavigationHandler(),GutterIconRenderer.Alignment.RIGHT);
    result.add(info);
  }
}
