{
  final Set<T> overridden=Sets.newHashSet();
  for (  PsiClass aClass : classes) {
    AllOverridingMethodsSearch.search(aClass).forEach(new Processor<Pair<PsiMethod,PsiMethod>>(){
      @Override public boolean process(      Pair<PsiMethod,PsiMethod> pair){
        ProgressManager.checkCanceled();
        if (!(pair.getSecond() instanceof KotlinLightMethodFromTrait)) {
          PsiMethod superMethod=pair.getFirst();
          T declaration=mappingToJava.get(superMethod);
          if (declaration != null) {
            mappingToJava.remove(superMethod);
            overridden.add(declaration);
          }
        }
        return !mappingToJava.isEmpty();
      }
    }
);
  }
  return overridden;
}
