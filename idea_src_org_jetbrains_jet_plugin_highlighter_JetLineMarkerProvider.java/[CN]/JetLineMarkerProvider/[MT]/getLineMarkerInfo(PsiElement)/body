{
  JetFile file=(JetFile)element.getContainingFile();
  if (file == null)   return null;
  if (!(element instanceof JetNamedFunction || element instanceof JetProperty))   return null;
  BindingContext bindingContext=AnalyzerFacadeWithCache.getContextForElement((JetElement)element);
  DeclarationDescriptor descriptor=bindingContext.get(BindingContext.DECLARATION_TO_DESCRIPTOR,element);
  if (!(descriptor instanceof CallableMemberDescriptor))   return null;
  Set<? extends CallableMemberDescriptor> overriddenMembers=OverrideResolver.getDirectlyOverriddenDeclarations((CallableMemberDescriptor)descriptor);
  if (overriddenMembers.isEmpty())   return null;
  return new LineMarkerInfo<JetElement>((JetElement)element,element.getTextOffset(),isImplementsAndNotOverrides((CallableMemberDescriptor)descriptor,overriddenMembers) ? IMPLEMENTING_MARK : OVERRIDING_MARK,Pass.UPDATE_ALL,new Function<JetElement,String>(){
    @Override public String fun(    JetElement element){
      return calculateTooltipString(element);
    }
  }
,new KotlinSuperNavigationHandler());
}
