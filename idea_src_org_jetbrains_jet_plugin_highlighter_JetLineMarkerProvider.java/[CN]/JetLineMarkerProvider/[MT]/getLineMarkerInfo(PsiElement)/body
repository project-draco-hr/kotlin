{
  JetFile file=(JetFile)element.getContainingFile();
  if (file == null)   return null;
  if (!(element instanceof JetNamedFunction || element instanceof JetProperty))   return null;
  BindingContext bindingContext=AnalyzerFacadeWithCache.getContextForElement((JetElement)element);
  DeclarationDescriptor descriptor=bindingContext.get(BindingContext.DECLARATION_TO_DESCRIPTOR,element);
  if (!(descriptor instanceof CallableMemberDescriptor)) {
    return null;
  }
  Set<? extends CallableMemberDescriptor> overriddenMembers=OverrideResolver.getDirectlyOverriddenDeclarations((CallableMemberDescriptor)descriptor);
  if (overriddenMembers.size() == 0) {
    return null;
  }
  boolean allOverriddenAbstract=true;
  for (  CallableMemberDescriptor function : overriddenMembers) {
    allOverriddenAbstract&=function.getModality() == Modality.ABSTRACT;
  }
  return new LineMarkerInfo<JetElement>((JetElement)element,element.getTextOffset(),allOverriddenAbstract ? IMPLEMENTING_MARK : OVERRIDING_MARK,Pass.UPDATE_ALL,new Function<JetElement,String>(){
    @Override public String fun(    JetElement element){
      return calculateTooltipString(element);
    }
  }
,new KotlinSuperNavigationHandler());
}
