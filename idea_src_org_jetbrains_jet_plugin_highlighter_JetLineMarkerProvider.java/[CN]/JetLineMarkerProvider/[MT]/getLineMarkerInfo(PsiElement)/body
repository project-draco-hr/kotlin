{
  JetFile file=(JetFile)element.getContainingFile();
  if (file == null)   return null;
  if (!(element instanceof JetNamedFunction || element instanceof JetProperty))   return null;
  final BindingContext bindingContext=WholeProjectAnalyzerFacade.analyzeProjectWithCacheOnAFile(file);
  final DeclarationDescriptor descriptor=bindingContext.get(BindingContext.DECLARATION_TO_DESCRIPTOR,element);
  if (!(descriptor instanceof CallableMemberDescriptor))   return null;
  final Set<? extends CallableMemberDescriptor> overriddenMembers=((CallableMemberDescriptor)descriptor).getOverriddenDescriptors();
  if (overriddenMembers.size() == 0)   return null;
  boolean allOverriddenAbstract=true;
  for (  CallableMemberDescriptor function : overriddenMembers) {
    allOverriddenAbstract&=function.getModality() == Modality.ABSTRACT;
  }
  final String implementsOrOverrides=allOverriddenAbstract ? "implements" : "overrides";
  final String memberKind=element instanceof JetNamedFunction ? "function" : "property";
  return new LineMarkerInfo<PsiElement>(element,element.getTextOffset(),allOverriddenAbstract ? IMPLEMENTING_MARK : OVERRIDING_MARK,Pass.UPDATE_ALL,new Function<PsiElement,String>(){
    @Override public String fun(    PsiElement element){
      StringBuilder builder=new StringBuilder();
      builder.append(DescriptorRenderer.HTML.render(descriptor));
      int overrideCount=overriddenMembers.size();
      if (overrideCount >= 1) {
        builder.append(" ").append(implementsOrOverrides).append(" ");
        builder.append(DescriptorRenderer.HTML.render(overriddenMembers.iterator().next()));
      }
      if (overrideCount > 1) {
        int count=overrideCount - 1;
        builder.append(" and ").append(count).append(" other ").append(memberKind);
        if (count > 1) {
          builder.append("s");
        }
      }
      return builder.toString();
    }
  }
,new GutterIconNavigationHandler<PsiElement>(){
    @Override public void navigate(    MouseEvent event,    PsiElement elt){
      if (overriddenMembers.isEmpty())       return;
      final List<PsiElement> list=Lists.newArrayList();
      for (      CallableMemberDescriptor overriddenMember : overriddenMembers) {
        PsiElement declarationPsiElement=bindingContext.get(BindingContext.DESCRIPTOR_TO_DECLARATION,overriddenMember);
        list.add(declarationPsiElement);
      }
      if (list.isEmpty()) {
        String myEmptyText="empty text";
        final JComponent renderer=HintUtil.createErrorLabel(myEmptyText);
        final JBPopup popup=JBPopupFactory.getInstance().createComponentPopupBuilder(renderer,renderer).createPopup();
        if (event != null) {
          popup.show(new RelativePoint(event));
        }
        return;
      }
      if (list.size() == 1) {
        PsiNavigateUtil.navigate(list.iterator().next());
      }
 else {
        final JBPopup popup=NavigationUtil.getPsiElementPopup(PsiUtilCore.toPsiElementArray(list),new DefaultPsiElementCellRenderer(){
          @Override public String getElementText(          PsiElement element){
            if (element instanceof JetNamedFunction) {
              JetNamedFunction function=(JetNamedFunction)element;
              return DescriptorRenderer.HTML.render(bindingContext.get(BindingContext.FUNCTION,function));
            }
            return super.getElementText(element);
          }
        }
,DescriptorRenderer.HTML.render(descriptor));
        if (event != null) {
          popup.show(new RelativePoint(event));
        }
      }
    }
  }
);
}
