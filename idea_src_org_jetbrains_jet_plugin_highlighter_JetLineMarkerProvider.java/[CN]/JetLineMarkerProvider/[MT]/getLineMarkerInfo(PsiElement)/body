{
  JetFile file=(JetFile)element.getContainingFile();
  if (file == null)   return null;
  if (!(element instanceof JetNamedFunction || element instanceof JetProperty))   return null;
  final BindingContext bindingContext=WholeProjectAnalyzerFacade.analyzeProjectWithCacheOnAFile(file).getBindingContext();
  final DeclarationDescriptor descriptor=bindingContext.get(BindingContext.DECLARATION_TO_DESCRIPTOR,element);
  if (!(descriptor instanceof CallableMemberDescriptor)) {
    return null;
  }
  final Set<? extends CallableMemberDescriptor> overriddenMembers=((CallableMemberDescriptor)descriptor).getOverriddenDescriptors();
  if (overriddenMembers.size() == 0) {
    return null;
  }
  boolean allOverriddenAbstract=true;
  for (  CallableMemberDescriptor function : overriddenMembers) {
    allOverriddenAbstract&=function.getModality() == Modality.ABSTRACT;
  }
  return new LineMarkerInfo<PsiElement>(element,element.getTextOffset(),allOverriddenAbstract ? IMPLEMENTING_MARK : OVERRIDING_MARK,Pass.UPDATE_ALL,new Function<PsiElement,String>(){
    @Override public String fun(    PsiElement element){
      return countTooltipString(element);
    }
  }
,new GutterIconNavigationHandler<PsiElement>(){
    @Override public void navigate(    MouseEvent event,    PsiElement elt){
      iconNavigatorHandler(event,elt);
    }
  }
);
}
