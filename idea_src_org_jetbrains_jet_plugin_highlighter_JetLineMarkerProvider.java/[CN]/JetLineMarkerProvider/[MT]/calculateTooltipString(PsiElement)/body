{
  JetFile file=(JetFile)element.getContainingFile();
  if (file == null)   return "";
  final BindingContext bindingContext=WholeProjectAnalyzerFacade.analyzeProjectWithCacheOnAFile(file).getBindingContext();
  final DeclarationDescriptor descriptor=bindingContext.get(BindingContext.DECLARATION_TO_DESCRIPTOR,element);
  if (!(descriptor instanceof CallableMemberDescriptor)) {
    return "";
  }
  final Set<? extends CallableMemberDescriptor> overriddenMembers=((CallableMemberDescriptor)descriptor).getOverriddenDescriptors();
  if (overriddenMembers.size() == 0) {
    return "";
  }
  boolean allOverriddenAbstract=true;
  for (  CallableMemberDescriptor function : overriddenMembers) {
    allOverriddenAbstract&=function.getModality() == Modality.ABSTRACT;
  }
  final String implementsOrOverrides=allOverriddenAbstract ? "implements" : "overrides";
  final String memberKind=element instanceof JetNamedFunction ? "function" : "property";
  StringBuilder builder=new StringBuilder();
  builder.append(DescriptorRendererImpl.HTML.render(descriptor));
  int overrideCount=overriddenMembers.size();
  if (overrideCount >= 1) {
    builder.append("\n").append(implementsOrOverrides).append("\n");
    builder.append(DescriptorRendererImpl.HTML.render(overriddenMembers.iterator().next()));
  }
  if (overrideCount > 1) {
    int count=overrideCount - 1;
    builder.append("\nand ").append(count).append(" other ").append(memberKind);
    if (count > 1) {
      builder.append("s");
    }
  }
  return builder.toString();
}
