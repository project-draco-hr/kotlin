{
  BindingContext bindingContext=AnalyzerFacadeWithCache.getContextForElement(element);
  DeclarationDescriptor descriptor=bindingContext.get(BindingContext.DECLARATION_TO_DESCRIPTOR,element);
  if (!(descriptor instanceof CallableMemberDescriptor))   return "";
  CallableMemberDescriptor callableDescriptor=(CallableMemberDescriptor)descriptor;
  Set<CallableMemberDescriptor> overriddenMembers=OverrideResolver.getDirectlyOverriddenDeclarations(callableDescriptor);
  if (overriddenMembers.isEmpty())   return "";
  final boolean isAbstract=callableDescriptor.getModality() == Modality.ABSTRACT;
  final DescriptorRenderer renderer=new DescriptorRendererBuilder().setTextFormat(DescriptorRenderer.TextFormat.HTML).setWithDefinedIn(false).setStartFromName(true).setWithoutSuperTypes(true).build();
  List<String> containingStrings=ContainerUtil.map(overriddenMembers,new Function<CallableMemberDescriptor,String>(){
    @Override public String fun(    CallableMemberDescriptor overriddenDescriptor){
      DeclarationDescriptor declaration=overriddenDescriptor.getContainingDeclaration();
      String memberKind=overriddenDescriptor instanceof PropertyAccessorDescriptor || overriddenDescriptor instanceof PropertyDescriptor ? "property" : "function";
      boolean isBaseAbstract=overriddenDescriptor.getModality() == Modality.ABSTRACT;
      return String.format("%s %s in '%s'",!isAbstract && isBaseAbstract ? "Implements" : "Overrides",memberKind,renderer.render(declaration));
    }
  }
);
  Collections.sort(containingStrings);
  return StringUtil.join(containingStrings,"<br/>");
}
