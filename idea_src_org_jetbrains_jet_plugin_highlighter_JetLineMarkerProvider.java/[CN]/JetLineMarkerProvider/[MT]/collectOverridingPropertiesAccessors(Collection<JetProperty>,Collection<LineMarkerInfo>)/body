{
  Map<PsiMethod,JetProperty> mappingToJava=Maps.newHashMap();
  for (  JetProperty property : properties) {
    if (isOverridableHeuristic(property)) {
      LightClassUtil.PropertyAccessorsPsiMethods accessorsPsiMethods=LightClassUtil.getLightClassPropertyMethods(property);
      for (      PsiMethod psiMethod : accessorsPsiMethods) {
        mappingToJava.put(psiMethod,property);
      }
    }
  }
  Set<PsiClass> classes=collectContainingClasses(mappingToJava.keySet());
  for (  JetProperty property : MarkersPackage.getOverriddenDeclarations(mappingToJava,classes)) {
    ProgressManager.checkCanceled();
    PsiElement anchor=property.getNameIdentifier();
    if (anchor == null)     anchor=property;
    LineMarkerInfo info=new LineMarkerInfo<PsiElement>(anchor,anchor.getTextOffset(),isImplemented(property) ? IMPLEMENTED_MARK : OVERRIDDEN_MARK,Pass.UPDATE_OVERRIDEN_MARKERS,OVERRIDDEN_PROPERTY.getTooltip(),OVERRIDDEN_PROPERTY.getNavigationHandler(),GutterIconRenderer.Alignment.RIGHT);
    result.add(info);
  }
}
