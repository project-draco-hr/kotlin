{
  JetType type=context.get(BindingContext.EXPRESSION_TYPE,expr);
  JetNamedDeclaration declaration=null;
  if (type != null) {
    return new JetType[]{type};
  }
 else   if ((type=context.get(BindingContext.EXPECTED_EXPRESSION_TYPE,expr)) != null) {
    return new JetType[]{type};
  }
 else   if (expr instanceof JetTypeConstraint) {
    JetTypeConstraint constraint=(JetTypeConstraint)expr;
    return new JetType[]{context.get(BindingContext.TYPE,constraint.getBoundTypeReference())};
  }
 else   if (expr.getParent() instanceof JetTypeConstraint) {
    JetTypeConstraint constraint=(JetTypeConstraint)expr.getParent();
    return new JetType[]{context.get(BindingContext.TYPE,constraint.getBoundTypeReference())};
  }
 else   if (expr instanceof JetMultiDeclarationEntry) {
    JetMultiDeclarationEntry entry=(JetMultiDeclarationEntry)expr;
    JetTypeReference typeRef=entry.getTypeRef();
    if (typeRef != null) {
      return new JetType[]{context.get(BindingContext.TYPE,typeRef)};
    }
    declaration=entry;
  }
 else   if (expr instanceof JetParameter) {
    JetParameter parameter=(JetParameter)expr;
    JetTypeReference typeRef=parameter.getTypeReference();
    if (typeRef != null) {
      return new JetType[]{context.get(BindingContext.TYPE,typeRef)};
    }
    declaration=parameter;
  }
 else   if (expr.getParent() instanceof JetVariableDeclaration) {
    JetVariableDeclaration variable=(JetVariableDeclaration)expr.getParent();
    JetTypeReference typeRef=variable.getTypeRef();
    if (typeRef != null) {
      return new JetType[]{context.get(BindingContext.TYPE,typeRef)};
    }
    declaration=variable;
  }
  SearchScope scope=expr.getContainingFile().getUseScope();
  Set<JetType> expectedTypes=new HashSet<JetType>();
  if (declaration != null) {
    for (    PsiReference ref : SearchUtils.findAllReferences(declaration,scope)) {
      if (ref instanceof JetSimpleNameReference) {
        JetSimpleNameReference simpleNameRef=(JetSimpleNameReference)ref;
        JetType expectedType=context.get(BindingContext.EXPECTED_EXPRESSION_TYPE,simpleNameRef.getExpression());
        if (expectedType != null) {
          expectedTypes.add(expectedType);
        }
      }
    }
  }
  if (expectedTypes.isEmpty()) {
    return new JetType[0];
  }
  type=TypeUtils.intersect(JetTypeChecker.INSTANCE,expectedTypes);
  if (type != null) {
    return new JetType[]{type};
  }
 else {
    return expectedTypes.toArray(new JetType[expectedTypes.size()]);
  }
}
