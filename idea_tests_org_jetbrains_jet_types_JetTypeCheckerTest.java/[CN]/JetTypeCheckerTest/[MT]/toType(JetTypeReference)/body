{
  List<JetAttribute> attributeElements=typeNode.getAttributes();
  final List<Annotation> attributes=toAttributes(attributeElements);
  JetTypeElement typeElement=typeNode.getTypeElement();
  final Type[] result=new Type[1];
  typeElement.accept(new JetVisitor(){
    @Override public void visitUserType(    JetUserType type){
      List<JetTypeProjection> argumentElements=type.getTypeArguments();
      final List<TypeProjection> arguments=toTypeProjections(argumentElements);
      result[0]=new ClassType(attributes,TypeResolver.INSTANCE.resolveClass(BASIC_SCOPE,type),arguments);
    }
    @Override public void visitTupleType(    JetTupleType type){
      result[0]=TupleType.getTupleType(toTypes(type.getComponentTypeRefs()));
    }
    @Override public void visitJetElement(    JetElement elem){
      throw new IllegalArgumentException("Unsupported type: " + elem);
    }
  }
);
  return result[0];
}
