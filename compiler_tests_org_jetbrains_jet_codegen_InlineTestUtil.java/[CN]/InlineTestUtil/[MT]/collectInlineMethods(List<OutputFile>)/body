{
  final Set<MethodInfo> inlineMethods=new HashSet<MethodInfo>();
  for (  OutputFile file : files) {
    ClassReader cr=new ClassReader(file.asByteArray());
    final String[] className={null};
    cr.accept(new ClassVisitor(Opcodes.ASM4){
      @Override public void visit(      int version,      int access,      @NotNull String name,      String signature,      String superName,      String[] interfaces){
        className[0]=name;
        super.visit(version,access,name,signature,superName,interfaces);
      }
      @Override public MethodVisitor visitMethod(      int access,      @NotNull String name,      @NotNull String desc,      String signature,      String[] exceptions){
        return new MethodNode(Opcodes.ASM4,access,name,desc,signature,exceptions){
          @NotNull @Override public AnnotationVisitor visitAnnotation(          @NotNull String desc,          boolean visible){
            Type type=Type.getType(desc);
            String annotationClass=type.getInternalName();
            if (INLINE_ANNOTATION_CLASS.equals(annotationClass)) {
              inlineMethods.add(new MethodInfo(className[0],name,this.desc));
            }
            return super.visitAnnotation(desc,visible);
          }
        }
;
      }
    }
,0);
  }
  return inlineMethods;
}
