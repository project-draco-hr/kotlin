{
  final List<NotInlinedCall> notInlined=new ArrayList<NotInlinedCall>();
  for (  OutputFile file : files) {
    ClassReader cr=new ClassReader(file.asByteArray());
    final Ref<String> className=Ref.create();
    cr.accept(new ClassVisitor(Opcodes.ASM4){
      @Override public void visit(      int version,      int access,      @NotNull String name,      String signature,      String superName,      String[] interfaces){
        className.set(name);
        super.visit(version,access,name,signature,superName,interfaces);
      }
      @Override public MethodVisitor visitMethod(      int access,      @NotNull String name,      @NotNull String desc,      String signature,      String[] exceptions){
        FqName classFqName=JvmClassName.byInternalName(className.get()).getFqNameForClassNameWithoutDollars();
        if (PackageClassUtils.isPackageClassFqName(classFqName)) {
          return super.visitMethod(access,name,desc,signature,exceptions);
        }
        return new MethodNode(Opcodes.ASM4,access,name,desc,signature,exceptions){
          @Override public void visitMethodInsn(          int opcode,          @NotNull String owner,          String name,          @NotNull String desc,          boolean itf){
            MethodInfo methodCall=new MethodInfo(owner,name,desc);
            if (inlinedMethods.contains(methodCall)) {
              MethodInfo fromCall=new MethodInfo(className.get(),this.name,this.desc);
              if (methodCall.owner.endsWith(JvmAbi.TRAIT_IMPL_SUFFIX) && !fromCall.owner.equals(methodCall.owner)) {
                return;
              }
              notInlined.add(new NotInlinedCall(fromCall,methodCall));
            }
          }
        }
;
      }
    }
,0);
  }
  return notInlined;
}
