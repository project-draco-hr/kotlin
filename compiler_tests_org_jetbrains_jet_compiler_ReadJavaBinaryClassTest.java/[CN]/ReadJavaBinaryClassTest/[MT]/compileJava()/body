{
  JavaCompiler javaCompiler=ToolProvider.getSystemJavaCompiler();
  StandardJavaFileManager fileManager=javaCompiler.getStandardFileManager(null,Locale.ENGLISH,Charset.forName("utf-8"));
  try {
    Iterable<? extends JavaFileObject> javaFileObjectsFromFiles=fileManager.getJavaFileObjectsFromFiles(Collections.singleton(javaFile));
    List<String> options=Arrays.asList("-classpath","out/production/runtime" + File.pathSeparator + JetTestUtils.getAnnotationsJar().getPath(),"-d",tmpdir.getPath());
    JavaCompiler.CompilationTask task=javaCompiler.getTask(null,fileManager,null,options,null,javaFileObjectsFromFiles);
    Assert.assertTrue(task.call());
  }
  finally {
    fileManager.close();
  }
  JetCoreEnvironment jetCoreEnvironment=JetTestUtils.createEnvironmentWithMockJdk(myTestRootDisposable);
  jetCoreEnvironment.addToClasspath(tmpdir);
  jetCoreEnvironment.addToClasspath(new File("out/production/runtime"));
  JavaSemanticServices semanticServices=new JavaSemanticServices(jetCoreEnvironment.getProject(),new BindingTraceContext());
  JavaDescriptorResolver javaDescriptorResolver=semanticServices.getDescriptorResolver();
  return javaDescriptorResolver.resolveNamespace(FqName.topLevel("test"),DescriptorSearchRule.ERROR_IF_FOUND_IN_KOTLIN);
}
