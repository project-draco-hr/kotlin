{
  final JetStandardLibrary standardLibrary=JetStandardLibrary.getJetStandardLibrary(project);
  final FunctionCodegen functionCodegen=new FunctionCodegen(toClass,v,standardLibrary,bindingContext);
  final PropertyCodegen propertyCodegen=new PropertyCodegen(v,standardLibrary,bindingContext,functionCodegen);
  for (  JetParameter p : toClass.getPrimaryConstructorParameters()) {
    if (p.getValOrVarNode() != null) {
      VariableDescriptor descriptor=bindingContext.getParameterDescriptor(p);
      if (descriptor instanceof PropertyDescriptor) {
        PropertyDescriptor propertyDescriptor=(PropertyDescriptor)descriptor;
        propertyCodegen.generateDefaultGetter(propertyDescriptor,Opcodes.ACC_PUBLIC,kind);
        if (propertyDescriptor.isVar()) {
          propertyCodegen.generateDefaultSetter(propertyDescriptor,Opcodes.ACC_PUBLIC,kind);
        }
        if (!(kind instanceof OwnerKind.DelegateKind) && kind != OwnerKind.INTERFACE && bindingContext.hasBackingField(propertyDescriptor)) {
          v.visitField(Opcodes.ACC_PRIVATE,p.getName(),typeMapper.mapType(propertyDescriptor.getOutType()).getDescriptor(),null,null);
        }
      }
    }
  }
}
