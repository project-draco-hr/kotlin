{
  List<JetDelegationSpecifier> delegationSpecifiers=aClass.getDelegationSpecifiers();
  if (delegationSpecifiers.isEmpty())   return "java/lang/Object";
  JetDelegationSpecifier first=delegationSpecifiers.get(0);
  if (first instanceof JetDelegatorToSuperClass) {
    JetType superType=bindingContext.resolveTypeReference(first.getTypeReference());
    ClassDescriptor superClassDescriptor=(ClassDescriptor)superType.getConstructor().getDeclarationDescriptor();
    PsiElement superPsi=bindingContext.getDeclarationPsiElement(superClassDescriptor);
    if (superPsi instanceof PsiClass) {
      PsiClass psiClass=(PsiClass)superPsi;
      String fqn=psiClass.getQualifiedName();
      if (!psiClass.isInterface()) {
        return fqn.replace('.','/');
      }
    }
  }
 else   if (first instanceof JetDelegatorToSuperCall) {
    JetType superType=bindingContext.resolveTypeReference(first.getTypeReference());
    ClassDescriptor superClassDescriptor=(ClassDescriptor)superType.getConstructor().getDeclarationDescriptor();
    return JetTypeMapper.jvmName(superClassDescriptor,kind);
  }
  return "java/lang/Object";
}
