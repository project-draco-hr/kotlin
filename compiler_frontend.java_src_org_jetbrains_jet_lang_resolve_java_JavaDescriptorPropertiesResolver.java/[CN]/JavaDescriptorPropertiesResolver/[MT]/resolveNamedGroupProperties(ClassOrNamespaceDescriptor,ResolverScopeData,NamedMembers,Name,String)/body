{
  JavaDescriptorResolver.getResolverScopeData(scopeData);
  if (namedMembers.propertyDescriptors != null) {
    return;
  }
  if (namedMembers.propertyAccessors == null) {
    namedMembers.propertyAccessors=Collections.emptyList();
  }
  Map<String,GroupingValue> map=collectGroupingValuesFromAccessors(namedMembers.propertyAccessors);
  Set<PropertyDescriptor> propertiesFromCurrent=new HashSet<PropertyDescriptor>(1);
  int regularPropertiesCount=getNumberOfNonExtensionProperties(map);
  for (  GroupingValue members : map.values()) {
    if (!members.ext && regularPropertiesCount > 1) {
      continue;
    }
    boolean isFinal=isPropertyFinal(scopeData,members);
    boolean isVar=isPropertyVar(members);
    PropertyAccessorData characteristicMember=getCharacteristicMember(members);
    Visibility visibility=JavaDescriptorResolver.resolveVisibility(characteristicMember.getMember().getPsiMember(),null);
    CallableMemberDescriptor.Kind kind=CallableMemberDescriptor.Kind.DECLARATION;
    if (members.getter != null && members.getter.getMember() instanceof PsiMethodWrapper) {
      JetMethodAnnotation jetMethod=((PsiMethodWrapper)members.getter.getMember()).getJetMethod();
      visibility=JavaDescriptorResolver.resolveVisibility(characteristicMember.getMember().getPsiMember(),jetMethod);
      kind=DescriptorKindUtils.flagsToKind(jetMethod.kind());
    }
    DeclarationDescriptor realOwner=getRealOwner(owner,scopeData,characteristicMember.getMember().isStatic());
    boolean isEnumEntry=DescriptorUtils.isEnumClassObject(realOwner);
    PropertyDescriptor propertyDescriptor=new PropertyDescriptor(realOwner,javaDescriptorResolver.resolveAnnotations(characteristicMember.getMember().getPsiMember()),JavaDescriptorResolver.resolveModality(characteristicMember.getMember(),isFinal || isEnumEntry),visibility,isVar,propertyName,kind);
    if (isEnumEntry) {
      ClassDescriptorImpl dummyClassDescriptorForEnumEntryObject=new ClassDescriptorImpl(realOwner,Collections.<AnnotationDescriptor>emptyList(),Modality.FINAL,propertyName);
      dummyClassDescriptorForEnumEntryObject.initialize(true,Collections.<TypeParameterDescriptor>emptyList(),Collections.<JetType>emptyList(),JetScope.EMPTY,Collections.<ConstructorDescriptor>emptySet(),null);
      trace.record(BindingContext.OBJECT_DECLARATION_CLASS,propertyDescriptor,dummyClassDescriptorForEnumEntryObject);
    }
    PropertyGetterDescriptor getterDescriptor=null;
    PropertySetterDescriptor setterDescriptor=null;
    if (members.getter != null) {
      getterDescriptor=new PropertyGetterDescriptor(propertyDescriptor,javaDescriptorResolver.resolveAnnotations(members.getter.getMember().getPsiMember()),Modality.OPEN,visibility,true,false,kind);
    }
    if (members.setter != null) {
      Visibility setterVisibility=JavaDescriptorResolver.resolveVisibility(members.setter.getMember().getPsiMember(),null);
      if (members.setter.getMember() instanceof PsiMethodWrapper) {
        setterVisibility=JavaDescriptorResolver.resolveVisibility(members.setter.getMember().getPsiMember(),((PsiMethodWrapper)members.setter.getMember()).getJetMethod());
      }
      setterDescriptor=new PropertySetterDescriptor(propertyDescriptor,javaDescriptorResolver.resolveAnnotations(members.setter.getMember().getPsiMember()),Modality.OPEN,setterVisibility,true,false,kind);
    }
    propertyDescriptor.initialize(getterDescriptor,setterDescriptor);
    List<TypeParameterDescriptor> typeParameters=resolvePropertyTypeParameters(members,characteristicMember,propertyDescriptor);
    TypeVariableResolver typeVariableResolverForPropertyInternals=TypeVariableResolvers.typeVariableResolverFromTypeParameters(typeParameters,propertyDescriptor,"property " + propertyName + " in "+ context);
    JetType propertyType=getPropertyType(members,characteristicMember,typeVariableResolverForPropertyInternals);
    JetType receiverType=getReceiverType(characteristicMember,typeVariableResolverForPropertyInternals);
    propertyDescriptor.setType(propertyType,typeParameters,DescriptorUtils.getExpectedThisObjectIfNeeded(realOwner),receiverType);
    if (getterDescriptor != null) {
      getterDescriptor.initialize(propertyType);
    }
    if (setterDescriptor != null) {
      setterDescriptor.initialize(new ValueParameterDescriptorImpl(setterDescriptor,0,Collections.<AnnotationDescriptor>emptyList(),Name.identifier("p0"),false,propertyDescriptor.getType(),false,null));
    }
    if (kind == CallableMemberDescriptor.Kind.DECLARATION) {
      trace.record(BindingContext.VARIABLE,characteristicMember.getMember().getPsiMember(),propertyDescriptor);
    }
    propertiesFromCurrent.add(propertyDescriptor);
  }
  Set<PropertyDescriptor> propertiesFromSupertypes=getPropertiesFromSupertypes(scopeData,propertyName);
  final Set<PropertyDescriptor> properties=Sets.newHashSet();
  if (owner instanceof ClassDescriptor) {
    ClassDescriptor classDescriptor=(ClassDescriptor)owner;
    OverrideResolver.generateOverridesInFunctionGroup(propertyName,propertiesFromSupertypes,propertiesFromCurrent,classDescriptor,new OverrideResolver.DescriptorSink(){
      @Override public void addToScope(      @NotNull CallableMemberDescriptor fakeOverride){
        properties.add((PropertyDescriptor)fakeOverride);
      }
      @Override public void conflict(      @NotNull CallableMemberDescriptor fromSuper,      @NotNull CallableMemberDescriptor fromCurrent){
      }
    }
);
  }
  OverrideResolver.resolveUnknownVisibilities(properties,trace);
  properties.addAll(propertiesFromCurrent);
  namedMembers.propertyDescriptors=Sets.<VariableDescriptor>newHashSet(properties);
}
