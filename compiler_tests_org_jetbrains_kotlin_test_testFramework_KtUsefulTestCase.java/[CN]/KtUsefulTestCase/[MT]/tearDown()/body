{
  boolean var13=false;
  try {
    var13=true;
    Disposer.dispose(this.myTestRootDisposable);
    cleanupSwingDataStructures();
    cleanupDeleteOnExitHookList();
    var13=false;
  }
  finally {
    if (var13) {
      if (this.shouldContainTempFiles()) {
        FileUtil.resetCanonicalTempPathCache(ORIGINAL_TEMP_DIR);
        if (this.hasTmpFilesToKeep()) {
          File[] files1=(new File(this.myTempDir)).listFiles();
          if (files1 != null) {
            File[] var8=files1;
            int var9=files1.length;
            for (int var10=0; var10 < var9; ++var10) {
              File file1=var8[var10];
              if (!this.shouldKeepTmpFile(file1)) {
                FileUtil.delete(file1);
              }
            }
          }
        }
 else {
          FileUtil.delete(new File(this.myTempDir));
        }
      }
    }
  }
  if (this.shouldContainTempFiles()) {
    FileUtil.resetCanonicalTempPathCache(ORIGINAL_TEMP_DIR);
    if (this.hasTmpFilesToKeep()) {
      File[] files=(new File(this.myTempDir)).listFiles();
      if (files != null) {
        File[] var2=files;
        int var3=files.length;
        for (int var4=0; var4 < var3; ++var4) {
          File file=var2[var4];
          if (!this.shouldKeepTmpFile(file)) {
            FileUtil.delete(file);
          }
        }
      }
    }
 else {
      FileUtil.delete(new File(this.myTempDir));
    }
  }
  UIUtil.removeLeakingAppleListeners();
  super.tearDown();
}
