{
  JetCoreEnvironment environment=JetCoreEnvironment.createForProduction(disposable,configuration);
  Project project=environment.getProject();
  this.psiFileFactory=(PsiFileFactoryImpl)PsiFileFactory.getInstance(project);
  this.trace=new CliLightClassGenerationSupport.NoScopeRecordCliBindingTrace();
  this.module=TopDownAnalyzerFacadeForJVM.createJavaModule("<repl>");
  GlobalContextImpl context=ContextPackage.GlobalContext();
  TopDownAnalysisParameters topDownAnalysisParameters=TopDownAnalysisParameters.create(context.getStorageManager(),context.getExceptionTracker(),Predicates.<PsiFile>alwaysTrue(),false,true);
  scriptDeclarationFactory=new ScriptMutableDeclarationProviderFactory();
  InjectorForTopDownAnalyzerForJvm injector=new InjectorForTopDownAnalyzerForJvm(project,context,trace,module,ProjectScope.getAllScope(project),scriptDeclarationFactory);
  this.topDownAnalysisContext=new TopDownAnalysisContext(topDownAnalysisParameters);
  this.topDownAnalyzer=injector.getLazyTopDownAnalyzer();
  this.topDownAnalyzer.getCodeAnalyzer().getScopeProvider().setAdditionalFileScopesProvider(new Function1<JetFile,JetScope>(){
    @Override public JetScope invoke(    JetFile file){
      return lastLineScope;
    }
  }
);
  module.initialize(new CompositePackageFragmentProvider(Arrays.asList(injector.getResolveSession().getPackageFragmentProvider(),injector.getJavaDescriptorResolver().getPackageFragmentProvider())));
  module.addDependencyOnModule(module);
  module.addDependencyOnModule(KotlinBuiltIns.getInstance().getBuiltInsModule());
  module.seal();
  List<URL> classpath=Lists.newArrayList();
  for (  File file : configuration.getList(JVMConfigurationKeys.CLASSPATH_KEY)) {
    try {
      classpath.add(file.toURI().toURL());
    }
 catch (    MalformedURLException e) {
      throw UtilsPackage.rethrow(e);
    }
  }
  this.classLoader=new ReplClassLoader(new URLClassLoader(classpath.toArray(new URL[classpath.size()])));
}
