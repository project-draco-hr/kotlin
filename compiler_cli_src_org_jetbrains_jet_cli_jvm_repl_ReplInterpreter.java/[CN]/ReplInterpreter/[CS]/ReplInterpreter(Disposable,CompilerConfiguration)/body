{
  jetCoreEnvironment=JetCoreEnvironment.createForProduction(disposable,configuration);
  Project project=jetCoreEnvironment.getProject();
  trace=new BindingTraceContext();
  module=AnalyzerFacadeForJVM.createJavaModule("<repl>");
  TopDownAnalysisParameters topDownAnalysisParameters=TopDownAnalysisParameters.createForLocalDeclarations(new LockBasedStorageManager(),new ExceptionTracker(),Predicates.<PsiFile>alwaysTrue());
  injector=new InjectorForTopDownAnalyzerForJvm(project,topDownAnalysisParameters,trace,module);
  topDownAnalysisContext=new TopDownAnalysisContext(topDownAnalysisParameters);
  module.initialize(new CompositePackageFragmentProvider(Arrays.asList(injector.getTopDownAnalyzer().getPackageFragmentProvider(),injector.getJavaDescriptorResolver().getPackageFragmentProvider())));
  module.addDependencyOnModule(module);
  module.addDependencyOnModule(KotlinBuiltIns.getInstance().getBuiltInsModule());
  module.seal();
  List<URL> classpath=Lists.newArrayList();
  for (  File file : configuration.getList(JVMConfigurationKeys.CLASSPATH_KEY)) {
    try {
      classpath.add(file.toURI().toURL());
    }
 catch (    MalformedURLException e) {
      throw UtilsPackage.rethrow(e);
    }
  }
  classLoader=new ReplClassLoader(new URLClassLoader(classpath.toArray(new URL[0])));
}
