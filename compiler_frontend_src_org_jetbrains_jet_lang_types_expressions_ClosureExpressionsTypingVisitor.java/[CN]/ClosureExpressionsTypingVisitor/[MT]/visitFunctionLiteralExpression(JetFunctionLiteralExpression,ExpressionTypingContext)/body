{
  JetBlockExpression bodyExpression=expression.getFunctionLiteral().getBodyExpression();
  if (bodyExpression == null)   return null;
  JetType expectedType=context.expectedType;
  boolean functionTypeExpected=expectedType != NO_EXPECTED_TYPE && KotlinBuiltIns.getInstance().isFunctionOrExtensionFunctionType(expectedType);
  AnonymousFunctionDescriptor functionDescriptor=createFunctionDescriptor(expression,context,functionTypeExpected);
  JetType safeReturnType=computeReturnType(expression,context,functionDescriptor,functionTypeExpected);
  functionDescriptor.setReturnType(safeReturnType);
  JetType receiver=DescriptorUtils.getReceiverParameterType(functionDescriptor.getReceiverParameter());
  List<JetType> valueParametersTypes=DescriptorUtils.getValueParametersTypes(functionDescriptor.getValueParameters());
  JetType resultType=KotlinBuiltIns.getInstance().getFunctionType(Collections.<AnnotationDescriptor>emptyList(),receiver,valueParametersTypes,safeReturnType);
  if (expectedType != NO_EXPECTED_TYPE && KotlinBuiltIns.getInstance().isFunctionOrExtensionFunctionType(expectedType)) {
    return JetTypeInfo.create(resultType,context.dataFlowInfo);
  }
  return DataFlowUtils.checkType(resultType,expression,context,context.dataFlowInfo);
}
