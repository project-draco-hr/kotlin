{
  JetFunctionLiteral functionLiteral=expression.getFunctionLiteral();
  JetBlockExpression bodyExpression=functionLiteral.getBodyExpression();
  if (bodyExpression == null)   return null;
  JetType expectedType=context.expectedType;
  boolean functionTypeExpected=expectedType != NO_EXPECTED_TYPE && KotlinBuiltIns.getInstance().isFunctionType(expectedType);
  SimpleFunctionDescriptorImpl functionDescriptor=createFunctionDescriptor(expression,context,functionTypeExpected);
  List<ValueParameterDescriptor> valueParameters=functionDescriptor.getValueParameters();
  ReceiverParameterDescriptor receiverParameter=functionDescriptor.getReceiverParameter();
  JetType receiver=DescriptorUtils.getReceiverParameterType(receiverParameter);
  JetType returnType=NO_EXPECTED_TYPE;
  JetScope functionInnerScope=FunctionDescriptorUtil.getFunctionInnerScope(context.scope,functionDescriptor,context.trace);
  JetTypeReference returnTypeRef=functionLiteral.getReturnTypeRef();
  TemporaryBindingTrace temporaryTrace=TemporaryBindingTrace.create(context.trace,"trace to resolve function literal expression",expression);
  JetType expectedReturnType=functionTypeExpected ? KotlinBuiltIns.getInstance().getReturnTypeFromFunctionType(expectedType) : null;
  if (returnTypeRef != null) {
    returnType=context.expressionTypingServices.getTypeResolver().resolveType(context.scope,returnTypeRef,context.trace,true);
    context.expressionTypingServices.checkFunctionReturnType(expression,context.replaceScope(functionInnerScope).replaceExpectedType(returnType).replaceBindingTrace(temporaryTrace),temporaryTrace);
    if (functionTypeExpected) {
      if (!JetTypeChecker.INSTANCE.isSubtypeOf(expectedReturnType,returnType)) {
        temporaryTrace.report(EXPECTED_RETURN_TYPE_MISMATCH.on(returnTypeRef,expectedReturnType));
      }
    }
  }
 else {
    if (functionTypeExpected) {
      returnType=expectedReturnType;
    }
    returnType=context.expressionTypingServices.getBlockReturnedType(functionInnerScope,bodyExpression,CoercionStrategy.COERCION_TO_UNIT,context.replaceExpectedType(returnType).replaceBindingTrace(temporaryTrace),temporaryTrace).getType();
  }
  temporaryTrace.commit(new TraceEntryFilter(){
    @Override public boolean accept(    @NotNull WritableSlice<?,?> slice,    Object key){
      return (slice != BindingContext.RESOLUTION_RESULTS_FOR_FUNCTION && slice != BindingContext.RESOLUTION_RESULTS_FOR_PROPERTY && slice != BindingContext.TRACE_DELTAS_CACHE);
    }
  }
,true);
  JetType safeReturnType=returnType == null ? ErrorUtils.createErrorType("<return type>") : returnType;
  if (!functionLiteral.hasDeclaredReturnType() && functionTypeExpected) {
    if (KotlinBuiltIns.getInstance().isUnit(expectedReturnType)) {
      safeReturnType=KotlinBuiltIns.getInstance().getUnitType();
    }
  }
  functionDescriptor.setReturnType(safeReturnType);
  JetType resultType=KotlinBuiltIns.getInstance().getFunctionType(Collections.<AnnotationDescriptor>emptyList(),receiver,DescriptorUtils.getValueParametersTypes(valueParameters),safeReturnType);
  if (expectedType != NO_EXPECTED_TYPE && KotlinBuiltIns.getInstance().isFunctionType(expectedType)) {
    return JetTypeInfo.create(resultType,context.dataFlowInfo);
  }
  return DataFlowUtils.checkType(resultType,expression,context,context.dataFlowInfo);
}
