{
  if (!expression.getFunctionLiteral().hasBody())   return null;
  JetType expectedType=context.expectedType;
  boolean functionTypeExpected=!noExpectedType(expectedType) && KotlinBuiltIns.isFunctionOrExtensionFunctionType(expectedType);
  AnonymousFunctionDescriptor functionDescriptor=createFunctionDescriptor(expression,context,functionTypeExpected);
  JetType safeReturnType=computeReturnType(expression,context,functionDescriptor,functionTypeExpected);
  functionDescriptor.setReturnType(safeReturnType);
  JetType receiver=DescriptorUtils.getReceiverParameterType(functionDescriptor.getExtensionReceiverParameter());
  List<JetType> valueParametersTypes=ExpressionTypingUtils.getValueParametersTypes(functionDescriptor.getValueParameters());
  JetType resultType=components.builtIns.getFunctionType(Annotations.EMPTY,receiver,valueParametersTypes,safeReturnType);
  if (!noExpectedType(expectedType) && KotlinBuiltIns.isFunctionOrExtensionFunctionType(expectedType)) {
    return JetTypeInfo.create(resultType,context.dataFlowInfo);
  }
  return DataFlowUtils.checkType(resultType,expression,context,context.dataFlowInfo);
}
