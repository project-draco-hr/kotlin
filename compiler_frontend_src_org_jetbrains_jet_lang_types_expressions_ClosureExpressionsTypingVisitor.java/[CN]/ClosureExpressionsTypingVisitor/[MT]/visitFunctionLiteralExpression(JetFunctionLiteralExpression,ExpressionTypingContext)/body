{
  JetBlockExpression bodyExpression=expression.getFunctionLiteral().getBodyExpression();
  if (bodyExpression == null)   return null;
  Name callerName=getCallerName(expression);
  if (callerName != null) {
    context.labelResolver.enterLabeledElement(new LabelName(callerName.asString()),expression);
  }
  JetType expectedType=context.expectedType;
  boolean functionTypeExpected=!noExpectedType(expectedType) && KotlinBuiltIns.getInstance().isFunctionOrExtensionFunctionType(expectedType);
  AnonymousFunctionDescriptor functionDescriptor=createFunctionDescriptor(expression,context,functionTypeExpected);
  JetType safeReturnType=computeReturnType(expression,context,functionDescriptor,functionTypeExpected);
  functionDescriptor.setReturnType(safeReturnType);
  JetType receiver=DescriptorUtils.getReceiverParameterType(functionDescriptor.getReceiverParameter());
  List<JetType> valueParametersTypes=DescriptorUtils.getValueParametersTypes(functionDescriptor.getValueParameters());
  JetType resultType=KotlinBuiltIns.getInstance().getFunctionType(Annotations.EMPTY,receiver,valueParametersTypes,safeReturnType);
  if (!noExpectedType(expectedType) && KotlinBuiltIns.getInstance().isFunctionOrExtensionFunctionType(expectedType)) {
    return JetTypeInfo.create(resultType,context.dataFlowInfo);
  }
  if (callerName != null) {
    context.labelResolver.exitLabeledElement(expression);
  }
  return DataFlowUtils.checkType(resultType,expression,context,context.dataFlowInfo);
}
