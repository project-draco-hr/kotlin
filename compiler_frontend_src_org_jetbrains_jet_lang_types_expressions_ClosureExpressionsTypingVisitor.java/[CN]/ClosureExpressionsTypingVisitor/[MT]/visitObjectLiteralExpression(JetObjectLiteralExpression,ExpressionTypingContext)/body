{
  DelegatingBindingTrace delegatingBindingTrace=context.trace.get(TRACE_DELTAS_CACHE,expression.getObjectDeclaration());
  if (delegatingBindingTrace != null) {
    delegatingBindingTrace.addAllMyDataTo(context.trace);
    JetType type=context.trace.get(EXPRESSION_TYPE,expression);
    return DataFlowUtils.checkType(type,expression,context,context.dataFlowInfo);
  }
  final JetType[] result=new JetType[1];
  final TemporaryBindingTrace temporaryTrace=TemporaryBindingTrace.create(context.trace,"trace to resolve object literal expression",expression);
  ObservableBindingTrace.RecordHandler<PsiElement,ClassDescriptor> handler=new ObservableBindingTrace.RecordHandler<PsiElement,ClassDescriptor>(){
    @Override public void handleRecord(    WritableSlice<PsiElement,ClassDescriptor> slice,    PsiElement declaration,    final ClassDescriptor descriptor){
      if (slice == CLASS && declaration == expression.getObjectDeclaration()) {
        JetType defaultType=DeferredType.createRecursionIntolerant(components.globalContext.getStorageManager(),context.trace,new Function0<JetType>(){
          @Override public JetType invoke(){
            return descriptor.getDefaultType();
          }
        }
);
        result[0]=defaultType;
        if (!context.trace.get(PROCESSED,expression)) {
          temporaryTrace.record(EXPRESSION_TYPE,expression,defaultType);
          temporaryTrace.record(PROCESSED,expression);
        }
      }
    }
  }
;
  ObservableBindingTrace traceAdapter=new ObservableBindingTrace(temporaryTrace);
  traceAdapter.addHandler(CLASS,handler);
  TopDownAnalyzer.processClassOrObject(components.globalContext,null,context.replaceBindingTrace(traceAdapter).replaceContextDependency(INDEPENDENT),context.scope.getContainingDeclaration(),expression.getObjectDeclaration(),components.additionalCheckerProvider);
  DelegatingBindingTrace cloneDelta=new DelegatingBindingTrace(new BindingTraceContext().getBindingContext(),"cached delta trace for object literal expression resolve",expression);
  temporaryTrace.addAllMyDataTo(cloneDelta);
  context.trace.record(TRACE_DELTAS_CACHE,expression.getObjectDeclaration(),cloneDelta);
  temporaryTrace.commit();
  return DataFlowUtils.checkType(result[0],expression,context,context.dataFlowInfo);
}
