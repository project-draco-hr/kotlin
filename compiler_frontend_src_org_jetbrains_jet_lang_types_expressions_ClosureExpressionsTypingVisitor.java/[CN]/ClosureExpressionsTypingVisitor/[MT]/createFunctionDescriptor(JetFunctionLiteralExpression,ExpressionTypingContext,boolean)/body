{
  JetFunctionLiteral functionLiteral=expression.getFunctionLiteral();
  JetTypeReference receiverTypeRef=functionLiteral.getReceiverTypeRef();
  SimpleFunctionDescriptorImpl functionDescriptor=new SimpleFunctionDescriptorImpl(context.scope.getContainingDeclaration(),Collections.<AnnotationDescriptor>emptyList(),"<anonymous>",CallableMemberDescriptor.Kind.DECLARATION);
  List<ValueParameterDescriptor> valueParameterDescriptors=createValueParameterDescriptors(context,functionLiteral,functionDescriptor,functionTypeExpected);
  JetType effectiveReceiverType;
  if (receiverTypeRef == null) {
    if (functionTypeExpected) {
      effectiveReceiverType=JetStandardClasses.getReceiverType(context.expectedType);
    }
 else {
      effectiveReceiverType=null;
    }
  }
 else {
    effectiveReceiverType=context.expressionTypingServices.getTypeResolver().resolveType(context.scope,receiverTypeRef,context.trace,true);
  }
  functionDescriptor.initialize(effectiveReceiverType,NO_RECEIVER,Collections.<TypeParameterDescriptor>emptyList(),valueParameterDescriptors,null,Modality.FINAL,Visibilities.LOCAL,false);
  context.trace.record(BindingContext.FUNCTION,expression,functionDescriptor);
  BindingContextUtils.recordFunctionDeclarationToDescriptor(context.trace,expression,functionDescriptor);
  return functionDescriptor;
}
