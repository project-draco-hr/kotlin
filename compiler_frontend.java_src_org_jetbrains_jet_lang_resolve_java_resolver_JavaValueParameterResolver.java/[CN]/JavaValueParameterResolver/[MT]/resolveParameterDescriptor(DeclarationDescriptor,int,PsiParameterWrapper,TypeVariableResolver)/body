{
  if (parameter.getJetTypeParameter().isDefined()) {
    return JvmMethodParameterMeaning.typeInfo();
  }
  PsiType psiType=parameter.getPsiParameter().getType();
  Name name=Name.identifier(getParameterName(i,parameter));
  if (parameter.getJetValueParameter().name().length() > 0) {
    name=Name.identifier(parameter.getJetValueParameter().name());
  }
  String typeFromAnnotation=parameter.getJetValueParameter().type();
  boolean receiver=parameter.getJetValueParameter().receiver();
  boolean hasDefaultValue=parameter.getJetValueParameter().hasDefaultValue();
  JetType outType;
  if (typeFromAnnotation.length() > 0) {
    outType=getTypeTransformer().transformToType(typeFromAnnotation,typeVariableResolver);
  }
 else {
    TypeUsage typeUsage=JavaTypeTransformer.adjustTypeUsageWithMutabilityAnnotations(parameter.getPsiParameter(),TypeUsage.MEMBER_SIGNATURE_CONTRAVARIANT);
    outType=getTypeTransformer().transformToType(psiType,typeUsage,typeVariableResolver);
  }
  JetType varargElementType;
  if (psiType instanceof PsiEllipsisType || parameter.getJetValueParameter().vararg()) {
    varargElementType=KotlinBuiltIns.getInstance().getArrayElementType(TypeUtils.makeNotNullable(outType));
    outType=TypeUtils.makeNotNullable(outType);
  }
 else {
    varargElementType=null;
  }
  if (receiver) {
    return JvmMethodParameterMeaning.receiver(outType);
  }
 else {
    JetType transformedType;
    if (JavaAnnotationResolver.findAnnotationWithExternal(parameter.getPsiParameter(),JvmAbi.JETBRAINS_NOT_NULL_ANNOTATION.getFqName().getFqName()) != null) {
      transformedType=TypeUtils.makeNullableAsSpecified(outType,false);
    }
 else {
      transformedType=outType;
    }
    return JvmMethodParameterMeaning.regular(new ValueParameterDescriptorImpl(containingDeclaration,i,Collections.<AnnotationDescriptor>emptyList(),name,transformedType,hasDefaultValue,varargElementType));
  }
}
