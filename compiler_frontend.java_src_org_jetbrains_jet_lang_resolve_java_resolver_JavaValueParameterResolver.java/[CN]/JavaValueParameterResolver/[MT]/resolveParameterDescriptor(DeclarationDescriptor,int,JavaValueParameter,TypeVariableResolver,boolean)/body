{
  Name name=getParameterName(i,parameter);
  TypeUsage typeUsage=JavaTypeTransformer.adjustTypeUsageWithMutabilityAnnotations(parameter.getPsi(),TypeUsage.MEMBER_SIGNATURE_CONTRAVARIANT);
  JetType outType=typeTransformer.transformToType(parameter.getType(),typeUsage,typeVariableResolver);
  JetType varargElementType;
  if (isVararg) {
    varargElementType=KotlinBuiltIns.getInstance().getArrayElementType(TypeUtils.makeNotNullable(outType));
    outType=TypeUtils.makeNotNullable(outType);
  }
 else {
    varargElementType=null;
  }
  JetType transformedType;
  PsiAnnotation notNullAnnotation=JavaAnnotationResolver.findAnnotationWithExternal(parameter.getPsi(),JvmAnnotationNames.JETBRAINS_NOT_NULL_ANNOTATION);
  if (notNullAnnotation != null) {
    transformedType=TypeUtils.makeNullableAsSpecified(outType,false);
  }
 else {
    transformedType=outType;
  }
  return new ValueParameterDescriptorImpl(containingDeclaration,i,Collections.<AnnotationDescriptor>emptyList(),name,transformedType,false,varargElementType);
}
