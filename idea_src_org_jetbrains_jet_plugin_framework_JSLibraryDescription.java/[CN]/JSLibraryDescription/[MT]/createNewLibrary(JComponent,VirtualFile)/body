{
  CreateJavaScriptLibraryDialog dialog=new CreateJavaScriptLibraryDialog(null,"Create Kotlin JavaScript Library",contextDirectory);
  dialog.show();
  if (dialog.isOK()) {
    KotlinPaths paths=PathUtil.getKotlinPathsForIdeaPlugin();
    File libraryFile=paths.getJsLibJarPath();
    if (!libraryFile.exists()) {
      Messages.showErrorDialog(String.format("JavaScript standard library was not found in %s",paths.getLibPath()),JAVA_SCRIPT_LIBRARY_CREATION);
      return null;
    }
    String libraryName=LIBRARY_NAME;
    String copyIntoPath=dialog.getCopyIntoPath();
    if (copyIntoPath != null) {
      List<File> copyFiles=new ArrayList<File>();
      if (dialog.isCopyLibraryFiles())       copyFiles.add(libraryFile);
      if (dialog.isCopyECMA3())       copyFiles.add(paths.getJsLibJsPath());
      Map<File,File> copiedFiles=FileUIUtils.copyWithOverwriteDialog(parentComponent,JAVA_SCRIPT_LIBRARY_CREATION,copyIntoPath,copyFiles);
      if (copiedFiles == null) {
        return null;
      }
      if (dialog.isCopyLibraryFiles()) {
        libraryFile=copiedFiles.get(libraryFile);
        libraryName=LIBRARY_NAME + "-" + JetPluginUtil.getPluginVersion();
      }
    }
    final String libraryFileUrl=VfsUtil.getUrlForLibraryRoot(libraryFile);
    return new NewLibraryConfiguration(libraryName,getDownloadableLibraryType(),new LibraryVersionProperties()){
      @Override public void addRoots(      @NotNull LibraryEditor editor){
        editor.addRoot(libraryFileUrl,OrderRootType.SOURCES);
      }
    }
;
  }
  return null;
}
