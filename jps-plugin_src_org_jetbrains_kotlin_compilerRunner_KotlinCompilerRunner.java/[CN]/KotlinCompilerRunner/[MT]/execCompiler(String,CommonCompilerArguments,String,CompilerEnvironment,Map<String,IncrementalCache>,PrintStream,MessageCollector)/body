{
  try {
    messageCollector.report(INFO,"Using kotlin-home = " + environment.getKotlinPaths().getHomePath(),NO_LOCATION);
    List<String> argumentsList=ArgumentUtils.convertArgumentsToStringList(arguments);
    argumentsList.addAll(StringUtil.split(additionalArguments," "));
    String[] argsArray=ArrayUtil.toStringArray(argumentsList);
    if (incrementalCaches != null && KotlinCompilerClient.Companion.isDaemonEnabled()) {
      File libPath=CompilerRunnerUtil.getLibPath(environment.getKotlinPaths(),messageCollector);
      CompilerId compilerId=CompilerId.makeCompilerId(new File(libPath,"kotlin-compiler.jar"));
      DaemonOptions daemonOptions=new DaemonOptions();
      DaemonLaunchingOptions daemonLaunchingOptions=new DaemonLaunchingOptions();
      KotlinCompilerClient.Companion.configureDaemonLaunchingOptions(daemonLaunchingOptions);
      CompileService daemon=KotlinCompilerClient.Companion.connectToCompileService(compilerId,daemonLaunchingOptions,daemonOptions,System.out,true,true);
      if (daemon != null) {
        Integer res=KotlinCompilerClient.Companion.incrementalCompile(daemon,argsArray,incrementalCaches,out);
        return res.toString();
      }
    }
    Object rc=CompilerRunnerUtil.invokeExecMethod(compilerClassName,argsArray,environment,messageCollector,out);
    return getReturnCodeFromObject(rc);
  }
 catch (  Throwable e) {
    MessageCollectorUtil.reportException(messageCollector,e);
    return INTERNAL_ERROR;
  }
}
