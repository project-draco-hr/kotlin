{
  if (incrementalCaches != null && RmiPackage.isDaemonEnabled()) {
    File libPath=CompilerRunnerUtil.getLibPath(environment.getKotlinPaths(),messageCollector);
    CompilerId compilerId=CompilerId.makeCompilerId(new File(libPath,"kotlin-compiler.jar"));
    DaemonOptions daemonOptions=RmiPackage.configureDaemonOptions();
    DaemonJVMOptions daemonJVMOptions=RmiPackage.configureDaemonJVMOptions(true);
    ArrayList<DaemonReportMessage> daemonReportMessages=new ArrayList<DaemonReportMessage>();
    CompileService daemon=KotlinCompilerClient.connectToCompileService(compilerId,daemonJVMOptions,daemonOptions,new DaemonReportingTargets(null,daemonReportMessages),true,true);
    for (    DaemonReportMessage msg : daemonReportMessages) {
      if (msg.getCategory() == DaemonReportCategory.EXCEPTION && daemon == null) {
        messageCollector.report(CompilerMessageSeverity.INFO,"Falling  back to compilation without daemon due to error: " + msg.getMessage(),CompilerMessageLocation.NO_LOCATION);
      }
 else {
        messageCollector.report(CompilerMessageSeverity.INFO,msg.getMessage(),CompilerMessageLocation.NO_LOCATION);
      }
    }
    if (daemon != null) {
      ByteArrayOutputStream compilerOut=new ByteArrayOutputStream();
      ByteArrayOutputStream daemonOut=new ByteArrayOutputStream();
      Integer res=KotlinCompilerClient.incrementalCompile(daemon,argsArray,incrementalCaches,compilerOut,daemonOut);
      ProcessCompilerOutput(messageCollector,collector,compilerOut,res.toString());
      BufferedReader reader=new BufferedReader(new StringReader(daemonOut.toString()));
      String line=null;
      while ((line=reader.readLine()) != null) {
        messageCollector.report(CompilerMessageSeverity.INFO,line,CompilerMessageLocation.NO_LOCATION);
      }
      return true;
    }
  }
  return false;
}
