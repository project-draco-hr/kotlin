{
  List<JetElement> elementsToAnalyze=new ArrayList<JetElement>();
  if (rootElement instanceof JetNamedFunction) {
    elementsToAnalyze.add(((JetNamedFunction)rootElement).getBodyExpression());
  }
 else   if (rootElement instanceof JetProperty) {
    for (    JetPropertyAccessor accessor : ((JetProperty)rootElement).getAccessors()) {
      JetExpression body=accessor.getBodyExpression();
      if (body != null) {
        elementsToAnalyze.add(body);
      }
    }
  }
 else {
    JetClassOrObject classOrObject=(JetClassOrObject)rootElement;
    for (    JetDelegationSpecifier specifier : classOrObject.getDelegationSpecifiers()) {
      if (specifier instanceof JetCallElement) {
        elementsToAnalyze.add(specifier);
      }
    }
    JetClassBody body=classOrObject.getBody();
    if (body != null) {
      for (      JetClassInitializer initializer : body.getAnonymousInitializers()) {
        elementsToAnalyze.add(initializer.getBody());
      }
      for (      JetProperty property : body.getProperties()) {
        JetExpression initializer=property.getInitializer();
        if (initializer != null) {
          elementsToAnalyze.add(initializer);
        }
      }
    }
  }
  final ArrayList<PsiElement> result=new ArrayList<PsiElement>();
  for (  JetElement element : elementsToAnalyze) {
    element.accept(new CalleeReferenceVisitorBase(AnalyzerFacadeWithCache.getContextForElement(element),false){
      @Override protected void processDeclaration(      JetReferenceExpression reference,      PsiElement declaration){
        result.add(declaration);
      }
    }
);
  }
  return result;
}
