{
  configureByFile(path);
  String fileText=FileUtil.loadFile(new File(path),true);
  String direction=InTextDirectivesUtils.findStringWithPrefixes(fileText,"// MOVE: ");
  boolean down=true;
  if ("up".equals(direction)) {
    down=false;
  }
 else   if ("down".equals(direction)) {
    down=true;
  }
 else {
    fail("Direction is not specified");
  }
  String isApplicableString=InTextDirectivesUtils.findStringWithPrefixes(fileText,"// IS_APPLICABLE: ");
  boolean isApplicableExpected=isApplicableString == null || isApplicableString.equals("true");
  StatementUpDownMover[] movers=Extensions.getExtensions(StatementUpDownMover.STATEMENT_UP_DOWN_MOVER_EP);
  StatementUpDownMover.MoveInfo info=new StatementUpDownMover.MoveInfo();
  StatementUpDownMover actualMover=null;
  for (  StatementUpDownMover mover : movers) {
    if (mover.checkAvailable(getEditor(),getFile(),info,down)) {
      actualMover=mover;
      break;
    }
  }
  String moverClassName=InTextDirectivesUtils.findStringWithPrefixes(fileText,"// MOVER_CLASS: ");
  if (moverClassName == null) {
    moverClassName=defaultMoverClass.getName();
  }
  assertTrue("No mover found",actualMover != null);
  assertEquals("Unmatched movers",moverClassName,actualMover.getClass().getName());
  assertEquals("Invalid applicability",isApplicableExpected,info.toMove2 != null);
  if (isApplicableExpected) {
    invokeAndCheck(fileText,path,down);
  }
}
