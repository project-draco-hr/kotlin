{
  Project project=context.getProject();
  BindingContext bindingContext=context.getContext();
  List<JetFile> sources=context.getFiles();
  if (bindingContext != null && sources != null && project != null) {
    Config config=new JsLibrarySourceConfig(project,EcmaVersion.defaultVersion());
    try {
      File parentFile=new File(outFile).getParentFile();
      parentFile.mkdirs();
      final InputStream inputStream=JsLibrarySourceConfig.loadClasspathResource(KOTLIN_JS_LIB);
      if (inputStream == null) {
        System.out.println("WARNING: Could not find " + KOTLIN_JS_LIB + " on the classpath!");
      }
 else {
        Files.copy(new InputSupplier<InputStream>(){
          @Override public InputStream getInput() throws IOException {
            return inputStream;
          }
        }
,new File(parentFile,"kotlin-lib.js"));
      }
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
    try {
      K2JSTranslator translator=new K2JSTranslator(config);
      final String code=translator.generateProgramCode(sources,MainCallParameters.noCall());
      File file=new File(outFile);
      Files.createParentDirs(file);
      Files.write(code,file,Charset.forName("UTF-8"));
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
}
