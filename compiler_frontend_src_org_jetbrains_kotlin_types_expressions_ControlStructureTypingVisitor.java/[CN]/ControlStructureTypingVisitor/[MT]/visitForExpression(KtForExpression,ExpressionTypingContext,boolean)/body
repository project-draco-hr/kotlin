{
  if (!isStatement)   return components.dataFlowAnalyzer.illegalStatementType(expression,contextWithExpectedType,facade);
  ExpressionTypingContext context=contextWithExpectedType.replaceExpectedType(NO_EXPECTED_TYPE).replaceContextDependency(INDEPENDENT);
  PreliminaryLoopVisitor loopVisitor=PreliminaryLoopVisitor.visitLoop(expression);
  context=context.replaceDataFlowInfo(loopVisitor.clearDataFlowInfoForAssignedLocalVariables(context.dataFlowInfo));
  KtExpression loopRange=expression.getLoopRange();
  KotlinType expectedParameterType=null;
  KotlinTypeInfo loopRangeInfo;
  if (loopRange != null) {
    ExpressionReceiver loopRangeReceiver=getExpressionReceiver(facade,loopRange,context.replaceScope(context.scope));
    loopRangeInfo=facade.getTypeInfo(loopRange,context);
    if (loopRangeReceiver != null) {
      expectedParameterType=components.forLoopConventionsChecker.checkIterableConvention(loopRangeReceiver,context);
    }
  }
 else {
    loopRangeInfo=TypeInfoFactoryKt.noTypeInfo(context);
  }
  LexicalWritableScope loopScope=newWritableScopeImpl(context,LexicalScopeKind.FOR);
  KtParameter loopParameter=expression.getLoopParameter();
  if (loopParameter != null) {
    VariableDescriptor variableDescriptor=createLoopParameterDescriptor(loopParameter,expectedParameterType,context);
    components.modifiersChecker.withTrace(context.trace).checkModifiersForLocalDeclaration(loopParameter,variableDescriptor);
    components.identifierChecker.checkDeclaration(loopParameter,context.trace);
    loopScope.addVariableDescriptor(variableDescriptor);
  }
 else {
    KtMultiDeclaration multiParameter=expression.getMultiParameter();
    if (multiParameter != null && loopRange != null) {
      KotlinType elementType=expectedParameterType == null ? ErrorUtils.createErrorType("Loop range has no type") : expectedParameterType;
      TransientReceiver iteratorNextAsReceiver=new TransientReceiver(elementType);
      components.annotationResolver.resolveAnnotationsWithArguments(loopScope,multiParameter.getModifierList(),context.trace);
      components.multiDeclarationResolver.defineLocalVariablesFromMultiDeclaration(loopScope,multiParameter,iteratorNextAsReceiver,loopRange,context);
      components.modifiersChecker.withTrace(context.trace).checkModifiersForMultiDeclaration(multiParameter);
      components.modifiersChecker.withTrace(context.trace).checkParameterHasNoValOrVar(multiParameter,VAL_OR_VAR_ON_LOOP_MULTI_PARAMETER);
      components.identifierChecker.checkDeclaration(multiParameter,context.trace);
    }
  }
  KtExpression body=expression.getBody();
  KotlinTypeInfo bodyTypeInfo;
  if (body != null) {
    bodyTypeInfo=components.expressionTypingServices.getBlockReturnedTypeWithWritableScope(loopScope,Collections.singletonList(body),CoercionStrategy.NO_COERCION,context.replaceDataFlowInfo(loopRangeInfo.getDataFlowInfo()));
  }
 else {
    bodyTypeInfo=loopRangeInfo;
  }
  return components.dataFlowAnalyzer.checkType(bodyTypeInfo.replaceType(components.builtIns.getUnitType()),expression,contextWithExpectedType).replaceDataFlowInfo(loopRangeInfo.getDataFlowInfo());
}
