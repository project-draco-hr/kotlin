{
  if (!isStatement)   return DataFlowUtils.illegalStatementType(expression,contextWithExpectedType,facade);
  ExpressionTypingContext context=contextWithExpectedType.replaceExpectedType(NO_EXPECTED_TYPE).replaceContextDependency(INDEPENDENT);
  JetExpression body=expression.getBody();
  JetScope conditionScope=context.scope;
  PreliminaryLoopVisitor loopVisitor=new PreliminaryLoopVisitor(expression);
  loopVisitor.launch();
  context=context.replaceDataFlowInfo(loopVisitor.clearDataFlowInfoForAssignedLocalVariables(context.dataFlowInfo));
  TypeInfoWithJumpInfo bodyTypeInfo=null;
  if (body instanceof JetFunctionLiteralExpression) {
    JetFunctionLiteralExpression function=(JetFunctionLiteralExpression)body;
    JetFunctionLiteral functionLiteral=function.getFunctionLiteral();
    if (!functionLiteral.hasParameterSpecification()) {
      WritableScope writableScope=newWritableScopeImpl(context,"do..while body scope");
      conditionScope=writableScope;
      bodyTypeInfo=components.expressionTypingServices.getBlockReturnedTypeWithWritableScope(writableScope,functionLiteral.getBodyExpression().getStatements(),CoercionStrategy.NO_COERCION,context);
      context.trace.record(BindingContext.BLOCK,function);
    }
 else {
      facade.getTypeInfo(body,context.replaceScope(context.scope));
    }
  }
 else   if (body != null) {
    WritableScope writableScope=newWritableScopeImpl(context,"do..while body scope");
    conditionScope=writableScope;
    List<JetElement> block;
    if (body instanceof JetBlockExpression) {
      block=((JetBlockExpression)body).getStatements();
    }
 else {
      block=Collections.<JetElement>singletonList(body);
    }
    bodyTypeInfo=components.expressionTypingServices.getBlockReturnedTypeWithWritableScope(writableScope,block,CoercionStrategy.NO_COERCION,context);
  }
  JetExpression condition=expression.getCondition();
  DataFlowInfo conditionDataFlowInfo=checkCondition(conditionScope,condition,context);
  DataFlowInfo dataFlowInfo;
  if (!containsJumpOutOfLoop(expression,context)) {
    dataFlowInfo=DataFlowUtils.extractDataFlowInfoFromCondition(condition,false,context).and(conditionDataFlowInfo);
  }
 else {
    dataFlowInfo=context.dataFlowInfo;
  }
  if (bodyTypeInfo != null) {
    dataFlowInfo=dataFlowInfo.and(loopVisitor.clearDataFlowInfoForAssignedLocalVariables(bodyTypeInfo.getJumpFlowInfo()));
  }
  return DataFlowUtils.checkType(components.builtIns.getUnitType(),expression,contextWithExpectedType,dataFlowInfo);
}
