{
  final boolean[] result=new boolean[1];
  result[0]=false;
  loopExpression.accept(new JetTreeVisitor<List<JetLoopExpression>>(){
    @Override public Void visitBreakExpression(    @NotNull JetBreakExpression breakExpression,    List<JetLoopExpression> outerLoops){
      JetSimpleNameExpression targetLabel=breakExpression.getTargetLabel();
      PsiElement element=targetLabel != null ? context.trace.get(LABEL_TARGET,targetLabel) : null;
      if (element == loopExpression || (targetLabel == null && outerLoops.get(outerLoops.size() - 1) == loopExpression)) {
        result[0]=true;
      }
      return null;
    }
    @Override public Void visitContinueExpression(    @NotNull JetContinueExpression expression,    List<JetLoopExpression> outerLoops){
      JetSimpleNameExpression targetLabel=expression.getTargetLabel();
      if (targetLabel != null) {
        PsiElement element=context.trace.get(LABEL_TARGET,targetLabel);
        if (element instanceof JetLoopExpression && !outerLoops.contains(element)) {
          result[0]=true;
        }
      }
      return null;
    }
    @Override public Void visitLoopExpression(    @NotNull JetLoopExpression loopExpression,    List<JetLoopExpression> outerLoops){
      List<JetLoopExpression> newOuterLoops=Lists.newArrayList(outerLoops);
      newOuterLoops.add(loopExpression);
      return super.visitLoopExpression(loopExpression,newOuterLoops);
    }
  }
,Lists.newArrayList(loopExpression));
  return result[0];
}
