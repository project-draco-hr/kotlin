{
  DescriptorResolver.checkParameterHasNoValOrVar(context.trace,loopParameter,VAL_OR_VAR_ON_LOOP_PARAMETER);
  JetTypeReference typeReference=loopParameter.getTypeReference();
  VariableDescriptor variableDescriptor;
  if (typeReference != null) {
    variableDescriptor=components.expressionTypingServices.getDescriptorResolver().resolveLocalVariableDescriptor(context.scope,loopParameter,context.trace);
    JetType actualParameterType=variableDescriptor.getType();
    if (expectedParameterType != null && !JetTypeChecker.DEFAULT.isSubtypeOf(expectedParameterType,actualParameterType)) {
      context.trace.report(TYPE_MISMATCH_IN_FOR_LOOP.on(typeReference,expectedParameterType,actualParameterType));
    }
  }
 else {
    if (expectedParameterType == null) {
      expectedParameterType=ErrorUtils.createErrorType("Error");
    }
    variableDescriptor=components.expressionTypingServices.getDescriptorResolver().resolveLocalVariableDescriptor(loopParameter,expectedParameterType,context.trace,context.scope);
  }
{
    VariableDescriptor olderVariable=context.scope.getLocalVariable(variableDescriptor.getName());
    if (olderVariable != null && isLocal(context.scope.getContainingDeclaration(),olderVariable)) {
      PsiElement declaration=DescriptorToSourceUtils.descriptorToDeclaration(variableDescriptor);
      context.trace.report(Errors.NAME_SHADOWING.on(declaration,variableDescriptor.getName().asString()));
    }
  }
  return variableDescriptor;
}
