{
  ExpressionTypingContext context=typingContext.replaceContextDependency(INDEPENDENT);
  KtExpression tryBlock=expression.getTryBlock();
  List<KtCatchClause> catchClauses=expression.getCatchClauses();
  KtFinallySection finallyBlock=expression.getFinallyBlock();
  List<KotlinType> types=new ArrayList<KotlinType>();
  boolean nothingInAllCatchBranches=true;
  for (  KtCatchClause catchClause : catchClauses) {
    KtParameter catchParameter=catchClause.getCatchParameter();
    KtExpression catchBody=catchClause.getCatchBody();
    boolean nothingInCatchBranch=false;
    if (catchParameter != null) {
      components.identifierChecker.checkDeclaration(catchParameter,context.trace);
      ModifiersChecker.ModifiersCheckingProcedure modifiersChecking=components.modifiersChecker.withTrace(context.trace);
      modifiersChecking.checkParameterHasNoValOrVar(catchParameter,VAL_OR_VAR_ON_CATCH_PARAMETER);
      ModifierCheckerCore.INSTANCE.check(catchParameter,context.trace,null,components.languageFeatureSettings);
      VariableDescriptor variableDescriptor=components.descriptorResolver.resolveLocalVariableDescriptor(context.scope,catchParameter,context.trace);
      KotlinType catchParameterType=variableDescriptor.getType();
      if (TypeUtils.isReifiedTypeParameter(catchParameterType)) {
        context.trace.report(REIFIED_TYPE_IN_CATCH_CLAUSE.on(catchParameter));
      }
      KotlinType throwableType=components.builtIns.getThrowable().getDefaultType();
      components.dataFlowAnalyzer.checkType(catchParameterType,catchParameter,context.replaceExpectedType(throwableType));
      if (catchBody != null) {
        LexicalWritableScope catchScope=newWritableScopeImpl(context,LexicalScopeKind.CATCH,components.overloadChecker);
        catchScope.addVariableDescriptor(variableDescriptor);
        KotlinType type=facade.getTypeInfo(catchBody,context.replaceScope(catchScope)).getType();
        if (type != null) {
          types.add(type);
          if (KotlinBuiltIns.isNothing(type)) {
            nothingInCatchBranch=true;
          }
        }
      }
    }
    if (!nothingInCatchBranch) {
      nothingInAllCatchBranches=false;
    }
  }
  KotlinTypeInfo result=TypeInfoFactoryKt.noTypeInfo(context);
  KotlinTypeInfo tryResult=facade.getTypeInfo(tryBlock,context);
  if (finallyBlock != null) {
    result=facade.getTypeInfo(finallyBlock.getFinalExpression(),context.replaceExpectedType(NO_EXPECTED_TYPE));
  }
 else   if (nothingInAllCatchBranches) {
    result=tryResult;
  }
  KotlinType type=tryResult.getType();
  if (type != null) {
    types.add(type);
  }
  if (types.isEmpty()) {
    return result.clearType();
  }
 else {
    return result.replaceType(CommonSupertypes.commonSupertype(types));
  }
}
