{
  if (!isStatement)   return DataFlowUtils.illegalStatementType(expression,contextWithExpectedType,facade);
  ExpressionTypingContext context=contextWithExpectedType.replaceExpectedType(NO_EXPECTED_TYPE).replaceContextDependency(INDEPENDENT);
  PreliminaryLoopVisitor loopVisitor=PreliminaryLoopVisitor.visitLoop(expression);
  context=context.replaceDataFlowInfo(loopVisitor.clearDataFlowInfoForAssignedLocalVariables(context.dataFlowInfo));
  JetExpression condition=expression.getCondition();
  DataFlowInfo dataFlowInfo=checkCondition(context.scope,condition,context);
  JetExpression body=expression.getBody();
  JetTypeInfo bodyTypeInfo;
  DataFlowInfo conditionInfo=DataFlowUtils.extractDataFlowInfoFromCondition(condition,true,context).and(dataFlowInfo);
  if (body != null) {
    WritableScopeImpl scopeToExtend=newWritableScopeImpl(context,"Scope extended in while's condition");
    bodyTypeInfo=components.expressionTypingServices.getBlockReturnedTypeWithWritableScope(scopeToExtend,Collections.singletonList(body),CoercionStrategy.NO_COERCION,context.replaceDataFlowInfo(conditionInfo));
  }
 else {
    bodyTypeInfo=TypeInfoFactoryPackage.noTypeInfo(conditionInfo);
  }
  if (!containsJumpOutOfLoop(expression,context)) {
    dataFlowInfo=DataFlowUtils.extractDataFlowInfoFromCondition(condition,false,context).and(dataFlowInfo);
  }
  if (body != null && JetPsiUtil.isTrueConstant(condition)) {
    dataFlowInfo=dataFlowInfo.and(loopVisitor.clearDataFlowInfoForAssignedLocalVariables(bodyTypeInfo.getJumpFlowInfo()));
  }
  return bodyTypeInfo.replaceType(components.builtIns.getUnitType()).checkType(expression,contextWithExpectedType).replaceDataFlowInfo(dataFlowInfo);
}
