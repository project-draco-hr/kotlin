{
  final boolean[] result=new boolean[1];
  result[0]=false;
  expression.accept(new KtTreeVisitor<List<KtLoopExpression>>(){
    @Override public Void visitBreakExpression(    @NotNull KtBreakExpression breakExpression,    List<KtLoopExpression> outerLoops){
      KtSimpleNameExpression targetLabel=breakExpression.getTargetLabel();
      PsiElement element=targetLabel != null ? context.trace.get(LABEL_TARGET,targetLabel) : null;
      if (outerLoops.isEmpty() || element == expression || (targetLabel == null && outerLoops.get(outerLoops.size() - 1) == expression)) {
        result[0]=true;
      }
      return null;
    }
    @Override public Void visitContinueExpression(    @NotNull KtContinueExpression expression,    List<KtLoopExpression> outerLoops){
      KtSimpleNameExpression targetLabel=expression.getTargetLabel();
      if (targetLabel != null) {
        PsiElement element=context.trace.get(LABEL_TARGET,targetLabel);
        if (element instanceof KtLoopExpression && !outerLoops.contains(element)) {
          result[0]=true;
        }
      }
      return null;
    }
    @Override public Void visitLoopExpression(    @NotNull KtLoopExpression loopExpression,    List<KtLoopExpression> outerLoops){
      List<KtLoopExpression> newOuterLoops=Lists.newArrayList(outerLoops);
      newOuterLoops.add(loopExpression);
      return super.visitLoopExpression(loopExpression,newOuterLoops);
    }
  }
,expression instanceof KtLoopExpression ? Lists.newArrayList((KtLoopExpression)expression) : Lists.<KtLoopExpression>newArrayList());
  return result[0];
}
