{
  if (!isStatement)   return DataFlowUtils.illegalStatementType(expression,contextWithExpectedType,facade);
  ExpressionTypingContext context=contextWithExpectedType.replaceExpectedType(NO_EXPECTED_TYPE).replaceContextDependency(INDEPENDENT);
  PreliminaryLoopVisitor loopVisitor=PreliminaryLoopVisitor.visitLoop(expression);
  context=context.replaceDataFlowInfo(loopVisitor.clearDataFlowInfoForAssignedLocalVariables(context.dataFlowInfo));
  JetExpression loopRange=expression.getLoopRange();
  JetType expectedParameterType=null;
  DataFlowInfo dataFlowInfo=context.dataFlowInfo;
  if (loopRange != null) {
    ExpressionReceiver loopRangeReceiver=getExpressionReceiver(facade,loopRange,context.replaceScope(context.scope));
    dataFlowInfo=facade.getTypeInfo(loopRange,context).getDataFlowInfo();
    if (loopRangeReceiver != null) {
      expectedParameterType=components.forLoopConventionsChecker.checkIterableConvention(loopRangeReceiver,context);
    }
  }
  WritableScope loopScope=newWritableScopeImpl(context,"Scope with for-loop index");
  JetParameter loopParameter=expression.getLoopParameter();
  if (loopParameter != null) {
    VariableDescriptor variableDescriptor=createLoopParameterDescriptor(loopParameter,expectedParameterType,context);
    loopScope.addVariableDescriptor(variableDescriptor);
  }
 else {
    JetMultiDeclaration multiParameter=expression.getMultiParameter();
    if (multiParameter != null && loopRange != null) {
      JetType elementType=expectedParameterType == null ? ErrorUtils.createErrorType("Loop range has no type") : expectedParameterType;
      TransientReceiver iteratorNextAsReceiver=new TransientReceiver(elementType);
      components.expressionTypingUtils.defineLocalVariablesFromMultiDeclaration(loopScope,multiParameter,iteratorNextAsReceiver,loopRange,context);
    }
  }
  JetExpression body=expression.getBody();
  if (body != null) {
    components.expressionTypingServices.getBlockReturnedTypeWithWritableScope(loopScope,Collections.singletonList(body),CoercionStrategy.NO_COERCION,context.replaceDataFlowInfo(dataFlowInfo));
  }
  return DataFlowUtils.checkType(components.builtIns.getUnitType(),expression,contextWithExpectedType,dataFlowInfo);
}
