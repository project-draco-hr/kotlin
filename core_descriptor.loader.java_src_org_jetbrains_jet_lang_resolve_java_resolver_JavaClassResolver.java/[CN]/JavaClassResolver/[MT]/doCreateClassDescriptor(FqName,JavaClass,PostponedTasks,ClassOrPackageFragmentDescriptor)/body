{
  ClassDescriptorFromJvmBytecode classDescriptor=new ClassDescriptorFromJvmBytecode(containingDeclaration,javaClass.getName(),determineClassKind(javaClass),isInnerClass(javaClass));
  cache(javaClassToKotlinFqName(fqName),classDescriptor);
  JavaTypeParameterResolver.Initializer typeParameterInitializer=typeParameterResolver.resolveTypeParameters(classDescriptor,javaClass);
  classDescriptor.setTypeParameterDescriptors(typeParameterInitializer.getDescriptors());
  List<JetType> supertypes=new ArrayList<JetType>();
  classDescriptor.setSupertypes(supertypes);
  classDescriptor.setVisibility(javaClass.getVisibility());
  classDescriptor.setModality(determineClassModality(javaClass));
  classDescriptor.createTypeConstructor();
  JavaClassNonStaticMembersScope scope=new JavaClassNonStaticMembersScope(classDescriptor,javaClass,memberResolver);
  classDescriptor.setScopeForMemberLookup(scope);
  classDescriptor.setScopeForConstructorResolve(scope);
  typeParameterInitializer.initialize();
  List<TypeParameterDescriptor> classTypeParameters=classDescriptor.getTypeConstructor().getParameters();
  supertypes.addAll(supertypesResolver.getSupertypes(classDescriptor,javaClass,classTypeParameters));
  if (javaClass.isEnum()) {
    JavaEnumClassObjectDescriptor enumClassObject=createEnumClassObject(classDescriptor,javaClass);
    createEnumSyntheticMethods(enumClassObject,classDescriptor.getDefaultType());
    cache(getFqNameForClassObject(javaClass),enumClassObject);
    classDescriptor.getBuilder().setClassObjectDescriptor(enumClassObject);
  }
  classDescriptor.setAnnotations(annotationResolver.resolveAnnotations(javaClass,taskList));
  cache.recordClass(javaClass,classDescriptor);
  JavaMethod samInterfaceMethod=SingleAbstractMethodUtils.getSamInterfaceMethod(javaClass);
  if (samInterfaceMethod != null) {
    SimpleFunctionDescriptor abstractMethod=resolveFunctionOfSamInterface(samInterfaceMethod,classDescriptor);
    classDescriptor.setFunctionTypeForSamInterface(SingleAbstractMethodUtils.getFunctionTypeForAbstractMethod(abstractMethod));
  }
  return classDescriptor;
}
