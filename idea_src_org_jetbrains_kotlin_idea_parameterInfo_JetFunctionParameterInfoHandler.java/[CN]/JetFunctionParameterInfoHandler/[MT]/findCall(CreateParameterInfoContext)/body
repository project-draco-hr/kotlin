{
  PsiFile file=context.getFile();
  if (!(file instanceof JetFile)) {
    return null;
  }
  JetValueArgumentList argumentList=PsiTreeUtil.getParentOfType(file.findElementAt(context.getOffset()),JetValueArgumentList.class);
  if (argumentList == null) {
    return null;
  }
  final JetSimpleNameExpression callNameExpression=getCallSimpleNameExpression(argumentList);
  if (callNameExpression == null) {
    return null;
  }
  PsiReference[] references=callNameExpression.getReferences();
  if (references.length == 0) {
    return null;
  }
  ResolutionFacade resolutionFacade=ResolvePackage.getResolutionFacade(callNameExpression.getContainingJetFile());
  final BindingContext bindingContext=resolutionFacade.analyze(callNameExpression,BodyResolveMode.FULL);
  ModuleDescriptor moduleDescriptor=resolutionFacade.findModuleDescriptor(callNameExpression);
  JetScope scope=bindingContext.get(BindingContext.RESOLUTION_SCOPE,callNameExpression);
  final DeclarationDescriptor placeDescriptor;
  if (scope != null) {
    placeDescriptor=scope.getContainingDeclaration();
  }
 else {
    placeDescriptor=null;
  }
  Function1<DeclarationDescriptor,Boolean> visibilityFilter=new Function1<DeclarationDescriptor,Boolean>(){
    @Override public Boolean invoke(    DeclarationDescriptor descriptor){
      if (placeDescriptor == null)       return true;
      if (!(descriptor instanceof DeclarationDescriptorWithVisibility))       return true;
      return CorePackage.isVisible((DeclarationDescriptorWithVisibility)descriptor,placeDescriptor,bindingContext,callNameExpression);
    }
  }
;
  final Name refName=callNameExpression.getReferencedNameAsName();
  Function1<Name,Boolean> nameFilter=new Function1<Name,Boolean>(){
    @Override public Boolean invoke(    Name name){
      return name.equals(refName);
    }
  }
;
  Collection<DeclarationDescriptor> variants=new ReferenceVariantsHelper(bindingContext,moduleDescriptor,file.getProject(),visibilityFilter).getReferenceVariants(callNameExpression,new DescriptorKindFilter(DescriptorKindFilter.FUNCTIONS_MASK | DescriptorKindFilter.CLASSIFIERS_MASK,Collections.<DescriptorKindExclude>emptyList()),nameFilter,false);
  Collection<Pair<? extends DeclarationDescriptor,ResolutionFacade>> itemsToShow=new ArrayList<Pair<? extends DeclarationDescriptor,ResolutionFacade>>();
  for (  DeclarationDescriptor variant : variants) {
    if (variant instanceof FunctionDescriptor) {
      itemsToShow.add(Pair.create((FunctionDescriptor)variant,resolutionFacade));
    }
 else     if (variant instanceof ClassDescriptor) {
      for (      ConstructorDescriptor constructorDescriptor : ((ClassDescriptor)variant).getConstructors()) {
        itemsToShow.add(Pair.create(constructorDescriptor,resolutionFacade));
      }
    }
  }
  context.setItemsToShow(ArrayUtil.toObjectArray(itemsToShow));
  return argumentList;
}
