{
  final DeclarationDescriptor descriptor=bindingContext.resolveReferenceExpression(expression);
  final DeclarationDescriptor container=descriptor.getContainingDeclaration();
  if (descriptor instanceof VariableDescriptor) {
    if (isClass(container,"Number")) {
      Type castType=getCastType(expression.getReferencedName());
      if (castType != null) {
        final StackValue value=myStack.pop();
        value.put(castType,v);
        myStack.push(StackValue.onStack(castType));
        return;
      }
    }
  }
  PsiElement declaration=bindingContext.getDeclarationPsiElement(descriptor);
  if (declaration instanceof PsiField) {
    PsiField psiField=(PsiField)declaration;
    final String owner=JetTypeMapper.jvmName(psiField.getContainingClass());
    final Type fieldType=psiTypeToAsm(psiField.getType());
    final boolean isStatic=psiField.hasModifierProperty(PsiModifier.STATIC);
    if (!isStatic) {
      ensureReceiverOnStack(expression,null);
    }
    myStack.push(StackValue.field(fieldType,owner,psiField.getName(),isStatic));
  }
 else {
    int index=myMap.getIndex(descriptor);
    if (index >= 0) {
      final JetType outType=((VariableDescriptor)descriptor).getOutType();
      myStack.push(StackValue.local(index,typeMapper.mapType(outType)));
    }
 else     if (descriptor instanceof PropertyDescriptor) {
      final PropertyDescriptor propertyDescriptor=(PropertyDescriptor)descriptor;
      if (declaration instanceof JetParameter) {
        if (PsiTreeUtil.getParentOfType(expression,JetDelegationSpecifier.class) != null) {
          JetClass aClass=PsiTreeUtil.getParentOfType(expression,JetClass.class);
          ConstructorDescriptor constructorDescriptor=bindingContext.getConstructorDescriptor(aClass);
          List<ValueParameterDescriptor> parameters=constructorDescriptor.getUnsubstitutedValueParameters();
          for (          ValueParameterDescriptor parameter : parameters) {
            if (parameter.getName().equals(descriptor.getName())) {
              final JetType outType=((VariableDescriptor)descriptor).getOutType();
              myStack.push(StackValue.local(myMap.getIndex(parameter),typeMapper.mapType(outType)));
              return;
            }
          }
        }
      }
      if (isClass(container,"Array") && propertyDescriptor.getName().equals("size")) {
        ensureReceiverOnStack(expression,null);
        v.arraylength();
        myStack.push(StackValue.onStack(Type.INT_TYPE));
      }
 else {
        boolean isStatic=container instanceof NamespaceDescriptorImpl;
        final boolean directToField=expression.getReferencedNameElementType() == JetTokens.FIELD_IDENTIFIER;
        final StackValue iValue=intermediateValueForProperty(propertyDescriptor,directToField);
        if (!isStatic) {
          ensureReceiverOnStack(expression,container instanceof ClassDescriptor ? (ClassDescriptor)container : null);
        }
        myStack.push(iValue);
      }
    }
 else {
      throw new UnsupportedOperationException("don't know how to generate reference " + descriptor);
    }
  }
}
