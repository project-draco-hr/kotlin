{
  final DeclarationDescriptor descriptor=bindingContext.resolveReferenceExpression(expression);
  if (descriptor instanceof VariableDescriptor) {
    final DeclarationDescriptor container=descriptor.getContainingDeclaration();
    if (isClass(container,"Number")) {
      Type castType=getCastType(expression.getReferencedName());
      if (castType != null) {
        final StackValue value=myStack.pop();
        value.put(castType,v);
        myStack.push(StackValue.onStack(castType));
        return;
      }
    }
  }
  PsiElement declaration=bindingContext.getDeclarationPsiElement(descriptor);
  if (declaration instanceof PsiField) {
    PsiField psiField=(PsiField)declaration;
    final String owner=JetTypeMapper.jvmName(psiField.getContainingClass());
    final Type fieldType=psiTypeToAsm(psiField.getType());
    final boolean isStatic=psiField.hasModifierProperty(PsiModifier.STATIC);
    if (!isStatic) {
      ensureReceiverOnStack(expression);
    }
    myStack.push(StackValue.field(fieldType,owner,psiField.getName(),isStatic));
  }
 else {
    int index=myMap.getIndex(descriptor);
    if (index >= 0) {
      final JetType outType=((VariableDescriptor)descriptor).getOutType();
      myStack.push(StackValue.local(index,typeMapper.mapType(outType)));
    }
 else     if (descriptor instanceof PropertyDescriptor) {
      final PropertyDescriptor propertyDescriptor=(PropertyDescriptor)descriptor;
      boolean isStatic=descriptor.getContainingDeclaration() instanceof NamespaceDescriptor;
      String owner=JetTypeMapper.getOwner(descriptor);
      final JetType outType=((VariableDescriptor)descriptor).getOutType();
      Method getter;
      Method setter;
      if (expression.getReferencedNameElementType() == JetTokens.FIELD_IDENTIFIER) {
        getter=null;
        setter=null;
      }
 else {
        getter=propertyDescriptor.getGetter() == null ? null : typeMapper.mapGetterSignature(propertyDescriptor);
        setter=propertyDescriptor.getSetter() == null ? null : typeMapper.mapSetterSignature(propertyDescriptor);
      }
      if (!isStatic) {
        ensureReceiverOnStack(expression);
      }
      myStack.push(StackValue.property(descriptor.getName(),owner,typeMapper.mapType(outType),isStatic,getter,setter));
    }
 else {
      throw new UnsupportedOperationException("don't know how to generate reference " + descriptor);
    }
  }
}
