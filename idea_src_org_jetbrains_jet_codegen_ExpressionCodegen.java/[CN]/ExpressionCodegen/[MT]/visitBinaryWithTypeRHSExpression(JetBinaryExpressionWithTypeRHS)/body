{
  JetSimpleNameExpression operationSign=expression.getOperationSign();
  IElementType opToken=operationSign.getReferencedNameElementType();
  if (opToken == JetTokens.COLON) {
    gen(expression.getLeft());
  }
 else {
    JetTypeReference typeReference=expression.getRight();
    JetType jetType=bindingContext.resolveTypeReference(typeReference);
    DeclarationDescriptor descriptor=jetType.getConstructor().getDeclarationDescriptor();
    if (!(descriptor instanceof ClassDescriptor)) {
      throw new UnsupportedOperationException("don't know how to handle non-class types in as/as?");
    }
    Type type=typeMapper.jvmType((ClassDescriptor)descriptor,OwnerKind.INTERFACE);
    gen(expression.getLeft(),OBJECT_TYPE);
    if (opToken == JetTokens.AS_SAFE) {
      generateInstanceOf(new Runnable(){
        @Override public void run(){
          gen(expression.getLeft(),OBJECT_TYPE);
        }
      }
,jetType,true);
      Label isInstance=new Label();
      v.ifne(isInstance);
      v.pop();
      v.aconst(null);
      v.mark(isInstance);
      myStack.push(StackValue.onStack(type));
    }
 else {
      throw new UnsupportedOperationException("'as' not yet implemented");
    }
  }
}
