{
  Type leftType=expressionType(left);
  Type rightType=expressionType(right);
  if (leftType == JetTypeMapper.TYPE_NOTHING) {
    return genCmpWithNull(right,rightType,opToken);
  }
  if (rightType == JetTypeMapper.TYPE_NOTHING) {
    return genCmpWithNull(left,leftType,opToken);
  }
  if (JetTypeMapper.isPrimitive(leftType) != JetTypeMapper.isPrimitive(rightType)) {
    gen(left,leftType);
    v.valueOf(leftType);
    leftType=typeMapper.boxType(leftType);
    gen(right,rightType);
    v.valueOf(rightType);
    rightType=typeMapper.boxType(rightType);
  }
 else {
    gen(left,leftType);
    gen(right,rightType);
  }
  return generateEqualsForExpressionsOnStack(opToken,leftType,rightType);
}
