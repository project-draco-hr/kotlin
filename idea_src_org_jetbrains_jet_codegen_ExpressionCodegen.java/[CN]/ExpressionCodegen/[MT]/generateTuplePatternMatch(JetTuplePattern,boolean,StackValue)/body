{
  final List<JetTuplePatternEntry> entries=pattern.getEntries();
  Label lblFail=new Label();
  Label lblDone=new Label();
  expressionToMatch.put(OBJECT_TYPE,v);
  v.dup();
  final String tupleClassName="jet/Tuple" + entries.size();
  Type tupleType=Type.getObjectType(tupleClassName);
  v.instanceOf(tupleType);
  Label lblCheck=new Label();
  v.ifne(lblCheck);
  Label lblPopAndFail=new Label();
  v.mark(lblPopAndFail);
  v.pop();
  v.goTo(lblFail);
  v.mark(lblCheck);
  for (int i=0; i < entries.size(); i++) {
    final boolean isLast=i == entries.size() - 1;
    if (!isLast) {
      v.dup();
    }
    final StackValue tupleField=StackValue.field(OBJECT_TYPE,tupleClassName,"_" + (i + 1),false);
    final StackValue stackValue=generatePatternMatch(entries.get(i).getPattern(),false,tupleField);
    stackValue.condJump(isLast ? lblFail : lblPopAndFail,true,v);
  }
  v.aconst(!negated);
  v.goTo(lblDone);
  v.mark(lblFail);
  v.aconst(negated);
  v.mark(lblDone);
  return StackValue.onStack(Type.BOOLEAN_TYPE);
}
