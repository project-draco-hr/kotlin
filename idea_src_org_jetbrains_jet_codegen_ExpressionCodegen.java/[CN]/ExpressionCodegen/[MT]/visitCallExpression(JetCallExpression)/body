{
  final JetExpression callee=expression.getCalleeExpression();
  DeclarationDescriptor funDescriptor=resolveCalleeDescriptor(expression);
  if (funDescriptor instanceof ConstructorDescriptor) {
    generateConstructorCall(expression,(JetSimpleNameExpression)callee);
  }
 else   if (funDescriptor instanceof FunctionDescriptor) {
    final DeclarationDescriptor functionParent=funDescriptor.getContainingDeclaration();
    if (isNumberPrimitive(functionParent)) {
      if (funDescriptor.getName().equals("inv")) {
        final StackValue value=myStack.pop();
        final Type asmType=expressionType(expression);
        value.put(asmType,v);
        generateInv(asmType);
        return;
      }
    }
    final FunctionDescriptor fd=(FunctionDescriptor)funDescriptor;
    PsiElement declarationPsiElement=resolveCalleeToDeclaration(funDescriptor);
    CallableMethod callableMethod;
    if (declarationPsiElement instanceof PsiMethod) {
      final PsiMethod psiMethod=(PsiMethod)declarationPsiElement;
      callableMethod=JetTypeMapper.mapToCallableMethod(psiMethod);
      if (!psiMethod.hasModifierProperty(PsiModifier.STATIC)) {
        ensureReceiverOnStack(expression,null);
        setOwnerFromCall(callableMethod,expression);
      }
    }
 else     if (declarationPsiElement instanceof JetNamedFunction) {
      final JetNamedFunction jetFunction=(JetNamedFunction)declarationPsiElement;
      callableMethod=typeMapper.mapToCallableMethod(jetFunction);
      if (functionParent instanceof NamespaceDescriptorImpl) {
        if (jetFunction.getReceiverTypeRef() != null) {
          ensureReceiverOnStack(expression,null);
        }
      }
 else       if (functionParent instanceof ClassDescriptor) {
        ensureReceiverOnStack(expression,(ClassDescriptor)functionParent);
      }
    }
 else {
      gen(callee,Type.getObjectType(ClosureCodegen.getInternalClassName(fd)));
      boolean isExtensionFunction=fd.getReceiverType() != null;
      if (isExtensionFunction) {
        ensureReceiverOnStack(expression,null);
      }
      callableMethod=ClosureCodegen.asCallableMethod(fd);
    }
    invokeMethodWithArguments(callableMethod,expression);
    final Type callReturnType=callableMethod.getSignature().getReturnType();
    if (callReturnType != Type.VOID_TYPE) {
      final Type retType=typeMapper.mapType(fd.getReturnType());
      StackValue.onStack(callReturnType).upcast(retType,v);
      myStack.push(StackValue.onStack(retType));
    }
  }
 else {
    throw new UnsupportedOperationException("unknown type of callee descriptor: " + funDescriptor);
  }
}
