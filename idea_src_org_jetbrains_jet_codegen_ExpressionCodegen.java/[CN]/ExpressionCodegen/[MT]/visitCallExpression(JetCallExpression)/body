{
  JetExpression callee=expression.getCalleeExpression();
  if (callee instanceof JetSimpleNameExpression) {
    DeclarationDescriptor funDescriptor=bindingContext.resolveReferenceExpression((JetSimpleNameExpression)callee);
    if (funDescriptor instanceof FunctionDescriptor) {
      if (isNumberPrimitive(funDescriptor.getContainingDeclaration())) {
        if (funDescriptor.getName().equals("inv")) {
          final StackValue value=myStack.pop();
          final Type asmType=expressionType(expression);
          value.put(asmType,v);
          generateInv(asmType);
          return;
        }
      }
      PsiElement declarationPsiElement=bindingContext.getDeclarationPsiElement(funDescriptor);
      if (declarationPsiElement instanceof PsiMethod) {
        PsiMethod method=(PsiMethod)declarationPsiElement;
        pushMethodArguments(expression,method);
        final boolean isStatic=method.hasModifierProperty(PsiModifier.STATIC);
        v.visitMethodInsn(isStatic ? Opcodes.INVOKESTATIC : Opcodes.INVOKEVIRTUAL,JetTypeMapper.jvmName(method.getContainingClass()),method.getName(),getMethodDescriptor(method));
        final Type type=psiTypeToAsm(method.getReturnType());
        if (type != Type.VOID_TYPE) {
          myStack.push(StackValue.onStack(type));
        }
      }
 else {
        throw new UnsupportedOperationException("don't know how to generate call to " + declarationPsiElement);
      }
    }
 else {
      throw new CompilationException();
    }
  }
 else {
    throw new UnsupportedOperationException("Don't know how to generate a call");
  }
}
