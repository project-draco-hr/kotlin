{
  JetExpression callee=expression.getCalleeExpression();
  if (callee instanceof JetSimpleNameExpression) {
    DeclarationDescriptor funDescriptor=bindingContext.resolveReferenceExpression((JetSimpleNameExpression)callee);
    if (funDescriptor == null) {
      throw new CompilationException("Cannot resolve: " + callee.getText());
    }
    if (funDescriptor instanceof ConstructorDescriptor) {
      generateConstructorCall(expression,(JetSimpleNameExpression)callee);
    }
 else     if (funDescriptor instanceof FunctionDescriptor) {
      final DeclarationDescriptor functionParent=funDescriptor.getContainingDeclaration();
      if (isNumberPrimitive(functionParent)) {
        if (funDescriptor.getName().equals("inv")) {
          final StackValue value=myStack.pop();
          final Type asmType=expressionType(expression);
          value.put(asmType,v);
          generateInv(asmType);
          return;
        }
      }
      PsiElement declarationPsiElement=bindingContext.getDeclarationPsiElement(funDescriptor);
      final FunctionDescriptor fd=(FunctionDescriptor)funDescriptor;
      if (declarationPsiElement == null && isClass(functionParent,"String")) {
        final Project project=expression.getProject();
        PsiClass jlString=JavaPsiFacade.getInstance(project).findClass("java.lang.String",ProjectScope.getAllScope(project));
        final PsiMethod[] methods=jlString.findMethodsByName(funDescriptor.getName(),false);
        final int arity=fd.getValueParameters().size();
        for (        PsiMethod method : methods) {
          if (method.getParameterList().getParametersCount() == arity) {
            declarationPsiElement=method;
          }
        }
      }
      if (declarationPsiElement == null) {
        throw new UnsupportedOperationException("couldn't find declaration for " + funDescriptor);
      }
      Method methodDescriptor;
      if (declarationPsiElement instanceof PsiMethod) {
        methodDescriptor=generateJavaMethodCall(expression,(PsiMethod)declarationPsiElement);
      }
 else       if (declarationPsiElement instanceof JetNamedFunction) {
        final JetNamedFunction jetFunction=(JetNamedFunction)declarationPsiElement;
        CallableMethod callableMethod=typeMapper.mapToCallableMethod(jetFunction);
        if (functionParent instanceof NamespaceDescriptorImpl) {
          if (jetFunction.getReceiverTypeRef() != null) {
            ensureReceiverOnStack(expression,null);
          }
        }
 else         if (functionParent instanceof ClassDescriptor) {
          ensureReceiverOnStack(expression,(ClassDescriptor)functionParent);
        }
        pushMethodArguments(expression,callableMethod.getDescriptor());
        pushTypeArguments(expression);
        callableMethod.invoke(v);
        methodDescriptor=callableMethod.getDescriptor();
      }
 else {
        gen(callee,Type.getObjectType(ClosureCodegen.getInternalClassName(fd)));
        boolean isExtensionFunction=fd.getReceiverType() != null;
        int paramCount=fd.getValueParameters().size();
        if (isExtensionFunction) {
          ensureReceiverOnStack(expression,null);
          paramCount++;
        }
        methodDescriptor=ClosureCodegen.erasedInvokeSignature(fd);
        pushMethodArguments(expression,methodDescriptor);
        v.invokevirtual(ClosureCodegen.getInternalClassName(fd),"invoke",methodDescriptor.getDescriptor());
      }
      if (methodDescriptor.getReturnType() != Type.VOID_TYPE) {
        final Type retType=typeMapper.mapType(fd.getReturnType());
        StackValue.onStack(methodDescriptor.getReturnType()).upcast(retType,v);
        myStack.push(StackValue.onStack(retType));
      }
    }
 else {
      throw new CompilationException();
    }
  }
 else {
    throw new UnsupportedOperationException("Don't know how to generate a call");
  }
}
