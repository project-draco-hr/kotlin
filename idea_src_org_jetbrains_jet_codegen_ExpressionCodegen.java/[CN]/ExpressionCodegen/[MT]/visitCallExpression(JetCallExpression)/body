{
  JetExpression callee=expression.getCalleeExpression();
  if (callee instanceof JetSimpleNameExpression) {
    DeclarationDescriptor funDescriptor=bindingContext.resolveReferenceExpression((JetSimpleNameExpression)callee);
    if (funDescriptor instanceof FunctionDescriptor) {
      final DeclarationDescriptor functionParent=funDescriptor.getContainingDeclaration();
      if (isNumberPrimitive(functionParent)) {
        if (funDescriptor.getName().equals("inv")) {
          final StackValue value=myStack.pop();
          final Type asmType=expressionType(expression);
          value.put(asmType,v);
          generateInv(asmType);
          return;
        }
      }
      if (expression.getParent() instanceof JetDotQualifiedExpression) {
        final JetDotQualifiedExpression parent=(JetDotQualifiedExpression)expression.getParent();
        if (!resolvesToClassOrPackage(parent.getReceiverExpression())) {
          myStack.pop().put(Type.getObjectType("java/lang/Object"),v);
        }
      }
      PsiElement declarationPsiElement=bindingContext.getDeclarationPsiElement(funDescriptor);
      Method methodDescriptor;
      if (declarationPsiElement instanceof PsiMethod) {
        PsiMethod psiMethod=(PsiMethod)declarationPsiElement;
        methodDescriptor=getMethodDescriptor(psiMethod);
        pushMethodArguments(expression,methodDescriptor);
        final boolean isStatic=psiMethod.hasModifierProperty(PsiModifier.STATIC);
        v.visitMethodInsn(isStatic ? Opcodes.INVOKESTATIC : Opcodes.INVOKEVIRTUAL,JetTypeMapper.jvmName(psiMethod.getContainingClass()),methodDescriptor.getName(),methodDescriptor.getDescriptor());
      }
 else {
        if (functionParent instanceof NamespaceDescriptor && declarationPsiElement instanceof JetFunction) {
          methodDescriptor=typeMapper.mapSignature((JetFunction)declarationPsiElement);
          pushMethodArguments(expression,methodDescriptor);
          final String owner=NamespaceCodegen.getJVMClassName(DescriptorUtil.getFQName(functionParent));
          v.invokestatic(owner,methodDescriptor.getName(),methodDescriptor.getDescriptor());
        }
 else {
          throw new UnsupportedOperationException("don't know how to generate call to " + declarationPsiElement);
        }
      }
      if (methodDescriptor.getReturnType() != Type.VOID_TYPE) {
        myStack.push(StackValue.onStack(methodDescriptor.getReturnType()));
      }
    }
 else {
      throw new CompilationException();
    }
  }
 else {
    throw new UnsupportedOperationException("Don't know how to generate a call");
  }
}
