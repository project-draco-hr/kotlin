{
  final JetExpression callee=expression.getCalleeExpression();
  DeclarationDescriptor funDescriptor=resolveCalleeDescriptor(expression);
  if (funDescriptor instanceof ConstructorDescriptor) {
    generateConstructorCall(expression,(JetSimpleNameExpression)callee);
  }
 else   if (funDescriptor instanceof FunctionDescriptor) {
    final DeclarationDescriptor functionParent=funDescriptor.getContainingDeclaration();
    if (isNumberPrimitive(functionParent)) {
      if (funDescriptor.getName().equals("inv")) {
        final StackValue value=myStack.pop();
        final Type asmType=expressionType(expression);
        value.put(asmType,v);
        generateInv(asmType);
        return;
      }
    }
    if (state.getStandardLibrary().getTypeInfoFunctionGroup().getFunctionDescriptors().contains(funDescriptor.getOriginal())) {
      generateTypeInfoCall(expression);
      return;
    }
    final FunctionDescriptor fd=(FunctionDescriptor)funDescriptor;
    PsiElement declarationPsiElement=resolveCalleeToDeclaration(funDescriptor);
    CallableMethod callableMethod;
    if (declarationPsiElement instanceof PsiMethod || declarationPsiElement instanceof JetNamedFunction) {
      callableMethod=typeMapper.mapToCallableMethod((PsiNamedElement)declarationPsiElement);
    }
 else {
      gen(callee,Type.getObjectType(ClosureCodegen.getInternalClassName(fd)));
      callableMethod=ClosureCodegen.asCallableMethod(fd);
    }
    invokeMethodWithArguments(callableMethod,expression);
    final Type callReturnType=callableMethod.getSignature().getReturnType();
    if (callReturnType != Type.VOID_TYPE) {
      final Type retType=typeMapper.mapType(fd.getReturnType());
      StackValue.onStack(callReturnType).upcast(retType,v);
      myStack.push(StackValue.onStack(retType));
    }
  }
 else {
    throw new UnsupportedOperationException("unknown type of callee descriptor: " + funDescriptor);
  }
}
