{
  JetExpression callee=expression.getCalleeExpression();
  if (callee instanceof JetSimpleNameExpression) {
    DeclarationDescriptor funDescriptor=bindingContext.resolveReferenceExpression((JetSimpleNameExpression)callee);
    if (funDescriptor instanceof FunctionDescriptor) {
      PsiElement declarationPsiElement=bindingContext.getDeclarationPsiElement(funDescriptor);
      if (declarationPsiElement instanceof PsiMethod) {
        PsiMethod method=(PsiMethod)declarationPsiElement;
        PsiParameter[] parameters=method.getParameterList().getParameters();
        List<JetArgument> args=expression.getValueArguments();
        for (int i=0, argsSize=args.size(); i < argsSize; i++) {
          JetArgument arg=args.get(i);
          gen(arg.getArgumentExpression(),psiTypeToAsm(parameters[i].getType()));
        }
        if (method.hasModifierProperty(PsiModifier.STATIC)) {
          v.visitMethodInsn(Opcodes.INVOKESTATIC,jvmName(method.getContainingClass()),method.getName(),getMethodDescriptor(method));
        }
 else {
          v.visitMethodInsn(Opcodes.INVOKEVIRTUAL,jvmName(method.getContainingClass()),method.getName(),getMethodDescriptor(method));
        }
        final Type type=psiTypeToAsm(method.getReturnType());
        if (type != Type.VOID_TYPE) {
          myStack.push(StackValue.onStack(type));
        }
      }
    }
 else {
      throw new CompilationException();
    }
  }
 else {
    throw new UnsupportedOperationException("Don't know how to generate a call");
  }
}
