{
  JetExpression expr=expression.getSubjectExpression();
  final Type subjectType=expressionType(expr);
  final int subjectLocal=myMap.enterTemp(subjectType.getSize());
  gen(expr,subjectType);
  v.store(subjectLocal,subjectType);
  Label end=new Label();
  Label nextEntry=null;
  boolean hasElse=false;
  for (  JetWhenEntry whenEntry : expression.getEntries()) {
    if (nextEntry != null) {
      v.mark(nextEntry);
    }
    nextEntry=new Label();
    if (!whenEntry.isElse()) {
      JetWhenCondition condition=whenEntry.getCondition();
      if (condition instanceof JetWhenConditionWithExpression) {
        v.load(subjectLocal,subjectType);
        JetExpression condExpression=((JetWhenConditionWithExpression)condition).getExpression();
        Type condType=expressionType(condExpression);
        gen(condExpression,condType);
        generateEqualsForExpressionsOnStack(JetTokens.EQEQ,subjectType,condType);
      }
 else       if (condition instanceof JetWhenConditionInRange) {
        JetExpression range=((JetWhenConditionInRange)condition).getRangeExpression();
        gen(range,RANGE_TYPE);
        new StackValue.Local(subjectLocal,subjectType).put(OBJECT_TYPE,v);
        v.invokeinterface(CLASS_RANGE,"contains","(Ljava/lang/Comparable;)Z");
        myStack.push(new StackValue.OnStack(Type.BOOLEAN_TYPE));
      }
 else       if (condition instanceof JetWhenConditionIsPattern) {
        JetWhenConditionIsPattern patternCondition=(JetWhenConditionIsPattern)condition;
        JetPattern pattern=patternCondition.getPattern();
        generatePatternMatch(pattern,patternCondition.isNegated(),new Runnable(){
          @Override public void run(){
            new StackValue.Local(subjectLocal,subjectType).put(OBJECT_TYPE,v);
          }
        }
);
      }
 else {
        throw new UnsupportedOperationException("unsupported kind of when condition");
      }
      myStack.pop().condJump(nextEntry,true,v);
    }
 else {
      hasElse=true;
    }
    genToJVMStack(whenEntry.getExpression());
    v.goTo(end);
  }
  if (!hasElse && nextEntry != null) {
    v.mark(nextEntry);
    v.anew(NO_PATTERN_MATCHED_EXCEPTION_TYPE);
    v.dup();
    v.invokespecial(CLASS_NO_PATTERN_MATCHED_EXCEPTION,"<init>","()V");
    v.athrow();
  }
  v.mark(end);
  myStack.push(StackValue.onStack(expressionType(expression)));
  myMap.leaveTemp(subjectType.getSize());
}
