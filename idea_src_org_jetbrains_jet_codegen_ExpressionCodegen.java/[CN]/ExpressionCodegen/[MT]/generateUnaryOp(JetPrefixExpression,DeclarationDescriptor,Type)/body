{
  final JetExpression operand=expression.getBaseExpression();
  if (op.getName().equals("minus")) {
    gen(operand,asmType);
    v.neg(asmType);
    myStack.push(StackValue.onStack(asmType));
    return true;
  }
 else   if (op.getName().equals("inv")) {
    gen(operand,asmType);
    v.aconst(-1);
    v.xor(asmType);
    myStack.push(StackValue.onStack(asmType));
    return true;
  }
 else   if (op.getName().equals("inc") || op.getName().equals("dec")) {
    if (!(operand instanceof JetReferenceExpression)) {
      throw new UnsupportedOperationException("cannot increment or decrement a non-lvalue");
    }
    int increment=op.getName().equals("inc") ? 1 : -1;
    final DeclarationDescriptor descriptor=bindingContext.resolveReferenceExpression((JetReferenceExpression)operand);
    final int index=myMap.getIndex(descriptor);
    if (index >= 0) {
      if (isIntPrimitive(asmType)) {
        v.iinc(index,increment);
      }
 else {
        gen(operand,asmType);
        if (asmType == Type.LONG_TYPE) {
          v.aconst(Long.valueOf(increment));
        }
 else         if (asmType == Type.FLOAT_TYPE) {
          v.aconst(Float.valueOf(increment));
        }
 else         if (asmType == Type.DOUBLE_TYPE) {
          v.aconst(Double.valueOf(increment));
        }
 else {
          return false;
        }
        v.add(asmType);
        v.store(index,asmType);
      }
      myStack.push(StackValue.local(index,asmType));
      return true;
    }
  }
  return false;
}
