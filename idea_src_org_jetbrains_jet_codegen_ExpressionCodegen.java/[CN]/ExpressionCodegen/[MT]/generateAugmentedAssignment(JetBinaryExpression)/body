{
  DeclarationDescriptor op=bindingContext.resolveReferenceExpression(expression.getOperationReference());
  final Callable callable=resolveToCallable(op);
  final JetExpression lhs=expression.getLeft();
  Type lhsType=expressionType(lhs);
  if (bindingContext.isVariableReassignment(expression)) {
    if (isNumberPrimitive(lhsType)) {
      StackValue value=generateIntermediateValue(lhs);
      value.dupReceiver(v,0);
      value.put(lhsType,v);
      genToJVMStack(expression.getRight());
      v.visitInsn(lhsType.getOpcode(opcodeForMethod(op.getName())));
      value.store(v);
    }
 else     if (callable instanceof CallableMethod) {
      callAugAssignMethod(expression,(CallableMethod)callable,lhsType,true);
    }
 else {
      throw new UnsupportedOperationException("Augmented assignment for non-primitive types not yet implemented");
    }
  }
 else {
    if (callable instanceof IntrinsicMethod) {
      final IntrinsicMethod intrinsic=(IntrinsicMethod)callable;
      intrinsic.generate(this,v,Type.VOID_TYPE,expression,Arrays.asList(lhs,expression.getRight()),false);
    }
 else {
      final boolean keepReturnValue=!((FunctionDescriptor)op).getReturnType().equals(JetStandardClasses.getUnitType());
      callAugAssignMethod(expression,(CallableMethod)callable,lhsType,keepReturnValue);
    }
  }
}
