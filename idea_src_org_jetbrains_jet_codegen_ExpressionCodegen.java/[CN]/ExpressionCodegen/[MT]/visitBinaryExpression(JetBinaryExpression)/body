{
  final IElementType opToken=expression.getOperationReference().getReferencedNameElementType();
  if (opToken == JetTokens.EQ) {
    generateAssignmentExpression(expression);
  }
 else   if (JetTokens.AUGMENTED_ASSIGNMENTS.contains(opToken)) {
    generateAugmentedAssignment(expression);
  }
 else   if (opToken == JetTokens.ANDAND) {
    generateBooleanAnd(expression);
  }
 else   if (opToken == JetTokens.OROR) {
    generateBooleanOr(expression);
  }
 else   if (opToken == JetTokens.EQEQ || opToken == JetTokens.EXCLEQ || opToken == JetTokens.EQEQEQ || opToken == JetTokens.EXCLEQEQEQ) {
    generateEquals(expression.getLeft(),expression.getRight(),opToken);
  }
 else   if (opToken == JetTokens.LT || opToken == JetTokens.LTEQ || opToken == JetTokens.GT || opToken == JetTokens.GTEQ) {
    generateCompareOp(expression.getLeft(),expression.getRight(),opToken,expressionType(expression.getLeft()));
  }
 else   if (opToken == JetTokens.ELVIS) {
    generateElvis(expression);
  }
 else {
    DeclarationDescriptor op=bindingContext.get(BindingContext.REFERENCE_TARGET,expression.getOperationReference());
    final Callable callable=resolveToCallable(op);
    if (callable instanceof IntrinsicMethod) {
      IntrinsicMethod intrinsic=(IntrinsicMethod)callable;
      myStack.push(intrinsic.generate(this,v,expressionType(expression),expression,Arrays.asList(expression.getLeft(),expression.getRight()),false));
    }
 else {
      CallableMethod callableMethod=(CallableMethod)callable;
      genToJVMStack(expression.getLeft());
      genToJVMStack(expression.getRight());
      callableMethod.invoke(v);
      final StackValue value=returnValueAsStackValue((FunctionDescriptor)op,callableMethod.getSignature().getReturnType());
      if (value != null) {
        myStack.push(value);
      }
    }
  }
}
