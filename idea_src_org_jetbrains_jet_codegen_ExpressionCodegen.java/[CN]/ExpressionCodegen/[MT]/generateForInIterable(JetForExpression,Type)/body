{
  final JetParameter loopParameter=expression.getLoopParameter();
  final VariableDescriptor parameterDescriptor=bindingContext.getVariableDescriptor(loopParameter);
  JetType paramType=parameterDescriptor.getOutType();
  Type asmParamType=typeMapper.mapType(paramType);
  int iteratorVar=myMap.enterTemp();
  gen(expression.getLoopRange(),loopRangeType);
  v.invokeinterface(CLASS_ITERABLE,"iterator",ITERABLE_ITERATOR_DESCRIPTOR);
  v.store(iteratorVar,ITERATOR_TYPE);
  Label begin=new Label();
  Label end=new Label();
  myContinueTargets.push(begin);
  myBreakTargets.push(end);
  v.mark(begin);
  v.load(iteratorVar,ITERATOR_TYPE);
  v.invokeinterface(CLASS_ITERATOR,"hasNext",ITERATOR_HASNEXT_DESCRIPTOR);
  v.ifeq(end);
  myMap.enter(parameterDescriptor,asmParamType.getSize());
  v.load(iteratorVar,ITERATOR_TYPE);
  v.invokeinterface(CLASS_ITERATOR,"next",ITERATOR_NEXT_DESCRIPTOR);
  if (asmParamType.getSort() == Type.OBJECT && !"java.lang.Object".equals(asmParamType.getClassName())) {
    v.checkcast(asmParamType);
  }
  v.store(myMap.getIndex(parameterDescriptor),asmParamType);
  gen(expression.getBody(),Type.VOID_TYPE);
  v.goTo(begin);
  v.mark(end);
  int paramIndex=myMap.leave(parameterDescriptor);
  v.visitLocalVariable(loopParameter.getName(),asmParamType.getDescriptor(),null,begin,end,paramIndex);
  myMap.leaveTemp();
  myBreakTargets.pop();
  myContinueTargets.pop();
}
