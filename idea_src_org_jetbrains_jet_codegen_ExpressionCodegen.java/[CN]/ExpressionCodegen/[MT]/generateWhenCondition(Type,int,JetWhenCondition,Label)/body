{
  StackValue conditionValue;
  if (condition instanceof JetWhenConditionInRange) {
    JetWhenConditionInRange conditionInRange=(JetWhenConditionInRange)condition;
    JetExpression rangeExpression=conditionInRange.getRangeExpression();
    if (isIntRangeExpr(rangeExpression)) {
      v.iconst(1);
      new StackValue.Local(subjectLocal,subjectType).put(Type.INT_TYPE,v);
      JetBinaryExpression binaryExpression=(JetBinaryExpression)rangeExpression;
      gen(binaryExpression.getLeft(),Type.INT_TYPE);
      Label lok=new Label();
      v.ificmpge(lok);
      v.pop();
      v.iconst(0);
      v.mark(lok);
      v.iconst(1);
      new StackValue.Local(subjectLocal,subjectType).put(Type.INT_TYPE,v);
      gen(binaryExpression.getRight(),Type.INT_TYPE);
      Label rok=new Label();
      v.ificmple(rok);
      v.pop();
      v.iconst(0);
      v.mark(rok);
      v.and(Type.INT_TYPE);
      if (conditionInRange.getOperationReference().getReferencedNameElementType() == JetTokens.NOT_IN) {
        v.iconst(1);
        v.xor(Type.INT_TYPE);
      }
    }
 else {
      FunctionDescriptor op=(FunctionDescriptor)bindingContext.get(BindingContext.REFERENCE_TARGET,conditionInRange.getOperationReference());
      genToJVMStack(rangeExpression);
      new StackValue.Local(subjectLocal,subjectType).put(JetTypeMapper.TYPE_OBJECT,v);
      invokeFunctionNoParams(op,Type.BOOLEAN_TYPE,v);
    }
    return StackValue.onStack(Type.BOOLEAN_TYPE);
  }
 else   if (condition instanceof JetWhenConditionIsPattern) {
    JetWhenConditionIsPattern patternCondition=(JetWhenConditionIsPattern)condition;
    JetPattern pattern=patternCondition.getPattern();
    conditionValue=generatePatternMatch(pattern,patternCondition.isNegated(),StackValue.local(subjectLocal,subjectType),nextEntry);
  }
 else   if (condition instanceof JetWhenConditionCall) {
    final JetExpression call=((JetWhenConditionCall)condition).getCallSuffixExpression();
    if (call instanceof JetCallExpression) {
      v.load(subjectLocal,subjectType);
      final DeclarationDescriptor declarationDescriptor=resolveCalleeDescriptor((JetCallExpression)call);
      if (!(declarationDescriptor instanceof FunctionDescriptor)) {
        throw new UnsupportedOperationException("expected function descriptor in when condition with call, found " + declarationDescriptor);
      }
      conditionValue=invokeFunction((JetCallExpression)call,declarationDescriptor,StackValue.onStack(subjectType));
    }
 else     if (call instanceof JetSimpleNameExpression) {
      final DeclarationDescriptor descriptor=bindingContext.get(BindingContext.REFERENCE_TARGET,(JetSimpleNameExpression)call);
      if (descriptor instanceof PropertyDescriptor) {
        v.load(subjectLocal,subjectType);
        conditionValue=intermediateValueForProperty((PropertyDescriptor)descriptor,false,false);
      }
 else {
        throw new UnsupportedOperationException("unknown simple name resolve result: " + descriptor);
      }
    }
 else {
      throw new UnsupportedOperationException("unsupported kind of call suffix");
    }
  }
 else {
    throw new UnsupportedOperationException("unsupported kind of when condition");
  }
  return conditionValue;
}
