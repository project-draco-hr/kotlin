{
  DeclarationDescriptor declarationDescriptor=jetType.getConstructor().getDeclarationDescriptor();
  if (declarationDescriptor instanceof TypeParameterDescriptor) {
    loadTypeParameterTypeInfo((TypeParameterDescriptor)declarationDescriptor);
    return;
  }
  final Type jvmType=typeMapper.mapType(jetType,OwnerKind.INTERFACE);
  if (jvmType.getSort() <= Type.DOUBLE) {
    v.getstatic("jet/typeinfo/TypeInfo",PRIMITIVE_TYPE_INFO_FIELDS[jvmType.getSort()],"Ljet/typeinfo/TypeInfo;");
    return;
  }
  v.aconst(jvmType);
  v.iconst(jetType.isNullable() ? 1 : 0);
  List<TypeProjection> arguments=jetType.getArguments();
  if (arguments.size() > 0) {
    v.iconst(arguments.size());
    v.newarray(JetTypeMapper.TYPE_TYPEINFOPROJECTION);
    for (int i=0, argumentsSize=arguments.size(); i < argumentsSize; i++) {
      TypeProjection argument=arguments.get(i);
      v.dup();
      v.iconst(i);
      generateTypeInfo(argument.getType());
      genTypeInfoToProjection(v,argument.getProjectionKind());
      v.astore(JetTypeMapper.TYPE_OBJECT);
    }
    v.invokestatic("jet/typeinfo/TypeInfo","getTypeInfo","(Ljava/lang/Class;Z[Ljet/typeinfo/TypeInfoProjection;)Ljet/typeinfo/TypeInfo;");
  }
 else {
    v.invokestatic("jet/typeinfo/TypeInfo","getTypeInfo","(Ljava/lang/Class;Z)Ljet/typeinfo/TypeInfo;");
  }
}
