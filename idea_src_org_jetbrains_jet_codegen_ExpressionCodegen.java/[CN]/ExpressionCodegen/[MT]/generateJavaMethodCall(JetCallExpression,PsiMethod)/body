{
  final PsiClass containingClass=psiMethod.getContainingClass();
  String owner=JetTypeMapper.jvmName(containingClass);
  Method methodDescriptor=JetTypeMapper.getMethodDescriptor(psiMethod);
  final boolean isStatic=psiMethod.hasModifierProperty(PsiModifier.STATIC);
  if (!isStatic) {
    ensureReceiverOnStack(expression,null);
    if (expression.getParent() instanceof JetQualifiedExpression) {
      final JetExpression receiver=((JetQualifiedExpression)expression.getParent()).getReceiverExpression();
      JetType expressionType=bindingContext.getExpressionType(receiver);
      DeclarationDescriptor declarationDescriptor=expressionType.getConstructor().getDeclarationDescriptor();
      PsiElement ownerDeclaration=bindingContext.getDeclarationPsiElement(declarationDescriptor);
      if (ownerDeclaration instanceof PsiClass) {
        owner=typeMapper.mapType(expressionType).getInternalName();
      }
    }
  }
  pushMethodArguments(expression,methodDescriptor);
  v.visitMethodInsn(isStatic ? Opcodes.INVOKESTATIC : (containingClass.isInterface() ? Opcodes.INVOKEINTERFACE : Opcodes.INVOKEVIRTUAL),owner,methodDescriptor.getName(),methodDescriptor.getDescriptor());
  return methodDescriptor;
}
