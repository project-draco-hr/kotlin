{
  final int capturedParamsSize=parameters.getCaptured().size();
  final int realParametersSize=parameters.getReal().size();
  Type[] types=Type.getArgumentTypes(node.desc);
  Type returnType=Type.getReturnType(node.desc);
  ArrayList<Type> capturedTypes=parameters.getCapturedTypes();
  Type[] allTypes=ArrayUtil.mergeArrays(types,capturedTypes.toArray(new Type[capturedTypes.size()]));
  node.instructions.resetLabels();
  MethodNode transformedNode=new MethodNode(node.access,node.name,Type.getMethodDescriptor(returnType,allTypes),node.signature,null){
    @Override public void visitVarInsn(    int opcode,    int var){
      int newIndex;
      if (var < realParametersSize) {
        newIndex=var;
      }
 else {
        newIndex=var + capturedParamsSize;
      }
      super.visitVarInsn(opcode,newIndex);
    }
    @Override public void visitIincInsn(    int var,    int increment){
      int newIndex;
      if (var < realParametersSize) {
        newIndex=var;
      }
 else {
        newIndex=var + capturedParamsSize;
      }
      super.visitIincInsn(newIndex,increment);
    }
    @Override public void visitMaxs(    int maxStack,    int maxLocals){
      super.visitMaxs(maxStack,maxLocals + capturedParamsSize);
    }
  }
;
  node.accept(transformedNode);
  transformCaptured(transformedNode);
  return transformedNode;
}
