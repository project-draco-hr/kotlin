{
  TypeProjection singleBestProjection=TypesPackage.singleBestRepresentative(typeProjections);
  if (singleBestProjection != null) {
    return singleBestProjection;
  }
  if (recursionDepth >= maxDepth) {
    return new TypeProjectionImpl(OUT_VARIANCE,DescriptorUtilsKt.getBuiltIns(parameterDescriptor).getNullableAnyType());
  }
  Set<JetType> ins=new HashSet<JetType>();
  Set<JetType> outs=new HashSet<JetType>();
  Variance variance=parameterDescriptor.getVariance();
switch (variance) {
case INVARIANT:
    break;
case IN_VARIANCE:
  outs=null;
break;
case OUT_VARIANCE:
ins=null;
break;
}
for (TypeProjection projection : typeProjections) {
Variance projectionKind=projection.getProjectionKind();
if (projectionKind.getAllowsInPosition()) {
if (ins != null) {
ins.add(projection.getType());
}
}
 else {
ins=null;
}
if (projectionKind.getAllowsOutPosition()) {
if (outs != null) {
outs.add(projection.getType());
}
}
 else {
outs=null;
}
}
if (outs != null) {
Variance projectionKind=variance == OUT_VARIANCE ? Variance.INVARIANT : OUT_VARIANCE;
JetType superType=findCommonSupertype(outs,recursionDepth + 1,maxDepth);
for (JetType upperBound : parameterDescriptor.getUpperBounds()) {
if (!TypeUtilPackage.isSubtypeOf(superType,upperBound)) {
return new StarProjectionImpl(parameterDescriptor);
}
}
return new TypeProjectionImpl(projectionKind,superType);
}
if (ins != null) {
JetType intersection=TypeIntersector.intersectTypes(getBuiltIns(parameterDescriptor),JetTypeChecker.DEFAULT,ins);
if (intersection == null) {
return new TypeProjectionImpl(OUT_VARIANCE,findCommonSupertype(parameterDescriptor.getUpperBounds(),recursionDepth + 1,maxDepth));
}
Variance projectionKind=variance == IN_VARIANCE ? Variance.INVARIANT : IN_VARIANCE;
return new TypeProjectionImpl(projectionKind,intersection);
}
 else {
Variance projectionKind=variance == OUT_VARIANCE ? Variance.INVARIANT : OUT_VARIANCE;
return new TypeProjectionImpl(projectionKind,findCommonSupertype(parameterDescriptor.getUpperBounds(),recursionDepth + 1,maxDepth));
}
}
