{
  FqNameUnsafe fqName=classId.asSingleFqName();
  ClassMetadata classMetadata=this.classMetadata.fun(fqName.asString());
  if (classMetadata == null) {
    return parentResolver.findClass(classId);
  }
  NestedClassResolver nestedClassResolver=new NestedClassResolver(){
    @Nullable @Override public ClassDescriptor resolveNestedClass(    @NotNull ClassDescriptor outerClass,    @NotNull Name name){
      return findClass(classId.createNestedClassId(name));
    }
    @Nullable @Override public ClassDescriptor resolveClassObject(    @NotNull ClassDescriptor outerClass){
      return findClass(classId.createNestedClassId(Name.identifier(JvmAbi.CLASS_OBJECT_CLASS_NAME)));
    }
  }
;
  NameResolver nameResolver=new NameResolver(classMetadata.simpleNames,classMetadata.qualifiedNames);
  return new DeserializedClassDescriptor(new LockBasedStorageManager(),containingDeclaration,nameResolver,DUMMY_ANNOTATION_DESERIALIZER,this,nestedClassResolver,classMetadata.classProto,null);
}
