{
  receiver.put(JetTypeMapper.TYPE_OBJECT,v);
  JetCallExpression call=(JetCallExpression)element;
  FunctionDescriptor funDescriptor=(FunctionDescriptor)codegen.getBindingContext().get(BindingContext.REFERENCE_TARGET,(JetSimpleNameExpression)call.getCalleeExpression());
  ClassDescriptor containingDeclaration=(ClassDescriptor)funDescriptor.getContainingDeclaration().getOriginal();
  JetStandardLibrary standardLibrary=codegen.getState().getStandardLibrary();
  if (containingDeclaration.equals(standardLibrary.getArray())) {
    codegen.generateTypeInfo(funDescriptor.getReturnType().getArguments().get(0).getType(),null);
    v.invokestatic("jet/runtime/ArrayIterator","iterator","([Ljava/lang/Object;Ljet/TypeInfo;)Ljet/Iterator;");
    return StackValue.onStack(JetTypeMapper.TYPE_ITERATOR);
  }
 else {
    for (    JvmPrimitiveType jvmPrimitiveType : JvmPrimitiveType.values()) {
      PrimitiveType primitiveType=jvmPrimitiveType.getPrimitiveType();
      ClassDescriptor arrayClass=standardLibrary.getPrimitiveArrayClassDescriptor(primitiveType);
      if (containingDeclaration.equals(arrayClass)) {
        String methodSignature="([" + jvmPrimitiveType.getJvmLetter() + ")"+ jvmPrimitiveType.getIterator().getDescriptor();
        v.invokestatic("jet/runtime/ArrayIterator","iterator",methodSignature);
        return StackValue.onStack(jvmPrimitiveType.getIterator().getAsmType());
      }
    }
    throw new UnsupportedOperationException(containingDeclaration.toString());
  }
}
