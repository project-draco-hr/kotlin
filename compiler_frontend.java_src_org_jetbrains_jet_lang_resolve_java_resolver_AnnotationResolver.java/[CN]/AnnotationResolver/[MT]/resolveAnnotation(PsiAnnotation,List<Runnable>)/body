{
  final AnnotationDescriptor annotation=new AnnotationDescriptor();
  String qname=psiAnnotation.getQualifiedName();
  if (qname == null) {
    return null;
  }
  if (qname.startsWith("jet.runtime.typeinfo.") || qname.equals(JvmAbi.JETBRAINS_NOT_NULL_ANNOTATION.getFqName().getFqName())) {
    return null;
  }
  FqName annotationFqName=new FqName(qname);
  final ClassDescriptor clazz=javaDescriptorResolver.getClassResolver().resolveClass(annotationFqName,DescriptorSearchRule.INCLUDE_KOTLIN,taskList);
  if (clazz == null) {
    return null;
  }
  taskList.add(new Runnable(){
    @Override public void run(){
      annotation.setAnnotationType(clazz.getDefaultType());
    }
  }
);
  PsiAnnotationParameterList parameterList=psiAnnotation.getParameterList();
  for (  PsiNameValuePair psiNameValuePair : parameterList.getAttributes()) {
    PsiAnnotationMemberValue value=psiNameValuePair.getValue();
    String name=psiNameValuePair.getName();
    if (name == null)     name="value";
    Name identifier=Name.identifier(name);
    CompileTimeConstant compileTimeConst=javaDescriptorResolver.getCompileTimeConstResolver().getCompileTimeConstFromExpression(annotationFqName,identifier,value,taskList);
    if (compileTimeConst != null) {
      ValueParameterDescriptor valueParameterDescriptor=JavaDescriptorResolver.getValueParameterDescriptorForAnnotationParameter(identifier,clazz);
      if (valueParameterDescriptor != null) {
        annotation.setValueArgument(valueParameterDescriptor,compileTimeConst);
      }
    }
  }
  return annotation;
}
