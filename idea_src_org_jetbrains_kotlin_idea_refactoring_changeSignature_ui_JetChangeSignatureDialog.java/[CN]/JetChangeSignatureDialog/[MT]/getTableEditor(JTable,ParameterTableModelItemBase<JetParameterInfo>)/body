{
  return new JBTableRowEditor(){
    private final List<JComponent> components=new ArrayList<JComponent>();
    private final EditorTextField nameEditor=new EditorTextField(item.parameter.getName(),getProject(),getFileType());
    private void updateNameEditor(){
      nameEditor.setEnabled(item.parameter != myParametersTableModel.getReceiver());
    }
    private boolean isDefaultColumnEnabled(){
      return item.parameter.getIsNewParameter() && item.parameter != myMethod.getReceiver();
    }
    @Override public void prepareEditor(    JTable table,    final int row){
      setLayout(new BoxLayout(this,BoxLayout.X_AXIS));
      int column=0;
      for (      ColumnInfo columnInfo : myParametersTableModel.getColumnInfos()) {
        JPanel panel=new JPanel(new VerticalFlowLayout(VerticalFlowLayout.TOP,4,2,true,false));
        EditorTextField editor=null;
        JComponent component;
        final int columnFinal=column;
        if (JetCallableParameterTableModel.isTypeColumn(columnInfo)) {
          Document document=PsiDocumentManager.getInstance(getProject()).getDocument(item.typeCodeFragment);
          component=editor=new EditorTextField(document,getProject(),getFileType());
        }
 else         if (JetCallableParameterTableModel.isNameColumn(columnInfo)) {
          component=editor=nameEditor;
          updateNameEditor();
        }
 else         if (JetCallableParameterTableModel.isDefaultValueColumn(columnInfo) && isDefaultColumnEnabled()) {
          Document document=PsiDocumentManager.getInstance(getProject()).getDocument(item.defaultValueCodeFragment);
          component=editor=new EditorTextField(document,getProject(),getFileType());
        }
 else         if (JetPrimaryConstructorParameterTableModel.isValVarColumn(columnInfo)) {
          JComboBox comboBox=new JComboBox(JetValVar.values());
          comboBox.setSelectedItem(item.parameter.getValOrVar());
          comboBox.addItemListener(new ItemListener(){
            @Override public void itemStateChanged(            @NotNull ItemEvent e){
              myParametersTableModel.setValueAtWithoutUpdate(e.getItem(),row,columnFinal);
              updateSignature();
            }
          }
);
          component=comboBox;
        }
 else         if (JetFunctionParameterTableModel.isReceiverColumn(columnInfo)) {
          JCheckBox checkBox=new JCheckBox();
          checkBox.setSelected(myParametersTableModel.getReceiver() == item.parameter);
          checkBox.addItemListener(new ItemListener(){
            @Override public void itemStateChanged(            @NotNull ItemEvent e){
              ((JetFunctionParameterTableModel)myParametersTableModel).setReceiver(e.getStateChange() == ItemEvent.SELECTED ? item.parameter : null);
              updateSignature();
              updateNameEditor();
            }
          }
);
          component=checkBox;
        }
 else         continue;
        JBLabel label=new JBLabel(columnInfo.getName(),UIUtil.ComponentStyle.SMALL);
        panel.add(label);
        if (editor != null) {
          editor.addDocumentListener(new DocumentAdapter(){
            @Override public void documentChanged(            DocumentEvent e){
              fireDocumentChanged(e,columnFinal);
            }
          }
);
          editor.setPreferredWidth(t.getWidth() / myParametersTableModel.getColumnCount());
        }
        components.add(component);
        panel.add(component);
        add(panel);
        IJSwingUtilities.adjustComponentsOnMac(label,component);
        column++;
      }
    }
    @Override public JBTableRow getValue(){
      return new JBTableRow(){
        @Override public Object getValueAt(        int column){
          ColumnInfo columnInfo=myParametersTableModel.getColumnInfos()[column];
          if (JetPrimaryConstructorParameterTableModel.isValVarColumn(columnInfo))           return ((JComboBox)components.get(column)).getSelectedItem();
 else           if (JetCallableParameterTableModel.isTypeColumn(columnInfo))           return item.typeCodeFragment;
 else           if (JetCallableParameterTableModel.isNameColumn(columnInfo))           return ((EditorTextField)components.get(column)).getText();
 else           if (JetCallableParameterTableModel.isDefaultValueColumn(columnInfo))           return item.defaultValueCodeFragment;
 else           return null;
        }
      }
;
    }
    private int getColumnWidth(    int letters){
      Font font=EditorColorsManager.getInstance().getGlobalScheme().getFont(EditorFontType.PLAIN);
      font=new Font(font.getFontName(),font.getStyle(),12);
      return letters * Toolkit.getDefaultToolkit().getFontMetrics(font).stringWidth("W");
    }
    private int getEditorIndex(    int x){
      int[] columnLetters=isDefaultColumnEnabled() ? new int[]{4,getParamNamesMaxLength(),getTypesMaxLength(),getDefaultValuesMaxLength()} : new int[]{4,getParamNamesMaxLength(),getTypesMaxLength()};
      int columnIndex=0;
      for (int i=myMethod.getKind() == Kind.PRIMARY_CONSTRUCTOR ? 0 : 1; i < columnLetters.length; i++) {
        int width=getColumnWidth(columnLetters[i]);
        if (x <= width)         return columnIndex;
        columnIndex++;
        x-=width;
      }
      return columnIndex - 1;
    }
    @Override public JComponent getPreferredFocusedComponent(){
      MouseEvent me=getMouseEvent();
      int index=me != null ? getEditorIndex((int)me.getPoint().getX()) : myMethod.getKind() == Kind.PRIMARY_CONSTRUCTOR ? 1 : 0;
      JComponent component=components.get(index);
      return component instanceof EditorTextField ? ((EditorTextField)component).getFocusTarget() : component;
    }
    @Override public JComponent[] getFocusableComponents(){
      JComponent[] focusable=new JComponent[components.size()];
      for (int i=0; i < components.size(); i++) {
        focusable[i]=components.get(i);
        if (focusable[i] instanceof EditorTextField)         focusable[i]=((EditorTextField)focusable[i]).getFocusTarget();
      }
      return focusable;
    }
  }
;
}
