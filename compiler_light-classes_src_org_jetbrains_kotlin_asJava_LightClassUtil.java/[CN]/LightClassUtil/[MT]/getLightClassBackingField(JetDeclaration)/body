{
  PsiClass psiClass=getWrappingClass(declaration);
  if (psiClass == null) {
    return null;
  }
  if (psiClass instanceof KotlinLightClass) {
    JetClassOrObject origin=((KotlinLightClass)psiClass).getOrigin();
    if (origin instanceof JetObjectDeclaration && ((JetObjectDeclaration)origin).isCompanion()) {
      JetClass containingClass=PsiTreeUtil.getParentOfType(origin,JetClass.class);
      if (containingClass != null) {
        PsiClass containingLightClass=getPsiClass(containingClass);
        if (containingLightClass != null) {
          psiClass=containingLightClass;
        }
      }
    }
  }
  for (  PsiField field : psiClass.getFields()) {
    if (field instanceof KotlinLightField && ((KotlinLightField)field).getOrigin() == declaration) {
      return field;
    }
  }
  return null;
}
