{
  MutableResolvedCall<D> candidateCall=context.candidateCall;
  final D candidate=candidateCall.getCandidateDescriptor();
  ConstraintSystemImpl constraintSystem=new ConstraintSystemImpl();
  CallableDescriptor candidateWithFreshVariables=FunctionDescriptorUtil.alphaConvertTypeParameters(candidate);
  Map<TypeParameterDescriptor,Variance> typeVariables=Maps.newLinkedHashMap();
  for (  TypeParameterDescriptor typeParameterDescriptor : candidateWithFreshVariables.getTypeParameters()) {
    typeVariables.put(typeParameterDescriptor,Variance.INVARIANT);
  }
  constraintSystem.registerTypeVariables(typeVariables);
  TypeSubstitutor substituteDontCare=makeConstantSubstitutor(candidateWithFreshVariables.getTypeParameters(),DONT_CARE);
  for (  Map.Entry<ValueParameterDescriptor,ResolvedValueArgument> entry : candidateCall.getValueArguments().entrySet()) {
    ResolvedValueArgument resolvedValueArgument=entry.getValue();
    ValueParameterDescriptor valueParameterDescriptor=candidateWithFreshVariables.getValueParameters().get(entry.getKey().getIndex());
    for (    ValueArgument valueArgument : resolvedValueArgument.getArguments()) {
      addConstraintForValueArgument(valueArgument,valueParameterDescriptor,substituteDontCare,constraintSystem,context,SHAPE_FUNCTION_ARGUMENTS);
    }
  }
  ReceiverValue receiverArgument=candidateCall.getExtensionReceiver();
  ReceiverParameterDescriptor receiverParameter=candidateWithFreshVariables.getExtensionReceiverParameter();
  if (receiverArgument.exists() && receiverParameter != null) {
    JetType receiverType=context.candidateCall.isSafeCall() ? TypeUtils.makeNotNullable(receiverArgument.getType()) : receiverArgument.getType();
    if (receiverArgument instanceof ExpressionReceiver) {
      receiverType=updateResultTypeForSmartCasts(receiverType,((ExpressionReceiver)receiverArgument).getExpression(),context);
    }
    constraintSystem.addSubtypeConstraint(receiverType,receiverParameter.getType(),RECEIVER_POSITION.position());
  }
  ConstraintSystem constraintSystemWithRightTypeParameters=constraintSystem.substituteTypeVariables(new Function1<TypeParameterDescriptor,TypeParameterDescriptor>(){
    @Override public TypeParameterDescriptor invoke(    @NotNull TypeParameterDescriptor typeParameterDescriptor){
      return candidate.getTypeParameters().get(typeParameterDescriptor.getIndex());
    }
  }
);
  candidateCall.setConstraintSystem(constraintSystemWithRightTypeParameters);
  boolean hasContradiction=constraintSystem.getStatus().hasContradiction();
  if (!hasContradiction) {
    return INCOMPLETE_TYPE_INFERENCE;
  }
  return OTHER_ERROR;
}
