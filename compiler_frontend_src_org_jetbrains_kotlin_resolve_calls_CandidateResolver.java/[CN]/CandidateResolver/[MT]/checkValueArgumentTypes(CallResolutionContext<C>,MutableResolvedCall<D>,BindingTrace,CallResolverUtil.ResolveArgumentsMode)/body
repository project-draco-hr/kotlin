{
  ResolutionStatus resultStatus=SUCCESS;
  List<JetType> argumentTypes=Lists.newArrayList();
  MutableDataFlowInfoForArguments infoForArguments=candidateCall.getDataFlowInfoForArguments();
  for (  Map.Entry<ValueParameterDescriptor,ResolvedValueArgument> entry : candidateCall.getValueArguments().entrySet()) {
    ValueParameterDescriptor parameterDescriptor=entry.getKey();
    ResolvedValueArgument resolvedArgument=entry.getValue();
    for (    ValueArgument argument : resolvedArgument.getArguments()) {
      JetExpression expression=argument.getArgumentExpression();
      if (expression == null)       continue;
      JetType expectedType=getEffectiveExpectedType(parameterDescriptor,argument);
      CallResolutionContext<?> newContext=context.replaceDataFlowInfo(infoForArguments.getInfo(argument)).replaceBindingTrace(trace).replaceExpectedType(expectedType);
      JetTypeInfo typeInfoForCall=argumentTypeResolver.getArgumentTypeInfo(expression,newContext,resolveFunctionArgumentBodies);
      JetType type=typeInfoForCall.getType();
      infoForArguments.updateInfo(argument,typeInfoForCall.getDataFlowInfo());
      ArgumentMatchStatus matchStatus=ArgumentMatchStatus.SUCCESS;
      JetType resultingType=type;
      if (type == null || (type.isError() && !ErrorUtils.isFunctionPlaceholder(type))) {
        matchStatus=ArgumentMatchStatus.ARGUMENT_HAS_NO_TYPE;
      }
 else       if (!noExpectedType(expectedType)) {
        if (!ArgumentTypeResolver.isSubtypeOfForArgumentType(type,expectedType)) {
          JetType smartCast=smartCastValueArgumentTypeIfPossible(expression,newContext.expectedType,type,newContext);
          if (smartCast == null) {
            resultStatus=OTHER_ERROR;
            matchStatus=ArgumentMatchStatus.TYPE_MISMATCH;
          }
 else {
            resultingType=smartCast;
          }
        }
 else         if (ErrorUtils.containsUninferredParameter(expectedType)) {
          matchStatus=ArgumentMatchStatus.MATCH_MODULO_UNINFERRED_TYPES;
        }
      }
      argumentTypes.add(resultingType);
      candidateCall.recordArgumentMatchStatus(argument,matchStatus);
    }
  }
  return new ValueArgumentsCheckingResult(resultStatus,argumentTypes);
}
