{
  JetType smartCastType=smartCastValueArgumentTypeIfPossible(expression,context.expectedType,type,context);
  if (smartCastType != null) {
    return smartCastType;
  }
  if (ArgumentTypeResolver.isFunctionLiteralArgument(expression,context)) {
    JetType extensionFunctionType=createCorrespondingExtensionFunctionTypeIfNecessary(type,context.expectedType);
    if (ArgumentTypeResolver.isSubtypeOfForArgumentType(extensionFunctionType,context.expectedType)) {
      return extensionFunctionType;
    }
  }
  return null;
}
