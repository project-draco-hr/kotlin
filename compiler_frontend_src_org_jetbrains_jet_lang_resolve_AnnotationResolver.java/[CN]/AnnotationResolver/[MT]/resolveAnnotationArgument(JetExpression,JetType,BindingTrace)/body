{
  JetVisitor<CompileTimeConstant<?>,Void> visitor=new JetVisitor<CompileTimeConstant<?>,Void>(){
    @Override public CompileTimeConstant<?> visitConstantExpression(    JetConstantExpression expression,    Void nothing){
      JetType type=expressionTypingServices.getType(JetScope.EMPTY,expression,expectedType,DataFlowInfo.EMPTY,trace);
      if (type == null) {
      }
      return trace.get(BindingContext.COMPILE_TIME_VALUE,expression);
    }
    @Override public CompileTimeConstant<?> visitParenthesizedExpression(    JetParenthesizedExpression expression,    Void nothing){
      JetExpression innerExpression=expression.getExpression();
      if (innerExpression == null)       return null;
      return innerExpression.accept(this,null);
    }
    @Override public CompileTimeConstant<?> visitStringTemplateExpression(    JetStringTemplateExpression expression,    Void nothing){
      return trace.get(BindingContext.COMPILE_TIME_VALUE,expression);
    }
    @Override public CompileTimeConstant<?> visitSimpleNameExpression(    JetSimpleNameExpression expression,    Void data){
      ResolvedCall<? extends CallableDescriptor> resolvedCall=trace.getBindingContext().get(BindingContext.RESOLVED_CALL,expression);
      if (resolvedCall != null) {
        CallableDescriptor callableDescriptor=resolvedCall.getResultingDescriptor();
        if (callableDescriptor instanceof PropertyDescriptor) {
          PropertyDescriptor propertyDescriptor=(PropertyDescriptor)callableDescriptor;
          if (isEnumProperty(propertyDescriptor)) {
            return new EnumValue(propertyDescriptor);
          }
        }
      }
      return null;
    }
    @Override public CompileTimeConstant<?> visitQualifiedExpression(    JetQualifiedExpression expression,    Void data){
      JetExpression selectorExpression=expression.getSelectorExpression();
      if (selectorExpression != null) {
        return selectorExpression.accept(this,null);
      }
      return super.visitQualifiedExpression(expression,data);
    }
    @Override public CompileTimeConstant<?> visitCallExpression(    JetCallExpression expression,    Void data){
      ResolvedCall<? extends CallableDescriptor> call=trace.getBindingContext().get(BindingContext.RESOLVED_CALL,(expression).getCalleeExpression());
      if (call != null) {
        if (AnnotationUtils.isArrayMethodCall(call)) {
          CallableDescriptor resultingDescriptor=call.getResultingDescriptor();
          JetType type=resultingDescriptor.getValueParameters().iterator().next().getVarargElementType();
          List<CompileTimeConstant<?>> arguments=Lists.newArrayList();
          for (          ResolvedValueArgument descriptorToArgument : call.getValueArguments().values()) {
            List<ValueArgument> valueArguments=descriptorToArgument.getArguments();
            for (            ValueArgument argument : valueArguments) {
              JetExpression argumentExpression=argument.getArgumentExpression();
              if (argumentExpression != null) {
                arguments.add(resolveAnnotationArgument(argumentExpression,type,trace));
              }
            }
          }
          return new ArrayValue(arguments,resultingDescriptor.getReturnType());
        }
      }
      return null;
    }
    @Override public CompileTimeConstant<?> visitJetElement(    JetElement element,    Void nothing){
      return null;
    }
  }
;
  return expression.accept(visitor,null);
}
