{
  List<JetType> supertypes=getSupertypesWithoutFakes(descriptor);
  if (supertypes.isEmpty()) {
    return Collections.emptyList();
  }
  if (supertypes.size() == 1) {
    JetType type=supertypes.get(0);
    ClassDescriptor supertypeDescriptor=getClassDescriptorForType(type);
    return Collections.<JsExpression>singletonList(getClassReference(supertypeDescriptor));
  }
  Set<TypeConstructor> supertypeConstructors=new HashSet<TypeConstructor>();
  for (  JetType type : supertypes) {
    supertypeConstructors.add(type.getConstructor());
  }
  List<TypeConstructor> sortedAllSuperTypes=topologicallySortSuperclassesAndRecordAllInstances(descriptor.getDefaultType(),new HashMap<TypeConstructor,Set<JetType>>(),new HashSet<TypeConstructor>());
  List<JsExpression> supertypesRefs=new ArrayList<JsExpression>();
  for (  TypeConstructor typeConstructor : sortedAllSuperTypes) {
    if (supertypeConstructors.contains(typeConstructor)) {
      ClassDescriptor supertypeDescriptor=getClassDescriptorForTypeConstructor(typeConstructor);
      supertypesRefs.add(getClassReference(supertypeDescriptor));
    }
  }
  return supertypesRefs;
}
