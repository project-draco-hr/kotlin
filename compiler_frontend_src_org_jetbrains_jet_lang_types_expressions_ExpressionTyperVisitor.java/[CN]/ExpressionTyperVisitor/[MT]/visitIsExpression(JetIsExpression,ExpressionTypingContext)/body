{
  ExpressionTypingContext context=contextWithExpectedType.replaceExpectedType(TypeUtils.NO_EXPECTED_TYPE);
  JetType knownType=safeGetType(expression.getLeftHandSide(),context.replaceScope(context.scope));
  JetPattern pattern=expression.getPattern();
  if (pattern != null) {
    WritableScopeImpl scopeToExtend=newWritableScopeImpl(context.scope,context.trace).setDebugName("Scope extended in 'is'");
    DataFlowInfo newDataFlowInfo=checkPatternType(pattern,knownType,scopeToExtend,context,context.getServices().getVariableDescriptorFromSimpleName(expression.getLeftHandSide(),context));
    context.patternsToDataFlowInfo.put(pattern,newDataFlowInfo);
    context.patternsToBoundVariableLists.put(pattern,scopeToExtend.getDeclaredVariables());
  }
  return context.getServices().checkType(context.semanticServices.getStandardLibrary().getBooleanType(),expression,contextWithExpectedType);
}
