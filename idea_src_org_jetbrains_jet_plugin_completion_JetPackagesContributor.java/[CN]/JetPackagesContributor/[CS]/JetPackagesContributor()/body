{
  extend(CompletionType.BASIC,PlatformPatterns.psiElement(),new CompletionProvider<CompletionParameters>(){
    @Override protected void addCompletions(    @NotNull CompletionParameters parameters,    ProcessingContext context,    @NotNull CompletionResultSet result){
      final PsiElement position=parameters.getPosition();
      if (!(position.getContainingFile() instanceof JetFile)) {
        return;
      }
      JetNamespaceHeader namespaceHeader=PsiTreeUtil.getParentOfType(position,JetNamespaceHeader.class);
      if (namespaceHeader == null) {
        return;
      }
      final PsiReference ref=parameters.getPosition().getContainingFile().findReferenceAt(parameters.getOffset());
      if (ref != null) {
        if (ref instanceof JetPackageReference) {
          JetPackageReference packageRef=(JetPackageReference)ref;
          PsiElement nameIdentifier=packageRef.getExpression().getNameIdentifier();
          if (nameIdentifier == null) {
            return;
          }
          if (!(nameIdentifier.getTextOffset() <= parameters.getOffset())) {
            return;
          }
          int prefixLength=parameters.getOffset() - nameIdentifier.getTextOffset();
          result=result.withPrefixMatcher(new PlainPrefixMatcher(nameIdentifier.getText().substring(0,prefixLength)));
        }
        Object[] variants=ref.getVariants();
        for (        Object variant : variants) {
          if (variant instanceof LookupElement) {
            LookupElement lookupElement=(LookupElement)variant;
            if (!lookupElement.getLookupString().contains(DUMMY_IDENTIFIER)) {
              result.addElement((LookupElement)variant);
            }
          }
        }
        result.stopHere();
      }
    }
  }
);
}
