{
  extend(CompletionType.BASIC,PlatformPatterns.psiElement(),new CompletionProvider<CompletionParameters>(){
    @Override protected void addCompletions(    @NotNull CompletionParameters parameters,    ProcessingContext context,    @NotNull CompletionResultSet result){
      final PsiElement position=parameters.getPosition();
      if (!(position.getContainingFile() instanceof JetFile)) {
        return;
      }
      JetNamespaceHeader namespaceHeader=PsiTreeUtil.getParentOfType(position,JetNamespaceHeader.class);
      if (namespaceHeader == null) {
        return;
      }
      final PsiReference ref=parameters.getPosition().getContainingFile().findReferenceAt(parameters.getOffset());
      if (ref instanceof JetSimpleNameReference) {
        JetSimpleNameReference simpleNameReference=(JetSimpleNameReference)ref;
        String name=simpleNameReference.getExpression().getText();
        if (name == null) {
          return;
        }
        int prefixLength=parameters.getOffset() - simpleNameReference.getExpression().getTextOffset();
        result=result.withPrefixMatcher(new PlainPrefixMatcher(name.substring(0,prefixLength)));
        BindingContext bindingContext=WholeProjectAnalyzerFacade.analyzeProjectWithCacheOnAFile((JetFile)namespaceHeader.getContainingFile()).getBindingContext();
        for (        LookupElement variant : DescriptorLookupConverter.collectLookupElements(bindingContext,TipsManager.getReferenceVariants(namespaceHeader,bindingContext))) {
          if (!variant.getLookupString().contains(DUMMY_IDENTIFIER)) {
            result.addElement(variant);
          }
        }
        result.stopHere();
      }
    }
  }
);
}
