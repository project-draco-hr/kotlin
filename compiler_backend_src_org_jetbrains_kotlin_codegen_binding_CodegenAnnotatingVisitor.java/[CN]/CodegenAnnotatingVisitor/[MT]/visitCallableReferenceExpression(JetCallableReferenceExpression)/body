{
  ResolvedCall<?> referencedFunction=CallUtilKt.getResolvedCall(expression.getCallableReference(),bindingContext);
  if (referencedFunction == null)   return;
  CallableDescriptor target=referencedFunction.getResultingDescriptor();
  CallableDescriptor callableDescriptor;
  Collection<JetType> supertypes;
  if (target instanceof FunctionDescriptor) {
    callableDescriptor=bindingContext.get(FUNCTION,expression);
    if (callableDescriptor == null)     return;
    supertypes=runtimeTypes.getSupertypesForFunctionReference((FunctionDescriptor)target);
  }
 else   if (target instanceof PropertyDescriptor) {
    callableDescriptor=bindingContext.get(VARIABLE,expression);
    if (callableDescriptor == null)     return;
    supertypes=Collections.singleton(runtimeTypes.getSupertypeForPropertyReference((PropertyDescriptor)target));
  }
 else {
    return;
  }
  String name=inventAnonymousClassName();
  ClassDescriptor classDescriptor=recordClassForCallable(expression,callableDescriptor,supertypes,name);
  recordClosure(classDescriptor,name);
  classStack.push(classDescriptor);
  nameStack.push(name);
  super.visitCallableReferenceExpression(expression);
  nameStack.pop();
  classStack.pop();
}
