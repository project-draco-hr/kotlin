{
  KtFunctionLiteral functionLiteral=lambdaExpression.getFunctionLiteral();
  FunctionDescriptor functionDescriptor=(FunctionDescriptor)bindingContext.get(DECLARATION_TO_DESCRIPTOR,functionLiteral);
  if (functionDescriptor == null)   return;
  String name=inventAnonymousClassName();
  Collection<KotlinType> supertypes=runtimeTypes.getSupertypesForClosure(functionDescriptor);
  ClassDescriptor classDescriptor=recordClassForCallable(functionLiteral,functionDescriptor,supertypes,name);
  MutableClosure closure=recordClosure(classDescriptor,name);
  if (CoroutineUtilKt.getControllerTypeIfCoroutine(functionDescriptor) != null) {
    closure.setCoroutine(true);
  }
  classStack.push(classDescriptor);
  nameStack.push(name);
  super.visitLambdaExpression(lambdaExpression);
  nameStack.pop();
  classStack.pop();
}
