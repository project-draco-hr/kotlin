{
  DeclarationDescriptor descriptor=bindingContext.get(DECLARATION_TO_DESCRIPTOR,property);
  if (descriptor == null)   return;
  String nameForClassOrPackageMember=getNameForClassOrPackageMember(descriptor);
  if (nameForClassOrPackageMember != null) {
    nameStack.push(nameForClassOrPackageMember);
  }
 else {
    nameStack.push(peekFromStack(nameStack) + '$' + safeIdentifier(property.getNameAsSafeName()).asString());
  }
  KtPropertyDelegate delegate=property.getDelegate();
  if (delegate != null && descriptor instanceof PropertyDescriptor) {
    PropertyDescriptor propertyDescriptor=(PropertyDescriptor)descriptor;
    String name=inventAnonymousClassName();
    KotlinType supertype=runtimeTypes.getSupertypeForPropertyReference(propertyDescriptor);
    ClassDescriptor classDescriptor=recordClassForCallable(delegate,propertyDescriptor,Collections.singleton(supertype),name);
    recordClosure(classDescriptor,name);
  }
  super.visitProperty(property);
  nameStack.pop();
}
