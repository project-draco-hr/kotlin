{
  compile(files,null,ConfigurationKind.JDK_ONLY,TestJdkKind.MOCK_JDK,Collections.<String>emptyList());
  String fileText=FileUtil.loadFile(wholeFile,true);
  List<TestedObject> testedObjects=parseExpectedTestedObject(fileText);
  for (  TestedObject testedObject : testedObjects) {
    String className=null;
    for (    OutputFile outputFile : classFileFactory.asList()) {
      String filePath=outputFile.getRelativePath();
      if (testedObject.isFullContainingClassName && filePath.equals(testedObject.containingClass + ".class") || !testedObject.isFullContainingClassName && filePath.startsWith(testedObject.containingClass)) {
        className=filePath;
      }
    }
    assertNotNull("Couldn't find a class file with name " + testedObject.containingClass,className);
    OutputFile outputFile=classFileFactory.get(className);
    assertNotNull(outputFile);
    ClassReader cr=new ClassReader(outputFile.asByteArray());
    TestClassVisitor classVisitor=getClassVisitor(testedObject.kind,testedObject.name,false);
    cr.accept(classVisitor,ClassReader.SKIP_CODE);
    if (!classVisitor.isExists()) {
      classVisitor=getClassVisitor(testedObject.kind,testedObject.name,true);
      cr.accept(classVisitor,ClassReader.SKIP_CODE);
    }
    boolean isObjectExists=!Boolean.valueOf(findStringWithPrefixes(testedObject.textData,"// ABSENT: "));
    assertEquals("Wrong object existence state: " + testedObject,isObjectExists,classVisitor.isExists());
    if (isObjectExists) {
      assertEquals("Wrong access flag for " + testedObject + " \n"+ outputFile.asText(),getExpectedFlags(testedObject.textData),classVisitor.getAccess());
    }
  }
}
