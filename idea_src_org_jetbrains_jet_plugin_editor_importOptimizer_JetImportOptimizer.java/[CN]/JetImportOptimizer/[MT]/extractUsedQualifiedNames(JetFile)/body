{
  final Set<FqName> usedQualifiedNames=new HashSet<FqName>();
  jetFile.accept(new JetVisitorVoid(){
    @Override public void visitElement(    PsiElement element){
      ProgressIndicatorProvider.checkCanceled();
      element.acceptChildren(this);
    }
    @Override public void visitUserType(    @NotNull JetUserType type){
      if (type.getQualifier() == null) {
        super.visitUserType(type);
      }
 else {
        JetTypeArgumentList argumentList=type.getTypeArgumentList();
        if (argumentList != null) {
          super.visitTypeArgumentList(argumentList);
        }
        visitUserType(type.getQualifier());
      }
    }
    @Override public void visitReferenceExpression(    @NotNull JetReferenceExpression expression){
      if (PsiTreeUtil.getParentOfType(expression,JetImportDirective.class) == null && PsiTreeUtil.getParentOfType(expression,JetPackageDirective.class) == null) {
        PsiReference reference=expression.getReference();
        if (reference != null) {
          List<PsiElement> references=new ArrayList<PsiElement>();
          PsiElement resolve=reference.resolve();
          if (resolve != null) {
            references.add(resolve);
          }
          if (references.isEmpty() && reference instanceof PsiPolyVariantReference) {
            for (            ResolveResult resolveResult : ((PsiPolyVariantReference)reference).multiResolve(true)) {
              references.add(resolveResult.getElement());
            }
          }
          for (          PsiElement psiReference : references) {
            FqName fqName=getElementUsageFQName(psiReference);
            if (fqName != null) {
              usedQualifiedNames.add(fqName);
            }
          }
        }
      }
      super.visitReferenceExpression(expression);
    }
    @Override public void visitForExpression(    @NotNull JetForExpression expression){
      BindingContext context=AnalyzerFacadeWithCache.getContextForElement(expression);
      ResolvedCall<FunctionDescriptor> resolvedCall=context.get(BindingContext.LOOP_RANGE_ITERATOR_RESOLVED_CALL,expression.getLoopRange());
      addResolvedCallFqName(resolvedCall);
      super.visitForExpression(expression);
    }
    @Override public void visitMultiDeclaration(    @NotNull JetMultiDeclaration declaration){
      BindingContext context=AnalyzerFacadeWithCache.getContextForElement(declaration);
      List<JetMultiDeclarationEntry> entries=declaration.getEntries();
      for (      JetMultiDeclarationEntry entry : entries) {
        ResolvedCall<FunctionDescriptor> resolvedCall=context.get(BindingContext.COMPONENT_RESOLVED_CALL,entry);
        addResolvedCallFqName(resolvedCall);
      }
      super.visitMultiDeclaration(declaration);
    }
    private void addResolvedCallFqName(    @Nullable ResolvedCall resolvedCall){
      if (resolvedCall != null) {
        CallableDescriptor resultingDescriptor=resolvedCall.getResultingDescriptor();
        usedQualifiedNames.add(DescriptorUtils.getFqNameSafe(resultingDescriptor));
      }
    }
  }
);
  return usedQualifiedNames;
}
