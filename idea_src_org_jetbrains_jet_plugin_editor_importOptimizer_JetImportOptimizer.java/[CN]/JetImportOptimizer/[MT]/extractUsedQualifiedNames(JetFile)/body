{
  final Set<FqName> usedQualifiedNames=new HashSet<FqName>();
  jetFile.accept(new JetVisitorVoid(){
    @Override public void visitElement(    PsiElement element){
      ProgressIndicatorProvider.checkCanceled();
      element.acceptChildren(this);
    }
    @Override public void visitUserType(    @NotNull JetUserType type){
      if (type.getQualifier() == null) {
        super.visitUserType(type);
      }
 else {
        JetTypeArgumentList argumentList=type.getTypeArgumentList();
        if (argumentList != null) {
          super.visitTypeArgumentList(argumentList);
        }
        visitUserType(type.getQualifier());
      }
    }
    @Override public void visitJetElement(    @NotNull JetElement element){
      if (PsiTreeUtil.getParentOfType(element,JetImportDirective.class) != null || PsiTreeUtil.getParentOfType(element,JetPackageDirective.class) != null) {
        return;
      }
      PsiReference reference=element.getReference();
      if (reference instanceof JetReference) {
        Collection<DeclarationDescriptor> referencedDescriptors=((JetReference)reference).resolveToDescriptors();
        for (        DeclarationDescriptor descriptor : referencedDescriptors) {
          FqName importableFqName=CodeInsightPackage.getImportableFqName(descriptor);
          if (importableFqName != null) {
            usedQualifiedNames.add(importableFqName);
          }
        }
      }
      super.visitJetElement(element);
    }
  }
);
  return usedQualifiedNames;
}
