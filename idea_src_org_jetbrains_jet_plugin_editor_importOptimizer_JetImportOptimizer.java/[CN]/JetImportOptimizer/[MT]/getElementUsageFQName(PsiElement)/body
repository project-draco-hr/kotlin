{
  if (element instanceof JetFile) {
    return JetPsiUtil.getFQName((JetFile)element);
  }
  if (element instanceof JetSimpleNameExpression) {
    JetPackageDirective packageDirective=PsiTreeUtil.getParentOfType(element,JetPackageDirective.class);
    if (packageDirective != null) {
      List<JetSimpleNameExpression> simpleNameExpressions=PsiTreeUtil.getChildrenOfTypeAsList(packageDirective,JetSimpleNameExpression.class);
      FqName fqName=null;
      for (      JetSimpleNameExpression nameExpression : simpleNameExpressions) {
        Name referencedName=nameExpression.getReferencedNameAsName();
        if (fqName == null) {
          fqName=new FqName(referencedName.asString());
        }
 else {
          fqName=QualifiedNamesUtil.combine(fqName,referencedName);
        }
        if (nameExpression.equals(element)) {
          return fqName;
        }
      }
    }
  }
  if (element instanceof JetNamedDeclaration) {
    return JetPsiUtil.getFQName((JetNamedDeclaration)element);
  }
  if (element instanceof PsiClass) {
    String qualifiedName=((PsiClass)element).getQualifiedName();
    if (qualifiedName != null) {
      return new FqName(qualifiedName);
    }
  }
  if (element instanceof PsiField) {
    PsiField field=(PsiField)element;
    FqName classFQN=getFqNameOfContainingClassForPsiMember(field);
    if (classFQN == null) {
      return null;
    }
    return combineClassFqNameWithMemberName(field.getContainingClass(),classFQN,field.getName());
  }
  if (element instanceof PsiMethod) {
    PsiMethod method=(PsiMethod)element;
    FqName classFQN=getFqNameOfContainingClassForPsiMember(method);
    if (classFQN == null) {
      return null;
    }
    if (method.isConstructor()) {
      return classFQN;
    }
    return combineClassFqNameWithMemberName(method.getContainingClass(),classFQN,method.getName());
  }
  if (element instanceof PsiPackage) {
    return new FqName(((PsiPackage)element).getQualifiedName());
  }
  return null;
}
