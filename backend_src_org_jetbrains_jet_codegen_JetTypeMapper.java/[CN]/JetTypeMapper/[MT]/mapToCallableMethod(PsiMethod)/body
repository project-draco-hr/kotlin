{
  final PsiClass containingClass=method.getContainingClass();
  String owner=jvmName(containingClass);
  Method signature=getMethodDescriptor(method);
  List<Type> valueParameterTypes=new ArrayList<Type>();
  Collections.addAll(valueParameterTypes,signature.getArgumentTypes());
  int opcode;
  boolean needsReceiver=false;
  boolean ownerFromCall=false;
  if (method.isConstructor()) {
    opcode=Opcodes.INVOKESPECIAL;
  }
 else   if (method.hasModifierProperty(PsiModifier.STATIC)) {
    opcode=Opcodes.INVOKESTATIC;
  }
 else {
    needsReceiver=true;
    if (containingClass.isInterface()) {
      opcode=Opcodes.INVOKEINTERFACE;
    }
 else {
      opcode=Opcodes.INVOKEVIRTUAL;
    }
    ownerFromCall=true;
  }
  final CallableMethod result=new CallableMethod(owner,signature,opcode,valueParameterTypes);
  if (needsReceiver) {
    result.setNeedsReceiver(null);
  }
  result.setOwnerFromCall(ownerFromCall);
  return result;
}
