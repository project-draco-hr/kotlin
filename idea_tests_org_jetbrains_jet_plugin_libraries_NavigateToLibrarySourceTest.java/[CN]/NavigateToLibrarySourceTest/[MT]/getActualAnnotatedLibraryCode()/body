{
  MultiMap<PsiFile,Pair<Integer,Integer>> filesToNumbersAndOffsets=new MultiMap<PsiFile,Pair<Integer,Integer>>();
  int refNumber=1;
  for (  JetPsiReference ref : collectInterestingReferences()) {
    PsiElement target=ref.resolve();
    assertNotNull(target);
    PsiElement navigationElement=target.getNavigationElement();
    Pair<Integer,Integer> numberAndOffset=new Pair<Integer,Integer>(refNumber++,navigationElement.getTextOffset());
    filesToNumbersAndOffsets.putValue(navigationElement.getContainingFile(),numberAndOffset);
  }
  if (filesToNumbersAndOffsets.isEmpty()) {
    return "<no references>";
  }
  List<PsiFile> files=new ArrayList<PsiFile>(filesToNumbersAndOffsets.keySet());
  Collections.sort(files,new Comparator<PsiFile>(){
    @Override public int compare(    PsiFile o1,    PsiFile o2){
      return o1.getName().compareTo(o2.getName());
    }
  }
);
  StringBuilder result=new StringBuilder();
  for (  PsiFile file : files) {
    List<Pair<Integer,Integer>> numbersAndOffsets=new ArrayList<Pair<Integer,Integer>>(filesToNumbersAndOffsets.get(file));
    Collections.sort(numbersAndOffsets,Collections.reverseOrder(new Comparator<Pair<Integer,Integer>>(){
      @Override public int compare(      Pair<Integer,Integer> t1,      Pair<Integer,Integer> t2){
        int offsets=t1.second.compareTo(t2.second);
        return offsets == 0 ? t1.first.compareTo(t2.first) : offsets;
      }
    }
));
    Document document=PsiDocumentManager.getInstance(getProject()).getDocument(file);
    assertNotNull(document);
    StringBuilder resultForFile=new StringBuilder(document.getText());
    for (    Pair<Integer,Integer> numberOffset : numbersAndOffsets) {
      resultForFile.insert(numberOffset.second,String.format("<%d>",numberOffset.first));
    }
    int minLine=Integer.MAX_VALUE;
    int maxLine=Integer.MIN_VALUE;
    for (    Pair<Integer,Integer> numberOffset : numbersAndOffsets) {
      int lineNumber=document.getLineNumber(numberOffset.second);
      minLine=Math.min(minLine,lineNumber);
      maxLine=Math.max(maxLine,lineNumber);
    }
    Document annotated=EditorFactory.getInstance().createDocument(resultForFile);
    String filePart=annotated.getText().substring(annotated.getLineStartOffset(minLine),annotated.getLineEndOffset(maxLine));
    result.append(" ").append(file.getName()).append("\n");
    result.append(filePart).append("\n");
  }
  return result.toString();
}
