{
  if (_expression == null) {
    showErrorHint(project,editor,JetRefactoringBundle.message("cannot.refactor.no.expression"));
    return;
  }
  if (_expression.getParent() instanceof JetParenthesizedExpression) {
    _expression=(JetExpression)_expression.getParent();
  }
  final JetExpression expression=_expression;
  final PsiElement container=getContainer(expression);
  final PsiElement occurrenceContainer=getOccurrenceContainer(expression);
  if (container == null) {
    showErrorHint(project,editor,JetRefactoringBundle.message("cannot.refactor.no.container"));
    return;
  }
  final boolean isInplaceAvailableOnDataContext=editor.getSettings().isVariableInplaceRenameEnabled() && !ApplicationManager.getApplication().isUnitTestMode();
  final ArrayList<JetExpression> allOccurrences=findOccurrences(occurrenceContainer,expression);
  Pass<OccurrencesChooser.ReplaceChoice> callback=new Pass<OccurrencesChooser.ReplaceChoice>(){
    @Override public void pass(    OccurrencesChooser.ReplaceChoice replaceChoice){
      boolean replaceOccurrence=container != expression.getParent();
      final List<JetExpression> allReplaces;
      if (OccurrencesChooser.ReplaceChoice.ALL == replaceChoice) {
        if (allOccurrences.size() > 1)         replaceOccurrence=true;
        allReplaces=allOccurrences;
      }
 else {
        allReplaces=Collections.singletonList(expression);
      }
      String[] suggestedNames=JetNameSuggester.suggestNames(expression);
      final LinkedHashSet<String> suggestedNamesSet=new LinkedHashSet<String>();
      Collections.addAll(suggestedNamesSet,suggestedNames);
      PsiElement commonParent=PsiTreeUtil.findCommonParent(allReplaces);
      PsiElement commonContainer=getContainer(commonParent);
      final Ref<JetProperty> propertyRef=new Ref<JetProperty>();
      final ArrayList<JetExpression> references=new ArrayList<JetExpression>();
      final Ref<JetExpression> reference=new Ref<JetExpression>();
      final Runnable introduceRunnable=introduceVariable(project,expression,suggestedNames,allReplaces,commonContainer,commonParent,replaceOccurrence,propertyRef,references,reference);
      final boolean finalReplaceOccurrence=replaceOccurrence;
      CommandProcessor.getInstance().executeCommand(project,new Runnable(){
        @Override public void run(){
          ApplicationManager.getApplication().runWriteAction(introduceRunnable);
          JetProperty property=propertyRef.get();
          if (property != null) {
            editor.getCaretModel().moveToOffset(property.getTextOffset());
            editor.getSelectionModel().removeSelection();
            if (isInplaceAvailableOnDataContext) {
              JetInplaceVariableIntroducer variableIntroducer=new JetInplaceVariableIntroducer(property,editor,project,INTRODUCE_VARIABLE,references.toArray(new JetExpression[references.size()]),reference.get(),finalReplaceOccurrence,property);
              PsiDocumentManager.getInstance(project).doPostponedOperationsAndUnblockDocument(editor.getDocument());
              variableIntroducer.performInplaceRefactoring(suggestedNamesSet);
            }
          }
        }
      }
,INTRODUCE_VARIABLE,null);
    }
  }
;
  if (isInplaceAvailableOnDataContext) {
    OccurrencesChooser.<JetExpression>simpleChooser(editor).showChooser(expression,allOccurrences,callback);
  }
 else {
    callback.pass(OccurrencesChooser.ReplaceChoice.ALL);
  }
}
