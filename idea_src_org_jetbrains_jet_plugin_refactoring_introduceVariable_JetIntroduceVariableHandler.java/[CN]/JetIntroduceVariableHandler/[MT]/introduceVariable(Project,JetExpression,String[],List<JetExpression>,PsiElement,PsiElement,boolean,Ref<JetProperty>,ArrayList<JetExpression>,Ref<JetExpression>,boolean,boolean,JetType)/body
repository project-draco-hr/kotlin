{
  return new Runnable(){
    @Override public void run(){
      String variableText="val " + suggestedNames[0];
      if (noTypeInference) {
        variableText+=": " + DescriptorRenderer.TEXT.renderType(expressionType);
      }
      variableText+=" = ";
      if (expression instanceof JetParenthesizedExpression) {
        JetParenthesizedExpression parenthesizedExpression=(JetParenthesizedExpression)expression;
        JetExpression innerExpression=parenthesizedExpression.getExpression();
        if (innerExpression != null) {
          variableText+=innerExpression.getText();
        }
 else {
          variableText+=expression.getText();
        }
      }
 else {
        variableText+=expression.getText();
      }
      JetProperty property=JetPsiFactory.createProperty(project,variableText);
      if (property == null)       return;
      PsiElement anchor=calculateAnchor(commonParent,commonContainer,allReplaces);
      if (anchor == null)       return;
      boolean needBraces=!(commonContainer instanceof JetBlockExpression || commonContainer instanceof JetClassBody || commonContainer instanceof JetClassInitializer);
      if (!needBraces) {
        property=(JetProperty)commonContainer.addBefore(property,anchor);
        commonContainer.addBefore(JetPsiFactory.createNewLine(project),anchor);
      }
 else {
        JetExpression emptyBody=JetPsiFactory.createEmptyBody(project);
        PsiElement firstChild=emptyBody.getFirstChild();
        emptyBody.addAfter(JetPsiFactory.createNewLine(project),firstChild);
        if (replaceOccurrence && commonContainer != null) {
          for (          JetExpression replace : allReplaces) {
            boolean isActualExpression=expression == replace;
            if (!needParentheses && !(replace.getParent() instanceof JetCallExpression)) {
              JetExpression element=(JetExpression)replace.replace(JetPsiFactory.createExpression(project,suggestedNames[0]));
              if (isActualExpression)               reference.set(element);
            }
 else {
              JetValueArgumentList argumentList=JetPsiFactory.createCallArguments(project,"(" + suggestedNames[0] + ")");
              JetValueArgumentList element=(JetValueArgumentList)replace.replace(argumentList);
              if (isActualExpression)               reference.set(element.getArguments().get(0).getArgumentExpression());
            }
          }
          PsiElement oldElement=commonContainer;
          if (commonContainer instanceof JetWhenEntry) {
            JetExpression body=((JetWhenEntry)commonContainer).getExpression();
            if (body != null) {
              oldElement=body;
            }
          }
 else           if (commonContainer instanceof JetNamedFunction) {
            JetExpression body=((JetNamedFunction)commonContainer).getBodyExpression();
            if (body != null) {
              oldElement=body;
            }
          }
 else           if (commonContainer instanceof JetContainerNode) {
            JetContainerNode container=(JetContainerNode)commonContainer;
            PsiElement[] children=container.getChildren();
            for (            PsiElement child : children) {
              if (child instanceof JetExpression) {
                oldElement=child;
              }
            }
          }
          JetExpression actualExpression=reference.get();
          int diff=actualExpression.getTextRange().getStartOffset() - oldElement.getTextRange().getStartOffset();
          String actualExpressionText=actualExpression.getText();
          PsiElement newElement=emptyBody.addAfter(oldElement,firstChild);
          PsiElement elem=newElement.findElementAt(diff);
          while (elem != null && !(elem instanceof JetExpression && actualExpressionText.equals(elem.getText()))) {
            elem=elem.getParent();
          }
          if (elem != null) {
            reference.set((JetExpression)elem);
          }
          emptyBody.addAfter(JetPsiFactory.createNewLine(project),firstChild);
          property=(JetProperty)emptyBody.addAfter(property,firstChild);
          emptyBody.addAfter(JetPsiFactory.createNewLine(project),firstChild);
          actualExpression=reference.get();
          diff=actualExpression.getTextRange().getStartOffset() - emptyBody.getTextRange().getStartOffset();
          actualExpressionText=actualExpression.getText();
          emptyBody=(JetExpression)anchor.replace(emptyBody);
          elem=emptyBody.findElementAt(diff);
          while (elem != null && !(elem instanceof JetExpression && actualExpressionText.equals(elem.getText()))) {
            elem=elem.getParent();
          }
          if (elem != null) {
            reference.set((JetExpression)elem);
          }
        }
 else {
          property=(JetProperty)emptyBody.addAfter(property,firstChild);
          emptyBody.addAfter(JetPsiFactory.createNewLine(project),firstChild);
          emptyBody=(JetExpression)anchor.replace(emptyBody);
        }
        for (        PsiElement child : emptyBody.getChildren()) {
          if (child instanceof JetProperty) {
            property=(JetProperty)child;
          }
        }
        if (commonContainer instanceof JetNamedFunction) {
          JetNamedFunction function=(JetNamedFunction)commonContainer;
          if (!function.hasDeclaredReturnType()) {
          }
          function.getEqualsToken().delete();
        }
 else         if (commonContainer instanceof JetContainerNode) {
          JetContainerNode node=(JetContainerNode)commonContainer;
          if (node.getParent() instanceof JetIfExpression) {
            PsiElement next=node.getNextSibling();
            if (next != null) {
              PsiElement nextnext=next.getNextSibling();
              if (nextnext != null && nextnext.getNode().getElementType() == JetTokens.ELSE_KEYWORD) {
                if (next instanceof PsiWhiteSpace) {
                  next.replace(JetPsiFactory.createWhiteSpace(project));
                }
              }
            }
          }
        }
      }
      for (      JetExpression replace : allReplaces) {
        if (replaceOccurrence && !needBraces) {
          boolean isActualExpression=expression == replace;
          if (!needParentheses && !(replace.getParent() instanceof JetCallExpression)) {
            JetExpression element=(JetExpression)replace.replace(JetPsiFactory.createExpression(project,suggestedNames[0]));
            references.add(element);
            if (isActualExpression)             reference.set(element);
          }
 else {
            JetValueArgumentList argumentList=JetPsiFactory.createCallArguments(project,"(" + suggestedNames[0] + ")");
            JetValueArgumentList element=(JetValueArgumentList)replace.replace(argumentList);
            JetExpression argumentExpression=element.getArguments().get(0).getArgumentExpression();
            references.add(argumentExpression);
            if (isActualExpression) {
              reference.set(argumentExpression);
            }
          }
        }
 else         if (!needBraces) {
          replace.delete();
        }
      }
      propertyRef.set(property);
      if (noTypeInference) {
        ShortenReferences.instance$.process(property);
      }
    }
  }
;
}
