{
  if (klass instanceof MissingDependencyErrorClass) {
    return ((MissingDependencyErrorClass)klass).getFullFqName().asString();
  }
  if (ErrorUtils.isError(klass)) {
    return klass.getTypeConstructor().toString();
  }
switch (nameShortness) {
case SHORT:
{
      List<Name> qualifiedNameElements=new ArrayList<Name>();
      DeclarationDescriptor current=klass;
      do {
        if (((ClassDescriptor)current).getKind() != ClassKind.CLASS_OBJECT) {
          qualifiedNameElements.add(current.getName());
        }
        current=current.getContainingDeclaration();
      }
 while (current instanceof ClassDescriptor);
      Collections.reverse(qualifiedNameElements);
      return renderFqName(qualifiedNameElements);
    }
case FULLY_QUALIFIED:
  return renderFqName(DescriptorUtils.getFqName(klass));
case SOURCE_CODE_QUALIFIED:
return RendererPackage.qualifiedNameForSourceCode(klass);
default :
throw new IllegalArgumentException();
}
}
