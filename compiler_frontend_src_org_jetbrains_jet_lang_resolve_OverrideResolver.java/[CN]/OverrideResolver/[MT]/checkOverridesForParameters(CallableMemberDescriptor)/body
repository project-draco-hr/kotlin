{
  if (ErrorUtils.isError(declared)) {
    return;
  }
  boolean fakeOverride=declared.getKind() == CallableMemberDescriptor.Kind.FAKE_OVERRIDE;
  if (!fakeOverride) {
    JetModifierListOwner declaration=(JetModifierListOwner)BindingContextUtils.descriptorToDeclaration(trace.getBindingContext(),declared);
    if (!declaration.hasModifier(JetTokens.OVERRIDE_KEYWORD)) {
      return;
    }
  }
  for (  ValueParameterDescriptor parameterFromSubclass : declared.getValueParameters()) {
    JetParameter parameter=fakeOverride ? null : (JetParameter)BindingContextUtils.descriptorToDeclaration(trace.getBindingContext(),parameterFromSubclass);
    JetClassOrObject classElement=fakeOverride ? (JetClassOrObject)BindingContextUtils.descriptorToDeclaration(trace.getBindingContext(),declared.getContainingDeclaration()) : null;
    if (parameterFromSubclass.declaresDefaultValue() && !fakeOverride) {
      trace.report(DEFAULT_VALUE_NOT_ALLOWED_IN_OVERRIDE.on(parameter));
    }
    boolean superWithDefault=false;
    for (    ValueParameterDescriptor parameterFromSuperclass : parameterFromSubclass.getOverriddenDescriptors()) {
      if (parameterFromSuperclass.declaresDefaultValue()) {
        if (!superWithDefault) {
          superWithDefault=true;
        }
 else {
          if (fakeOverride) {
            trace.report(MULTIPLE_DEFAULTS_INHERITED_FROM_SUPERTYPES_WHEN_NO_EXPLICIT_OVERRIDE.on(classElement,parameterFromSubclass));
          }
 else {
            trace.report(MULTIPLE_DEFAULTS_INHERITED_FROM_SUPERTYPES.on(parameter,parameterFromSubclass));
          }
          break;
        }
      }
      if (!parameterFromSuperclass.getName().equals(parameterFromSubclass.getName())) {
        if (fakeOverride) {
          trace.report(DIFFERENT_NAMES_FOR_THE_SAME_PARAMETER_IN_SUPERTYPES.on(classElement,declared.getOverriddenDescriptors(),parameterFromSuperclass.getIndex() + 1));
        }
 else {
          trace.report(PARAMETER_NAME_CHANGED_ON_OVERRIDE.on(parameter,(ClassDescriptor)parameterFromSuperclass.getContainingDeclaration().getContainingDeclaration(),parameterFromSuperclass));
        }
      }
    }
  }
}
