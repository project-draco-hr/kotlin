{
  if (ErrorUtils.isError(declared)) {
    return;
  }
  JetNamedDeclaration member=(JetNamedDeclaration)BindingContextUtils.descriptorToDeclaration(trace.getBindingContext(),declared);
  if (member == null) {
    Boolean delegated=trace.get(DELEGATED,declared);
    if (delegated == null || !delegated)     throw new IllegalStateException("decriptor is not resolved to declaration" + " and it is not delegate: " + declared + ", DELEGATED: "+ delegated);
    return;
  }
  if (declared.getKind() != CallableMemberDescriptor.Kind.DECLARATION) {
    return;
  }
  JetModifierList modifierList=member.getModifierList();
  ASTNode overrideNode=modifierList != null ? modifierList.getModifierNode(JetTokens.OVERRIDE_KEYWORD) : null;
  boolean hasOverrideModifier=overrideNode != null;
  boolean finalOverriddenError=false;
  boolean typeMismatchError=false;
  boolean kindMismatchError=false;
  for (  CallableMemberDescriptor overridden : declared.getOverriddenDescriptors()) {
    if (overridden != null) {
      if (hasOverrideModifier) {
        if (!overridden.getModality().isOverridable() && !finalOverriddenError) {
          trace.report(OVERRIDING_FINAL_MEMBER.on(overrideNode.getPsi(),overridden,overridden.getContainingDeclaration()));
          finalOverriddenError=true;
        }
        if (!OverridingUtil.isReturnTypeOkForOverride(JetTypeChecker.INSTANCE,overridden,declared) && !typeMismatchError) {
          trace.report(RETURN_TYPE_MISMATCH_ON_OVERRIDE.on(member,declared,overridden));
          typeMismatchError=true;
        }
        if (checkPropertyKind(overridden,true) && checkPropertyKind(declared,false) && !kindMismatchError) {
          trace.report(VAR_OVERRIDDEN_BY_VAL.on((JetProperty)member,(PropertyDescriptor)declared,(PropertyDescriptor)overridden));
          kindMismatchError=true;
        }
      }
    }
  }
  if (hasOverrideModifier && declared.getOverriddenDescriptors().size() == 0) {
    if (!invisibleOverriddenDescriptors.get(declared).isEmpty()) {
      CallableDescriptor descriptor=invisibleOverriddenDescriptors.values().iterator().next();
      trace.report(CANNOT_OVERRIDE_INVISIBLE_MEMBER.on(member,declared,descriptor,descriptor.getContainingDeclaration()));
    }
 else {
      trace.report(NOTHING_TO_OVERRIDE.on(member,declared));
    }
  }
  PsiElement nameIdentifier=member.getNameIdentifier();
  if (!hasOverrideModifier && declared.getOverriddenDescriptors().size() > 0 && nameIdentifier != null) {
    CallableMemberDescriptor overridden=declared.getOverriddenDescriptors().iterator().next();
    trace.report(VIRTUAL_MEMBER_HIDDEN.on(member,declared,overridden,overridden.getContainingDeclaration()));
  }
}
