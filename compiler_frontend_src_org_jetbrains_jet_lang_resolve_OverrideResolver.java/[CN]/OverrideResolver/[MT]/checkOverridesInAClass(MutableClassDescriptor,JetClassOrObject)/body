{
  Set<CallableMemberDescriptor> inheritedFunctions=Sets.newLinkedHashSet();
  for (  JetType supertype : classDescriptor.getSupertypes()) {
    for (    DeclarationDescriptor descriptor : supertype.getMemberScope().getAllDescriptors()) {
      if (descriptor instanceof CallableMemberDescriptor) {
        CallableMemberDescriptor memberDescriptor=(CallableMemberDescriptor)descriptor;
        inheritedFunctions.add(memberDescriptor);
      }
    }
  }
  Set<CallableMemberDescriptor> filteredMembers=OverridingUtil.filterOverrides(inheritedFunctions);
  Multimap<CallableMemberDescriptor,CallableMemberDescriptor> factoredMembers=CommonSuppliers.newLinkedHashSetHashSetMultimap();
  JetTypeChecker typeChecker=context.getSemanticServices().getTypeChecker();
  for (  CallableMemberDescriptor one : filteredMembers) {
    if (factoredMembers.values().contains(one))     continue;
    for (    CallableMemberDescriptor another : filteredMembers) {
      if (one == another)       continue;
      factoredMembers.put(one,one);
      if (OverridingUtil.isOverridableBy(typeChecker,one,another).isSuccess() || OverridingUtil.isOverridableBy(typeChecker,another,one).isSuccess()) {
        factoredMembers.put(one,another);
      }
    }
  }
  Set<CallableMemberDescriptor> mustBeOverridden=Sets.newLinkedHashSet();
  for (  CallableMemberDescriptor key : factoredMembers.keySet()) {
    Collection<CallableMemberDescriptor> mutuallyOverridable=factoredMembers.get(key);
    int implementationCount=0;
    for (    CallableMemberDescriptor member : mutuallyOverridable) {
      if (member.getModality() != Modality.ABSTRACT) {
        implementationCount++;
      }
    }
    if (implementationCount != 1) {
      mustBeOverridden.addAll(mutuallyOverridable);
    }
  }
  Set<CallableDescriptor> actuallyOverridden=Sets.newHashSet();
  for (  FunctionDescriptor declaredFunction : classDescriptor.getFunctions()) {
    actuallyOverridden.addAll(declaredFunction.getOverriddenDescriptors());
  }
  for (  PropertyDescriptor declaredProperty : classDescriptor.getProperties()) {
    actuallyOverridden.addAll(declaredProperty.getOverriddenDescriptors());
  }
  mustBeOverridden.removeAll(actuallyOverridden);
  System.out.println(classDescriptor);
  println(mustBeOverridden);
  System.out.println("Actually overridden:");
  println(actuallyOverridden);
  for (  FunctionDescriptor declaredFunction : classDescriptor.getFunctions()) {
    checkOverrideForFunction(declaredFunction);
  }
  if (classDescriptor.getModality() == Modality.ABSTRACT) {
    return;
  }
  Set<FunctionDescriptor> allOverriddenFunctions=Sets.newHashSet();
  Collection<DeclarationDescriptor> allDescriptors=classDescriptor.getDefaultType().getMemberScope().getAllDescriptors();
  for (  DeclarationDescriptor descriptor : allDescriptors) {
    if (descriptor instanceof FunctionDescriptor) {
      FunctionDescriptor functionDescriptor=(FunctionDescriptor)descriptor;
      if (functionDescriptor.getModality() != Modality.ABSTRACT) {
        for (        FunctionDescriptor overriddenDescriptor : functionDescriptor.getOverriddenDescriptors()) {
          allOverriddenFunctions.add(overriddenDescriptor.getOriginal());
        }
      }
    }
  }
  boolean foundError=false;
  PsiElement nameIdentifier=null;
  if (klass instanceof JetClass) {
    nameIdentifier=((JetClass)klass).getNameIdentifier();
  }
 else   if (klass instanceof JetObjectDeclaration) {
    nameIdentifier=((JetObjectDeclaration)klass).getNameIdentifier();
  }
  for (  DeclarationDescriptor descriptor : allDescriptors) {
    if (descriptor instanceof FunctionDescriptor) {
      FunctionDescriptor functionDescriptor=(FunctionDescriptor)descriptor;
      if (functionDescriptor.getModality() == Modality.ABSTRACT && !allOverriddenFunctions.contains(functionDescriptor.getOriginal()) && !foundError && nameIdentifier != null) {
        DeclarationDescriptor declarationDescriptor=functionDescriptor.getContainingDeclaration();
        if (declarationDescriptor != classDescriptor) {
          context.getTrace().report(ABSTRACT_METHOD_NOT_IMPLEMENTED.on(nameIdentifier,klass,functionDescriptor,declarationDescriptor));
          foundError=true;
        }
      }
    }
  }
}
