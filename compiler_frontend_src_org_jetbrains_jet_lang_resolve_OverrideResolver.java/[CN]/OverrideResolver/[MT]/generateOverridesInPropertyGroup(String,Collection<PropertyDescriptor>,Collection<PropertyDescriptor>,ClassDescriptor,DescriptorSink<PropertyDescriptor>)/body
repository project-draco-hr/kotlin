{
  List<PropertyDescriptor> fakeOverrides=Lists.newArrayList();
  for (  PropertyDescriptor propertyFromSupertype : propertiesFromSupertypes) {
    boolean overrides=false;
    for (    PropertyDescriptor propertyFromCurrent : propertiesFromCurrent) {
      OverridingUtil.OverrideCompatibilityInfo.ErrorKind overridable=OverridingUtil.isOverridableBy(propertyFromSupertype,propertyFromCurrent).isOverridable();
      if (overridable == OverridingUtil.OverrideCompatibilityInfo.ErrorKind.OVERRIDABLE) {
        propertyFromCurrent.addOverriddenDescriptor(propertyFromSupertype);
        overrides=true;
      }
 else       if (overridable == OverridingUtil.OverrideCompatibilityInfo.ErrorKind.CONFLICT) {
        sink.conflict(propertyFromSupertype,propertyFromCurrent);
      }
    }
    for (    PropertyDescriptor fakeOverride : fakeOverrides) {
      if (OverridingUtil.isOverridableBy(propertyFromSupertype,fakeOverride).isOverridable() == OverridingUtil.OverrideCompatibilityInfo.ErrorKind.OVERRIDABLE) {
        ((PropertyDescriptor)fakeOverride).addOverriddenDescriptor(propertyFromSupertype);
        overrides=true;
      }
    }
    if (!overrides) {
      PropertyDescriptor fakeOverride=propertyFromSupertype.copy(current,false,CallableMemberDescriptor.Kind.FAKE_OVERRIDE,false);
      fakeOverride.addOverriddenDescriptor(propertyFromSupertype);
      fakeOverrides.add(fakeOverride);
      sink.addToScope(fakeOverride);
    }
  }
}
