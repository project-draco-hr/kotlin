{
  List<CallableMemberDescriptor> fakeOverrideList=Lists.newArrayList();
  for (  CallableMemberDescriptor functionFromSupertype : functionsFromSupertypes) {
    boolean overrides=false;
    boolean isVisible=Visibilities.isVisible(functionFromSupertype,current);
    for (    CallableMemberDescriptor functionFromCurrent : functionsFromCurrent) {
      OverridingUtil.OverrideCompatibilityInfo.Result result=OverridingUtil.isOverridableBy(functionFromSupertype,functionFromCurrent).getResult();
      if (result == OVERRIDABLE) {
        if (isVisible) {
          OverridingUtil.bindOverride(functionFromCurrent,functionFromSupertype);
        }
        overrides=true;
      }
 else       if (result == OverridingUtil.OverrideCompatibilityInfo.Result.CONFLICT) {
        sink.conflict(functionFromSupertype,functionFromCurrent);
      }
    }
    for (    CallableMemberDescriptor fakeOverride : fakeOverrideList) {
      if (OverridingUtil.isOverridableBy(functionFromSupertype,fakeOverride).getResult() == OVERRIDABLE) {
        OverridingUtil.bindOverride(fakeOverride,functionFromSupertype);
        overrides=true;
      }
    }
    if (!overrides) {
      CallableMemberDescriptor fakeOverride=functionFromSupertype.copy(current,false,!isVisible,CallableMemberDescriptor.Kind.FAKE_OVERRIDE,false);
      OverridingUtil.bindOverride(fakeOverride,functionFromSupertype);
      fakeOverrideList.add(fakeOverride);
      sink.addToScope(fakeOverride);
    }
  }
}
