{
  final JetAnnotationEntry dataAnnotation=findDataAnnotationForDataClass(componentFunction.getContainingDeclaration());
  checkOverridesForMemberMarkedOverride(componentFunction,false,new CheckOverrideReportStrategy(){
    private boolean overrideConflict=false;
    @Override public void overridingFinalMember(    @NotNull CallableMemberDescriptor overridden){
      if (!overrideConflict) {
        overrideConflict=true;
        trace.report(DATA_CLASS_OVERRIDE_CONFLICT.on(dataAnnotation,componentFunction,overridden.getContainingDeclaration()));
      }
    }
    @Override public void returnTypeMismatchOnOverride(    @NotNull CallableMemberDescriptor overridden){
      if (!overrideConflict) {
        overrideConflict=true;
        trace.report(DATA_CLASS_OVERRIDE_CONFLICT.on(dataAnnotation,componentFunction,overridden.getContainingDeclaration()));
      }
    }
    @Override public void propertyTypeMismatchOnOverride(    @NotNull CallableMemberDescriptor overridden){
      throw new IllegalStateException("Component functions are not properties");
    }
    @Override public void varOverriddenByVal(    @NotNull CallableMemberDescriptor overridden){
      throw new IllegalStateException("Component functions are not properties");
    }
    @Override public void cannotOverrideInvisibleMember(    @NotNull CallableMemberDescriptor invisibleOverridden){
      throw new IllegalStateException("CANNOT_OVERRIDE_INVISIBLE_MEMBER should be reported on the corresponding property");
    }
    @Override public void nothingToOverride(){
      throw new IllegalStateException("Component functions are OK to override nothing");
    }
  }
);
}
