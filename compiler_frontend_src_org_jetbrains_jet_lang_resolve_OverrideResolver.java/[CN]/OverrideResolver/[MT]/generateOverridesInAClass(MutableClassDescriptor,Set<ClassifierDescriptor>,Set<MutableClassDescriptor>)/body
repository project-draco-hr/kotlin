{
  if (!processed.add(classDescriptor)) {
    return;
  }
  if (!ourClasses.contains(classDescriptor)) {
    return;
  }
  for (  JetType supertype : classDescriptor.getTypeConstructor().getSupertypes()) {
    ClassDescriptor superclass=(ClassDescriptor)supertype.getConstructor().getDeclarationDescriptor();
    if (superclass instanceof MutableClassDescriptor) {
      generateOverridesInAClass((MutableClassDescriptor)superclass,processed,ourClasses);
    }
  }
  List<CallableMemberDescriptor> functionsFromSupertypes=getDescriptorsFromSupertypes(classDescriptor);
  MultiMap<String,CallableMemberDescriptor> functionsFromSupertypesByName=groupDescriptorsByName(functionsFromSupertypes);
  MultiMap<String,CallableMemberDescriptor> functionsFromCurrentByName=groupDescriptorsByName(classDescriptor.getCallableMembers());
  Set<String> functionNames=new LinkedHashSet<String>();
  functionNames.addAll(functionsFromSupertypesByName.keySet());
  functionNames.addAll(functionsFromCurrentByName.keySet());
  for (  String functionName : functionNames) {
    generateOverridesInFunctionGroup(functionName,functionsFromSupertypesByName.get(functionName),functionsFromCurrentByName.get(functionName),classDescriptor,new DescriptorSink(){
      @Override public void addToScope(      @NotNull CallableMemberDescriptor fakeOverride){
        if (fakeOverride instanceof PropertyDescriptor) {
          classDescriptor.getScopeForMemberLookupAsWritableScope().addPropertyDescriptor((PropertyDescriptor)fakeOverride);
        }
 else         if (fakeOverride instanceof NamedFunctionDescriptor) {
          classDescriptor.getScopeForMemberLookupAsWritableScope().addFunctionDescriptor((NamedFunctionDescriptor)fakeOverride);
        }
 else {
          throw new IllegalStateException(fakeOverride.getClass().getName());
        }
      }
      @Override public void conflict(      @NotNull CallableMemberDescriptor fromSuper,      @NotNull CallableMemberDescriptor fromCurrent){
        JetDeclaration jetProperty=(JetDeclaration)context.getTrace().get(BindingContext.DESCRIPTOR_TO_DECLARATION,fromCurrent);
        context.getTrace().report(Errors.CONFLICTING_OVERLOADS.on(jetProperty,fromCurrent,fromCurrent.getContainingDeclaration().getName()));
      }
    }
);
  }
}
