{
  for (  JetDeclaration declaration : file.getDeclarations()) {
    declaration.acceptChildren(new JetVisitorVoid(){
      @Override public void visitSimpleNameExpression(      JetSimpleNameExpression expression){
        DeclarationDescriptor referenceTarget=context.get(BindingContext.REFERENCE_TARGET,expression);
        if (referenceTarget == null)         return;
        DeclarationDescriptor containingDeclaration=referenceTarget.getContainingDeclaration();
        if (containingDeclaration == null)         return;
        ImmutableSet<ClassDescriptor> supportedTupleClasses=ImmutableSet.of(KotlinBuiltIns.getInstance().getTuple(2),KotlinBuiltIns.getInstance().getTuple(3));
        if (!supportedTupleClasses.contains(containingDeclaration))         return;
        ImmutableMap<String,String> supportedComponents=ImmutableMap.<String,String>builder().put("_1","first").put("_2","second").put("_3","third").build();
        String newName=supportedComponents.get(expression.getReferencedName());
        if (newName == null)         return;
        expression.replace(JetPsiFactory.createExpression(expression.getProject(),newName));
      }
      @Override public void visitElement(      PsiElement element){
        element.acceptChildren(this);
      }
    }
);
  }
}
