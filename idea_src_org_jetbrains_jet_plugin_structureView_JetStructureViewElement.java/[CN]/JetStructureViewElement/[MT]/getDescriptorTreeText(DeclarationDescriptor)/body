{
  StringBuilder textBuilder;
  if (descriptor instanceof FunctionDescriptor) {
    textBuilder=new StringBuilder();
    FunctionDescriptor functionDescriptor=(FunctionDescriptor)descriptor;
    ReceiverParameterDescriptor receiver=functionDescriptor.getReceiverParameter();
    if (receiver != null) {
      textBuilder.append(DescriptorRendererImpl.TEXT.renderType(receiver.getType())).append(".");
    }
    textBuilder.append(functionDescriptor.getName());
    String parametersString=StringUtil.join(functionDescriptor.getValueParameters(),new Function<ValueParameterDescriptor,String>(){
      @Override public String fun(      ValueParameterDescriptor valueParameterDescriptor){
        return valueParameterDescriptor.getName() + ":" + DescriptorRendererImpl.TEXT.renderType(valueParameterDescriptor.getType());
      }
    }
,",");
    textBuilder.append("(").append(parametersString).append(")");
    JetType returnType=functionDescriptor.getReturnType();
    textBuilder.append(":").append(DescriptorRendererImpl.TEXT.renderType(returnType));
  }
 else   if (descriptor instanceof VariableDescriptor) {
    JetType outType=((VariableDescriptor)descriptor).getType();
    textBuilder=new StringBuilder(descriptor.getName().getName());
    textBuilder.append(":").append(DescriptorRendererImpl.TEXT.renderType(outType));
  }
 else   if (descriptor instanceof ClassDescriptor) {
    textBuilder=new StringBuilder(descriptor.getName().getName());
    textBuilder.append(" (").append(DescriptorUtils.getFQName(descriptor.getContainingDeclaration())).append(")");
  }
 else {
    return DescriptorRendererImpl.TEXT.render(descriptor);
  }
  return textBuilder.toString();
}
