{
  String tagName=element.getTagName();
  if (tagName.equals(TAG_ITEM)) {
    if (mReferences == null) {
      return;
    }
    ResourceFolderType folderType=context.getResourceFolderType();
    if (folderType == ResourceFolderType.VALUES) {
      Attr typeNode=element.getAttributeNode(ATTR_TYPE);
      if (typeNode != null) {
        String typeName=typeNode.getValue();
        ResourceType type=ResourceType.getEnum(typeName);
        Attr nameNode=element.getAttributeNode(ATTR_NAME);
        if (type != null && nameNode != null) {
          NodeList childNodes=element.getChildNodes();
          for (int i=0, n=childNodes.getLength(); i < n; i++) {
            Node child=childNodes.item(i);
            if (child.getNodeType() == Node.TEXT_NODE) {
              String text=child.getNodeValue();
              for (int k=0, max=text.length(); k < max; k++) {
                char c=text.charAt(k);
                if (Character.isWhitespace(c)) {
                  break;
                }
 else                 if (c == '@' && text.startsWith(type.getName(),k + 1)) {
                  String to=text.trim();
                  if (mReferences != null) {
                    String name=nameNode.getValue();
                    if (mLocations != null) {
                      recordLocation(context,child,type,name);
                    }
 else {
                      recordReference(type,name,to);
                    }
                  }
                }
 else {
                  break;
                }
              }
            }
          }
        }
      }
    }
 else     if (folderType == ResourceFolderType.COLOR) {
      String color=element.getAttributeNS(ANDROID_URI,ATTR_COLOR);
      if (color != null && color.startsWith(COLOR_RESOURCE_PREFIX)) {
        String currentColor=LintUtils.getBaseName(context.file.getName());
        if (mLocations != null) {
          recordLocation(context,element,ResourceType.COLOR,currentColor);
        }
 else {
          recordReference(ResourceType.COLOR,currentColor,color.substring(COLOR_RESOURCE_PREFIX.length()));
        }
      }
    }
 else     if (folderType == ResourceFolderType.DRAWABLE) {
      String drawable=element.getAttributeNS(ANDROID_URI,ATTR_DRAWABLE);
      if (drawable != null && drawable.startsWith(DRAWABLE_PREFIX)) {
        String currentColor=LintUtils.getBaseName(context.file.getName());
        if (mLocations != null) {
          recordLocation(context,element,ResourceType.DRAWABLE,currentColor);
        }
 else {
          recordReference(ResourceType.DRAWABLE,currentColor,drawable.substring(DRAWABLE_PREFIX.length()));
        }
      }
    }
  }
 else   if (tagName.equals(TAG_STYLE)) {
    Attr nameNode=element.getAttributeNode(ATTR_NAME);
    Attr parentNode=element.getAttributeNode(ATTR_PARENT);
    if (parentNode != null && nameNode != null) {
      String name=nameNode.getValue();
      String parent=parentNode.getValue();
      if (parent.endsWith(name) && parent.equals(STYLE_RESOURCE_PREFIX + name) && context.isEnabled(CYCLE)&& context.getDriver().getPhase() == 1) {
        context.report(CYCLE,parentNode,context.getLocation(parentNode),String.format("Style `%1$s` should not extend itself",name));
      }
 else       if (parent.startsWith(STYLE_RESOURCE_PREFIX) && parent.startsWith(name,STYLE_RESOURCE_PREFIX.length()) && parent.startsWith(".",STYLE_RESOURCE_PREFIX.length() + name.length())&& context.isEnabled(CYCLE)&& context.getDriver().getPhase() == 1) {
        context.report(CYCLE,parentNode,context.getLocation(parentNode),String.format("Potential cycle: `%1$s` is the implied parent of `%2$s` and " + "this defines the opposite",name,parent.substring(STYLE_RESOURCE_PREFIX.length())));
        return;
      }
      if (mReferences != null && !parent.isEmpty()) {
        if (mLocations != null) {
          recordLocation(context,parentNode,ResourceType.STYLE,name);
        }
 else {
          recordReference(ResourceType.STYLE,name,parent);
        }
      }
    }
 else     if (mReferences != null && nameNode != null) {
      String name=nameNode.getValue();
      int index=name.lastIndexOf('.');
      if (index > 0) {
        String parent=name.substring(0,index);
        if (mReferences != null) {
          if (mLocations != null) {
            Attr node=element.getAttributeNode(ATTR_NAME);
            recordLocation(context,node,ResourceType.STYLE,name);
          }
 else {
            recordReference(ResourceType.STYLE,name,parent);
          }
        }
      }
    }
    if (context.isEnabled(CRASH) && context.getDriver().getPhase() == 1) {
      for (      Element item : LintUtils.getChildren(element)) {
        if ("android:id".equals(item.getAttribute(ATTR_NAME))) {
          checkCrashItem(context,item);
        }
      }
    }
  }
 else   if (tagName.equals(VIEW_INCLUDE)) {
    Attr layoutNode=element.getAttributeNode(ATTR_LAYOUT);
    if (layoutNode != null) {
      String layout=layoutNode.getValue();
      if (layout.startsWith(LAYOUT_RESOURCE_PREFIX)) {
        String currentLayout=LintUtils.getBaseName(context.file.getName());
        if (mReferences != null) {
          if (mLocations != null) {
            recordLocation(context,layoutNode,ResourceType.LAYOUT,currentLayout);
          }
 else {
            recordReference(ResourceType.LAYOUT,currentLayout,layout);
          }
        }
        if (layout.startsWith(currentLayout,LAYOUT_RESOURCE_PREFIX.length()) && layout.length() == currentLayout.length() + LAYOUT_RESOURCE_PREFIX.length() && context.isEnabled(CYCLE) && context.getDriver().getPhase() == 1) {
          String message=String.format("Layout `%1$s` should not include itself",currentLayout);
          context.report(CYCLE,layoutNode,context.getLocation(layoutNode),message);
        }
      }
    }
  }
 else   if (tagName.equals(TAG_COLOR)) {
    NodeList childNodes=element.getChildNodes();
    for (int i=0, n=childNodes.getLength(); i < n; i++) {
      Node child=childNodes.item(i);
      if (child.getNodeType() == Node.TEXT_NODE) {
        String text=child.getNodeValue();
        for (int k=0, max=text.length(); k < max; k++) {
          char c=text.charAt(k);
          if (Character.isWhitespace(c)) {
            break;
          }
 else           if (text.startsWith(COLOR_RESOURCE_PREFIX,k)) {
            String color=text.trim().substring(COLOR_RESOURCE_PREFIX.length());
            String name=element.getAttribute(ATTR_NAME);
            if (mReferences != null) {
              if (mLocations != null) {
                recordLocation(context,child,ResourceType.COLOR,name);
              }
 else {
                recordReference(ResourceType.COLOR,name,color);
              }
            }
            if (color.equals(name) && context.isEnabled(CYCLE) && context.getDriver().getPhase() == 1) {
              context.report(CYCLE,child,context.getLocation(child),String.format("Color `%1$s` should not reference itself",color));
            }
          }
 else {
            break;
          }
        }
      }
    }
  }
}
