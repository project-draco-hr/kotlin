{
  PsiElement elementAtCaret=myFixture.getFile().findElementAt(myFixture.getEditor().getCaretModel().getOffset());
  final JetClassOrObject classOrObject=PsiTreeUtil.getParentOfType(elementAtCaret,JetClassOrObject.class);
  assertNotNull("Caret should be inside class or object",classOrObject);
  final JetFile jetFile=(JetFile)classOrObject.getContainingFile();
  final BindingContext bindingContext=WholeProjectAnalyzerFacade.analyzeProjectWithCacheOnAFile(jetFile).getBindingContext();
  Set<CallableMemberDescriptor> descriptors=handler.collectMethodsToGenerate(classOrObject,bindingContext);
  final ArrayList<CallableMemberDescriptor> descriptorsList=new ArrayList<CallableMemberDescriptor>(descriptors);
  Collections.sort(descriptorsList,new Comparator<CallableMemberDescriptor>(){
    @Override public int compare(    CallableMemberDescriptor desc1,    CallableMemberDescriptor desc2){
      return desc1.getName().compareTo(desc2.getName());
    }
  }
);
  new WriteCommandAction(myFixture.getProject(),myFixture.getFile()){
    @Override protected void run(    Result result) throws Throwable {
      OverrideImplementMethodsHandler.generateMethods(myFixture.getEditor(),classOrObject,OverrideImplementMethodsHandler.membersFromDescriptors(jetFile,descriptorsList,bindingContext));
    }
  }
.execute();
}
