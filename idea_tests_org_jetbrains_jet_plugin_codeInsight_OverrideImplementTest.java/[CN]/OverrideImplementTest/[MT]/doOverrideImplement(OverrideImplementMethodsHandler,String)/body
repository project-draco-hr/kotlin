{
  PsiElement elementAtCaret=myFixture.getFile().findElementAt(myFixture.getEditor().getCaretModel().getOffset());
  final JetClassOrObject classOrObject=PsiTreeUtil.getParentOfType(elementAtCaret,JetClassOrObject.class);
  assertNotNull("Caret should be inside class or object",classOrObject);
  final JetFile jetFile=(JetFile)classOrObject.getContainingFile();
  final BindingContext bindingContext=WholeProjectAnalyzerFacade.analyzeProjectWithCacheOnAFile(jetFile).getBindingContext();
  Set<CallableMemberDescriptor> descriptors=handler.collectMethodsToGenerate(classOrObject,bindingContext);
  final CallableMemberDescriptor singleToOverride;
  if (memberToOverride == null) {
    assertEquals("Invalid number of available descriptors for override",1,descriptors.size());
    singleToOverride=descriptors.iterator().next();
  }
 else {
    CallableMemberDescriptor candidateToOverride=null;
    for (    CallableMemberDescriptor callable : descriptors) {
      if (callable.getName().asString().equals(memberToOverride)) {
        if (candidateToOverride != null) {
          throw new IllegalStateException("more then one descriptor with name " + memberToOverride);
        }
        candidateToOverride=callable;
      }
    }
    if (candidateToOverride == null) {
      throw new IllegalStateException("no descriptors to override with name " + memberToOverride + " found");
    }
    singleToOverride=candidateToOverride;
  }
  new WriteCommandAction(myFixture.getProject(),myFixture.getFile()){
    @Override protected void run(    Result result) throws Throwable {
      OverrideImplementMethodsHandler.generateMethods(myFixture.getEditor(),classOrObject,OverrideImplementMethodsHandler.membersFromDescriptors(jetFile,Collections.singletonList(singleToOverride),bindingContext));
    }
  }
.execute();
}
