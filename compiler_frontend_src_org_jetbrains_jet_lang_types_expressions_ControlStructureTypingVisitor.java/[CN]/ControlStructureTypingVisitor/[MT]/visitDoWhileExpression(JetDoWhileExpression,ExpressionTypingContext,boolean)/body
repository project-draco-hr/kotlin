{
  if (!isStatement)   return DataFlowUtils.illegalStatementType(expression,contextWithExpectedType,facade);
  ExpressionTypingContext context=contextWithExpectedType.replaceExpectedType(TypeUtils.NO_EXPECTED_TYPE);
  JetExpression body=expression.getBody();
  JetScope conditionScope=context.scope;
  if (body instanceof JetFunctionLiteralExpression) {
    JetFunctionLiteralExpression function=(JetFunctionLiteralExpression)body;
    if (!function.getFunctionLiteral().hasParameterSpecification()) {
      WritableScope writableScope=newWritableScopeImpl(context,"do..while body scope");
      conditionScope=writableScope;
      context.expressionTypingServices.getBlockReturnedTypeWithWritableScope(writableScope,function.getFunctionLiteral().getBodyExpression().getStatements(),CoercionStrategy.NO_COERCION,context,context.trace);
      context.trace.record(BindingContext.BLOCK,function);
    }
 else {
      facade.getType(body,context.replaceScope(context.scope));
    }
  }
 else   if (body != null) {
    WritableScope writableScope=newWritableScopeImpl(context,"do..while body scope");
    conditionScope=writableScope;
    List<JetElement> block;
    if (body instanceof JetBlockExpression) {
      block=((JetBlockExpression)body).getStatements();
    }
 else {
      block=Collections.<JetElement>singletonList(body);
    }
    context.expressionTypingServices.getBlockReturnedTypeWithWritableScope(writableScope,block,CoercionStrategy.NO_COERCION,context,context.trace);
  }
  JetExpression condition=expression.getCondition();
  checkCondition(conditionScope,condition,context);
  if (!containsBreak(expression,context)) {
    facade.setResultingDataFlowInfo(DataFlowUtils.extractDataFlowInfoFromCondition(condition,false,null,context));
  }
  return DataFlowUtils.checkType(JetStandardClasses.getUnitType(),expression,contextWithExpectedType,context.dataFlowInfo);
}
