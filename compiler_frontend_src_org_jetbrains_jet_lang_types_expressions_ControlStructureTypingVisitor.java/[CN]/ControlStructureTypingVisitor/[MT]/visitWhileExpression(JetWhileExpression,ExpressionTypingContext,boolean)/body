{
  if (!isStatement)   return DataFlowUtils.illegalStatementType(expression,contextWithExpectedType,facade);
  ExpressionTypingContext context=contextWithExpectedType.replaceExpectedType(NO_EXPECTED_TYPE).replaceContextDependency(INDEPENDENT);
  JetExpression condition=expression.getCondition();
  DataFlowInfo dataFlowInfo=checkCondition(context.scope,condition,context);
  JetExpression body=expression.getBody();
  if (body != null) {
    WritableScopeImpl scopeToExtend=newWritableScopeImpl(context,"Scope extended in while's condition");
    DataFlowInfo conditionInfo=DataFlowUtils.extractDataFlowInfoFromCondition(condition,true,context).and(dataFlowInfo);
    components.expressionTypingServices.getBlockReturnedTypeWithWritableScope(scopeToExtend,Collections.singletonList(body),CoercionStrategy.NO_COERCION,context.replaceDataFlowInfo(conditionInfo),context.trace);
  }
  if (!containsJumpOutOfLoop(expression,context)) {
    dataFlowInfo=DataFlowUtils.extractDataFlowInfoFromCondition(condition,false,context).and(dataFlowInfo);
  }
  return DataFlowUtils.checkType(KotlinBuiltIns.getInstance().getUnitType(),expression,contextWithExpectedType,dataFlowInfo);
}
