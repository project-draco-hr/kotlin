{
  context.labelResolver.recordLabel(expression,context);
  if (context.expectedReturnType == TypeUtils.FORBIDDEN) {
    context.trace.report(RETURN_NOT_ALLOWED.on(expression));
    return null;
  }
  JetExpression returnedExpression=expression.getReturnedExpression();
  JetType expectedType=context.expectedReturnType;
  if (expression.getTargetLabel() == null) {
    if (PsiTreeUtil.getParentOfType(expression,JetFunctionLiteral.class) == PsiTreeUtil.getParentOfType(expression,JetDeclaration.class)) {
      JetNamedFunction function=JetPsiUtil.getSurroundingFunction(expression);
      if (function != null && function.getReturnTypeRef() != null) {
        expectedType=BindingContextUtils.getFunctionReturnType(context.trace.getBindingContext(),function);
      }
    }
  }
 else {
    PsiElement element=context.trace.get(LABEL_TARGET,expression.getTargetLabel());
    if (element instanceof JetFunction && ((JetFunction)element).getReturnTypeRef() != null) {
      expectedType=BindingContextUtils.getFunctionReturnType(context.trace.getBindingContext(),(JetFunction)element);
    }
  }
  if (returnedExpression != null) {
    facade.getType(returnedExpression,context.replaceExpectedType(expectedType).replaceScope(context.scope));
  }
 else {
    if (expectedType != TypeUtils.NO_EXPECTED_TYPE && expectedType != null && !JetStandardClasses.isUnit(expectedType)) {
      context.trace.report(RETURN_TYPE_MISMATCH.on(expression,expectedType));
    }
  }
  return DataFlowUtils.checkType(JetStandardClasses.getNothingType(),expression,context);
}
