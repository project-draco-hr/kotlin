{
  JetExpression tryBlock=expression.getTryBlock();
  List<JetCatchClause> catchClauses=expression.getCatchClauses();
  JetFinallySection finallyBlock=expression.getFinallyBlock();
  List<JetType> types=new ArrayList<JetType>();
  for (  JetCatchClause catchClause : catchClauses) {
    JetParameter catchParameter=catchClause.getCatchParameter();
    JetExpression catchBody=catchClause.getCatchBody();
    if (catchParameter != null) {
      VariableDescriptor variableDescriptor=context.expressionTypingServices.getDescriptorResolver().resolveLocalVariableDescriptor(context.scope.getContainingDeclaration(),context.scope,catchParameter,context.trace);
      JetType throwableType=KotlinBuiltIns.getInstance().getThrowable().getDefaultType();
      DataFlowUtils.checkType(variableDescriptor.getType(),catchParameter,context.replaceExpectedType(throwableType));
      if (catchBody != null) {
        WritableScope catchScope=newWritableScopeImpl(context,"Catch scope");
        catchScope.addVariableDescriptor(variableDescriptor);
        JetType type=facade.getTypeInfo(catchBody,context.replaceScope(catchScope)).getType();
        if (type != null) {
          types.add(type);
        }
      }
    }
  }
  if (finallyBlock != null) {
    facade.getTypeInfo(finallyBlock.getFinalExpression(),context.replaceExpectedType(TypeUtils.NO_EXPECTED_TYPE));
  }
  JetType type=facade.getTypeInfo(tryBlock,context).getType();
  if (type != null) {
    types.add(type);
  }
  if (types.isEmpty()) {
    return JetTypeInfo.create(null,context.dataFlowInfo);
  }
 else {
    return JetTypeInfo.create(CommonSupertypes.commonSupertype(types),context.dataFlowInfo);
  }
}
