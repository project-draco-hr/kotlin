{
  if (!isStatement)   return DataFlowUtils.illegalStatementType(expression,contextWithExpectedType,facade);
  ExpressionTypingContext context=contextWithExpectedType.replaceExpectedType(TypeUtils.NO_EXPECTED_TYPE);
  JetParameter loopParameter=expression.getLoopParameter();
  JetExpression loopRange=expression.getLoopRange();
  JetType expectedParameterType=null;
  if (loopRange != null) {
    ExpressionReceiver loopRangeReceiver=getExpressionReceiver(facade,loopRange,context.replaceScope(context.scope));
    if (loopRangeReceiver != null) {
      expectedParameterType=checkIterableConvention(loopRangeReceiver,context);
    }
  }
  WritableScope loopScope=newWritableScopeImpl(context).setDebugName("Scope with for-loop index");
  if (loopParameter != null) {
    JetTypeReference typeReference=loopParameter.getTypeReference();
    VariableDescriptor variableDescriptor;
    if (typeReference != null) {
      variableDescriptor=context.expressionTypingServices.getDescriptorResolver().resolveLocalVariableDescriptor(context.scope.getContainingDeclaration(),context.scope,loopParameter,context.trace);
      JetType actualParameterType=variableDescriptor.getType();
      if (expectedParameterType != null && actualParameterType != null && !JetTypeChecker.INSTANCE.isSubtypeOf(expectedParameterType,actualParameterType)) {
        context.trace.report(TYPE_MISMATCH_IN_FOR_LOOP.on(typeReference,expectedParameterType,actualParameterType));
      }
    }
 else {
      if (expectedParameterType == null) {
        expectedParameterType=ErrorUtils.createErrorType("Error");
      }
      variableDescriptor=context.expressionTypingServices.getDescriptorResolver().resolveLocalVariableDescriptor(context.scope.getContainingDeclaration(),loopParameter,expectedParameterType,context.trace);
    }
{
      VariableDescriptor olderVariable=context.scope.getLocalVariable(variableDescriptor.getName());
      if (olderVariable != null && DescriptorUtils.isLocal(context.scope.getContainingDeclaration(),olderVariable)) {
        PsiElement declaration=context.trace.get(DESCRIPTOR_TO_DECLARATION,variableDescriptor);
        context.trace.report(Errors.NAME_SHADOWING.on(declaration,variableDescriptor.getName()));
      }
    }
    loopScope.addVariableDescriptor(variableDescriptor);
  }
  JetExpression body=expression.getBody();
  if (body != null) {
    context.expressionTypingServices.getBlockReturnedTypeWithWritableScope(loopScope,Collections.singletonList(body),CoercionStrategy.NO_COERCION,context,context.trace);
  }
  return DataFlowUtils.checkType(JetStandardClasses.getUnitType(),expression,contextWithExpectedType);
}
