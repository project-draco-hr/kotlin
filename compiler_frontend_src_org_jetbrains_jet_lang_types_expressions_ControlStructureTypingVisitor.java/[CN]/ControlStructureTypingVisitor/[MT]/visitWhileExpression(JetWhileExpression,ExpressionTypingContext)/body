{
  ExpressionTypingContext context=contextWithExpectedType.replaceExpectedType(TypeUtils.NO_EXPECTED_TYPE);
  JetExpression condition=expression.getCondition();
  checkCondition(context.scope,condition,context);
  JetExpression body=expression.getBody();
  if (body != null) {
    WritableScopeImpl scopeToExtend=newWritableScopeImpl(context).setDebugName("Scope extended in while's condition");
    DataFlowInfo conditionInfo=condition == null ? context.dataFlowInfo : extractDataFlowInfoFromCondition(condition,true,scopeToExtend,context);
    getTypeWithNewScopeAndDataFlowInfo(scopeToExtend,body,conditionInfo,context);
  }
  if (!containsBreak(expression,context)) {
    facade.setResultingDataFlowInfo(extractDataFlowInfoFromCondition(condition,false,null,context));
  }
  return checkType(JetStandardClasses.getUnitType(),expression,contextWithExpectedType);
}
