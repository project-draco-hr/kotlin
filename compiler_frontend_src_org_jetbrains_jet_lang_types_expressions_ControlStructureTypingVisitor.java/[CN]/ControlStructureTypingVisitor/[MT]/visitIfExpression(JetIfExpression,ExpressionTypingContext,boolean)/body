{
  ExpressionTypingContext context=contextWithExpectedType.replaceExpectedType(TypeUtils.NO_EXPECTED_TYPE);
  JetExpression condition=expression.getCondition();
  DataFlowInfo conditionDataFlowInfo=checkCondition(context.scope,condition,context);
  JetExpression elseBranch=expression.getElse();
  JetExpression thenBranch=expression.getThen();
  WritableScopeImpl thenScope=newWritableScopeImpl(context,"Then scope");
  WritableScopeImpl elseScope=newWritableScopeImpl(context,"Else scope");
  DataFlowInfo thenInfo=DataFlowUtils.extractDataFlowInfoFromCondition(condition,true,context).and(conditionDataFlowInfo);
  DataFlowInfo elseInfo=DataFlowUtils.extractDataFlowInfoFromCondition(condition,false,context).and(conditionDataFlowInfo);
  if (elseBranch == null) {
    if (thenBranch != null) {
      return getTypeInfoWhenOnlyOneBranchIsPresent(thenBranch,thenScope,thenInfo,elseInfo,contextWithExpectedType,expression,isStatement);
    }
    return JetTypeInfo.create(null,context.dataFlowInfo);
  }
  if (thenBranch == null) {
    return getTypeInfoWhenOnlyOneBranchIsPresent(elseBranch,elseScope,elseInfo,thenInfo,contextWithExpectedType,expression,isStatement);
  }
  CoercionStrategy coercionStrategy=isStatement ? CoercionStrategy.COERCION_TO_UNIT : CoercionStrategy.NO_COERCION;
  JetTypeInfo thenTypeInfo=context.expressionTypingServices.getBlockReturnedTypeWithWritableScope(thenScope,Collections.singletonList(thenBranch),coercionStrategy,contextWithExpectedType.replaceDataFlowInfo(thenInfo),context.trace);
  JetTypeInfo elseTypeInfo=context.expressionTypingServices.getBlockReturnedTypeWithWritableScope(elseScope,Collections.singletonList(elseBranch),coercionStrategy,contextWithExpectedType.replaceDataFlowInfo(elseInfo),context.trace);
  JetType thenType=thenTypeInfo.getType();
  JetType elseType=elseTypeInfo.getType();
  DataFlowInfo thenDataFlowInfo=thenTypeInfo.getDataFlowInfo();
  DataFlowInfo elseDataFlowInfo=elseTypeInfo.getDataFlowInfo();
  boolean jumpInThen=thenType != null && KotlinBuiltIns.getInstance().isNothing(thenType);
  boolean jumpInElse=elseType != null && KotlinBuiltIns.getInstance().isNothing(elseType);
  JetTypeInfo result;
  if (thenType == null && elseType == null) {
    result=JetTypeInfo.create(null,thenDataFlowInfo.or(elseDataFlowInfo));
  }
 else   if (thenType == null || (jumpInThen && !jumpInElse)) {
    result=elseTypeInfo;
  }
 else   if (elseType == null || (jumpInElse && !jumpInThen)) {
    result=thenTypeInfo;
  }
 else {
    result=JetTypeInfo.create(CommonSupertypes.commonSupertype(Arrays.asList(thenType,elseType)),thenDataFlowInfo.or(elseDataFlowInfo));
  }
  return DataFlowUtils.checkImplicitCast(result.getType(),expression,contextWithExpectedType,isStatement,result.getDataFlowInfo());
}
