{
  ExpressionTypingContext context=contextWithExpectedType.replaceExpectedType(TypeUtils.NO_EXPECTED_TYPE);
  JetExpression condition=expression.getCondition();
  checkCondition(context.scope,condition,context);
  JetExpression elseBranch=expression.getElse();
  JetExpression thenBranch=expression.getThen();
  WritableScopeImpl thenScope=newWritableScopeImpl(context).setDebugName("Then scope");
  DataFlowInfo thenInfo=DataFlowUtils.extractDataFlowInfoFromCondition(condition,true,thenScope,context);
  DataFlowInfo elseInfo=DataFlowUtils.extractDataFlowInfoFromCondition(condition,false,null,context);
  if (elseBranch == null) {
    if (thenBranch != null) {
      JetType type=getTypeWithNewScopeAndDataFlowInfo(thenScope,thenBranch,thenInfo,context);
      if (type != null && JetStandardClasses.isNothing(type)) {
        facade.setResultingDataFlowInfo(elseInfo);
      }
      return DataFlowUtils.checkType(JetStandardClasses.getUnitType(),expression,contextWithExpectedType);
    }
    return null;
  }
  if (thenBranch == null) {
    JetType type=getTypeWithNewScopeAndDataFlowInfo(context.scope,elseBranch,elseInfo,context);
    if (type != null && JetStandardClasses.isNothing(type)) {
      facade.setResultingDataFlowInfo(thenInfo);
    }
    return DataFlowUtils.checkType(JetStandardClasses.getUnitType(),expression,contextWithExpectedType);
  }
  JetType thenType=getTypeWithNewScopeAndDataFlowInfo(thenScope,thenBranch,thenInfo,contextWithExpectedType);
  JetType elseType=getTypeWithNewScopeAndDataFlowInfo(context.scope,elseBranch,elseInfo,contextWithExpectedType);
  JetType result;
  if (thenType == null) {
    result=elseType;
  }
 else   if (elseType == null) {
    result=thenType;
  }
 else {
    result=context.semanticServices.getTypeChecker().commonSupertype(Arrays.asList(thenType,elseType));
  }
  boolean jumpInThen=thenType != null && JetStandardClasses.isNothing(thenType);
  boolean jumpInElse=elseType != null && JetStandardClasses.isNothing(elseType);
  if (jumpInThen && !jumpInElse) {
    facade.setResultingDataFlowInfo(elseInfo);
  }
 else   if (jumpInElse && !jumpInThen) {
    facade.setResultingDataFlowInfo(thenInfo);
  }
  return result;
}
