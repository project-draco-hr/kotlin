{
  JetExpression loopRangeExpression=loopRange.getExpression();
  OverloadResolutionResults<FunctionDescriptor> iteratorResolutionResults=context.resolveExactSignature(loopRange,"iterator",Collections.<JetType>emptyList());
  if (iteratorResolutionResults.isSuccess()) {
    FunctionDescriptor iteratorFunction=iteratorResolutionResults.getResult().getResultingDescriptor();
    context.trace.record(LOOP_RANGE_ITERATOR,loopRangeExpression,iteratorFunction);
    JetType iteratorType=iteratorFunction.getReturnType();
    FunctionDescriptor hasNextFunction=checkHasNextFunctionSupport(loopRangeExpression,iteratorType,context);
    boolean hasNextFunctionSupported=hasNextFunction != null;
    VariableDescriptor hasNextProperty=checkHasNextPropertySupport(loopRangeExpression,iteratorType,context);
    boolean hasNextPropertySupported=hasNextProperty != null;
    if (hasNextFunctionSupported && hasNextPropertySupported && !ErrorUtils.isErrorType(iteratorType)) {
      context.trace.report(HAS_NEXT_PROPERTY_AND_FUNCTION_AMBIGUITY.on(loopRangeExpression));
    }
 else     if (!hasNextFunctionSupported && !hasNextPropertySupported) {
      context.trace.report(HAS_NEXT_MISSING.on(loopRangeExpression));
    }
 else {
      context.trace.record(LOOP_RANGE_HAS_NEXT,loopRange.getExpression(),hasNextFunctionSupported ? hasNextFunction : hasNextProperty);
    }
    OverloadResolutionResults<FunctionDescriptor> nextResolutionResults=context.resolveExactSignature(new TransientReceiver(iteratorType),"next",Collections.<JetType>emptyList());
    if (nextResolutionResults.isAmbiguity()) {
      context.trace.report(NEXT_AMBIGUITY.on(loopRangeExpression));
    }
 else     if (nextResolutionResults.isNothing()) {
      context.trace.report(NEXT_MISSING.on(loopRangeExpression));
    }
 else {
      FunctionDescriptor nextFunction=nextResolutionResults.getResult().getResultingDescriptor();
      context.trace.record(LOOP_RANGE_NEXT,loopRange.getExpression(),nextFunction);
      return nextFunction.getReturnType();
    }
  }
 else {
    if (iteratorResolutionResults.isAmbiguity()) {
      context.trace.report(ITERATOR_AMBIGUITY.on(loopRangeExpression,iteratorResolutionResults.getResults()));
    }
 else {
      context.trace.report(ITERATOR_MISSING.on(loopRangeExpression));
    }
  }
  return null;
}
