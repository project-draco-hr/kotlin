{
  JetExpression loopRangeExpression=loopRange.getExpression();
  Name iterator=Name.identifier("iterator");
  OverloadResolutionResults<FunctionDescriptor> iteratorResolutionResults=resolveFakeCall(loopRange,context,iterator);
  if (!iteratorResolutionResults.isSuccess()) {
    ExpressionReceiver nonNullReceiver=new ExpressionReceiver(loopRange.getExpression(),TypeUtils.makeNotNullable(loopRange.getType()));
    OverloadResolutionResults<FunctionDescriptor> iteratorResolutionResultsWithNonNullReceiver=resolveFakeCall(nonNullReceiver,context,iterator);
    if (iteratorResolutionResultsWithNonNullReceiver.isSuccess()) {
      iteratorResolutionResults=iteratorResolutionResultsWithNonNullReceiver;
    }
  }
  if (iteratorResolutionResults.isSuccess()) {
    FunctionDescriptor iteratorFunction=iteratorResolutionResults.getResultingCall().getResultingDescriptor();
    context.trace.record(LOOP_RANGE_ITERATOR,loopRangeExpression,iteratorFunction);
    JetType iteratorType=iteratorFunction.getReturnType();
    FunctionDescriptor hasNextFunction=checkHasNextFunctionSupport(loopRangeExpression,iteratorType,context);
    boolean hasNextFunctionSupported=hasNextFunction != null;
    if (!hasNextFunctionSupported) {
      context.trace.report(HAS_NEXT_MISSING.on(loopRangeExpression));
    }
 else {
      context.trace.record(LOOP_RANGE_HAS_NEXT,loopRange.getExpression(),hasNextFunction);
    }
    OverloadResolutionResults<FunctionDescriptor> nextResolutionResults=context.resolveExactSignature(new TransientReceiver(iteratorType),Name.identifier("next"),Collections.<JetType>emptyList());
    if (nextResolutionResults.isAmbiguity()) {
      context.trace.report(NEXT_AMBIGUITY.on(loopRangeExpression));
    }
 else     if (nextResolutionResults.isNothing()) {
      context.trace.report(NEXT_MISSING.on(loopRangeExpression));
    }
 else {
      FunctionDescriptor nextFunction=nextResolutionResults.getResultingCall().getResultingDescriptor();
      context.trace.record(LOOP_RANGE_NEXT,loopRange.getExpression(),nextFunction);
      return nextFunction.getReturnType();
    }
  }
 else {
    if (iteratorResolutionResults.isAmbiguity()) {
      context.trace.report(ITERATOR_AMBIGUITY.on(loopRangeExpression,iteratorResolutionResults.getResultingCalls()));
    }
 else {
      context.trace.report(ITERATOR_MISSING.on(loopRangeExpression));
    }
  }
  return null;
}
