{
  JetExpression loopRangeExpression=loopRange.getExpression();
  Name iterator=Name.identifier("iterator");
  Pair<Call,OverloadResolutionResults<FunctionDescriptor>> calls=makeAndResolveFakeCall(loopRange,context,iterator);
  Call iteratorCall=calls.getFirst();
  OverloadResolutionResults<FunctionDescriptor> iteratorResolutionResults=calls.getSecond();
  if (iteratorResolutionResults.isSuccess()) {
    ResolvedCall<FunctionDescriptor> iteratorResolvedCall=iteratorResolutionResults.getResultingCall();
    context.trace.record(LOOP_RANGE_ITERATOR_RESOLVED_CALL,loopRangeExpression,iteratorResolvedCall);
    context.trace.record(LOOP_RANGE_ITERATOR_CALL,loopRangeExpression,iteratorCall);
    FunctionDescriptor iteratorFunction=iteratorResolvedCall.getResultingDescriptor();
    JetType iteratorType=iteratorFunction.getReturnType();
    JetType hasNextType=checkConventionForIterator(context,loopRangeExpression,iteratorType,"hasNext",HAS_NEXT_FUNCTION_AMBIGUITY,HAS_NEXT_MISSING,LOOP_RANGE_HAS_NEXT_RESOLVED_CALL);
    if (hasNextType != null && !isBoolean(hasNextType)) {
      context.trace.report(HAS_NEXT_FUNCTION_TYPE_MISMATCH.on(loopRangeExpression,hasNextType));
    }
    return checkConventionForIterator(context,loopRangeExpression,iteratorType,"next",NEXT_AMBIGUITY,NEXT_MISSING,LOOP_RANGE_NEXT_RESOLVED_CALL);
  }
 else {
    if (iteratorResolutionResults.isAmbiguity()) {
      context.trace.report(ITERATOR_AMBIGUITY.on(loopRangeExpression,iteratorResolutionResults.getResultingCalls()));
    }
 else {
      context.trace.report(ITERATOR_MISSING.on(loopRangeExpression));
    }
  }
  return null;
}
