{
  boolean isFinal=isPropertyFinal(scopeData,psiData);
  boolean isVar=psiData.isVar();
  PropertyPsiDataElement characteristicMember=psiData.getCharacteristicMember();
  Visibility visibility=DescriptorResolverUtils.resolveVisibility(psiData.getCharacteristicPsi(),null);
  CallableMemberDescriptor.Kind kind=CallableMemberDescriptor.Kind.DECLARATION;
  PropertyPsiDataElement getter=psiData.getGetter();
  if (getter != null) {
    JetMethodAnnotation methodAnnotation=((PsiMethodWrapper)getter.getMember()).getJetMethodAnnotation();
    visibility=DescriptorResolverUtils.resolveVisibility(psiData.getCharacteristicPsi(),methodAnnotation);
    kind=DescriptorKindUtils.flagsToKind(methodAnnotation.kind());
  }
  boolean isEnumEntry=DescriptorUtils.isEnumClassObject(owner);
  PropertyDescriptorImpl propertyDescriptor=new PropertyDescriptorImpl(owner,annotationResolver.resolveAnnotations(psiData.getCharacteristicPsi()),DescriptorResolverUtils.resolveModality(characteristicMember.getMember(),isFinal || isEnumEntry || psiData.isPropertyForNamedObject()),visibility,isVar,propertyName,kind);
  if (isEnumEntry) {
    ClassDescriptorImpl dummyClassDescriptorForEnumEntryObject=new ClassDescriptorImpl(owner,Collections.<AnnotationDescriptor>emptyList(),Modality.FINAL,propertyName);
    dummyClassDescriptorForEnumEntryObject.initialize(true,Collections.<TypeParameterDescriptor>emptyList(),Collections.<JetType>emptyList(),JetScope.EMPTY,Collections.<ConstructorDescriptor>emptySet(),null,false);
    trace.record(BindingContext.OBJECT_DECLARATION_CLASS,propertyDescriptor,dummyClassDescriptorForEnumEntryObject);
  }
  PropertyGetterDescriptor getterDescriptor=resolveGetter(visibility,kind,getter,propertyDescriptor);
  PropertySetterDescriptor setterDescriptor=resolveSetter(psiData,kind,propertyDescriptor);
  propertyDescriptor.initialize(getterDescriptor,setterDescriptor);
  List<TypeParameterDescriptor> typeParameters=resolvePropertyTypeParameters(psiData,characteristicMember,propertyDescriptor);
  TypeVariableResolver typeVariableResolverForPropertyInternals=TypeVariableResolvers.typeVariableResolverFromTypeParameters(typeParameters,propertyDescriptor,"property " + propertyName + " in "+ context);
  JetType propertyType=getPropertyType(psiData,characteristicMember,typeVariableResolverForPropertyInternals);
  JetType receiverType=getReceiverType(characteristicMember,typeVariableResolverForPropertyInternals);
  propertyType=getAlternativeSignatureData(isVar,characteristicMember,propertyDescriptor,propertyType);
  propertyDescriptor.setType(propertyType,typeParameters,DescriptorUtils.getExpectedThisObjectIfNeeded(owner),receiverType);
  initializeSetterAndGetter(propertyDescriptor,getterDescriptor,setterDescriptor,propertyType);
  if (kind == CallableMemberDescriptor.Kind.DECLARATION) {
    trace.record(BindingContext.VARIABLE,psiData.getCharacteristicPsi(),propertyDescriptor);
  }
  recordObjectDeclarationClassIfNeeded(psiData,owner,propertyDescriptor,propertyType);
  if (scopeData.getDeclarationOrigin() == JAVA) {
    trace.record(BindingContext.IS_DECLARED_IN_JAVA,propertyDescriptor);
  }
  return propertyDescriptor;
}
