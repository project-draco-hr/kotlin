{
  boolean isVar=!field.isFinal();
  PropertyDescriptorImpl propertyDescriptor=createPropertyDescriptor(owner,name,field,isVar);
  propertyDescriptor.initialize(null,null);
  TypeVariableResolver typeVariableResolver=new TypeVariableResolver(Collections.<TypeParameterDescriptor>emptyList(),propertyDescriptor);
  JetType propertyType=getPropertyType(field,typeVariableResolver);
  ExternalSignatureResolver.AlternativeFieldSignature effectiveSignature=externalSignatureResolver.resolveAlternativeFieldSignature(field,propertyType,isVar);
  List<String> signatureErrors=effectiveSignature.getErrors();
  if (!signatureErrors.isEmpty()) {
    externalSignatureResolver.reportSignatureErrors(propertyDescriptor,signatureErrors);
  }
  propertyDescriptor.setType(effectiveSignature.getReturnType(),Collections.<TypeParameterDescriptor>emptyList(),DescriptorUtils.getExpectedThisObjectIfNeeded(owner),(JetType)null);
  trace.record(BindingContext.VARIABLE,field.getPsi(),propertyDescriptor);
  if (AnnotationUtils.isPropertyAcceptableAsAnnotationParameter(propertyDescriptor)) {
    PsiExpression initializer=field.getPsi().getInitializer();
    if (initializer instanceof PsiLiteralExpression) {
      CompileTimeConstant<?> constant=JavaAnnotationArgumentResolver.resolveCompileTimeConstantValue(((PsiLiteralExpression)initializer).getValue(),propertyType);
      if (constant != null) {
        trace.record(BindingContext.COMPILE_TIME_INITIALIZER,propertyDescriptor,constant);
      }
    }
  }
  return propertyDescriptor;
}
