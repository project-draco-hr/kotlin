{
  List<JetType> parameterTypeList=Arrays.asList(parameterType);
  CallResolver callResolver=new CallResolver(JetSemanticServices.createSemanticServices(getProject()),DataFlowInfo.EMPTY);
  OverloadResolutionResults<FunctionDescriptor> functions=callResolver.resolveExactSignature(classDescriptor.getMemberScope(typeArguments),ReceiverDescriptor.NO_RECEIVER,name,parameterTypeList);
  for (  ResolvedCall<? extends FunctionDescriptor> resolvedCall : functions.getResultingCalls()) {
    List<ValueParameterDescriptor> unsubstitutedValueParameters=resolvedCall.getResultingDescriptor().getValueParameters();
    for (int i=0, unsubstitutedValueParametersSize=unsubstitutedValueParameters.size(); i < unsubstitutedValueParametersSize; i++) {
      ValueParameterDescriptor unsubstitutedValueParameter=unsubstitutedValueParameters.get(i);
      if (unsubstitutedValueParameter.getType().equals(parameterType[i])) {
        return resolvedCall.getResultingDescriptor();
      }
    }
  }
  throw new IllegalArgumentException("Not found: kotlin::" + classDescriptor.getName() + "."+ name+ "("+ parameterTypeList+ ")");
}
