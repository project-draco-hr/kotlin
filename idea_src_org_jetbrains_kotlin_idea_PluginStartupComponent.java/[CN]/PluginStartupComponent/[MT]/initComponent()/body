{
  registerPathVariable();
  if (ApplicationManager.getApplication().isUnitTestMode()) {
    ForkJoinPoolPatcherForTeamCityTesting.INSTANCE.patchThreadTracker();
  }
  JarUserDataManager.INSTANCE.register(KotlinJavaScriptLibraryDetectionUtil.HasKotlinJSMetadataInJar.INSTANCE);
  DebuggerFiltersUtilKt.addKotlinStdlibDebugFilterIfNeeded();
  try {
    UpdateChecker.INSTANCE.getExcludedFromUpdateCheckPlugins().add("org.jetbrains.kotlin");
  }
 catch (  Throwable throwable) {
    LOG.debug("Excluding Kotlin plugin updates using old API",throwable);
    UpdateChecker.getDisabledToUpdatePlugins().add("org.jetbrains.kotlin");
  }
  EditorFactory.getInstance().getEventMulticaster().addDocumentListener(new DocumentAdapter(){
    @Override public void documentChanged(    DocumentEvent e){
      VirtualFile virtualFile=FileDocumentManager.getInstance().getFile(e.getDocument());
      if (virtualFile != null && virtualFile.getFileType() == KotlinFileType.INSTANCE) {
        KotlinPluginUpdater.Companion.getInstance().kotlinFileEdited();
      }
    }
  }
);
}
