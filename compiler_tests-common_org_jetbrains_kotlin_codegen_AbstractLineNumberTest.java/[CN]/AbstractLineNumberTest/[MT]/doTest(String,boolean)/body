{
  Pair<KtFile,KotlinCoreEnvironment> fileAndEnv=createPsiFile(filename);
  KtFile psiFile=fileAndEnv.getFirst();
  KotlinCoreEnvironment environment=fileAndEnv.getSecond();
  ClassFileFactory classFileFactory=GenerationUtils.compileFile(psiFile,environment);
  try {
    if (custom) {
      List<Integer> actualLineNumbers=extractActualLineNumbersFromBytecode(classFileFactory,false);
      String text=psiFile.getText();
      String newFileText=text.substring(0,text.indexOf("// ")) + getActualLineNumbersAsString(actualLineNumbers);
      KotlinTestUtils.assertEqualsToFile(new File(filename),newFileText);
    }
 else {
      List<Integer> expectedLineNumbers=extractSelectedLineNumbersFromSource(psiFile);
      List<Integer> actualLineNumbers=extractActualLineNumbersFromBytecode(classFileFactory,true);
      assertSameElements(actualLineNumbers,expectedLineNumbers);
    }
  }
 catch (  Throwable e) {
    System.out.println(classFileFactory.createText());
    throw ExceptionUtilsKt.rethrow(e);
  }
}
