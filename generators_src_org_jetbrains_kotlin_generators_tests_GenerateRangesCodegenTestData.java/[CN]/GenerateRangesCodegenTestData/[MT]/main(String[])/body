{
  try {
    FileUtil.delete(AS_LITERAL_DIR);
    FileUtil.delete(AS_EXPRESSION_DIR);
    AS_LITERAL_DIR.mkdirs();
    AS_EXPRESSION_DIR.mkdirs();
    for (    File file : SOURCE_TEST_FILES) {
      String sourceContent=FileUtil.loadFile(file);
      Matcher testFunMatcher=TEST_FUN_PATTERN.matcher(sourceContent);
      while (testFunMatcher.find()) {
        String testFunName=testFunMatcher.group(1);
        if (testFunName.equals("emptyConstant")) {
          continue;
        }
        String testFunText=testFunMatcher.group();
        StringBuilder asLiteralBody=new StringBuilder();
        StringBuilder asExpressionBody=new StringBuilder();
        int index=0;
        Matcher matcher=SUBTEST_INVOCATION_PATTERN.matcher(testFunText);
        while (matcher.find()) {
          index++;
          String rangeExpression=matcher.group(1);
          String expectedListElements=matcher.group(2);
          String elementType=detectElementType(rangeExpression);
          asLiteralBody.append(renderTemplate(LITERAL_TEMPLATE,index,elementType,rangeExpression,expectedListElements));
          asExpressionBody.append(renderTemplate(EXPRESSION_TEMPLATE,index,elementType,rangeExpression,expectedListElements));
        }
        String fileName=testFunName + ".kt";
        writeToFile(new File(AS_LITERAL_DIR,fileName),asLiteralBody.toString());
        writeToFile(new File(AS_EXPRESSION_DIR,fileName),asExpressionBody.toString());
      }
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}
