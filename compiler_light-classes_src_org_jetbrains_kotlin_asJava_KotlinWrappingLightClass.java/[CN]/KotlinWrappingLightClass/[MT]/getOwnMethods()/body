{
  return ArraysKt.map(getDelegate().getMethods(),new Function1<PsiMethod,PsiMethod>(){
    @Override public PsiMethod invoke(    PsiMethod method){
      KtDeclaration declaration=ClsWrapperStubPsiFactory.getOriginalDeclaration(method);
      if (declaration instanceof KtPropertyAccessor) {
        declaration=PsiTreeUtil.getParentOfType(declaration,KtProperty.class);
      }
      if (declaration != null) {
        return !isTraitFakeOverride(declaration) ? new KotlinLightMethodForDeclaration(myManager,method,declaration,KotlinWrappingLightClass.this) : new KotlinLightMethodForTraitFakeOverride(myManager,method,declaration,KotlinWrappingLightClass.this);
      }
      return new KotlinNoOriginLightMethod(myManager,method,KotlinWrappingLightClass.this);
    }
  }
);
}
