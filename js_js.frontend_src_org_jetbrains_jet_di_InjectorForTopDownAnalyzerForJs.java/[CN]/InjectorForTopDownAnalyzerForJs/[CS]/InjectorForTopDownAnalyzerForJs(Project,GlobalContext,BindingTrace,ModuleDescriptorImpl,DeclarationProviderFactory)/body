{
  this.project=project;
  this.globalContext=globalContext;
  this.storageManager=globalContext.getStorageManager();
  this.bindingTrace=bindingTrace;
  this.module=module;
  this.platformToKotlinClassMap=module.getPlatformToKotlinClassMap();
  this.declarationProviderFactory=declarationProviderFactory;
  this.resolveSession=new ResolveSession(project,globalContext,module,declarationProviderFactory,bindingTrace);
  this.lazyTopDownAnalyzer=new LazyTopDownAnalyzer();
  this.mutablePackageFragmentProvider=new MutablePackageFragmentProvider(module);
  this.additionalCheckerProvider=org.jetbrains.k2js.resolve.KotlinJsDeclarationCheckerProvider.INSTANCE$;
  this.dynamicTypesAllowed=new DynamicTypesAllowed();
  this.annotationResolver=new AnnotationResolver();
  this.callResolver=new CallResolver();
  this.argumentTypeResolver=new ArgumentTypeResolver();
  this.expressionTypingComponents=new ExpressionTypingComponents();
  this.expressionTypingServices=new ExpressionTypingServices(expressionTypingComponents);
  this.controlStructureTypingUtils=new ControlStructureTypingUtils(expressionTypingServices);
  this.expressionTypingUtils=new ExpressionTypingUtils(expressionTypingServices,callResolver);
  this.forLoopConventionsChecker=new ForLoopConventionsChecker();
  this.reflectionTypes=new ReflectionTypes(module);
  this.callExpressionResolver=new CallExpressionResolver();
  this.descriptorResolver=new DescriptorResolver();
  this.delegatedPropertyResolver=new DelegatedPropertyResolver();
  this.qualifiedExpressionResolver=new QualifiedExpressionResolver();
  this.flexibleTypeCapabilitiesProvider=new FlexibleTypeCapabilitiesProvider();
  this.lazinessToken=new LazinessToken();
  this.typeResolver=new TypeResolver(annotationResolver,qualifiedExpressionResolver,module,flexibleTypeCapabilitiesProvider,storageManager,lazinessToken,dynamicTypesAllowed);
  this.callResolverExtensionProvider=new CallResolverExtensionProvider();
  this.partialBodyResolveProvider=new PartialBodyResolveProvider();
  this.candidateResolver=new CandidateResolver();
  this.callCompleter=new CallCompleter(argumentTypeResolver,candidateResolver);
  this.taskPrioritizer=new TaskPrioritizer(storageManager);
  this.jetImportsFactory=new JetImportsFactory();
  this.scopeProvider=new ScopeProvider(getResolveSession());
  this.additionalFileScopeProvider=new AdditionalFileScopeProvider();
  this.scriptBodyResolver=new ScriptBodyResolver();
  this.bodyResolver=new BodyResolver();
  this.controlFlowAnalyzer=new ControlFlowAnalyzer();
  this.declarationsChecker=new DeclarationsChecker();
  this.modifiersChecker=new ModifiersChecker(bindingTrace,additionalCheckerProvider);
  this.functionAnalyzerExtension=new FunctionAnalyzerExtension();
  this.declarationResolver=new DeclarationResolver();
  this.importsResolver=new ImportsResolver();
  this.overloadResolver=new OverloadResolver();
  this.overrideResolver=new OverrideResolver();
  this.topDownAnalyzer=new TopDownAnalyzer();
  this.typeHierarchyResolver=new TypeHierarchyResolver();
  this.scriptHeaderResolver=new ScriptHeaderResolver();
  this.varianceChecker=new VarianceChecker(bindingTrace);
  this.resolveSession.setAnnotationResolve(annotationResolver);
  this.resolveSession.setDescriptorResolver(descriptorResolver);
  this.resolveSession.setJetImportFactory(jetImportsFactory);
  this.resolveSession.setQualifiedExpressionResolver(qualifiedExpressionResolver);
  this.resolveSession.setScopeProvider(scopeProvider);
  this.resolveSession.setScriptBodyResolver(scriptBodyResolver);
  this.resolveSession.setTypeResolver(typeResolver);
  this.lazyTopDownAnalyzer.setBodyResolver(bodyResolver);
  this.lazyTopDownAnalyzer.setDeclarationResolver(declarationResolver);
  this.lazyTopDownAnalyzer.setKotlinCodeAnalyzer(resolveSession);
  this.lazyTopDownAnalyzer.setModuleDescriptor(module);
  this.lazyTopDownAnalyzer.setOverloadResolver(overloadResolver);
  this.lazyTopDownAnalyzer.setOverrideResolver(overrideResolver);
  this.lazyTopDownAnalyzer.setTopDownAnalyzer(topDownAnalyzer);
  this.lazyTopDownAnalyzer.setTrace(bindingTrace);
  this.lazyTopDownAnalyzer.setVarianceChecker(varianceChecker);
  annotationResolver.setCallResolver(callResolver);
  annotationResolver.setStorageManager(storageManager);
  annotationResolver.setTypeResolver(typeResolver);
  callResolver.setArgumentTypeResolver(argumentTypeResolver);
  callResolver.setCallCompleter(callCompleter);
  callResolver.setCandidateResolver(candidateResolver);
  callResolver.setExpressionTypingServices(expressionTypingServices);
  callResolver.setTaskPrioritizer(taskPrioritizer);
  callResolver.setTypeResolver(typeResolver);
  argumentTypeResolver.setExpressionTypingServices(expressionTypingServices);
  argumentTypeResolver.setTypeResolver(typeResolver);
  expressionTypingServices.setAnnotationResolver(annotationResolver);
  expressionTypingServices.setCallExpressionResolver(callExpressionResolver);
  expressionTypingServices.setCallResolver(callResolver);
  expressionTypingServices.setDescriptorResolver(descriptorResolver);
  expressionTypingServices.setExtensionProvider(callResolverExtensionProvider);
  expressionTypingServices.setPartialBodyResolveProvider(partialBodyResolveProvider);
  expressionTypingServices.setProject(project);
  expressionTypingServices.setTypeResolver(typeResolver);
  expressionTypingComponents.setAdditionalCheckerProvider(additionalCheckerProvider);
  expressionTypingComponents.setCallResolver(callResolver);
  expressionTypingComponents.setControlStructureTypingUtils(controlStructureTypingUtils);
  expressionTypingComponents.setDynamicTypesSettings(dynamicTypesAllowed);
  expressionTypingComponents.setExpressionTypingServices(expressionTypingServices);
  expressionTypingComponents.setExpressionTypingUtils(expressionTypingUtils);
  expressionTypingComponents.setForLoopConventionsChecker(forLoopConventionsChecker);
  expressionTypingComponents.setGlobalContext(globalContext);
  expressionTypingComponents.setPlatformToKotlinClassMap(platformToKotlinClassMap);
  expressionTypingComponents.setReflectionTypes(reflectionTypes);
  forLoopConventionsChecker.setExpressionTypingServices(expressionTypingServices);
  forLoopConventionsChecker.setExpressionTypingUtils(expressionTypingUtils);
  forLoopConventionsChecker.setProject(project);
  callExpressionResolver.setExpressionTypingServices(expressionTypingServices);
  descriptorResolver.setAnnotationResolver(annotationResolver);
  descriptorResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);
  descriptorResolver.setExpressionTypingServices(expressionTypingServices);
  descriptorResolver.setStorageManager(storageManager);
  descriptorResolver.setTypeResolver(typeResolver);
  delegatedPropertyResolver.setCallResolver(callResolver);
  delegatedPropertyResolver.setExpressionTypingServices(expressionTypingServices);
  candidateResolver.setArgumentTypeResolver(argumentTypeResolver);
  jetImportsFactory.setProject(project);
  scopeProvider.setAdditionalFileScopesProvider(additionalFileScopeProvider);
  scriptBodyResolver.setExpressionTypingServices(expressionTypingServices);
  bodyResolver.setAnnotationResolver(annotationResolver);
  bodyResolver.setCallResolver(callResolver);
  bodyResolver.setControlFlowAnalyzer(controlFlowAnalyzer);
  bodyResolver.setDeclarationsChecker(declarationsChecker);
  bodyResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);
  bodyResolver.setExpressionTypingServices(expressionTypingServices);
  bodyResolver.setFunctionAnalyzerExtension(functionAnalyzerExtension);
  bodyResolver.setScriptBodyResolverResolver(scriptBodyResolver);
  bodyResolver.setTrace(bindingTrace);
  controlFlowAnalyzer.setTrace(bindingTrace);
  declarationsChecker.setDescriptorResolver(descriptorResolver);
  declarationsChecker.setModifiersChecker(modifiersChecker);
  declarationsChecker.setTrace(bindingTrace);
  functionAnalyzerExtension.setTrace(bindingTrace);
  declarationResolver.setAnnotationResolver(annotationResolver);
  declarationResolver.setDescriptorResolver(descriptorResolver);
  declarationResolver.setImportsResolver(importsResolver);
  declarationResolver.setTrace(bindingTrace);
  importsResolver.setImportsFactory(jetImportsFactory);
  importsResolver.setModuleDescriptor(module);
  importsResolver.setQualifiedExpressionResolver(qualifiedExpressionResolver);
  importsResolver.setTrace(bindingTrace);
  overloadResolver.setTrace(bindingTrace);
  overrideResolver.setTrace(bindingTrace);
  topDownAnalyzer.setBodyResolver(bodyResolver);
  topDownAnalyzer.setDeclarationResolver(declarationResolver);
  topDownAnalyzer.setModuleDescriptor(module);
  topDownAnalyzer.setOverloadResolver(overloadResolver);
  topDownAnalyzer.setOverrideResolver(overrideResolver);
  topDownAnalyzer.setPackageFragmentProvider(mutablePackageFragmentProvider);
  topDownAnalyzer.setTypeHierarchyResolver(typeHierarchyResolver);
  topDownAnalyzer.setVarianceChecker(varianceChecker);
  typeHierarchyResolver.setDescriptorResolver(descriptorResolver);
  typeHierarchyResolver.setImportsResolver(importsResolver);
  typeHierarchyResolver.setPackageFragmentProvider(mutablePackageFragmentProvider);
  typeHierarchyResolver.setScriptHeaderResolver(scriptHeaderResolver);
  typeHierarchyResolver.setTrace(bindingTrace);
  scriptHeaderResolver.setPackageFragmentProvider(mutablePackageFragmentProvider);
  scriptHeaderResolver.setTrace(bindingTrace);
}
