{
  if (arguments.noInline) {
    configuration.put(CommonConfigurationKeys.DISABLE_INLINE,true);
  }
  CompilerJarLocator locator=services.get(CompilerJarLocator.class);
  if (locator != null) {
    configuration.put(CLIConfigurationKeys.COMPILER_JAR_LOCATOR,locator);
  }
  if (arguments.languageVersion != null) {
    LanguageVersion languageVersion=LanguageVersion.fromVersionString(arguments.languageVersion);
    if (languageVersion != null) {
      configuration.put(CommonConfigurationKeys.LANGUAGE_FEATURE_SETTINGS,new LanguageVersionSettingsImpl(languageVersion));
    }
 else {
      List<String> versionStrings=ArraysKt.map(LanguageVersion.values(),new Function1<LanguageVersion,String>(){
        @Override public String invoke(        LanguageVersion version){
          return version.getVersionString();
        }
      }
);
      String message="Unknown language version: " + arguments.languageVersion + "\n"+ "Supported language versions: "+ StringsKt.join(versionStrings,", ");
      configuration.getNotNull(CLIConfigurationKeys.MESSAGE_COLLECTOR_KEY).report(CompilerMessageSeverity.ERROR,message,CompilerMessageLocation.NO_LOCATION);
    }
  }
}
