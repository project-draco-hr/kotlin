{
  List<AnnotationDescriptor> annotations=Collections.<AnnotationDescriptor>emptyList();
  SimpleFunctionDescriptorImpl values=new SimpleFunctionDescriptorImpl(classObjectDescriptor,annotations,Name.identifier("values"),CallableMemberDescriptor.Kind.DECLARATION);
  ClassReceiver classReceiver=new ClassReceiver(classObjectDescriptor);
  JetType type=DeferredType.create(trace,new LazyValue<JetType>(){
    @Override protected JetType compute(){
      return JetStandardLibrary.getInstance().getArrayType(mutableClassDescriptor.getDefaultType());
    }
  }
);
  values.initialize(null,classReceiver,Collections.<TypeParameterDescriptor>emptyList(),Collections.<ValueParameterDescriptor>emptyList(),type,Modality.FINAL,Visibilities.PUBLIC,false);
  return values;
}
