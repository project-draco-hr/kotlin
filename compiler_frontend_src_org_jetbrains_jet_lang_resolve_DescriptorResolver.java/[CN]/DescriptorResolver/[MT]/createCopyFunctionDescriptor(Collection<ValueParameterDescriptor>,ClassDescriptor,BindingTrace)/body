{
  JetType returnType=classDescriptor.getDefaultType();
  SimpleFunctionDescriptorImpl functionDescriptor=SimpleFunctionDescriptorImpl.create(classDescriptor,Annotations.EMPTY,COPY_METHOD_NAME,CallableMemberDescriptor.Kind.SYNTHESIZED);
  List<ValueParameterDescriptor> parameterDescriptors=Lists.newArrayList();
  for (  ValueParameterDescriptor parameter : constructorParameters) {
    PropertyDescriptor propertyDescriptor=trace.getBindingContext().get(BindingContext.VALUE_PARAMETER_AS_PROPERTY,parameter);
    boolean declaresDefaultValue=propertyDescriptor != null;
    ValueParameterDescriptorImpl parameterDescriptor=new ValueParameterDescriptorImpl(functionDescriptor,null,parameter.getIndex(),parameter.getAnnotations(),parameter.getName(),parameter.getType(),declaresDefaultValue,parameter.getVarargElementType());
    parameterDescriptors.add(parameterDescriptor);
    if (declaresDefaultValue) {
      trace.record(BindingContext.VALUE_PARAMETER_AS_PROPERTY,parameterDescriptor,propertyDescriptor);
    }
  }
  functionDescriptor.initialize(null,classDescriptor.getThisAsReceiverParameter(),Collections.<TypeParameterDescriptor>emptyList(),parameterDescriptors,returnType,Modality.FINAL,classDescriptor.getVisibility());
  trace.record(BindingContext.DATA_CLASS_COPY_FUNCTION,classDescriptor,functionDescriptor);
  return functionDescriptor;
}
