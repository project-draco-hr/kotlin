{
  JetTypeReference propertyTypeRef=property.getPropertyTypeRef();
  if (propertyTypeRef == null) {
    final JetExpression initializer=property.getInitializer();
    if (initializer == null) {
      PsiElement nameIdentifier=property.getNameIdentifier();
      if (nameIdentifier != null) {
        trace.report(PROPERTY_WITH_NO_TYPE_NO_INITIALIZER.on(nameIdentifier));
      }
      return ErrorUtils.createErrorType("No type, no body");
    }
 else {
      LazyValue<JetType> lazyValue=new LazyValueWithDefault<JetType>(ErrorUtils.createErrorType("Recursive dependency")){
        @Override protected JetType compute(){
          return semanticServices.getTypeInferrerServices(trace).safeGetType(scope,initializer,TypeUtils.NO_EXPECTED_TYPE,dataFlowInfo);
        }
      }
;
      if (allowDeferred) {
        return DeferredType.create(trace,lazyValue);
      }
 else {
        return lazyValue.get();
      }
    }
  }
 else {
    return typeResolver.resolveType(scope,propertyTypeRef);
  }
}
