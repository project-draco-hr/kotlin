{
  ClassDescriptor thisClass=getContainingClass(scope);
  if (thisClass == null)   return true;
  if (!isAncestor(target,thisClass,true))   return true;
  if (!hasOuterClassInstance(thisClass,target)) {
    trace.report(INACCESSIBLE_OUTER_CLASS_EXPRESSION.on(reportErrorsOn,thisClass));
    return false;
  }
  return true;
}
