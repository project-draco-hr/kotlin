{
  JetModifierList modifierList=property.getModifierList();
  boolean isVar=property.isVar();
  boolean hasBody=hasBody(property);
  Modality modality=containingDeclaration instanceof ClassDescriptor ? ModifiersChecker.resolveModalityFromModifiers(property,getDefaultModality(containingDeclaration,hasBody)) : Modality.FINAL;
  Visibility visibility=ModifiersChecker.resolveVisibilityFromModifiers(property,getDefaultVisibility(property,containingDeclaration));
  PropertyDescriptor propertyDescriptor=new PropertyDescriptor(containingDeclaration,annotationResolver.resolveAnnotations(scope,modifierList,trace),modality,visibility,isVar,JetPsiUtil.safeName(property.getName()),CallableMemberDescriptor.Kind.DECLARATION);
  List<TypeParameterDescriptorImpl> typeParameterDescriptors;
  JetScope scopeWithTypeParameters;
  JetType receiverType=null;
{
    List<JetTypeParameter> typeParameters=property.getTypeParameters();
    if (typeParameters.isEmpty()) {
      scopeWithTypeParameters=scope;
      typeParameterDescriptors=Collections.emptyList();
    }
 else {
      WritableScope writableScope=new WritableScopeImpl(scope,containingDeclaration,new TraceBasedRedeclarationHandler(trace),"Scope with type parameters of a property");
      typeParameterDescriptors=resolveTypeParameters(containingDeclaration,writableScope,typeParameters,trace);
      writableScope.changeLockLevel(WritableScope.LockLevel.READING);
      resolveGenericBounds(property,writableScope,typeParameterDescriptors,trace);
      scopeWithTypeParameters=writableScope;
    }
    JetTypeReference receiverTypeRef=property.getReceiverTypeRef();
    if (receiverTypeRef != null) {
      receiverType=typeResolver.resolveType(scopeWithTypeParameters,receiverTypeRef,trace,true);
    }
  }
  ReceiverParameterDescriptor receiverDescriptor=resolveReceiverParameterFor(propertyDescriptor,receiverType);
  JetScope propertyScope=getPropertyDeclarationInnerScope(scope,typeParameterDescriptors,NO_RECEIVER_PARAMETER,trace);
  JetType type=getVariableType(propertyScope,property,DataFlowInfo.EMPTY,true,trace);
  propertyDescriptor.setType(type,typeParameterDescriptors,getExpectedThisObjectIfNeeded(containingDeclaration),receiverDescriptor);
  PropertyGetterDescriptor getter=resolvePropertyGetterDescriptor(scopeWithTypeParameters,property,propertyDescriptor,trace);
  PropertySetterDescriptor setter=resolvePropertySetterDescriptor(scopeWithTypeParameters,property,propertyDescriptor,trace);
  propertyDescriptor.initialize(getter,setter);
  trace.record(BindingContext.VARIABLE,property,propertyDescriptor);
  return propertyDescriptor;
}
