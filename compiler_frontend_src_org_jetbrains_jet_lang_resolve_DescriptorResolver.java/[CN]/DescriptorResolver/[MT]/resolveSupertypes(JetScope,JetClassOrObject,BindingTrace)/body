{
  List<JetType> result=Lists.newArrayList();
  List<JetDelegationSpecifier> delegationSpecifiers=jetClass.getDelegationSpecifiers();
  boolean isEnum=jetClass instanceof JetClass && ((JetClass)jetClass).hasModifier(JetTokens.ENUM_KEYWORD);
  if (delegationSpecifiers.isEmpty()) {
    if (!isEnum) {
      result.add(getDefaultSupertype(jetClass,trace));
    }
  }
 else {
    Collection<JetType> supertypes=resolveDelegationSpecifiers(scope,delegationSpecifiers,typeResolver,trace,false);
    for (    JetType supertype : supertypes) {
      result.add(supertype);
    }
  }
  if (isEnum) {
    boolean hasSuper=false;
    for (    JetType type : result) {
      ClassifierDescriptor descriptor=type.getConstructor().getDeclarationDescriptor();
      if (descriptor instanceof ClassDescriptor && ((ClassDescriptor)descriptor).getKind() != ClassKind.TRAIT) {
        hasSuper=true;
      }
    }
    if (!hasSuper) {
      ClassDescriptor classDescriptor=trace.getBindingContext().get(CLASS,jetClass);
      result.add(0,JetStandardLibrary.getInstance().getEnumType(classDescriptor.getDefaultType()));
    }
  }
  return result;
}
