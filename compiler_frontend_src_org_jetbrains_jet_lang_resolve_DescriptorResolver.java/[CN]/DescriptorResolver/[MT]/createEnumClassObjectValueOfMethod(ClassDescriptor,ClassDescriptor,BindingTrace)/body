{
  List<AnnotationDescriptor> annotations=Collections.<AnnotationDescriptor>emptyList();
  SimpleFunctionDescriptorImpl values=new SimpleFunctionDescriptorImpl(classObjectDescriptor,annotations,Name.identifier("valueOf"),CallableMemberDescriptor.Kind.DECLARATION);
  ClassReceiver classReceiver=new ClassReceiver(classObjectDescriptor);
  JetType type=DeferredType.create(trace,new LazyValue<JetType>(){
    @Override protected JetType compute(){
      return mutableClassDescriptor.getDefaultType();
    }
  }
);
  ValueParameterDescriptorImpl parameterDescriptor=new ValueParameterDescriptorImpl(values,0,Collections.<AnnotationDescriptor>emptyList(),Name.identifier("value"),false,JetStandardLibrary.getInstance().getStringType(),false,null);
  values.initialize(null,classReceiver,Collections.<TypeParameterDescriptor>emptyList(),Arrays.<ValueParameterDescriptor>asList(parameterDescriptor),type,Modality.FINAL,Visibilities.PUBLIC,false);
  return values;
}
