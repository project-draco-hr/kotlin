{
  JetType type=resolveParameterType(scope,parameter,trace);
  Name name=parameter.getNameAsSafeName();
  boolean isMutable=parameter.isMutable();
  JetModifierList modifierList=parameter.getModifierList();
  if (modifierList != null) {
    ASTNode abstractNode=modifierList.getModifierNode(JetTokens.ABSTRACT_KEYWORD);
    if (abstractNode != null) {
      trace.report(ABSTRACT_PROPERTY_IN_PRIMARY_CONSTRUCTOR_PARAMETERS.on(parameter));
    }
  }
  PropertyDescriptor propertyDescriptor=new PropertyDescriptor(classDescriptor,valueParameter.getAnnotations(),ModifiersChecker.resolveModalityFromModifiers(parameter,Modality.FINAL),ModifiersChecker.resolveVisibilityFromModifiers(parameter),isMutable,name,CallableMemberDescriptor.Kind.DECLARATION);
  propertyDescriptor.setType(type,Collections.<TypeParameterDescriptor>emptyList(),getExpectedThisObjectIfNeeded(classDescriptor),ReceiverDescriptor.NO_RECEIVER);
  PropertyGetterDescriptor getter=createDefaultGetter(propertyDescriptor);
  PropertySetterDescriptor setter=propertyDescriptor.isVar() ? createDefaultSetter(propertyDescriptor) : null;
  propertyDescriptor.initialize(getter,setter);
  getter.initialize(propertyDescriptor.getType());
  trace.record(BindingContext.PRIMARY_CONSTRUCTOR_PARAMETER,parameter,propertyDescriptor);
  return propertyDescriptor;
}
