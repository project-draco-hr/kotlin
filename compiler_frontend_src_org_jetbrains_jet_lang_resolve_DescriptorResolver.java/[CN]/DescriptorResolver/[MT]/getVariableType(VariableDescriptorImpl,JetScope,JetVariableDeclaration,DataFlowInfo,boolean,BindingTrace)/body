{
  JetTypeReference propertyTypeRef=variable.getTypeRef();
  boolean hasDelegate=variable instanceof JetProperty && ((JetProperty)variable).getDelegateExpression() != null;
  if (propertyTypeRef == null) {
    final JetExpression initializer=variable.getInitializer();
    if (initializer == null) {
      if (hasDelegate && variableDescriptor instanceof PropertyDescriptor) {
        final JetProperty property=(JetProperty)variable;
        final JetExpression propertyDelegateExpression=property.getDelegateExpression();
        if (propertyDelegateExpression != null) {
          return DeferredType.createRecursionIntolerant(storageManager,trace,new Function0<JetType>(){
            @Override public JetType invoke(){
              return resolveDelegatedPropertyType(property,(PropertyDescriptor)variableDescriptor,scope,propertyDelegateExpression,dataFlowInfo,trace);
            }
          }
);
        }
      }
      if (!notLocal) {
        trace.report(VARIABLE_WITH_NO_TYPE_NO_INITIALIZER.on(variable));
      }
      return ErrorUtils.createErrorType("No type, no body");
    }
 else {
      if (notLocal) {
        return DeferredType.createRecursionIntolerant(storageManager,trace,new Function0<JetType>(){
          @Override public JetType invoke(){
            JetType initializerType=resolveInitializerType(scope,initializer,dataFlowInfo,trace);
            setConstantForVariable(variableDescriptor,initializer,initializerType,trace);
            return transformAnonymousTypeIfNeeded(variableDescriptor,variable,initializerType,trace);
          }
        }
);
      }
 else {
        JetType initializerType=resolveInitializerType(scope,initializer,dataFlowInfo,trace);
        setConstantForVariable(variableDescriptor,initializer,initializerType,trace);
        return initializerType;
      }
    }
  }
 else {
    JetType type=typeResolver.resolveType(scope,propertyTypeRef,trace,true);
    JetExpression initializer=variable.getInitializer();
    if (initializer != null) {
      setConstantForVariable(variableDescriptor,initializer,type,trace);
    }
    return type;
  }
}
