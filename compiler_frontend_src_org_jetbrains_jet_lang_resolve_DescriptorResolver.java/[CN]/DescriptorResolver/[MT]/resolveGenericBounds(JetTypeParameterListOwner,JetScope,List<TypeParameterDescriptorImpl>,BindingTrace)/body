{
  List<UpperBoundCheckerTask> deferredUpperBoundCheckerTasks=Lists.newArrayList();
  List<JetTypeParameter> typeParameters=declaration.getTypeParameters();
  Map<Name,TypeParameterDescriptorImpl> parameterByName=Maps.newHashMap();
  for (int i=0; i < typeParameters.size(); i++) {
    JetTypeParameter jetTypeParameter=typeParameters.get(i);
    TypeParameterDescriptorImpl typeParameterDescriptor=parameters.get(i);
    parameterByName.put(typeParameterDescriptor.getName(),typeParameterDescriptor);
    JetTypeReference extendsBound=jetTypeParameter.getExtendsBound();
    if (extendsBound != null) {
      JetType type=typeResolver.resolveType(scope,extendsBound,trace,false);
      typeParameterDescriptor.addUpperBound(type);
      deferredUpperBoundCheckerTasks.add(new UpperBoundCheckerTask(extendsBound,type,false));
    }
  }
  for (  JetTypeConstraint constraint : declaration.getTypeConstraints()) {
    JetSimpleNameExpression subjectTypeParameterName=constraint.getSubjectTypeParameterName();
    if (subjectTypeParameterName == null) {
      continue;
    }
    Name referencedName=subjectTypeParameterName.getReferencedNameAsName();
    if (referencedName == null) {
      continue;
    }
    TypeParameterDescriptorImpl typeParameterDescriptor=parameterByName.get(referencedName);
    JetTypeReference boundTypeReference=constraint.getBoundTypeReference();
    JetType bound=null;
    if (boundTypeReference != null) {
      bound=typeResolver.resolveType(scope,boundTypeReference,trace,false);
      deferredUpperBoundCheckerTasks.add(new UpperBoundCheckerTask(boundTypeReference,bound,constraint.isClassObjectContraint()));
    }
    if (typeParameterDescriptor == null) {
      ClassifierDescriptor classifier=scope.getClassifier(referencedName);
      if (classifier != null) {
        trace.report(NAME_IN_CONSTRAINT_IS_NOT_A_TYPE_PARAMETER.on(subjectTypeParameterName,constraint,declaration));
        trace.record(BindingContext.REFERENCE_TARGET,subjectTypeParameterName,classifier);
      }
 else {
        trace.report(UNRESOLVED_REFERENCE.on(subjectTypeParameterName));
      }
    }
 else {
      trace.record(BindingContext.REFERENCE_TARGET,subjectTypeParameterName,typeParameterDescriptor);
      if (bound != null) {
        if (constraint.isClassObjectContraint()) {
          typeParameterDescriptor.addClassObjectBound(bound);
        }
 else {
          typeParameterDescriptor.addUpperBound(bound);
        }
      }
    }
  }
  for (  TypeParameterDescriptorImpl parameter : parameters) {
    parameter.addDefaultUpperBound();
    parameter.setInitialized();
    if (JetStandardClasses.isNothing(parameter.getUpperBoundsAsType())) {
      PsiElement nameIdentifier=typeParameters.get(parameter.getIndex()).getNameIdentifier();
      if (nameIdentifier != null) {
        trace.report(CONFLICTING_UPPER_BOUNDS.on(nameIdentifier,parameter));
      }
    }
    JetType classObjectType=parameter.getClassObjectType();
    if (classObjectType != null && JetStandardClasses.isNothing(classObjectType)) {
      PsiElement nameIdentifier=typeParameters.get(parameter.getIndex()).getNameIdentifier();
      if (nameIdentifier != null) {
        trace.report(CONFLICTING_CLASS_OBJECT_UPPER_BOUNDS.on(nameIdentifier,parameter));
      }
    }
  }
  for (  UpperBoundCheckerTask checkerTask : deferredUpperBoundCheckerTasks) {
    checkUpperBoundType(checkerTask.upperBound,checkerTask.upperBoundType,checkerTask.isClassObjectConstraint,trace);
  }
}
