{
  JetTypeReference propertyTypeRef=variable.getTypeRef();
  boolean hasDelegate=variable instanceof JetProperty && ((JetProperty)variable).getDelegateExpression() != null;
  if (propertyTypeRef == null) {
    final JetExpression initializer=variable.getInitializer();
    if (initializer == null) {
      if (hasDelegate && variableDescriptor instanceof PropertyDescriptor) {
        final JetExpression propertyDelegateExpression=((JetProperty)variable).getDelegateExpression();
        if (propertyDelegateExpression != null) {
          return DeferredType.create(trace,new NotNullLazyValueWithDefault<JetType>(ErrorUtils.createErrorType("Recursive dependency")){
            @NotNull @Override protected JetType doCompute(){
              return resolveDelegatedPropertyType((PropertyDescriptor)variableDescriptor,scope,propertyDelegateExpression,dataFlowInfo,trace);
            }
          }
);
        }
      }
      if (!notLocal) {
        trace.report(VARIABLE_WITH_NO_TYPE_NO_INITIALIZER.on(variable));
      }
      return ErrorUtils.createErrorType("No type, no body");
    }
 else {
      if (notLocal) {
        return DeferredType.create(trace,new NotNullLazyValueWithDefault<JetType>(ErrorUtils.createErrorType("Recursive dependency")){
          @Override protected JetType doCompute(){
            JetType type=resolveInitializerType(scope,initializer,dataFlowInfo,trace);
            return transformAnonymousTypeIfNeeded(variableDescriptor,variable,type,trace);
          }
        }
);
      }
 else {
        return resolveInitializerType(scope,initializer,dataFlowInfo,trace);
      }
    }
  }
 else {
    return typeResolver.resolveType(scope,propertyTypeRef,trace,true);
  }
}
