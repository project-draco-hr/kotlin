{
  ConstructorDescriptorImpl constructorDescriptor=new ConstructorDescriptorImpl(classDescriptor,annotationResolver.resolveAnnotationsWithoutArguments(scope,modifierList,trace),isPrimary);
  trace.record(BindingContext.CONSTRUCTOR,declarationToTrace,constructorDescriptor);
  WritableScopeImpl parameterScope=new WritableScopeImpl(scope,constructorDescriptor,new TraceBasedRedeclarationHandler(trace),"Scope with value parameters of a constructor");
  parameterScope.changeLockLevel(WritableScope.LockLevel.BOTH);
  ConstructorDescriptorImpl constructor=constructorDescriptor.initialize(typeParameters,resolveValueParameters(constructorDescriptor,parameterScope,valueParameters,trace),resolveVisibilityFromModifiers(modifierList,getDefaultConstructorVisibility(classDescriptor)),DescriptorUtils.isConstructorOfStaticNestedClass(constructorDescriptor));
  if (isAnnotationClass(classDescriptor)) {
    AnnotationUtils.checkConstructorParametersType(valueParameters,trace);
  }
  return constructor;
}
