{
  final SimpleFunctionDescriptorImpl functionDescriptor=new SimpleFunctionDescriptorImpl(containingDescriptor,annotationResolver.resolveAnnotations(scope,function.getModifierList(),trace),JetPsiUtil.safeName(function.getName()),CallableMemberDescriptor.Kind.DECLARATION);
  WritableScope innerScope=new WritableScopeImpl(scope,functionDescriptor,new TraceBasedRedeclarationHandler(trace)).setDebugName("Function descriptor header scope");
  innerScope.addLabeledDeclaration(functionDescriptor);
  List<TypeParameterDescriptorImpl> typeParameterDescriptors=resolveTypeParameters(functionDescriptor,innerScope,function.getTypeParameters(),trace);
  innerScope.changeLockLevel(WritableScope.LockLevel.BOTH);
  resolveGenericBounds(function,innerScope,typeParameterDescriptors,trace);
  JetType receiverType=null;
  JetTypeReference receiverTypeRef=function.getReceiverTypeRef();
  if (receiverTypeRef != null) {
    JetScope scopeForReceiver=function.hasTypeParameterListBeforeFunctionName() ? innerScope : scope;
    receiverType=typeResolver.resolveType(scopeForReceiver,receiverTypeRef,trace,true);
  }
  List<ValueParameterDescriptor> valueParameterDescriptors=resolveValueParameters(functionDescriptor,innerScope,function.getValueParameters(),trace);
  innerScope.changeLockLevel(WritableScope.LockLevel.READING);
  JetTypeReference returnTypeRef=function.getReturnTypeRef();
  JetType returnType;
  if (returnTypeRef != null) {
    returnType=typeResolver.resolveType(innerScope,returnTypeRef,trace,true);
  }
 else   if (function.hasBlockBody()) {
    returnType=JetStandardClasses.getUnitType();
  }
 else {
    final JetExpression bodyExpression=function.getBodyExpression();
    if (bodyExpression != null) {
      returnType=DeferredType.create(trace,new LazyValueWithDefault<JetType>(ErrorUtils.createErrorType("Recursive dependency")){
        @Override protected JetType compute(){
          return expressionTypingServices.inferFunctionReturnType(scope,function,functionDescriptor,trace);
        }
      }
);
    }
 else {
      returnType=ErrorUtils.createErrorType("No type, no body");
    }
  }
  boolean hasBody=function.getBodyExpression() != null;
  Modality modality=resolveModalityFromModifiers(function.getModifierList(),getDefaultModality(containingDescriptor,hasBody));
  Visibility visibility=resolveVisibilityFromModifiers(function.getModifierList());
  JetModifierList modifierList=function.getModifierList();
  boolean isInline=(modifierList != null) && modifierList.hasModifier(JetTokens.INLINE_KEYWORD);
  functionDescriptor.initialize(receiverType,DescriptorUtils.getExpectedThisObjectIfNeeded(containingDescriptor),typeParameterDescriptors,valueParameterDescriptors,returnType,modality,visibility,isInline);
  BindingContextUtils.recordFunctionDeclarationToDescriptor(trace,function,functionDescriptor);
  return functionDescriptor;
}
