{
  return ApplicationManager.getApplication().runReadAction(new Computable<Boolean>(){
    @Override public Boolean compute(){
      KotlinCallableFindUsagesOptions kotlinOptions=(KotlinCallableFindUsagesOptions)options;
      @SuppressWarnings("unchecked") UsagesSearchRequest request=getSearchHelper(kotlinOptions).newRequest(FindUsagesPackage.<T>toSearchTarget(options,(T)element,true));
      for (      PsiReference ref : UsagesSearch.INSTANCE$.search(request)) {
        processUsage(processor,ref);
      }
      if (kotlinOptions.getSearchOverrides()) {
        DeclarationsSearchPackage.searchOverriders(new HierarchySearchRequest<PsiElement>(element,options.searchScope,true)).forEach(new PsiElementProcessorAdapter<PsiMethod>(new PsiElementProcessor<PsiMethod>(){
          @Override public boolean execute(          @NotNull PsiMethod method){
            return processUsage(processor,method.getNavigationElement());
          }
        }
));
      }
      return true;
    }
  }
);
}
