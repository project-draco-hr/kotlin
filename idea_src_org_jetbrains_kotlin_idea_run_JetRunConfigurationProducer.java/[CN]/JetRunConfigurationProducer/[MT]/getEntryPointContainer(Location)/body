{
  if (DumbService.getInstance(location.getProject()).isDumb())   return null;
  Module module=location.getModule();
  if (module == null)   return null;
  if (ProjectStructureUtil.isJsKotlinModule(module))   return null;
  PsiElement locationElement=location.getPsiElement();
  PsiFile psiFile=locationElement.getContainingFile();
  if (!(psiFile instanceof JetFile && ProjectRootsUtil.isInProjectOrLibSource(psiFile)))   return null;
  JetFile jetFile=(JetFile)psiFile;
  final ResolutionFacade resolutionFacade=ResolvePackage.getResolutionFacade(jetFile);
  MainFunctionDetector mainFunctionDetector=new MainFunctionDetector(new NotNullFunction<JetNamedFunction,FunctionDescriptor>(){
    @NotNull @Override public FunctionDescriptor fun(    JetNamedFunction function){
      return (FunctionDescriptor)resolutionFacade.resolveToDescriptor(function);
    }
  }
);
  for (JetDeclarationContainer currentElement=PsiTreeUtil.getNonStrictParentOfType(locationElement,JetClassOrObject.class,JetFile.class); currentElement != null; currentElement=PsiTreeUtil.getParentOfType((PsiElement)currentElement,JetClassOrObject.class,JetFile.class)) {
    JetDeclarationContainer entryPointContainer=currentElement;
    if (entryPointContainer instanceof JetClass) {
      entryPointContainer=((JetClass)currentElement).getClassObject();
    }
    if (entryPointContainer != null && mainFunctionDetector.hasMain(entryPointContainer.getDeclarations()))     return entryPointContainer;
  }
  return null;
}
