{
  GenerationState state=generateClassesInFileGetState();
  GeneratedClassLoader loader=createClassLoader(state.getFactory());
  String r;
  try {
    if (myFile.getPsiFile().isScript()) {
      Class<?> scriptClass=loader.loadClass("Script");
      Constructor constructor=getConstructor(scriptClass,state.getScriptConstructorMethod());
      Object scriptInstance=constructor.newInstance(myFile.getScriptParameterValues().toArray());
      assertFalse("expecting at least one expectation",myFile.getExpectedValues().isEmpty());
      for (      Pair<String,String> nameValue : myFile.getExpectedValues()) {
        String fieldName=nameValue.first;
        String expectedValue=nameValue.second;
        if (expectedValue.equals("<nofield>")) {
          try {
            scriptClass.getDeclaredField(fieldName);
            fail("must have no field " + fieldName);
          }
 catch (          NoSuchFieldException e) {
            continue;
          }
        }
        Field field=scriptClass.getDeclaredField(fieldName);
        field.setAccessible(true);
        Object result=field.get(scriptInstance);
        String resultString=result != null ? result.toString() : "null";
        assertEquals("comparing field " + fieldName,expectedValue,resultString);
      }
    }
 else {
      String fqName=NamespaceCodegen.getJVMClassNameForKotlinNs(JetPsiUtil.getFQName(myFile.getPsiFile())).getFqName().getFqName();
      Class<?> namespaceClass=loader.loadClass(fqName);
      Method method=namespaceClass.getMethod("box");
      r=(String)method.invoke(null);
      assertEquals("OK",r);
    }
  }
 catch (  NoClassDefFoundError e) {
    System.out.println(generateToText());
    throw e;
  }
catch (  Throwable e) {
    System.out.println(generateToText());
    throw new RuntimeException(e);
  }
 finally {
    loader.dispose();
  }
}
