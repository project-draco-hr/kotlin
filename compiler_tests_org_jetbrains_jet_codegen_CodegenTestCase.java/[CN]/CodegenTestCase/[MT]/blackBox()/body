{
  GenerationState state=generateClassesInFileGetState();
  GeneratedClassLoader loader=createClassLoader(state.getFactory());
  String r;
  try {
    if (myFile.getPsiFile().isScript()) {
      Class<?> scriptClass=loader.loadClass("Script");
      Constructor constructor=getConstructor(scriptClass,state.getScriptConstructorMethod());
      Object scriptInstance=constructor.newInstance(myFile.getScriptParameterValues().toArray());
      Field field=scriptClass.getDeclaredField("rv");
      field.setAccessible(true);
      Object result=field.get(scriptInstance);
      r=result != null ? result.toString() : "null";
    }
 else {
      String fqName=NamespaceCodegen.getJVMClassNameForKotlinNs(JetPsiUtil.getFQName(myFile.getPsiFile())).getFqName().getFqName();
      Class<?> namespaceClass=loader.loadClass(fqName);
      Method method=namespaceClass.getMethod("box");
      r=(String)method.invoke(null);
    }
  }
 catch (  NoClassDefFoundError e) {
    System.out.println(generateToText());
    throw e;
  }
catch (  Throwable e) {
    System.out.println(generateToText());
    throw new RuntimeException(e);
  }
 finally {
    loader.dispose();
  }
  if (!Objects.equal(myFile.getExpectedValue(),r)) {
    System.out.println(generateToText());
  }
  assertEquals(myFile.getExpectedValue(),r);
}
