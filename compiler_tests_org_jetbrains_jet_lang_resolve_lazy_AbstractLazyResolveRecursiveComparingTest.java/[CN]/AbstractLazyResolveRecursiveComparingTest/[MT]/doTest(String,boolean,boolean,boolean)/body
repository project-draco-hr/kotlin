{
  List<JetFile> files=JetTestUtils.createTestFiles(testFileName,FileUtil.loadFile(new File(testFileName),true),new JetTestUtils.TestFileFactoryNoModules<JetFile>(){
    @NotNull @Override public JetFile create(    @NotNull String fileName,    @NotNull String text,    @NotNull Map<String,String> directives){
      return JetPsiFactory(getProject()).createFile(fileName,text);
    }
  }
);
  ModuleDescriptor eagerModule=LazyResolveTestUtil.resolveEagerly(files,getEnvironment());
  ModuleDescriptor lazyModule=LazyResolveTestUtil.resolveLazily(files,getEnvironment());
  FqName test=new FqName("test");
  PackageViewDescriptor actual=lazyModule.getPackage(test);
  Assert.assertNotNull("Package for name " + test + " is null after lazy resolve",actual);
  PackageViewDescriptor expected=eagerModule.getPackage(test);
  Assert.assertNotNull("Package for name " + test + " is null after eager resolve",expected);
  File serializeResultsTo=new File(FileUtil.getNameWithoutExtension(testFileName) + ".txt");
  RecursiveDescriptorComparator.validateAndCompareDescriptors(expected,actual,RecursiveDescriptorComparator.DONT_INCLUDE_METHODS_OF_OBJECT.filterRecursion(RecursiveDescriptorComparator.SKIP_BUILT_INS_PACKAGES).checkPrimaryConstructors(checkPrimaryConstructors).checkPropertyAccessors(checkPropertyAccessors).withValidationStrategy(allowErrorTypes ? errorTypesAllowed() : errorTypesForbidden()),serializeResultsTo);
}
