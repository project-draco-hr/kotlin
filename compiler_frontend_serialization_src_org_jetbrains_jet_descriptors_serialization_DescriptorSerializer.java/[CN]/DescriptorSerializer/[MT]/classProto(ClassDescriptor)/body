{
  ProtoBuf.Class.Builder builder=ProtoBuf.Class.newBuilder();
  int flags=Flags.getClassFlags(hasAnnotations(classDescriptor),classDescriptor.getVisibility(),classDescriptor.getModality(),classDescriptor.getKind(),classDescriptor.isInner());
  builder.setFlags(flags);
  builder.setFqName(getClassId(classDescriptor));
  DescriptorSerializer local=createChildSerializer();
  for (  TypeParameterDescriptor typeParameterDescriptor : classDescriptor.getTypeConstructor().getParameters()) {
    builder.addTypeParameter(local.typeParameter(typeParameterDescriptor));
  }
  if (extension.hasSupertypes(classDescriptor)) {
    for (    JetType supertype : classDescriptor.getTypeConstructor().getSupertypes()) {
      builder.addSupertype(local.type(supertype));
    }
  }
  ConstructorDescriptor primaryConstructor=classDescriptor.getUnsubstitutedPrimaryConstructor();
  if (primaryConstructor != null) {
    if (DescriptorFactory.isDefaultPrimaryConstructor(primaryConstructor)) {
      builder.setPrimaryConstructor(ProtoBuf.Class.PrimaryConstructor.getDefaultInstance());
    }
 else {
      ProtoBuf.Class.PrimaryConstructor.Builder constructorBuilder=ProtoBuf.Class.PrimaryConstructor.newBuilder();
      constructorBuilder.setData(local.callableProto(primaryConstructor));
      builder.setPrimaryConstructor(constructorBuilder);
    }
  }
  for (  DeclarationDescriptor descriptor : sort(classDescriptor.getDefaultType().getMemberScope().getAllDescriptors())) {
    if (descriptor instanceof CallableMemberDescriptor) {
      CallableMemberDescriptor member=(CallableMemberDescriptor)descriptor;
      if (member.getKind() == CallableMemberDescriptor.Kind.FAKE_OVERRIDE)       continue;
      builder.addMember(local.callableProto(member));
    }
  }
  Collection<DeclarationDescriptor> nestedClasses=classDescriptor.getUnsubstitutedInnerClassesScope().getAllDescriptors();
  for (  DeclarationDescriptor descriptor : sort(nestedClasses)) {
    ClassDescriptor nestedClass=(ClassDescriptor)descriptor;
    int nameIndex=nameTable.getSimpleNameIndex(nestedClass.getName());
    builder.addNestedClassName(nameIndex);
  }
  for (  ClassDescriptor descriptor : sort(classDescriptor.getUnsubstitutedInnerClassesScope().getObjectDescriptors())) {
    int nameIndex=nameTable.getSimpleNameIndex(descriptor.getName());
    builder.addNestedObjectName(nameIndex);
  }
  if (classDescriptor.getClassObjectDescriptor() != null) {
    builder.setClassObjectPresent(true);
  }
  if (classDescriptor.getKind() == ClassKind.ENUM_CLASS) {
    for (    ClassDescriptor descriptor : getEnumEntriesScope(classDescriptor).getObjectDescriptors()) {
      if (descriptor.getKind() == ClassKind.ENUM_ENTRY) {
        builder.addEnumEntry(nameTable.getSimpleNameIndex(descriptor.getName()));
      }
    }
  }
  return builder;
}
