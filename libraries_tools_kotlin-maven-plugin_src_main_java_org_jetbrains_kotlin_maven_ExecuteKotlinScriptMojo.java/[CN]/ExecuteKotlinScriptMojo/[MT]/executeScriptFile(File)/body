{
  initCompiler();
  Disposable rootDisposable=Disposer.newDisposable();
  try {
    MavenPluginLogMessageCollector messageCollector=new MavenPluginLogMessageCollector(getLog());
    CompilerConfiguration configuration=new CompilerConfiguration();
    configuration.put(CLIConfigurationKeys.MESSAGE_COLLECTOR_KEY,messageCollector);
    List<File> deps=new ArrayList<File>();
    deps.addAll(PathUtil.getJdkClassesRoots());
    deps.addAll(getDependenciesForScript());
    for (    File item : deps) {
      if (item.exists()) {
        configuration.add(CommonConfigurationKeys.CONTENT_ROOTS,new JvmClasspathRoot(item));
        getLog().debug("Adding to classpath: " + item.getAbsolutePath());
      }
 else {
        getLog().debug("Skipping non-existing dependency: " + item.getAbsolutePath());
      }
    }
    configuration.add(CommonConfigurationKeys.CONTENT_ROOTS,new KotlinSourceRoot(scriptFile.getAbsolutePath()));
    configuration.put(JVMConfigurationKeys.MODULE_NAME,JvmAbi.DEFAULT_MODULE_NAME);
    configuration.add(CommonConfigurationKeys.SCRIPT_DEFINITIONS_KEY,StandardScriptDefinition.INSTANCE);
    KotlinCoreEnvironment environment=KotlinCoreEnvironment.createForProduction(rootDisposable,configuration,EnvironmentConfigFiles.JVM_CONFIG_FILES);
    GenerationState state=KotlinToJVMBytecodeCompiler.INSTANCE.analyzeAndGenerate(environment);
    if (state == null) {
      throw new ScriptExecutionException(scriptFile,"compile error");
    }
    GeneratedClassLoader classLoader=new GeneratedClassLoader(state.getFactory(),getClass().getClassLoader());
    KtScript script=environment.getSourceFiles().get(0).getScript();
    FqName nameForScript=script.getFqName();
    try {
      Class<?> klass=classLoader.loadClass(nameForScript.asString());
      Constructor<?> constructor=klass.getConstructor(String[].class);
      ExecuteKotlinScriptMojo.INSTANCE=this;
      constructor.newInstance(new Object[]{new String[]{}});
    }
 catch (    InstantiationException e) {
      throw new ScriptExecutionException(scriptFile,"internal error",e);
    }
catch (    InvocationTargetException e) {
      throw new ScriptExecutionException(scriptFile,"script threw an exception",e.getCause());
    }
catch (    NoSuchMethodException e) {
      throw new ScriptExecutionException(scriptFile,"internal error",e);
    }
catch (    IllegalAccessException e) {
      throw new ScriptExecutionException(scriptFile,"internal error",e);
    }
catch (    ClassNotFoundException e) {
      throw new ScriptExecutionException(scriptFile,"internal error",e);
    }
  }
  finally {
    rootDisposable.dispose();
    ExecuteKotlinScriptMojo.INSTANCE=null;
  }
}
