{
  final JetCallableDefinitionUsage<?> functionInfoForParameters=new JetCallableDefinitionUsage<PsiElement>(function,functionDescriptor,null,null);
  List<JetParameter> oldParameters=PsiUtilPackage.getValueParameters(function);
  ParameterInfo[] parameters=changeInfo.getNewParameters();
  for (int i=0; i < parameters.length; i++) {
    final int paramIndex=i;
    ParameterInfo parameterInfo=parameters[paramIndex];
    if (parameterInfo.getOldIndex() >= 0 && parameterInfo.getOldIndex() < oldParameters.size()) {
      JetParameter oldParam=oldParameters.get(parameterInfo.getOldIndex());
      String oldParamName=oldParam.getName();
      if (oldParamName != null && !oldParamName.equals(parameterInfo.getName())) {
        for (        PsiReference reference : ReferencesSearch.search(oldParam,oldParam.getUseScope())) {
          final PsiElement element=reference.getElement();
          if ((element instanceof JetSimpleNameExpression || element instanceof KDocName) && !(element.getParent() instanceof JetValueArgumentName)) {
            result.add(new JavaMethodDeferredKotlinUsage<JetElement>((JetElement)element){
              @NotNull @Override public JavaMethodKotlinUsageWithDelegate<JetElement> resolve(              @NotNull JetChangeInfo javaMethodChangeInfo){
                return new JavaMethodKotlinUsageWithDelegate<JetElement>((JetElement)element,javaMethodChangeInfo){
                  @NotNull @Override protected JetUsageInfo<JetElement> getDelegateUsage(){
                    return new JetParameterUsage((JetElement)element,getJavaMethodChangeInfo().getNewParameters()[paramIndex],functionInfoForParameters);
                  }
                }
;
              }
            }
);
          }
        }
      }
    }
  }
}
