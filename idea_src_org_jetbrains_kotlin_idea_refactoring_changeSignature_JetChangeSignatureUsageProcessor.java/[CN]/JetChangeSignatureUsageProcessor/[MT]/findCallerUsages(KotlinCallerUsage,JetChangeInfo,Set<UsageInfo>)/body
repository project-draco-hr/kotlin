{
  result.add(callerUsage);
  KtNamedDeclaration element=callerUsage.getElement();
  if (element == null)   return;
  for (  PsiReference ref : ReferencesSearch.search(element,element.getUseScope())) {
    PsiElement refElement=ref.getElement();
    KtCallElement callElement=PsiTreeUtil.getParentOfType(refElement,KtCallElement.class);
    if (callElement != null && PsiTreeUtil.isAncestor(callElement.getCalleeExpression(),refElement,false)) {
      result.add(new KotlinCallerCallUsage(callElement));
    }
  }
  KtElement body=ChangeSignatureUtilsKt.getDeclarationBody(element);
  final Set<String> newParameterNames=CollectionsKt.mapTo(changeInfo.getNonReceiverParameters(),new HashSet<String>(),new Function1<JetParameterInfo,String>(){
    @Override public String invoke(    JetParameterInfo info){
      return info.getName();
    }
  }
);
  if (body != null) {
    final DeclarationDescriptor callerDescriptor=ResolutionUtils.resolveToDescriptor(element);
    final BindingContext context=ResolutionUtils.analyze(body);
    body.accept(new KtTreeVisitorVoid(){
      @Override public void visitSimpleNameExpression(      @NotNull KtSimpleNameExpression expression){
        final String currentName=expression.getReferencedName();
        if (!newParameterNames.contains(currentName))         return;
        ResolvedCall<? extends CallableDescriptor> resolvedCall=CallUtilKt.getResolvedCall(expression,context);
        if (resolvedCall == null)         return;
        if (resolvedCall.getExplicitReceiverKind() != ExplicitReceiverKind.NO_EXPLICIT_RECEIVER)         return;
        CallableDescriptor resultingDescriptor=resolvedCall.getResultingDescriptor();
        if (!(resultingDescriptor instanceof VariableDescriptor))         return;
        if (resultingDescriptor instanceof ValueParameterDescriptor && resultingDescriptor.getContainingDeclaration() == callerDescriptor)         return;
        KtElement callElement=resolvedCall.getCall().getCallElement();
        ReceiverValue receiver=resolvedCall.getExtensionReceiver();
        if (!(receiver instanceof ThisReceiver)) {
          receiver=resolvedCall.getDispatchReceiver();
        }
        if (receiver instanceof ThisReceiver) {
          result.add(new JetImplicitThisUsage(callElement,((ThisReceiver)receiver).getDeclarationDescriptor()));
        }
 else         if (!receiver.exists()) {
          result.add(new UnresolvableCollisionUsageInfo(callElement,null){
            @Override public String getDescription(){
              return "There is already a variable '" + currentName + "' in "+ IdeDescriptorRenderers.SOURCE_CODE_SHORT_NAMES_IN_TYPES.render(callerDescriptor)+ ". It will conflict with the new parameter.";
            }
          }
);
        }
      }
    }
);
  }
}
