{
  MultiMap<PsiElement,String> result=new MultiMap<PsiElement,String>();
  if (!(info instanceof JetChangeInfo)) {
    return result;
  }
  Set<String> parameterNames=new HashSet<String>();
  JetChangeInfo changeInfo=(JetChangeInfo)info;
  PsiElement function=info.getMethod();
  PsiElement element=function != null ? function : changeInfo.getContext();
  BindingContext bindingContext=ResolvePackage.analyze((JetElement)element);
  FunctionDescriptor oldDescriptor=ChangeSignaturePackage.getOriginalBaseFunctionDescriptor(changeInfo);
  DeclarationDescriptor containingDeclaration=oldDescriptor.getContainingDeclaration();
  JetScope parametersScope=null;
  if (oldDescriptor instanceof ConstructorDescriptor && containingDeclaration instanceof ClassDescriptorWithResolutionScopes)   parametersScope=((ClassDescriptorWithResolutionScopes)containingDeclaration).getScopeForInitializerResolution();
 else   if (function instanceof JetFunction)   parametersScope=RefactoringPackage.getBodyScope((JetFunction)function,bindingContext);
  JetScope functionScope=RefactoringPackage.getContainingScope(oldDescriptor,bindingContext);
  if (!ChangeSignaturePackage.getIsConstructor(changeInfo) && functionScope != null && !info.getNewName().isEmpty()) {
    for (    FunctionDescriptor conflict : functionScope.getFunctions(Name.identifier(info.getNewName()))) {
      if (conflict == oldDescriptor)       continue;
      PsiElement conflictElement=DescriptorToSourceUtils.descriptorToDeclaration(conflict);
      if (conflictElement == changeInfo.getMethod())       continue;
      if (getFunctionParameterTypes(conflict).equals(getFunctionParameterTypes(oldDescriptor))) {
        result.putValue(conflictElement,"Function already exists: '" + DescriptorRenderer.SHORT_NAMES_IN_TYPES.render(conflict) + "'");
        break;
      }
    }
  }
  for (  ParameterInfo parameter : info.getNewParameters()) {
    JetValVar valOrVar=((JetParameterInfo)parameter).getValOrVar();
    String parameterName=parameter.getName();
    if (!parameterNames.add(parameterName)) {
      result.putValue(element,"Duplicating parameter '" + parameterName + "'");
    }
    if (parametersScope != null) {
      if (ChangeSignaturePackage.getIsConstructor(changeInfo) && valOrVar != JetValVar.None) {
        for (        VariableDescriptor property : parametersScope.getProperties(Name.identifier(parameterName))) {
          PsiElement propertyDeclaration=DescriptorToSourceUtils.descriptorToDeclaration(property);
          if (propertyDeclaration != null && !(propertyDeclaration.getParent() instanceof JetParameterList)) {
            result.putValue(propertyDeclaration,"Duplicating property '" + parameterName + "'");
            break;
          }
        }
      }
 else       if (function instanceof JetFunction) {
        VariableDescriptor variable=parametersScope.getLocalVariable(Name.identifier(parameterName));
        if (variable != null && !(variable instanceof ValueParameterDescriptor)) {
          PsiElement conflictElement=DescriptorToSourceUtils.descriptorToDeclaration(variable);
          result.putValue(conflictElement,"Duplicating local variable '" + parameterName + "'");
        }
      }
    }
  }
  JetParameterInfo newReceiverInfo=changeInfo.getReceiverParameterInfo();
  JetParameterInfo originalReceiverInfo=changeInfo.getMethodDescriptor().getReceiver();
  if (function instanceof JetNamedFunction && newReceiverInfo != originalReceiverInfo) {
    findReceiverIntroducingConflicts(result,function,newReceiverInfo);
    findInternalExplicitReceiverConflicts(refUsages.get(),result,originalReceiverInfo);
  }
  return result;
}
