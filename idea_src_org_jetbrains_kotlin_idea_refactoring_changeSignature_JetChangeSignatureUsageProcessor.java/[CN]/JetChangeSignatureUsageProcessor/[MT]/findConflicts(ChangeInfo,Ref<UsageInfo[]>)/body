{
  MultiMap<PsiElement,String> result=new MultiMap<PsiElement,String>();
  UsageInfo[] usageInfos=refUsages.get();
  List<UsageInfo> adjustedUsages=ArraysKt.filterNot(usageInfos,new Function1<UsageInfo,Boolean>(){
    @Override public Boolean invoke(    UsageInfo info){
      return getOverriderOrCaller(info) instanceof KotlinLightMethod;
    }
  }
);
  if (adjustedUsages.size() < usageInfos.length) {
    refUsages.set(adjustedUsages.toArray(new UsageInfo[adjustedUsages.size()]));
  }
  if (!(info instanceof JetChangeInfo))   return result;
  Set<String> parameterNames=new HashSet<String>();
  JetChangeInfo changeInfo=(JetChangeInfo)info;
  PsiElement function=info.getMethod();
  PsiElement element=function != null ? function : changeInfo.getContext();
  BindingContext bindingContext=ResolutionUtils.analyze((JetElement)element,BodyResolveMode.FULL);
  CallableDescriptor oldDescriptor=JetChangeInfoKt.getOriginalBaseFunctionDescriptor(changeInfo);
  DeclarationDescriptor containingDeclaration=oldDescriptor.getContainingDeclaration();
  JetScope parametersScope=null;
  if (oldDescriptor instanceof ConstructorDescriptor && containingDeclaration instanceof ClassDescriptorWithResolutionScopes)   parametersScope=ScopeUtilsKt.asJetScope(((ClassDescriptorWithResolutionScopes)containingDeclaration).getScopeForInitializerResolution());
 else   if (function instanceof JetFunction)   parametersScope=CallableRefactoringKt.getBodyScope((JetFunction)function,bindingContext);
  JetScope callableScope=CallableRefactoringKt.getContainingScope(oldDescriptor,bindingContext);
  JetMethodDescriptor.Kind kind=JetChangeInfoKt.getKind(changeInfo);
  if (!kind.isConstructor() && callableScope != null && !info.getNewName().isEmpty()) {
    Name newName=Name.identifier(info.getNewName());
    Collection<? extends CallableDescriptor> conflicts=oldDescriptor instanceof FunctionDescriptor ? ScopeUtils.getAllAccessibleFunctions(callableScope,newName) : ScopeUtils.getAllAccessibleVariables(callableScope,newName);
    for (    CallableDescriptor conflict : conflicts) {
      if (conflict == oldDescriptor)       continue;
      PsiElement conflictElement=DescriptorToSourceUtils.descriptorToDeclaration(conflict);
      if (conflictElement == changeInfo.getMethod())       continue;
      if (getCallableParameterTypes(conflict).equals(getCallableParameterTypes(oldDescriptor))) {
        result.putValue(conflictElement,"Function already exists: '" + DescriptorRenderer.SHORT_NAMES_IN_TYPES.render(conflict) + "'");
        break;
      }
    }
  }
  for (  JetParameterInfo parameter : changeInfo.getNonReceiverParameters()) {
    JetValVar valOrVar=parameter.getValOrVar();
    String parameterName=parameter.getName();
    if (!parameterNames.add(parameterName)) {
      result.putValue(element,"Duplicating parameter '" + parameterName + "'");
    }
    if (parametersScope != null) {
      if (kind == JetMethodDescriptor.Kind.PRIMARY_CONSTRUCTOR && valOrVar != JetValVar.None) {
        for (        VariableDescriptor property : ScopeUtils.getVariablesFromImplicitReceivers(parametersScope,Name.identifier(parameterName))) {
          PsiElement propertyDeclaration=DescriptorToSourceUtils.descriptorToDeclaration(property);
          if (propertyDeclaration != null && !(propertyDeclaration.getParent() instanceof JetParameterList)) {
            result.putValue(propertyDeclaration,"Duplicating property '" + parameterName + "'");
            break;
          }
        }
      }
 else       if (function instanceof JetFunction) {
        VariableDescriptor variable=parametersScope.getLocalVariable(Name.identifier(parameterName));
        if (variable != null && !(variable instanceof ValueParameterDescriptor)) {
          PsiElement conflictElement=DescriptorToSourceUtils.descriptorToDeclaration(variable);
          result.putValue(conflictElement,"Duplicating local variable '" + parameterName + "'");
        }
      }
    }
  }
  JetParameterInfo newReceiverInfo=changeInfo.getReceiverParameterInfo();
  JetParameterInfo originalReceiverInfo=changeInfo.getMethodDescriptor().getReceiver();
  if (function instanceof JetCallableDeclaration && newReceiverInfo != originalReceiverInfo) {
    findReceiverIntroducingConflicts(result,function,newReceiverInfo);
    findInternalExplicitReceiverConflicts(refUsages.get(),result,originalReceiverInfo);
    findThisLabelConflicts(refUsages,result,changeInfo,(JetCallableDeclaration)function);
  }
  for (  UsageInfo usageInfo : usageInfos) {
    if (!(usageInfo instanceof KotlinCallerUsage))     continue;
    JetNamedDeclaration caller=(JetNamedDeclaration)usageInfo.getElement();
    DeclarationDescriptor callerDescriptor=ResolutionUtils.resolveToDescriptor(caller);
    findParameterDuplicationInCaller(result,changeInfo,caller,callerDescriptor);
  }
  return result;
}
