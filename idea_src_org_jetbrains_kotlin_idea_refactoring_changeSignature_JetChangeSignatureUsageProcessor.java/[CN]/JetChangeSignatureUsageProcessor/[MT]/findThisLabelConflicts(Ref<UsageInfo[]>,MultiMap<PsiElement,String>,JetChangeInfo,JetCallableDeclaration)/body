{
  JetPsiFactory psiFactory=new JetPsiFactory(callable.getProject());
  for (  UsageInfo usageInfo : refUsages.get()) {
    if (!(usageInfo instanceof JetParameterUsage))     continue;
    String newExprText=((JetParameterUsage)usageInfo).getReplacementText(changeInfo);
    if (!newExprText.startsWith("this"))     continue;
    if (usageInfo.getElement() instanceof KDocName)     continue;
    JetExpression originalExpr=(JetExpression)usageInfo.getElement();
    JetScope scope=ResolutionUtils.analyze(originalExpr,BodyResolveMode.FULL).get(BindingContext.RESOLUTION_SCOPE,originalExpr);
    if (scope == null)     continue;
    JetThisExpression newExpr=(JetThisExpression)psiFactory.createExpression(newExprText);
    BindingContext newContext=AnalyzerUtilKt.analyzeInContext(newExpr,scope,originalExpr);
    JetSimpleNameExpression labelExpr=newExpr.getTargetLabel();
    if (labelExpr != null && newContext.get(BindingContext.AMBIGUOUS_LABEL_TARGET,labelExpr) != null) {
      result.putValue(originalExpr,"Parameter reference can't be safely replaced with " + newExprText + " since "+ labelExpr.getText()+ " is ambiguous in this context");
      continue;
    }
    DeclarationDescriptor thisTarget=newContext.get(BindingContext.REFERENCE_TARGET,newExpr.getInstanceReference());
    PsiElement thisTargetPsi=thisTarget instanceof DeclarationDescriptorWithSource ? KotlinSourceElementKt.getPsi(((DeclarationDescriptorWithSource)thisTarget).getSource()) : null;
    if (thisTargetPsi != null && PsiTreeUtil.isAncestor(callable,thisTargetPsi,true)) {
      result.putValue(originalExpr,"Parameter reference can't be safely replaced with " + newExprText + " since target function can't be referenced in this context");
    }
  }
}
