{
  boolean isInherited=functionUsageInfo.isInherited();
  if (isInherited) {
    result.add(functionUsageInfo);
  }
  PsiElement functionPsi=functionUsageInfo.getElement();
  if (functionPsi == null)   return;
  for (  PsiReference reference : findReferences(functionPsi)) {
    PsiElement element=reference.getElement();
    if (functionPsi instanceof KtClass && reference.resolve() != functionPsi)     continue;
    if (element instanceof KtReferenceExpression) {
      PsiElement parent=element.getParent();
      if (parent instanceof KtCallExpression)       result.add(new JetFunctionCallUsage((KtCallExpression)parent,functionUsageInfo));
 else       if (parent instanceof KtUserType && parent.getParent() instanceof KtTypeReference) {
        parent=parent.getParent().getParent();
        if (parent instanceof KtConstructorCalleeExpression && parent.getParent() instanceof KtDelegatorToSuperCall)         result.add(new JetFunctionCallUsage((KtDelegatorToSuperCall)parent.getParent(),functionUsageInfo));
      }
 else       if (element instanceof KtSimpleNameExpression && (functionPsi instanceof KtProperty || functionPsi instanceof KtParameter)) {
        result.add(new JetPropertyCallUsage((KtSimpleNameExpression)element));
      }
    }
  }
  String oldName=JetChangeInfoKt.getOldName(changeInfo);
  if (oldName != null)   TextOccurrencesUtil.findNonCodeUsages(functionPsi,oldName,true,true,changeInfo.getNewName(),result);
  List<KtParameter> oldParameters=JetPsiUtilKt.getValueParameters((KtNamedDeclaration)functionPsi);
  JetParameterInfo newReceiverInfo=changeInfo.getReceiverParameterInfo();
  for (  JetParameterInfo parameterInfo : changeInfo.getNewParameters()) {
    if (parameterInfo.getOldIndex() >= 0 && parameterInfo.getOldIndex() < oldParameters.size()) {
      KtParameter oldParam=oldParameters.get(parameterInfo.getOldIndex());
      String oldParamName=oldParam.getName();
      if (parameterInfo == newReceiverInfo || (oldParamName != null && !oldParamName.equals(parameterInfo.getName()))) {
        for (        PsiReference reference : ReferencesSearch.search(oldParam,oldParam.getUseScope())) {
          PsiElement element=reference.getElement();
          if ((element instanceof KtSimpleNameExpression || element instanceof KDocName) && !(element.getParent() instanceof KtValueArgumentName)) {
            JetParameterUsage parameterUsage=new JetParameterUsage((KtElement)element,parameterInfo,functionUsageInfo);
            result.add(parameterUsage);
          }
        }
      }
    }
  }
  if (functionPsi instanceof KtFunction && newReceiverInfo != changeInfo.getMethodDescriptor().getReceiver()) {
    findOriginalReceiversUsages(functionUsageInfo,result,changeInfo);
  }
  if (functionPsi instanceof KtClass && ((KtClass)functionPsi).isEnum()) {
    for (    KtDeclaration declaration : ((KtClass)functionPsi).getDeclarations()) {
      if (declaration instanceof KtEnumEntry && ((KtEnumEntry)declaration).getDelegationSpecifiers().isEmpty()) {
        result.add(new JetEnumEntryWithoutSuperCallUsage((KtEnumEntry)declaration));
      }
    }
  }
  UtilsKt.processDelegationCallConstructorUsages(functionPsi,functionPsi.getUseScope(),new Function1<KtCallElement,Boolean>(){
    @Override public Boolean invoke(    KtCallElement element){
      if (element instanceof KtConstructorDelegationCall) {
        result.add(new JetConstructorDelegationCallUsage((KtConstructorDelegationCall)element,changeInfo));
      }
 else       if (element instanceof KtDelegatorToSuperCall) {
        result.add(new JetFunctionCallUsage(element,functionUsageInfo));
      }
      return true;
    }
  }
);
}
