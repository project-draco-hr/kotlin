{
  JetExpression subjectExpression=expression.getSubjectExpression();
  if (subjectExpression != null) {
    value(subjectExpression,false,inCondition);
  }
  Label doneLabel=builder.createUnboundLabel();
  Label nextLabel=builder.createUnboundLabel();
  for (Iterator<JetWhenEntry> iterator=expression.getEntries().iterator(); iterator.hasNext(); ) {
    JetWhenEntry whenEntry=iterator.next();
    if (whenEntry.getSubWhen() != null)     throw new UnsupportedOperationException();
    if (whenEntry.isElseContinue())     throw new UnsupportedOperationException();
    if (whenEntry.isElse()) {
      if (iterator.hasNext()) {
        trace.getErrorHandler().genericError(whenEntry.getNode(),"'else' entry must be the last one in a when-expression");
      }
    }
    Label bodyLabel=builder.createUnboundLabel();
    JetWhenCondition[] conditions=whenEntry.getConditions();
    for (int i=0; i < conditions.length; i++) {
      JetWhenCondition condition=conditions[i];
      condition.accept(new JetVisitor(){
        private final JetVisitor conditionVisitor=this;
        @Override public void visitWhenConditionCall(        JetWhenConditionCall condition){
          value(condition.getCallSuffixExpression(),false,inCondition);
        }
        @Override public void visitWhenConditionInRange(        JetWhenConditionInRange condition){
          value(condition.getRangeExpression(),false,inCondition);
          value(condition.getOperationReference(),false,inCondition);
        }
        @Override public void visitWhenConditionIsPattern(        JetWhenConditionIsPattern condition){
          JetPattern pattern=condition.getPattern();
          if (pattern != null) {
            pattern.accept(new JetVisitor(){
              @Override public void visitTypePattern(              JetTypePattern typePattern){
              }
              @Override public void visitWildcardPattern(              JetWildcardPattern pattern){
              }
              @Override public void visitExpressionPattern(              JetExpressionPattern pattern){
                value(pattern.getExpression(),false,inCondition);
              }
              @Override public void visitTuplePattern(              JetTuplePattern pattern){
              }
              @Override public void visitDecomposerPattern(              JetDecomposerPattern pattern){
                value(pattern.getDecomposerExpression(),false,inCondition);
                pattern.getArgumentList().accept(this);
              }
              @Override public void visitBindingPattern(              JetBindingPattern pattern){
                JetWhenCondition condition=pattern.getCondition();
                if (condition != null) {
                  condition.accept(conditionVisitor);
                }
              }
              @Override public void visitJetElement(              JetElement element){
                throw new UnsupportedOperationException("[JetControlFlowProcessor] " + element.toString());
              }
            }
);
          }
        }
        @Override public void visitJetElement(        JetElement element){
          throw new UnsupportedOperationException("[JetControlFlowProcessor] " + element.toString());
        }
      }
);
      if (i + 1 < conditions.length) {
        builder.nondeterministicJump(bodyLabel);
      }
    }
    builder.nondeterministicJump(nextLabel);
    builder.bindLabel(bodyLabel);
    value(whenEntry.getExpression(),true,inCondition);
    builder.jump(doneLabel);
    builder.bindLabel(nextLabel);
    nextLabel=builder.createUnboundLabel();
  }
  builder.jumpToError(null);
  builder.bindLabel(doneLabel);
}
