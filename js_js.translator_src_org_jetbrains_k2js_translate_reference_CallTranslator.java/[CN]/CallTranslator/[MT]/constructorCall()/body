{
  JsExpression constructorReference;
  ClassDescriptor classDescriptor=(ClassDescriptor)descriptor.getContainingDeclaration();
  boolean isSet=false;
  if (AnnotationsUtils.isLibraryObject(classDescriptor) && (classDescriptor.getName().asString().equals("HashMap") || (isSet=classDescriptor.getName().asString().equals("HashSet")))) {
    JetType keyType=resolvedCall.getTypeArguments().values().iterator().next();
    Name keyTypeName=JsDescriptorUtils.getNameIfStandardType(keyType);
    String collectionClassName;
    if (keyTypeName != null && (NamePredicate.PRIMITIVE_NUMBERS.apply(keyTypeName) || keyTypeName.asString().equals("String"))) {
      collectionClassName=isSet ? "PrimitiveHashSet" : "PrimitiveHashMap";
    }
 else {
      collectionClassName=isSet ? "ComplexHashSet" : "ComplexHashMap";
    }
    constructorReference=context().namer().kotlin(collectionClassName);
  }
 else {
    constructorReference=translateAsFunctionWithNoThisObject(descriptor);
  }
  return createConstructorCallExpression(constructorReference);
}
