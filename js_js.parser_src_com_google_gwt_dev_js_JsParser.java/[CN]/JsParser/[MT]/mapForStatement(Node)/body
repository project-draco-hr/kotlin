{
  Node fromInit=forNode.getFirstChild();
  Node fromTest=fromInit.getNext();
  Node fromIncr=fromTest.getNext();
  Node fromBody=fromIncr.getNext();
  if (fromBody == null) {
    Node fromIter=forNode.getFirstChild();
    Node fromObjExpr=fromIter.getNext();
    fromBody=fromObjExpr.getNext();
    JsForIn toForIn;
    if (fromIter.getType() == TokenStream.VAR) {
      Node fromIterVarName=fromIter.getFirstChild();
      String fromName=fromIterVarName.getString();
      JsName toName=getScope().declareName(fromName);
      toForIn=new JsForIn(toName);
      Node fromIterInit=fromIterVarName.getFirstChild();
      if (fromIterInit != null) {
        toForIn.setIterExpression(mapOptionalExpression(fromIterInit));
      }
    }
 else {
      toForIn=new JsForIn();
      toForIn.setIterExpression(mapExpression(fromIter));
    }
    toForIn.setObjectExpression(mapExpression(fromObjExpr));
    JsStatement bodyStmt=mapStatement(fromBody);
    if (bodyStmt != null) {
      toForIn.setBody(bodyStmt);
    }
 else {
      toForIn.setBody(program.getEmptyStatement());
    }
    return toForIn;
  }
 else {
    JsFor toFor;
    JsNode init=map(fromInit);
    JsExpression condition=mapOptionalExpression(fromTest);
    JsExpression increment=mapOptionalExpression(fromIncr);
    assert(init != null);
    if (init instanceof JsVars) {
      toFor=new JsFor((JsVars)init,condition,increment);
    }
 else {
      assert(init instanceof JsExpression);
      toFor=new JsFor((JsExpression)init,condition,increment);
    }
    JsStatement bodyStmt=mapStatement(fromBody);
    if (bodyStmt != null) {
      toFor.setBody(bodyStmt);
    }
 else {
      toFor.setBody(program.getEmptyStatement());
    }
    return toFor;
  }
}
