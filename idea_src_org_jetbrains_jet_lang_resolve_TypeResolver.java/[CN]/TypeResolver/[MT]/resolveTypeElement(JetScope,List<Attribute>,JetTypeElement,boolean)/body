{
  final Type[] result=new Type[1];
  typeElement.accept(new JetVisitor(){
    @Override public void visitUserType(    JetUserType type){
      ClassDescriptor classDescriptor=resolveClass(scope,type);
      trace.recordReferenceResolution(type.getReferenceExpression(),classDescriptor);
      if (classDescriptor != null) {
        TypeConstructor typeConstructor=classDescriptor.getTypeConstructor();
        List<TypeProjection> arguments=resolveTypeProjections(scope,typeConstructor,type.getTypeArguments());
        result[0]=new TypeImpl(attributes,typeConstructor,nullable,arguments,classDescriptor.getMemberScope(arguments));
      }
 else       if (type.getTypeArguments().isEmpty()) {
        TypeParameterDescriptor typeParameterDescriptor=scope.getTypeParameter(type.getReferencedName());
        if (typeParameterDescriptor != null) {
          result[0]=new TypeImpl(attributes,typeParameterDescriptor.getTypeConstructor(),nullable || hasNullableBound(typeParameterDescriptor),Collections.<TypeProjection>emptyList(),JetStandardClasses.STUB);
        }
      }
    }
    @Override public void visitNullableType(    JetNullableType nullableType){
      result[0]=resolveTypeElement(scope,attributes,nullableType.getInnerType(),true);
    }
    @Override public void visitTupleType(    JetTupleType type){
      result[0]=JetStandardClasses.getTupleType(resolveTypes(scope,type.getComponentTypeRefs()));
    }
    @Override public void visitFunctionType(    JetFunctionType type){
      JetTypeReference receiverTypeRef=type.getReceiverTypeRef();
      Type receiverType=receiverTypeRef == null ? null : resolveType(scope,receiverTypeRef);
      List<Type> parameterTypes=new ArrayList<Type>();
      for (      JetParameter parameter : type.getParameters()) {
        parameterTypes.add(resolveType(scope,parameter.getTypeReference()));
      }
      Type returnType=resolveType(scope,type.getReturnTypeRef());
      result[0]=JetStandardClasses.getFunctionType(attributes,receiverType,parameterTypes,returnType);
    }
    @Override public void visitJetElement(    JetElement elem){
      throw new IllegalArgumentException("Unsupported type: " + elem);
    }
  }
);
  if (result[0] == null) {
    return ErrorType.createErrorType(typeElement.getText());
  }
  return result[0];
}
