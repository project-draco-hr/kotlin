{
  final JetType[] result=new JetType[1];
  if (typeElement != null) {
    typeElement.accept(new JetVisitor(){
      @Override public void visitUserType(      JetUserType type){
        ClassDescriptor classDescriptor=resolveClass(scope,type);
        if (classDescriptor != null) {
          trace.recordReferenceResolution(type.getReferenceExpression(),classDescriptor);
          TypeConstructor typeConstructor=classDescriptor.getTypeConstructor();
          List<TypeProjection> arguments=resolveTypeProjections(scope,typeConstructor,type.getTypeArguments());
          result[0]=new JetTypeImpl(attributes,typeConstructor,nullable,arguments,classDescriptor.getMemberScope(arguments));
        }
 else         if (type.getTypeArguments().isEmpty()) {
          TypeParameterDescriptor typeParameterDescriptor=scope.getTypeParameter(type.getReferencedName());
          if (typeParameterDescriptor != null) {
            trace.recordReferenceResolution(type.getReferenceExpression(),typeParameterDescriptor);
            result[0]=new JetTypeImpl(attributes,typeParameterDescriptor.getTypeConstructor(),nullable || hasNullableBound(typeParameterDescriptor),Collections.<TypeProjection>emptyList(),JetStandardClasses.STUB);
          }
 else {
            semanticServices.getErrorHandler().unresolvedReference(type.getReferenceExpression());
          }
        }
 else {
          semanticServices.getErrorHandler().unresolvedReference(type.getReferenceExpression());
        }
      }
      @Override public void visitNullableType(      JetNullableType nullableType){
        result[0]=resolveTypeElement(scope,attributes,nullableType.getInnerType(),true);
      }
      @Override public void visitTupleType(      JetTupleType type){
        result[0]=JetStandardClasses.getTupleType(resolveTypes(scope,type.getComponentTypeRefs()));
      }
      @Override public void visitFunctionType(      JetFunctionType type){
        JetTypeReference receiverTypeRef=type.getReceiverTypeRef();
        JetType receiverType=receiverTypeRef == null ? null : resolveType(scope,receiverTypeRef);
        List<JetType> parameterTypes=new ArrayList<JetType>();
        for (        JetParameter parameter : type.getParameters()) {
          parameterTypes.add(resolveType(scope,parameter.getTypeReference()));
        }
        JetType returnType=resolveType(scope,type.getReturnTypeRef());
        result[0]=JetStandardClasses.getFunctionType(attributes,receiverType,parameterTypes,returnType);
      }
      @Override public void visitJetElement(      JetElement elem){
        throw new IllegalArgumentException("Unsupported type: " + elem);
      }
    }
);
  }
  if (result[0] == null) {
    return ErrorType.createErrorType(typeElement == null ? "No type element" : typeElement.getText());
  }
  return result[0];
}
