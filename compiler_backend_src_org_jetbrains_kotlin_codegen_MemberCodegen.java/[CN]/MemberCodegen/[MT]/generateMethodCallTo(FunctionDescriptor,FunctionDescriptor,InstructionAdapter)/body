{
  CallableMethod callableMethod=typeMapper.mapToCallableMethod(functionDescriptor,accessorDescriptor instanceof AccessorForCallableDescriptor && ((AccessorForCallableDescriptor)accessorDescriptor).getSuperCallTarget() != null);
  boolean hasDispatchReceiver=!isStaticDeclaration(functionDescriptor);
  int reg=hasDispatchReceiver ? 1 : 0;
  boolean accessorIsConstructor=accessorDescriptor instanceof AccessorForConstructorDescriptor;
  if (!accessorIsConstructor && functionDescriptor instanceof ConstructorDescriptor) {
    iv.anew(callableMethod.getOwner());
    iv.dup();
    reg=0;
  }
 else   if (accessorIsConstructor || (accessorDescriptor != null && JetTypeMapper.isAccessor(accessorDescriptor) && hasDispatchReceiver)) {
    if (!AnnotationUtilKt.isPlatformStaticInObjectOrClass(functionDescriptor)) {
      iv.load(0,OBJECT_TYPE);
    }
  }
  for (  Type argType : callableMethod.getParameterTypes()) {
    if (AsmTypes.DEFAULT_CONSTRUCTOR_MARKER.equals(argType)) {
      iv.aconst(null);
    }
 else {
      iv.load(reg,argType);
      reg+=argType.getSize();
    }
  }
  callableMethod.genInvokeInstruction(iv);
  return StackValue.onStack(callableMethod.getReturnType());
}
