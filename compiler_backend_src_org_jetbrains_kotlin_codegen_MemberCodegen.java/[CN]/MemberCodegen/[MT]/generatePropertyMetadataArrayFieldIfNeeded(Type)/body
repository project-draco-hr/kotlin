{
  List<KtProperty> delegatedProperties=new ArrayList<KtProperty>();
  for (  KtDeclaration declaration : ((KtDeclarationContainer)element).getDeclarations()) {
    if (declaration instanceof KtProperty) {
      KtProperty property=(KtProperty)declaration;
      if (property.hasDelegate()) {
        delegatedProperties.add(property);
      }
    }
  }
  if (delegatedProperties.isEmpty())   return;
  v.newField(NO_ORIGIN,ACC_PRIVATE | ACC_STATIC | ACC_FINAL| ACC_SYNTHETIC,JvmAbi.DELEGATED_PROPERTIES_ARRAY_NAME,"[" + K_PROPERTY_TYPE,null,null);
  if (state.getClassBuilderMode() != ClassBuilderMode.FULL)   return;
  InstructionAdapter iv=createOrGetClInitCodegen().v;
  iv.iconst(delegatedProperties.size());
  iv.newarray(K_PROPERTY_TYPE);
  for (int i=0, size=delegatedProperties.size(); i < size; i++) {
    PropertyDescriptor property=(PropertyDescriptor)BindingContextUtils.getNotNull(bindingContext,VARIABLE,delegatedProperties.get(i));
    iv.dup();
    iv.iconst(i);
    int receiverCount=(property.getDispatchReceiverParameter() != null ? 1 : 0) + (property.getExtensionReceiverParameter() != null ? 1 : 0);
    Type implType=property.isVar() ? MUTABLE_PROPERTY_REFERENCE_IMPL[receiverCount] : PROPERTY_REFERENCE_IMPL[receiverCount];
    iv.anew(implType);
    iv.dup();
    ClosureCodegen.generateCallableReferenceDeclarationContainer(iv,property,state);
    iv.aconst(property.getName().asString());
    iv.aconst(PropertyReferenceCodegen.getPropertyReferenceSignature(property,state));
    iv.invokespecial(implType.getInternalName(),"<init>",Type.getMethodDescriptor(Type.VOID_TYPE,K_DECLARATION_CONTAINER_TYPE,JAVA_STRING_TYPE,JAVA_STRING_TYPE),false);
    Method wrapper=PropertyReferenceCodegen.getWrapperMethodForPropertyReference(property,receiverCount);
    iv.invokestatic(REFLECTION,wrapper.getName(),wrapper.getDescriptor(),false);
    StackValue.onStack(implType).put(K_PROPERTY_TYPE,iv);
    iv.astore(K_PROPERTY_TYPE);
  }
  iv.putstatic(thisAsmType.getInternalName(),JvmAbi.DELEGATED_PROPERTIES_ARRAY_NAME,"[" + K_PROPERTY_TYPE);
}
