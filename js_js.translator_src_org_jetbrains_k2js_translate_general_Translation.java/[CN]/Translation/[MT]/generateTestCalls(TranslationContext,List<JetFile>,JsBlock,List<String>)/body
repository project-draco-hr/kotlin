{
  ClassDescriptor lastClassDescriptor=null;
  List<JetNamedFunction> functions=JetTestFunctionDetector.findTestFunctions(context.bindingContext(),files);
  for (  JetNamedFunction function : functions) {
    FunctionDescriptor functionDescriptor=getFunctionDescriptor(context.bindingContext(),function);
    String funName=functionDescriptor.getName().getName();
    DeclarationDescriptor containingDeclaration=functionDescriptor.getContainingDeclaration();
    if (containingDeclaration instanceof ClassDescriptor) {
      ClassDescriptor classDescriptor=(ClassDescriptor)containingDeclaration;
      String className=getQualifiedName(classDescriptor);
      rawStatements.add("QUnit.test( \"" + className + "."+ funName+ "()\" , function() {");
      String prefix="    var ";
      rawStatements.add(prefix + "_testCase = new Kotlin.defs." + className+ "();");
      rawStatements.add("    _testCase." + funName + "();");
    }
 else {
      rawStatements.add("QUnit.test( \"" + funName + "()\", function() {");
      rawStatements.add("    " + funName + "();");
    }
    rawStatements.add("});");
  }
}
