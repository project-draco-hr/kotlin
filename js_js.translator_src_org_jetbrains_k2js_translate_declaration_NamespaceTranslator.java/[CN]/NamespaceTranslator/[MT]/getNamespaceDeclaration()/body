{
  JsInvocation namespaceDeclaration=namespaceCreateMethodInvocation();
  JsFunction initializer=Translation.generateNamespaceInitializerMethod(descriptor,context());
  List<JsPropertyInitializer> properties=new DeclarationBodyVisitor().traverseNamespace(descriptor,context());
  if (context().isEcma5()) {
    namespaceDeclaration.getArguments().add(initializer);
    namespaceDeclaration.getArguments().add(newObjectLiteral(properties));
  }
 else {
    List<JsPropertyInitializer> propertyList=new ArrayList<JsPropertyInitializer>();
    propertyList.add(InitializerUtils.generateInitializeMethod(initializer));
    propertyList.addAll(properties);
    namespaceDeclaration.getArguments().add(newObjectLiteral(propertyList));
  }
  namespaceDeclaration.getArguments().add(getClassesAndNestedNamespaces());
  return namespaceDeclaration;
}
