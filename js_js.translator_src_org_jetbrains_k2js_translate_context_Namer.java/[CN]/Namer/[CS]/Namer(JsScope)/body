{
  kotlinName=rootScope.declareName(KOTLIN_NAME);
  kotlinScope=JsObjectScope(rootScope,"Kotlin standard object");
  traitName=kotlinScope.declareName(TRAIT_OBJECT_NAME);
  definePackage=kotlin("definePackage");
  defineRootPackage=kotlin("defineRootPackage");
  callGetProperty=kotlin("callGetter");
  callSetProperty=kotlin("callSetter");
  className=kotlinScope.declareName(CLASS_OBJECT_NAME);
  enumClassName=kotlinScope.declareName(ENUM_CLASS_OBJECT_NAME);
  objectName=kotlinScope.declareName(OBJECT_OBJECT_NAME);
  callableRefForMemberFunctionName=kotlinScope.declareName(CALLABLE_REF_FOR_MEMBER_FUNCTION_NAME);
  callableRefForExtensionFunctionName=kotlinScope.declareName(CALLABLE_REF_FOR_EXTENSION_FUNCTION_NAME);
  callableRefForConstructorName=kotlinScope.declareName(CALLABLE_REF_FOR_CONSTRUCTOR_NAME);
  callableRefForTopLevelProperty=kotlinScope.declareName(CALLABLE_REF_FOR_TOP_LEVEL_PROPERTY);
  callableRefForMemberProperty=kotlinScope.declareName(CALLABLE_REF_FOR_MEMBER_PROPERTY);
  callableRefForExtensionProperty=kotlinScope.declareName(CALLABLE_REF_FOR_EXTENSION_PROPERTY);
  isTypeName=kotlinScope.declareName("isType");
  undefinedExpression=new JsPrefixOperation(JsUnaryOperator.VOID,rootScope.getProgram().getNumberLiteral(0));
}
