{
  return new JetPsiReference(){
    @Override public PsiElement getElement(){
      return getReferencedNameElement();
    }
    @Override public TextRange getRangeInElement(){
      return new TextRange(0,getElement().getTextLength());
    }
    @NotNull @Override public Object[] getVariants(){
      PsiElement parent=getParent();
      if (parent instanceof JetQualifiedExpression) {
        JetQualifiedExpression qualifiedExpression=(JetQualifiedExpression)parent;
        JetExpression receiverExpression=qualifiedExpression.getReceiverExpression();
        JetFile file=(JetFile)getContainingFile();
        BindingContext bindingContext=AnalyzingUtils.analyzeFileWithCache(file);
        final JetType expressionType=bindingContext.getExpressionType(receiverExpression);
        if (expressionType != null) {
          return collectLookupElements(bindingContext,expressionType.getMemberScope());
        }
      }
 else {
        JetFile file=(JetFile)getContainingFile();
        BindingContext bindingContext=AnalyzingUtils.analyzeFileWithCache(file);
        JetScope resolutionScope=bindingContext.getResolutionScope(JetSimpleNameExpression.this);
        if (resolutionScope != null) {
          return collectLookupElements(bindingContext,resolutionScope);
        }
      }
      return EMPTY_ARRAY;
    }
    @Override public PsiElement handleElementRename(    String newElementName) throws IncorrectOperationException {
      PsiElement element=JetChangeUtil.createNameIdentifier(getProject(),newElementName);
      return getReferencedNameElement().replace(element);
    }
  }
;
}
