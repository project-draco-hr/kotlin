{
  List<LookupElement> result=Lists.newArrayList();
  for (  final DeclarationDescriptor descriptor : scope.getAllDescriptors()) {
    PsiElement declaration=bindingContext.getDeclarationPsiElement(descriptor.getOriginal());
    LookupElementBuilder element=LookupElementBuilder.create(descriptor.getName());
    String typeText="";
    String tailText="";
    boolean tailTextGrayed=false;
    if (descriptor instanceof FunctionDescriptor) {
      FunctionDescriptor functionDescriptor=(FunctionDescriptor)descriptor;
      JetType returnType=functionDescriptor.getReturnType();
      typeText=DescriptorRenderer.TEXT.renderType(returnType);
      tailText="(" + StringUtil.join(functionDescriptor.getValueParameters(),new Function<ValueParameterDescriptor,String>(){
        @Override public String fun(        ValueParameterDescriptor valueParameterDescriptor){
          return valueParameterDescriptor.getName() + ":" + DescriptorRenderer.TEXT.renderType(valueParameterDescriptor.getOutType());
        }
      }
,",") + ")";
    }
 else     if (descriptor instanceof VariableDescriptor) {
      JetType outType=((VariableDescriptor)descriptor).getOutType();
      typeText=DescriptorRenderer.TEXT.renderType(outType);
    }
 else     if (descriptor instanceof ClassDescriptor) {
      tailText=" (" + DescriptorRenderer.getFQName(descriptor.getContainingDeclaration()) + ")";
      tailTextGrayed=true;
    }
 else {
      typeText=DescriptorRenderer.TEXT.render(descriptor);
    }
    element=element.setTailText(tailText,tailTextGrayed).setTypeText(typeText);
    if (declaration != null) {
      element=element.setIcon(declaration.getIcon(ICON_FLAG_OPEN | ICON_FLAG_VISIBILITY));
    }
    result.add(element);
  }
  return result.toArray();
}
