{
  ReifiedTypeParametersUsages typeParametersToReify=inliningContext.reifiedTypeInliner.reifyInstructions(sourceNode);
  Parameters parameters=isConstructor ? capturedBuilder.buildParameters() : getMethodParametersWithCaptured(capturedBuilder,sourceNode);
  RegeneratedLambdaFieldRemapper remapper=new RegeneratedLambdaFieldRemapper(oldObjectType.getInternalName(),transformationInfo.getNewClassName(),parameters,transformationInfo.getCapturedLambdasToInline(),parentRemapper,isConstructor);
  MethodInliner inliner=new MethodInliner(sourceNode,parameters,inliningContext.subInline(inliningContext.nameGenerator.subGenerator("lambda")),remapper,isSameModule,"Transformer for " + transformationInfo.getOldClassName(),sourceMapper,new InlineCallSiteInfo(transformationInfo.getOldClassName(),sourceNode.name,isConstructor ? transformationInfo.getNewConstructorDescriptor() : sourceNode.desc),null);
  InlineResult result=inliner.doInline(deferringVisitor,new LocalVarRemapper(parameters,0),false,LabelOwner.NOT_APPLICABLE);
  result.getReifiedTypeParametersUsages().mergeAll(typeParametersToReify);
  deferringVisitor.visitMaxs(-1,-1);
  return result;
}
