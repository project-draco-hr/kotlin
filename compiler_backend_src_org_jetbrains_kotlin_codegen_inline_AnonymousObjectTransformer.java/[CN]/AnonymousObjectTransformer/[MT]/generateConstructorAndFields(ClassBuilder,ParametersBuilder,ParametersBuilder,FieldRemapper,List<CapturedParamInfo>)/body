{
  List<Type> descTypes=new ArrayList<Type>();
  Parameters constructorParams=constructorInlineBuilder.buildParameters();
  int[] capturedIndexes=new int[constructorParams.getReal().size() + constructorParams.getCaptured().size()];
  int index=0;
  int size=0;
  for (  ParameterInfo info : constructorParams) {
    if (!info.isSkipped()) {
      if (info.isCaptured() || info instanceof CapturedParamInfo) {
        capturedIndexes[index]=size;
        index++;
      }
      if (size != 0) {
        descTypes.add(info.getType());
      }
      size+=info.getType().getSize();
    }
  }
  String constructorDescriptor=Type.getMethodDescriptor(Type.VOID_TYPE,descTypes.toArray(new Type[descTypes.size()]));
  transformationInfo.setNewConstructorDescriptor(constructorDescriptor);
  MethodVisitor constructorVisitor=classBuilder.newMethod(NO_ORIGIN,AsmUtil.NO_FLAG_PACKAGE_PRIVATE,"<init>",constructorDescriptor,null,ArrayUtil.EMPTY_STRING_ARRAY);
  List<NewJavaField> newFieldsWithSkipped=TransformationUtilsKt.getNewFieldsToGenerate(allCapturedBuilder.listCaptured());
  List<FieldInfo> fieldInfoWithSkipped=TransformationUtilsKt.transformToFieldInfo(Type.getObjectType(transformationInfo.getNewClassName()),newFieldsWithSkipped);
  int paramIndex=0;
  InstructionAdapter capturedFieldInitializer=new InstructionAdapter(constructorVisitor);
  for (int i=0; i < fieldInfoWithSkipped.size(); i++) {
    FieldInfo fieldInfo=fieldInfoWithSkipped.get(i);
    if (!newFieldsWithSkipped.get(i).getSkip()) {
      AsmUtil.genAssignInstanceFieldFromParam(fieldInfo,capturedIndexes[paramIndex],capturedFieldInitializer);
    }
    paramIndex++;
  }
  for (  CapturedParamInfo info : constructorAdditionalFakeParams) {
    CapturedParamInfo fake=constructorInlineBuilder.addCapturedParamCopy(info);
    if (fake.getLambda() != null) {
      StackValue composed=StackValue.field(fake.getType(),oldObjectType,fake.getNewFieldName(),false,StackValue.LOCAL_0);
      fake.setRemapValue(composed);
    }
  }
  inlineMethodAndUpdateGlobalResult(parentRemapper,capturedFieldInitializer,constructor,constructorInlineBuilder,true);
  constructorVisitor.visitEnd();
  AsmUtil.genClosureFields(TransformationUtilsKt.toNameTypePair(TransformationUtilsKt.filterSkipped(newFieldsWithSkipped)),classBuilder);
}
