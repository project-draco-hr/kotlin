{
  final VirtualFileSystem localFileSystem=VirtualFileManager.getInstance().getFileSystem(StandardFileSystems.FILE_PROTOCOL);
  final List<JetFile> result=Lists.newArrayList();
  for (  String sourceRootPath : sourceRoots) {
    if (sourceRootPath == null) {
      continue;
    }
    VirtualFile vFile=localFileSystem.findFileByPath(sourceRootPath);
    if (vFile == null) {
      reportError.invoke("Source file or directory not found: " + sourceRootPath);
      continue;
    }
    if (!vFile.isDirectory() && vFile.getFileType() != JetFileType.INSTANCE) {
      reportError.invoke("Source entry is not a Kotlin file: " + sourceRootPath);
      continue;
    }
    IoPackage.recurse(new File(sourceRootPath),new Function1<File,Unit>(){
      @Override public Unit invoke(      File file){
        if (file.isFile()) {
          VirtualFile fileByPath=localFileSystem.findFileByPath(file.getAbsolutePath());
          if (fileByPath != null) {
            PsiFile psiFile=PsiManager.getInstance(project).findFile(fileByPath);
            if (psiFile instanceof JetFile) {
              result.add((JetFile)psiFile);
            }
          }
        }
        return Unit.instance$;
      }
    }
);
  }
  return result;
}
