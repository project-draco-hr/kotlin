{
  String name=classNamesForAnonymousClasses.get(expression);
  if (name != null) {
    return name;
  }
  @SuppressWarnings("unchecked") JetNamedDeclaration container=PsiTreeUtil.getParentOfType(expression,JetNamespace.class,JetClass.class,JetObjectDeclaration.class);
  String baseName;
  if (container instanceof JetNamespace) {
    baseName=NamespaceCodegen.getJVMClassName(((JetNamespace)container).getFQName());
  }
 else {
    ClassDescriptor aClass=bindingContext.get(BindingContext.CLASS,container);
    baseName=jvmNameForImplementation(aClass,OwnerKind.IMPLEMENTATION);
  }
  Integer count=anonymousSubclassesCount.get(baseName);
  if (count == null)   count=0;
  anonymousSubclassesCount.put(baseName,count + 1);
  final String className=baseName + "$" + (count + 1);
  classNamesForAnonymousClasses.put(expression,className);
  return className;
}
