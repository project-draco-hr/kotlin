{
  for (  ValueParameterDescriptor valueParameterDescriptor : f.getValueParameters()) {
    if (valueParameterDescriptor.hasDefaultValue()) {
      needGenericSignature=false;
    }
  }
  if (kind == OwnerKind.TRAIT_IMPL) {
    needGenericSignature=false;
  }
  BothSignatureWriter signatureVisitor=null;
  if (needGenericSignature) {
    signatureVisitor=new BothSignatureWriter(BothSignatureWriter.Mode.METHOD);
  }
  writeFormalTypeParameters(f.getTypeParameters(),signatureVisitor);
  final ReceiverDescriptor receiverTypeRef=f.getReceiverParameter();
  final JetType receiverType=!receiverTypeRef.exists() ? null : receiverTypeRef.getType();
  final List<ValueParameterDescriptor> parameters=f.getValueParameters();
  List<Type> parameterTypes=new ArrayList<Type>();
  if (kind == OwnerKind.TRAIT_IMPL) {
    ClassDescriptor containingDeclaration=(ClassDescriptor)f.getContainingDeclaration();
    JetType jetType=TraitImplBodyCodegen.getSuperClass(containingDeclaration,bindingContext);
    Type type=mapType(jetType,signatureVisitor);
    if (type.getInternalName().equals("java/lang/Object")) {
      jetType=containingDeclaration.getDefaultType();
      type=mapType(jetType,signatureVisitor);
    }
    valueParameterTypes.add(type);
    parameterTypes.add(type);
  }
  if (receiverType != null) {
    if (signatureVisitor != null) {
      signatureVisitor.writeParameterType();
    }
    parameterTypes.add(mapType(receiverType,signatureVisitor));
    if (signatureVisitor != null) {
      signatureVisitor.writeParameterTypeEnd();
    }
  }
  for (  TypeParameterDescriptor parameterDescriptor : f.getTypeParameters()) {
    if (parameterDescriptor.isReified()) {
      parameterTypes.add(TYPE_TYPEINFO);
      if (signatureVisitor != null) {
        signatureVisitor.writeParameterType();
        visitAsmType(signatureVisitor,TYPE_TYPEINFO);
        signatureVisitor.writeParameterTypeEnd();
      }
    }
  }
  for (  ValueParameterDescriptor parameter : parameters) {
    if (signatureVisitor != null) {
      signatureVisitor.writeParameterType();
    }
    Type type=mapType(parameter.getOutType(),signatureVisitor);
    if (signatureVisitor != null) {
      signatureVisitor.writeParameterTypeEnd();
    }
    valueParameterTypes.add(type);
    parameterTypes.add(type);
  }
  Type returnType;
  if (f instanceof ConstructorDescriptor) {
    returnType=Type.VOID_TYPE;
    if (signatureVisitor != null) {
      signatureVisitor.writeReturnType();
      visitAsmType(signatureVisitor,Type.VOID_TYPE);
      signatureVisitor.writeReturnTypeEnd();
    }
  }
 else {
    if (signatureVisitor != null) {
      signatureVisitor.writeReturnType();
      returnType=mapReturnType(f.getReturnType(),signatureVisitor);
      signatureVisitor.writeReturnTypeEnd();
    }
 else {
      returnType=mapReturnType(f.getReturnType(),null);
    }
  }
  Method method=new Method(f.getName(),returnType,parameterTypes.toArray(new Type[parameterTypes.size()]));
  return new JvmMethodSignature(method,signatureVisitor != null ? signatureVisitor.makeJavaString() : null);
}
