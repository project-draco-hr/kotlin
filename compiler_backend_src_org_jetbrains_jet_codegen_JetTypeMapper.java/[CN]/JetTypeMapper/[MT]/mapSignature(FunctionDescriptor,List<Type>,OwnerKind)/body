{
  final ReceiverDescriptor receiverTypeRef=f.getReceiverParameter();
  final JetType receiverType=!receiverTypeRef.exists() ? null : receiverTypeRef.getType();
  final List<ValueParameterDescriptor> parameters=f.getValueParameters();
  List<Type> parameterTypes=new ArrayList<Type>();
  if (kind == OwnerKind.TRAIT_IMPL) {
    ClassDescriptor containingDeclaration=(ClassDescriptor)f.getContainingDeclaration();
    JetType jetType=TraitImplBodyCodegen.getSuperClass(containingDeclaration,bindingContext);
    Type type=mapType(jetType);
    if (type.getInternalName().equals("java/lang/Object")) {
      jetType=containingDeclaration.getDefaultType();
      type=mapType(jetType);
    }
    valueParameterTypes.add(type);
    parameterTypes.add(type);
  }
  if (receiverType != null) {
    parameterTypes.add(mapType(receiverType));
  }
  for (  TypeParameterDescriptor parameterDescriptor : f.getTypeParameters()) {
    if (parameterDescriptor.isReified()) {
      parameterTypes.add(TYPE_TYPEINFO);
    }
  }
  for (  ValueParameterDescriptor parameter : parameters) {
    Type type=mapType(parameter.getOutType());
    valueParameterTypes.add(type);
    parameterTypes.add(type);
  }
  Type returnType=f instanceof ConstructorDescriptor ? Type.VOID_TYPE : mapReturnType(f.getReturnType());
  return new Method(f.getName(),returnType,parameterTypes.toArray(new Type[parameterTypes.size()]));
}
