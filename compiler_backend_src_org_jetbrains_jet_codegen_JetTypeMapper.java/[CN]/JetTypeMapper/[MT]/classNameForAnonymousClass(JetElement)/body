{
  if (expression instanceof JetObjectLiteralExpression) {
    JetObjectLiteralExpression jetObjectLiteralExpression=(JetObjectLiteralExpression)expression;
    expression=jetObjectLiteralExpression.getObjectDeclaration();
  }
  if (expression instanceof JetFunctionLiteralExpression) {
    JetFunctionLiteralExpression jetFunctionLiteralExpression=(JetFunctionLiteralExpression)expression;
    expression=jetFunctionLiteralExpression.getFunctionLiteral();
  }
  String name=classNamesForAnonymousClasses.get(expression);
  if (name != null) {
    return name;
  }
  @SuppressWarnings("unchecked") PsiElement container=PsiTreeUtil.getParentOfType(expression,JetFile.class,JetClass.class,JetObjectDeclaration.class,JetFunctionLiteral.class);
  String baseName;
  if (container instanceof JetFile) {
    baseName=NamespaceCodegen.getJVMClassName(JetPsiUtil.getFQName(((JetFile)container)),true);
  }
 else   if (container instanceof JetClass) {
    ClassDescriptor aClass=bindingContext.get(BindingContext.CLASS,container);
    baseName=mapType(aClass.getDefaultType(),OwnerKind.IMPLEMENTATION).getInternalName();
    ClassDescriptor myClass=bindingContext.get(BindingContext.CLASS,expression);
    if (CodegenUtil.isClassObject(myClass)) {
      return mapType(aClass.getDefaultType(),OwnerKind.IMPLEMENTATION).getInternalName() + JvmAbi.CLASS_OBJECT_SUFFIX;
    }
 else     baseName=classNameForAnonymousClass((JetElement)container);
  }
 else {
    baseName=classNameForAnonymousClass((JetElement)container);
  }
  Integer count=anonymousSubclassesCount.get(baseName);
  if (count == null)   count=0;
  anonymousSubclassesCount.put(baseName,count + 1);
  final String className=baseName + "$" + (count + 1);
  classNamesForAnonymousClasses.put(expression,className);
  return className;
}
