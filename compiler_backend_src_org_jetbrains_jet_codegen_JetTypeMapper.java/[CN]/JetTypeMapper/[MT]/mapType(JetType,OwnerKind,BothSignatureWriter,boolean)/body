{
  Type known=knowTypes.get(jetType);
  if (known != null) {
    return mapKnownAsmType(jetType,known,signatureVisitor,boxPrimitive);
  }
  DeclarationDescriptor descriptor=jetType.getConstructor().getDeclarationDescriptor();
  if (ErrorUtils.isError(descriptor)) {
    Type asmType=Type.getObjectType("error/NonExistentClass");
    if (signatureVisitor != null) {
      visitAsmType(signatureVisitor,asmType,true);
    }
    return asmType;
  }
  if (standardLibrary.getArray().equals(descriptor)) {
    if (jetType.getArguments().size() != 1) {
      throw new UnsupportedOperationException("arrays must have one type argument");
    }
    JetType memberType=jetType.getArguments().get(0).getType();
    if (signatureVisitor != null) {
      signatureVisitor.writeArrayType(jetType.isNullable());
      mapType(memberType,kind,signatureVisitor,true);
      signatureVisitor.writeArrayEnd();
    }
    if (!isGenericsArray(jetType)) {
      return Type.getType("[" + boxType(mapType(memberType,kind)).getDescriptor());
    }
 else {
      return ARRAY_GENERIC_TYPE;
    }
  }
  if (JetStandardClasses.getAny().equals(descriptor)) {
    if (signatureVisitor != null) {
      visitAsmType(signatureVisitor,TYPE_OBJECT,jetType.isNullable());
    }
    return TYPE_OBJECT;
  }
  if (descriptor instanceof ClassDescriptor) {
    Type asmType;
    if (standardLibrary.getComparable().equals(descriptor)) {
      if (jetType.getArguments().size() != 1) {
        throw new UnsupportedOperationException("Comparable must have one type argument");
      }
      asmType=JL_COMPARABLE_TYPE;
    }
 else {
      String name=getFQName(descriptor);
      asmType=Type.getObjectType(name + (kind == OwnerKind.TRAIT_IMPL ? JvmAbi.TRAIT_IMPL_SUFFIX : ""));
    }
    if (signatureVisitor != null) {
      signatureVisitor.writeClassBegin(asmType.getInternalName(),jetType.isNullable());
      for (      TypeProjection proj : jetType.getArguments()) {
        signatureVisitor.writeTypeArgument(proj.getProjectionKind());
        mapType(proj.getType(),kind,signatureVisitor,true);
        signatureVisitor.writeTypeArgumentEnd();
      }
      signatureVisitor.writeClassEnd();
    }
    return asmType;
  }
  if (descriptor instanceof TypeParameterDescriptor) {
    Type type=mapType(((TypeParameterDescriptor)descriptor).getUpperBoundsAsType(),kind);
    if (signatureVisitor != null) {
      TypeParameterDescriptor typeParameterDescriptor=(TypeParameterDescriptor)jetType.getConstructor().getDeclarationDescriptor();
      signatureVisitor.writeTypeVariable(typeParameterDescriptor.getName(),jetType.isNullable(),type);
    }
    return type;
  }
  throw new UnsupportedOperationException("Unknown type " + jetType);
}
