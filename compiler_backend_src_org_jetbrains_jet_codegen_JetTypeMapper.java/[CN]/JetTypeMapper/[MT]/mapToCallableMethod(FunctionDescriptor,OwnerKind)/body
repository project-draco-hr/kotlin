{
  if (functionDescriptor == null)   return null;
  final DeclarationDescriptor functionParent=functionDescriptor.getContainingDeclaration();
  final List<Type> valueParameterTypes=new ArrayList<Type>();
  Method descriptor=mapSignature(functionDescriptor.getOriginal(),valueParameterTypes,kind);
  String owner;
  int invokeOpcode;
  ClassDescriptor thisClass;
  if (functionParent instanceof NamespaceDescriptor) {
    owner=NamespaceCodegen.getJVMClassName(DescriptorRenderer.getFQName(functionParent));
    invokeOpcode=Opcodes.INVOKESTATIC;
    thisClass=null;
  }
 else   if (functionParent instanceof ClassDescriptor) {
    ClassDescriptor containingClass=(ClassDescriptor)functionParent;
    owner=jvmName(containingClass,OwnerKind.IMPLEMENTATION);
    invokeOpcode=CodegenUtil.isInterface(containingClass) ? Opcodes.INVOKEINTERFACE : Opcodes.INVOKEVIRTUAL;
    thisClass=containingClass;
  }
 else {
    throw new UnsupportedOperationException("unknown function parent");
  }
  final CallableMethod result=new CallableMethod(owner,descriptor,invokeOpcode,valueParameterTypes);
  result.setAcceptsTypeArguments(true);
  result.setNeedsThis(thisClass);
  if (functionDescriptor.getReceiverParameter().exists()) {
    result.setNeedsReceiver(functionDescriptor.getReceiverParameter().getType().getConstructor().getDeclarationDescriptor());
  }
  return result;
}
