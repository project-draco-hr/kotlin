{
  namedMethods.put("kotlin.javaClass.function",new JavaClassFunction());
  namedMethods.put("kotlin.javaClass.property",new JavaClassProperty());
  namedMethods.put("kotlin.arrays.array",new JavaClassArray());
  namedMethods.put("kotlin.collections.copyToArray",new CopyToArray());
  namedMethods.put("kotlin.synchronized",new StupidSync());
  ImmutableList<Name> primitiveCastMethods=OperatorConventions.NUMBER_CONVERSIONS.asList();
  for (  Name method : primitiveCastMethods) {
    declareIntrinsicFunction(Name.identifier("Number"),method,0,NUMBER_CAST);
    for (    PrimitiveType type : PrimitiveType.NUMBER_TYPES) {
      declareIntrinsicFunction(type.getTypeName(),method,0,NUMBER_CAST);
    }
  }
  for (  PrimitiveType type : PrimitiveType.NUMBER_TYPES) {
    Name typeName=type.getTypeName();
    declareIntrinsicFunction(typeName,Name.identifier("plus"),0,UNARY_PLUS);
    declareIntrinsicFunction(typeName,Name.identifier("minus"),0,UNARY_MINUS);
    declareIntrinsicFunction(typeName,Name.identifier("inv"),0,INV);
    declareIntrinsicFunction(typeName,Name.identifier("rangeTo"),1,RANGE_TO);
    declareIntrinsicFunction(typeName,Name.identifier("inc"),0,INC);
    declareIntrinsicFunction(typeName,Name.identifier("dec"),0,DEC);
  }
  for (  PrimitiveType type : PrimitiveType.values()) {
    Name typeName=type.getTypeName();
    declareIntrinsicFunction(typeName,Name.identifier("equals"),1,EQUALS);
    declareIntrinsicFunction(typeName,Name.identifier("hashCode"),0,HASH_CODE);
    declareIntrinsicFunction(typeName,Name.identifier("toString"),0,TO_STRING);
  }
  declareBinaryOp(Name.identifier("plus"),IADD);
  declareBinaryOp(Name.identifier("minus"),ISUB);
  declareBinaryOp(Name.identifier("times"),IMUL);
  declareBinaryOp(Name.identifier("div"),IDIV);
  declareBinaryOp(Name.identifier("mod"),IREM);
  declareBinaryOp(Name.identifier("shl"),ISHL);
  declareBinaryOp(Name.identifier("shr"),ISHR);
  declareBinaryOp(Name.identifier("ushr"),IUSHR);
  declareBinaryOp(Name.identifier("and"),IAND);
  declareBinaryOp(Name.identifier("or"),IOR);
  declareBinaryOp(Name.identifier("xor"),IXOR);
  declareIntrinsicFunction(Name.identifier("Boolean"),Name.identifier("not"),0,new Not());
  declareIntrinsicFunction(Name.identifier("String"),Name.identifier("plus"),1,new Concat());
  declareIntrinsicFunction(Name.identifier("CharSequence"),Name.identifier("get"),1,new StringGetChar());
  declareIntrinsicFunction(Name.identifier("String"),Name.identifier("get"),1,new StringGetChar());
  intrinsicsMap.registerIntrinsic(BUILT_INS_PACKAGE_FQ_NAME,Name.identifier("toString"),0,TO_STRING);
  intrinsicsMap.registerIntrinsic(BUILT_INS_PACKAGE_FQ_NAME,Name.identifier("equals"),1,EQUALS);
  intrinsicsMap.registerIntrinsic(BUILT_INS_PACKAGE_FQ_NAME,Name.identifier("identityEquals"),1,IDENTITY_EQUALS);
  intrinsicsMap.registerIntrinsic(BUILT_INS_PACKAGE_FQ_NAME,Name.identifier("plus"),1,STRING_PLUS);
  intrinsicsMap.registerIntrinsic(BUILT_INS_PACKAGE_FQ_NAME,Name.identifier("arrayOfNulls"),1,new NewArray());
  intrinsicsMap.registerIntrinsic(BUILT_INS_PACKAGE_FQ_NAME,Name.identifier("iterator"),0,new IteratorIterator());
  for (  PrimitiveType type : PrimitiveType.values()) {
    declareIntrinsicFunction(type.getTypeName(),Name.identifier("compareTo"),1,new CompareTo());
    declareIntrinsicFunction(Name.identifier(type.getTypeName() + "Iterator"),Name.identifier("next"),0,ITERATOR_NEXT);
  }
  declareIntrinsicProperty(Name.identifier("CharSequence"),Name.identifier("length"),new StringLength());
  declareIntrinsicProperty(Name.identifier("String"),Name.identifier("length"),new StringLength());
  registerStaticField(getFqNameSafe(KotlinBuiltIns.getInstance().getUnit()),Name.identifier("VALUE"));
  for (  PrimitiveType type : PrimitiveType.NUMBER_TYPES) {
    FqName rangeClassFqName=RangeCodegenUtil.getRangeClassFqName(type);
    FqName progressionClassFqName=RangeCodegenUtil.getProgressionClassFqName(type);
    registerStaticField(rangeClassFqName,Name.identifier("EMPTY"));
    registerRangeOrProgressionProperty(rangeClassFqName,Name.identifier("start"));
    registerRangeOrProgressionProperty(rangeClassFqName,Name.identifier("end"));
    registerRangeOrProgressionProperty(progressionClassFqName,Name.identifier("start"));
    registerRangeOrProgressionProperty(progressionClassFqName,Name.identifier("end"));
    registerRangeOrProgressionProperty(progressionClassFqName,Name.identifier("increment"));
  }
  declareArrayMethods();
}
