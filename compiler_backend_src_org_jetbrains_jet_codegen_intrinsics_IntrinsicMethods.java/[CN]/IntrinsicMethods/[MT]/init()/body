{
  namedMethods.put(KOTLIN_JAVA_CLASS_FUNCTION,new JavaClassFunction());
  namedMethods.put(KOTLIN_JAVA_CLASS_PROPERTY,new JavaClassProperty());
  namedMethods.put(KOTLIN_ARRAYS_ARRAY,new JavaClassArray());
  ImmutableList<Name> primitiveCastMethods=OperatorConventions.NUMBER_CONVERSIONS.asList();
  for (  Name method : primitiveCastMethods) {
    declareIntrinsicFunction(Name.identifier("Number"),method,0,NUMBER_CAST);
    for (    Name type : PRIMITIVE_NUMBER_TYPES) {
      declareIntrinsicFunction(type,method,0,NUMBER_CAST);
    }
  }
  for (  Name type : PRIMITIVE_NUMBER_TYPES) {
    declareIntrinsicFunction(type,Name.identifier("plus"),0,UNARY_PLUS);
    declareIntrinsicFunction(type,Name.identifier("minus"),0,UNARY_MINUS);
    declareIntrinsicFunction(type,Name.identifier("inv"),0,INV);
    declareIntrinsicFunction(type,Name.identifier("rangeTo"),1,RANGE_TO);
    declareIntrinsicFunction(type,Name.identifier("inc"),0,INC);
    declareIntrinsicFunction(type,Name.identifier("dec"),0,DEC);
    declareIntrinsicFunction(type,Name.identifier("hashCode"),0,HASH_CODE);
    declareIntrinsicFunction(type,Name.identifier("equals"),1,EQUALS);
  }
  declareBinaryOp(Name.identifier("plus"),Opcodes.IADD);
  declareBinaryOp(Name.identifier("minus"),Opcodes.ISUB);
  declareBinaryOp(Name.identifier("times"),Opcodes.IMUL);
  declareBinaryOp(Name.identifier("div"),Opcodes.IDIV);
  declareBinaryOp(Name.identifier("mod"),Opcodes.IREM);
  declareBinaryOp(Name.identifier("shl"),Opcodes.ISHL);
  declareBinaryOp(Name.identifier("shr"),Opcodes.ISHR);
  declareBinaryOp(Name.identifier("ushr"),Opcodes.IUSHR);
  declareBinaryOp(Name.identifier("and"),Opcodes.IAND);
  declareBinaryOp(Name.identifier("or"),Opcodes.IOR);
  declareBinaryOp(Name.identifier("xor"),Opcodes.IXOR);
  declareIntrinsicFunction(Name.identifier("Boolean"),Name.identifier("not"),0,new Not());
  declareIntrinsicFunction(Name.identifier("String"),Name.identifier("plus"),1,new Concat());
  declareIntrinsicFunction(Name.identifier("CharSequence"),Name.identifier("get"),1,new StringGetChar());
  declareIntrinsicFunction(Name.identifier("String"),Name.identifier("get"),1,new StringGetChar());
  intrinsicsMap.registerIntrinsic(JetStandardClasses.STANDARD_CLASSES_FQNAME,Name.identifier("toString"),0,new ToString());
  intrinsicsMap.registerIntrinsic(JetStandardClasses.STANDARD_CLASSES_FQNAME,Name.identifier("equals"),1,EQUALS);
  intrinsicsMap.registerIntrinsic(JetStandardClasses.STANDARD_CLASSES_FQNAME,Name.identifier("identityEquals"),1,IDENTITY_EQUALS);
  intrinsicsMap.registerIntrinsic(JetStandardClasses.STANDARD_CLASSES_FQNAME,Name.identifier("plus"),1,STRING_PLUS);
  intrinsicsMap.registerIntrinsic(JetStandardClasses.STANDARD_CLASSES_FQNAME,Name.identifier("arrayOfNulls"),1,new NewArray());
  intrinsicsMap.registerIntrinsic(JetStandardClasses.STANDARD_CLASSES_FQNAME,Name.identifier("sure"),0,new Sure());
  intrinsicsMap.registerIntrinsic(JetStandardClasses.STANDARD_CLASSES_FQNAME,Name.identifier("synchronized"),2,new StupidSync());
  intrinsicsMap.registerIntrinsic(JetStandardClasses.STANDARD_CLASSES_FQNAME,Name.identifier("iterator"),0,new IteratorIterator());
  declareIntrinsicFunction(Name.identifier("ByteIterator"),Name.identifier("next"),0,ITERATOR_NEXT);
  declareIntrinsicFunction(Name.identifier("ShortIterator"),Name.identifier("next"),0,ITERATOR_NEXT);
  declareIntrinsicFunction(Name.identifier("IntIterator"),Name.identifier("next"),0,ITERATOR_NEXT);
  declareIntrinsicFunction(Name.identifier("LongIterator"),Name.identifier("next"),0,ITERATOR_NEXT);
  declareIntrinsicFunction(Name.identifier("CharIterator"),Name.identifier("next"),0,ITERATOR_NEXT);
  declareIntrinsicFunction(Name.identifier("BooleanIterator"),Name.identifier("next"),0,ITERATOR_NEXT);
  declareIntrinsicFunction(Name.identifier("FloatIterator"),Name.identifier("next"),0,ITERATOR_NEXT);
  declareIntrinsicFunction(Name.identifier("DoubleIterator"),Name.identifier("next"),0,ITERATOR_NEXT);
  for (  Name type : PRIMITIVE_TYPES) {
    declareIntrinsicFunction(type,Name.identifier("compareTo"),1,new CompareTo());
  }
  declareIntrinsicProperty(Name.identifier("CharSequence"),Name.identifier("length"),new StringLength());
  declareIntrinsicProperty(Name.identifier("String"),Name.identifier("length"),new StringLength());
  declareArrayMethods();
}
