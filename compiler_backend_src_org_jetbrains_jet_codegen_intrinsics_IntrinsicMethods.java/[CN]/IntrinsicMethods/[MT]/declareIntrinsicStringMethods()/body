{
  final ClassDescriptor stringClass=myStdLib.getString();
  final Collection<DeclarationDescriptor> stringMembers=stringClass.getMemberScope(Collections.<TypeProjection>emptyList()).getAllDescriptors();
  final PsiClass stringPsiClass=JavaPsiFacade.getInstance(myProject).findClass("java.lang.String",new DelegatingGlobalSearchScope(ProjectScope.getLibrariesScope(myProject)){
    @Override public boolean contains(    VirtualFile file){
      return myBaseScope.contains(file) && file.getFileType() != JetFileType.INSTANCE;
    }
  }
);
  for (  DeclarationDescriptor stringMember : stringMembers) {
    if (stringMember instanceof NamedFunctionDescriptor) {
      final NamedFunctionDescriptor stringMethod=(NamedFunctionDescriptor)stringMember;
      final PsiMethod[] methods=stringPsiClass != null ? stringPsiClass.findMethodsByName(stringMember.getName(),false) : new PsiMethod[]{};
      for (      PsiMethod method : methods) {
        if (method.getParameterList().getParametersCount() == stringMethod.getValueParameters().size()) {
          myMethods.put(stringMethod,new PsiMethodCall(stringMethod));
        }
      }
    }
  }
}
