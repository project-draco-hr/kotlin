{
  if (node == null) {
    return;
  }
  int flags=node.astModifiers().getEffectiveModifierFlags();
  if ((flags & Modifier.ABSTRACT) != 0) {
    return;
  }
  int minSdk=Math.max(context.getProject().getMinSdk(),getTargetApi(node));
  if (minSdk >= CONCRETE_IN) {
    return;
  }
  String[] methodNames={ON_NOTIFICATION_POSTED,ON_NOTIFICATION_REMOVED};
  for (  String methodName : methodNames) {
    boolean found=false;
    for (    ResolvedMethod method : resolvedClass.getMethods(methodName,true)) {
      ResolvedClass containingClass=method.getContainingClass();
      if (containingClass.matches(NOTIFICATION_LISTENER_SERVICE_FQN)) {
        continue;
      }
      if ((method.getModifiers() & Modifier.ABSTRACT) != 0) {
        continue;
      }
      if (method.getArgumentCount() != 1) {
        continue;
      }
      if (!method.getArgumentType(0).matchesName(STATUS_BAR_NOTIFICATION_FQN)) {
        continue;
      }
      found=true;
      break;
    }
    if (!found) {
      String message=String.format("Must override `%1$s.%2$s(%3$s)`: Method was abstract until %4$d, and your `minSdkVersion` is %5$d",NOTIFICATION_LISTENER_SERVICE_FQN,methodName,STATUS_BAR_NOTIFICATION_FQN,CONCRETE_IN,minSdk);
      Node nameNode=node.astName();
      context.report(ISSUE,node,context.getLocation(nameNode),message);
      break;
    }
  }
}
