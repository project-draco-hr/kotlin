{
  this.descriptorResolver=new DescriptorResolver();
  this.expressionTypingServices=new ExpressionTypingServices();
  this.typeResolver=new TypeResolver();
  this.callResolver=new CallResolver();
  this.kotlinBuiltIns=KotlinBuiltIns.getInstance();
  this.moduleConfiguration=ModuleConfiguration.EMPTY;
  this.project=project;
  this.annotationResolver=new AnnotationResolver();
  this.qualifiedExpressionResolver=new QualifiedExpressionResolver();
  this.resolutionResultsHandler=new ResolutionResultsHandler();
  this.overloadingConflictResolver=new OverloadingConflictResolver();
  this.descriptorResolver.setAnnotationResolver(annotationResolver);
  this.descriptorResolver.setExpressionTypingServices(expressionTypingServices);
  this.descriptorResolver.setTypeResolver(typeResolver);
  this.expressionTypingServices.setCallResolver(callResolver);
  this.expressionTypingServices.setDescriptorResolver(descriptorResolver);
  this.expressionTypingServices.setProject(project);
  this.expressionTypingServices.setTypeResolver(typeResolver);
  this.typeResolver.setAnnotationResolver(annotationResolver);
  this.typeResolver.setDescriptorResolver(descriptorResolver);
  this.typeResolver.setModuleConfiguration(moduleConfiguration);
  this.typeResolver.setQualifiedExpressionResolver(qualifiedExpressionResolver);
  this.callResolver.setDescriptorResolver(descriptorResolver);
  this.callResolver.setExpressionTypingServices(expressionTypingServices);
  this.callResolver.setResolutionResultsHandler(resolutionResultsHandler);
  this.callResolver.setTypeResolver(typeResolver);
  annotationResolver.setCallResolver(callResolver);
  annotationResolver.setExpressionTypingServices(expressionTypingServices);
  resolutionResultsHandler.setOverloadingConflictResolver(overloadingConflictResolver);
}
