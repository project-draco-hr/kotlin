{
  PsiElement leaf=location.getPsiElement();
  if (!(leaf.getContainingFile() instanceof JetFile)) {
    return null;
  }
  JetFile jetFile=(JetFile)leaf.getContainingFile();
  JetNamedFunction function=PsiTreeUtil.getParentOfType(leaf,JetNamedFunction.class,false);
  if (function != null) {
    myElement=function;
    @SuppressWarnings("unchecked") JetElement owner=PsiTreeUtil.getParentOfType(function,JetFunction.class,JetClass.class);
    if (owner instanceof JetClass) {
      JetLightClass delegate=wrapDelegate((JetClass)owner);
      for (      PsiMethod method : delegate.getMethods()) {
        if (method.getNavigationElement() == function) {
          Location<PsiMethod> methodLocation=PsiLocation.fromPsiElement(method);
          if (JUnitUtil.isTestMethod(methodLocation,false)) {
            RunnerAndConfigurationSettings settings=cloneTemplateConfiguration(context.getProject(),context);
            final JUnitConfiguration configuration=(JUnitConfiguration)settings.getConfiguration();
            final Module originalModule=configuration.getConfigurationModule().getModule();
            configuration.beMethodConfiguration(methodLocation);
            configuration.restoreOriginalModule(originalModule);
            JavaRunConfigurationExtensionManager.getInstance().extendCreatedConfiguration(configuration,location);
            return settings;
          }
          break;
        }
      }
    }
  }
  JetClass jetClass=PsiTreeUtil.getParentOfType(leaf,JetClass.class,false);
  if (jetClass == null) {
    jetClass=getClassDeclarationInFile(jetFile);
  }
  if (jetClass != null) {
    myElement=jetClass;
    PsiClass delegate=wrapDelegate(jetClass);
    if (JUnitUtil.isTestClass(delegate)) {
      RunnerAndConfigurationSettings settings=cloneTemplateConfiguration(context.getProject(),context);
      final JUnitConfiguration configuration=(JUnitConfiguration)settings.getConfiguration();
      final Module originalModule=configuration.getConfigurationModule().getModule();
      configuration.beClassConfiguration(delegate);
      configuration.restoreOriginalModule(originalModule);
      JavaRunConfigurationExtensionManager.getInstance().extendCreatedConfiguration(configuration,location);
      return settings;
    }
  }
  return null;
}
