{
  if (Boolean.valueOf(System.getProperty("test.lint.skip"))) {
    return;
  }
  NativeObject options=new NativeObject();
  options.defineProperty("white",true,ScriptableObject.READONLY);
  options.defineProperty("vars",true,ScriptableObject.READONLY);
  NativeArray globals=new NativeArray(new Object[]{"Kotlin"});
  options.defineProperty("predef",globals,ScriptableObject.READONLY);
  Object[] args={FileUtil.loadFile(new File(fileName)),options};
  FunctionWithScope functionWithScope=functionManager.getFunctionWithScope();
  Function function=functionWithScope.getFunction();
  Scriptable scope=functionWithScope.getScope();
  Object status=function.call(context,scope,scope,args);
  Boolean noErrors=(Boolean)Context.jsToJava(status,Boolean.class);
  if (!noErrors) {
    Object errors=function.get("errors",scope);
    if (errors == null) {
      return;
    }
    System.out.println(fileName);
    for (    Object errorObj : ((NativeArray)errors)) {
      if (!(errorObj instanceof NativeObject)) {
        continue;
      }
      NativeObject e=(NativeObject)errorObj;
      int line=toInt(e.get("line"));
      int character=toInt(e.get("character"));
      if (line < 0 || character < 0) {
        continue;
      }
      Object reasonObj=e.get("reason");
      if (reasonObj instanceof String) {
        String reason=(String)reasonObj;
        if (IGNORED_JSLINT_WARNINGS.contains(reason)) {
          continue;
        }
        System.out.println(line + ":" + character+ " "+ reason);
      }
    }
  }
}
