{
  if (!(ref instanceof PsiReferenceExpression || ref instanceof KtReference)) {
    if (!(ref instanceof PsiElement)) {
      return true;
    }
    PsiElement parent=((PsiElement)ref).getParent();
    if (parent instanceof PsiNewExpression) {
      if (((PsiNewExpression)parent).getClassReference() != ref) {
        return true;
      }
    }
 else     if (parent instanceof PsiAnonymousClass) {
      if (((PsiAnonymousClass)parent).getBaseClassReference() != ref) {
        return true;
      }
    }
 else     if (ref instanceof LightMemberReference) {
      PsiElement refTarget=ref.resolve();
      if (!(refTarget instanceof PsiMethod && ((PsiMethod)refTarget).isConstructor()))       return true;
    }
 else {
      return true;
    }
  }
  PsiElement refElement=ref.getElement();
  if (PsiTreeUtil.getParentOfType(refElement,KtImportDirective.class,true) != null)   return true;
  PsiElement element=HierarchyUtils.getCallHierarchyElement(refElement);
  if (kotlinOnly && !(element instanceof KtNamedDeclaration))   return true;
  if (element instanceof KtProperty) {
    KtProperty property=(KtProperty)element;
    if (PsiTreeUtil.isAncestor(property.getInitializer(),refElement,false)) {
      element=HierarchyUtils.getCallHierarchyElement(element.getParent());
    }
  }
  if (element != null) {
    onAccept(ref,element);
  }
  return true;
}
