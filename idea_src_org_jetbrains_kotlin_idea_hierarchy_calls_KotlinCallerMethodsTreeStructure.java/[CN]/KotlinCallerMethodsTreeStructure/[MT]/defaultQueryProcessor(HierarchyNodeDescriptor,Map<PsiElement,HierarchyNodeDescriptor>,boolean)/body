{
  return new ReadActionProcessor<PsiReference>(){
    @Override public boolean processInReadAction(    PsiReference ref){
      if (!(ref instanceof PsiReferenceExpression || ref instanceof JetReference)) {
        if (!(ref instanceof PsiElement)) {
          return true;
        }
        PsiElement parent=((PsiElement)ref).getParent();
        if (parent instanceof PsiNewExpression) {
          if (((PsiNewExpression)parent).getClassReference() != ref) {
            return true;
          }
        }
 else         if (parent instanceof PsiAnonymousClass) {
          if (((PsiAnonymousClass)parent).getBaseClassReference() != ref) {
            return true;
          }
        }
 else {
          return true;
        }
      }
 else       if (ref instanceof LightMemberReference) {
        PsiElement refTarget=ref.resolve();
        if (!(refTarget instanceof PsiMethod && ((PsiMethod)refTarget).isConstructor()))         return true;
      }
      PsiElement refElement=ref.getElement();
      if (PsiTreeUtil.getParentOfType(refElement,JetImportDirective.class,true) != null)       return true;
      PsiElement element=HierarchyUtils.getCallHierarchyElement(refElement);
      if (kotlinOnly && !(element instanceof JetNamedDeclaration))       return true;
      if (element instanceof JetProperty) {
        JetProperty property=(JetProperty)element;
        if (PsiTreeUtil.isAncestor(property.getInitializer(),refElement,false)) {
          element=HierarchyUtils.getCallHierarchyElement(element.getParent());
        }
      }
      if (element != null) {
        addNodeDescriptorForElement(ref,element,methodToDescriptorMap,descriptor);
      }
      return true;
    }
  }
;
}
