{
  final PsiElement element=getTargetElement(descriptor);
  KtElement codeBlockForLocalDeclaration=getEnclosingElementForLocalDeclaration(element);
  if (codeBlockForLocalDeclaration != null) {
    BindingContext bindingContext=ResolutionUtils.analyze((KtElement)element,BodyResolveMode.FULL);
    final Map<PsiReference,PsiElement> referencesToElements=new HashMap<PsiReference,PsiElement>();
    codeBlockForLocalDeclaration.accept(new CalleeReferenceVisitorBase(bindingContext,true){
      @Override protected void processDeclaration(      KtSimpleNameExpression reference,      PsiElement declaration){
        if (!declaration.equals(element))         return;
        PsiElement container=PsiTreeUtil.getParentOfType(reference,KtNamedFunction.class,KtPropertyAccessor.class,KtClassOrObject.class);
        if (container instanceof KtPropertyAccessor) {
          container=PsiTreeUtil.getParentOfType(container,KtProperty.class);
        }
        if (container != null) {
          referencesToElements.put(ReferenceUtilKt.getMainReference(reference),container);
        }
      }
    }
);
    return collectNodeDescriptors(descriptor,referencesToElements,null);
  }
  SearchScope searchScope=getSearchScope(scopeType,basePsiClass);
  Map<PsiElement,HierarchyNodeDescriptor> methodToDescriptorMap=Maps.newHashMap();
  Object[] javaCallers=null;
  if (element instanceof PsiMethod) {
    javaCallers=javaTreeStructure.getChildElements(getJavaNodeDescriptor(descriptor));
    processPsiMethodCallers(Collections.singleton((PsiMethod)element),descriptor,methodToDescriptorMap,searchScope,true);
  }
  if (element instanceof KtNamedFunction || element instanceof KtSecondaryConstructor) {
    Collection<PsiMethod> lightMethods=LightClassUtil.INSTANCE$.getLightClassMethods((KtFunction)element);
    processPsiMethodCallers(lightMethods,descriptor,methodToDescriptorMap,searchScope,false);
  }
  if (element instanceof KtProperty) {
    LightClassUtil.PropertyAccessorsPsiMethods propertyMethods=LightClassUtil.INSTANCE$.getLightClassPropertyMethods((KtProperty)element);
    processPsiMethodCallers(propertyMethods,descriptor,methodToDescriptorMap,searchScope,false);
  }
  if (element instanceof KtClassOrObject) {
    KtPrimaryConstructor constructor=((KtClassOrObject)element).getPrimaryConstructor();
    if (constructor != null) {
      PsiMethod lightMethod=LightClassUtil.INSTANCE$.getLightClassMethod(constructor);
      processPsiMethodCallers(Collections.singleton(lightMethod),descriptor,methodToDescriptorMap,searchScope,false);
    }
 else {
      processKtClassOrObjectCallers((KtClassOrObject)element,descriptor,methodToDescriptorMap,searchScope);
    }
  }
  Object[] callers=methodToDescriptorMap.values().toArray(new Object[methodToDescriptorMap.size()]);
  return (javaCallers != null) ? ArrayUtil.mergeArrays(javaCallers,callers) : callers;
}
