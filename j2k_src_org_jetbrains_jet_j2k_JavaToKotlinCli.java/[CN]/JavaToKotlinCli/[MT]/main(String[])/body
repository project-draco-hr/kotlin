{
  CommandLineParser parser=new BasicParser();
  Options options=new Options().addOption("h","help",false,"Print usage information").addOption("f","from",true,"Directory with Java sources").addOption("t","to",true,"Directory with Kotlin sources").addOption("p","public-only",false,"Only public and protected members").addOption("fqn","fqn",false,"Full qualified names").addOption("d","declarations-only",false,"Declarations only");
  try {
    CommandLine commandLine=parser.parse(options,args);
    if (commandLine.hasOption("help"))     showHelpAndExit();
    if (commandLine.hasOption("from") && commandLine.hasOption("to")) {
      String from=commandLine.getOptionValue("from");
      String to=commandLine.getOptionValue("to");
      for (      Option o : commandLine.getOptions()) {
        Converter.addSetting(o.getLongOpt());
      }
      if (!from.isEmpty() && !to.isEmpty())       convertSourceTree(from,to);
 else       showHelpAndExit();
    }
 else     showHelpAndExit();
  }
 catch (  ParseException e) {
    e.printStackTrace();
  }
}
