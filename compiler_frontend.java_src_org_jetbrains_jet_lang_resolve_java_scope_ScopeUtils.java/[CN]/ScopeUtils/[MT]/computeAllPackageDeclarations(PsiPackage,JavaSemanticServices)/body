{
  Collection<DeclarationDescriptor> result=Sets.newHashSet();
  JavaDescriptorResolver descriptorResolver=javaSemanticServices.getDescriptorResolver();
  for (  PsiPackage psiSubPackage : psiPackage.getSubPackages()) {
    NamespaceDescriptor childNs=descriptorResolver.resolveNamespace(new FqName(psiSubPackage.getQualifiedName()),DescriptorSearchRule.IGNORE_IF_FOUND_IN_KOTLIN);
    if (childNs != null) {
      result.add(childNs);
    }
  }
  for (  PsiClass psiClass : javaSemanticServices.getPsiClassFinder().findPsiClasses(psiPackage)) {
    if (DescriptorResolverUtils.isCompiledKotlinPackageClass(psiClass)) {
      continue;
    }
    if (psiClass instanceof JetJavaMirrorMarker) {
      continue;
    }
    if (psiClass.hasModifierProperty(PsiModifier.PUBLIC)) {
      ProgressIndicatorProvider.checkCanceled();
      FqName fqName=new FqName(psiClass.getQualifiedName());
      ClassDescriptor classDescriptor=descriptorResolver.resolveClass(fqName,DescriptorSearchRule.IGNORE_IF_FOUND_IN_KOTLIN);
      if (classDescriptor != null) {
        result.add(classDescriptor);
      }
      NamespaceDescriptor namespaceDescriptor=descriptorResolver.resolveNamespace(fqName,DescriptorSearchRule.IGNORE_IF_FOUND_IN_KOTLIN);
      if (namespaceDescriptor != null) {
        result.add(namespaceDescriptor);
      }
    }
  }
  return result;
}
