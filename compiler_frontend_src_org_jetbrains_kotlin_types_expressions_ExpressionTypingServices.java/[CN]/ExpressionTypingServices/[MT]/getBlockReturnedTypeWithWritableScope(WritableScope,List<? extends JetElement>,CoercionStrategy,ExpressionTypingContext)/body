{
  if (block.isEmpty()) {
    return TypeInfoFactoryPackage.createTypeInfo(expressionTypingComponents.builtIns.getUnitType(),context);
  }
  ExpressionTypingInternals blockLevelVisitor=ExpressionTypingVisitorDispatcher.createForBlock(expressionTypingComponents,scope);
  ExpressionTypingContext newContext=context.replaceScope(scope).replaceExpectedType(NO_EXPECTED_TYPE);
  JetTypeInfo result=TypeInfoFactoryPackage.noTypeInfo(context);
  DataFlowInfo beforeJumpInfo=newContext.dataFlowInfo;
  boolean jumpOutPossible=false;
  for (Iterator<? extends JetElement> iterator=block.iterator(); iterator.hasNext(); ) {
    JetElement statement=iterator.next();
    if (!(statement instanceof JetExpression)) {
      continue;
    }
    JetExpression statementExpression=(JetExpression)statement;
    if (!iterator.hasNext()) {
      result=getTypeOfLastExpressionInBlock(statementExpression,newContext.replaceExpectedType(context.expectedType),coercionStrategyForLastExpression,blockLevelVisitor);
    }
 else {
      result=blockLevelVisitor.getTypeInfo(statementExpression,newContext.replaceContextDependency(ContextDependency.INDEPENDENT),true);
    }
    DataFlowInfo newDataFlowInfo=result.getDataFlowInfo();
    if (!jumpOutPossible) {
      beforeJumpInfo=result.getJumpFlowInfo();
      jumpOutPossible=result.getJumpOutPossible();
    }
    if (newDataFlowInfo != context.dataFlowInfo) {
      newContext=newContext.replaceDataFlowInfo(newDataFlowInfo);
    }
    blockLevelVisitor=ExpressionTypingVisitorDispatcher.createForBlock(expressionTypingComponents,scope);
  }
  return result.replaceJumpOutPossible(jumpOutPossible).replaceJumpFlowInfo(beforeJumpInfo);
}
