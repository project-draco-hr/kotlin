{
  return ApplicationManager.getApplication().runReadAction(new Computable<Boolean>(){
    @Override public Boolean compute(){
      KotlinClassFindUsagesOptions kotlinOptions=(KotlinClassFindUsagesOptions)options;
      JetClassOrObject classOrObject=(JetClassOrObject)element;
      UsagesSearchTarget<JetClassOrObject> target=FindUsagesPackage.toSearchTarget(kotlinOptions,classOrObject,true);
      UsagesSearchRequest classRequest=FindUsagesPackage.toClassHelper(kotlinOptions).newRequest(target);
      UsagesSearchRequest declarationsRequest=FindUsagesPackage.toClassDeclarationsHelper(kotlinOptions).newRequest(target);
      for (      PsiReference ref : UsagesSearch.instance$.search(classRequest)) {
        processUsage(processor,ref);
      }
      for (      PsiReference ref : UsagesSearch.instance$.search(declarationsRequest)) {
        processUsage(processor,ref);
      }
      PsiClass lightClass=LightClassUtil.getPsiClass(classOrObject);
      if (lightClass == null)       return true;
      if (!processInheritors(lightClass,processor,kotlinOptions))       return false;
      return true;
    }
  }
);
}
