{
  return ApplicationManager.getApplication().runReadAction(new Computable<Boolean>(){
    @Override public Boolean compute(){
      KotlinClassFindUsagesOptions kotlinOptions=(KotlinClassFindUsagesOptions)options;
      JetClass jetClass=(JetClass)element;
      if (kotlinOptions.isUsages || kotlinOptions.getSearchConstructorUsages()) {
        Collection<PsiReference> references=ReferencesSearch.search(new ReferencesSearch.SearchParameters(jetClass,kotlinOptions.searchScope,false)).findAll();
        for (        PsiReference ref : references) {
          boolean constructorUsage=FindUsagesPackage.isConstructorUsage(ref.getElement(),jetClass);
          if ((constructorUsage && !kotlinOptions.getSearchConstructorUsages()) || (!constructorUsage && !kotlinOptions.isUsages))           continue;
          processUsage(processor,ref,kotlinOptions);
        }
      }
      PsiClass lightClass=LightClassUtil.getPsiClass(getElement());
      if (lightClass == null)       return true;
      if (!processDeclarationsUsages(jetClass,processor,kotlinOptions))       return false;
      if (!processInheritors(lightClass,processor,kotlinOptions))       return false;
      return true;
    }
  }
);
}
