{
  KotlinClassFindUsagesOptions kotlinOptions=(KotlinClassFindUsagesOptions)options;
  JetClass jetClass=(JetClass)element;
  if (kotlinOptions.isUsages || kotlinOptions.searchConstructorUsages) {
    Collection<PsiReference> references=ReferencesSearch.search(new ReferencesSearch.SearchParameters(jetClass,kotlinOptions.searchScope,false)).findAll();
    for (    PsiReference ref : references) {
      boolean constructorUsage=isConstructorUsage(ref.getElement(),jetClass);
      if ((constructorUsage && !kotlinOptions.searchConstructorUsages) || (!constructorUsage && !kotlinOptions.isUsages))       continue;
      TextRange rangeInElement=ref.getRangeInElement();
      processor.process(new UsageInfo(ref.getElement(),rangeInElement.getStartOffset(),rangeInElement.getEndOffset(),false));
    }
  }
  return true;
}
