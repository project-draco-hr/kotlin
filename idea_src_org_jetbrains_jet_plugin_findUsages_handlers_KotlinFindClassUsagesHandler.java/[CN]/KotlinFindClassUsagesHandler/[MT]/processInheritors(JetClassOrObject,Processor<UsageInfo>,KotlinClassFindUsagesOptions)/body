{
  HierarchySearchRequest<PsiElement> request=new HierarchySearchRequest<PsiElement>(classOrObject,options.searchScope,options.isCheckDeepInheritance);
  return KotlinClassInheritorsSearch.instance$.search(request).forEach(new PsiElementProcessorAdapter<PsiElement>(new PsiElementProcessor<PsiElement>(){
    @Override public boolean execute(    @NotNull PsiElement element){
      boolean traitOrInterface=DeclarationsSearchPackage.isTraitOrInterface(element);
      if ((traitOrInterface && options.isDerivedInterfaces) || (!traitOrInterface && options.isDerivedClasses)) {
        return processUsage(processor,element);
      }
      return true;
    }
  }
));
}
