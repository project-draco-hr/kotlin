{
  Disposable rootDisposable=Disposer.newDisposable();
  try {
    List<File> sourceFiles=FileUtil.findFilesByMask(Pattern.compile(".*\\.kt"),new File(BUILT_INS_SRC_DIR));
    CompilerConfiguration configuration=new CompilerConfiguration();
    JetCoreEnvironment environment=JetCoreEnvironment.createForTests(rootDisposable,configuration);
    List<JetFile> files=JetTestUtils.loadToJetFiles(environment,sourceFiles);
    ModuleDescriptor module=LazyResolveTestUtil.resolveLazily(files,environment,false);
    PackageFragmentDescriptor packageFragment=DescriptorUtils.getExactlyOnePackageFragment(module,KotlinBuiltIns.BUILT_INS_PACKAGE_FQ_NAME);
    DescriptorValidator.validate(packageFragment);
    if (!FileUtil.delete(destDir)) {
      System.err.println("Could not delete: " + destDir);
    }
    if (!destDir.mkdirs()) {
      System.err.println("Could not make directories: " + destDir);
    }
    DescriptorSerializer serializer=new DescriptorSerializer(new SerializerExtension(){
      private final ImmutableSet<String> set=ImmutableSet.of("Any","Nothing");
      @Override public boolean hasSupertypes(      @NotNull ClassDescriptor classDescriptor){
        return !set.contains(classDescriptor.getName().asString());
      }
    }
);
    final List<Name> classNames=new ArrayList<Name>();
    List<DeclarationDescriptor> allDescriptors=DescriptorSerializer.sort(packageFragment.getMemberScope().getAllDescriptors());
    ClassSerializationUtil.serializeClasses(allDescriptors,serializer,new ClassSerializationUtil.Sink(){
      @Override public void writeClass(      @NotNull ClassDescriptor classDescriptor,      @NotNull ProtoBuf.Class classProto){
        try {
          ByteArrayOutputStream stream=new ByteArrayOutputStream();
          classProto.writeTo(stream);
          write(destDir,getFileName(classDescriptor),stream,out);
          if (DescriptorUtils.isTopLevelDeclaration(classDescriptor)) {
            classNames.add(classDescriptor.getName());
          }
        }
 catch (        IOException e) {
          throw new AssertionError(e);
        }
      }
    }
);
    ByteArrayOutputStream classNamesStream=new ByteArrayOutputStream();
    writeClassNames(serializer,classNames,classNamesStream);
    write(destDir,BuiltInsSerializationUtil.getClassNamesFilePath(packageFragment),classNamesStream,out);
    ByteArrayOutputStream packageStream=new ByteArrayOutputStream();
    ProtoBuf.Package packageProto=serializer.packageProto(Collections.singleton(packageFragment)).build();
    packageProto.writeTo(packageStream);
    write(destDir,BuiltInsSerializationUtil.getPackageFilePath(packageFragment),packageStream,out);
    ByteArrayOutputStream nameStream=new ByteArrayOutputStream();
    NameSerializationUtil.serializeNameTable(nameStream,serializer.getNameTable());
    write(destDir,BuiltInsSerializationUtil.getNameTableFilePath(packageFragment),nameStream,out);
    if (out != null) {
      out.println("Total bytes written: " + totalSize + " to "+ totalFiles+ " files");
    }
  }
  finally {
    Disposer.dispose(rootDisposable);
  }
}
