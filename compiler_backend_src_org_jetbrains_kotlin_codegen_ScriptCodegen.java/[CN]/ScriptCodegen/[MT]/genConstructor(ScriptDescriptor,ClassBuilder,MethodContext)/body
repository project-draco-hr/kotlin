{
  JvmMethodSignature jvmSignature=typeMapper.mapScriptSignature(scriptDescriptor,context.getEarlierScripts());
  if (state.getShouldGenerateScriptResultValue()) {
    FieldInfo resultFieldInfo=context.getResultFieldInfo();
    classBuilder.newField(JvmDeclarationOrigin.NO_ORIGIN,ACC_PUBLIC | ACC_FINAL,resultFieldInfo.getFieldName(),resultFieldInfo.getFieldType().getDescriptor(),null,null);
  }
  MethodVisitor mv=classBuilder.newMethod(JvmDeclarationOriginKt.OtherOrigin(scriptDeclaration,scriptDescriptor.getUnsubstitutedPrimaryConstructor()),ACC_PUBLIC,jvmSignature.getAsmMethod().getName(),jvmSignature.getAsmMethod().getDescriptor(),null,null);
  if (state.getClassBuilderMode() == ClassBuilderMode.FULL) {
    mv.visitCode();
    InstructionAdapter iv=new InstructionAdapter(mv);
    Type classType=typeMapper.mapType(scriptDescriptor);
    iv.load(0,classType);
    iv.invokespecial("java/lang/Object","<init>","()V",false);
    iv.load(0,classType);
    FrameMap frameMap=new FrameMap();
    frameMap.enterTemp(OBJECT_TYPE);
    for (    ScriptDescriptor importedScript : context.getEarlierScripts()) {
      frameMap.enter(importedScript,OBJECT_TYPE);
    }
    Type[] argTypes=jvmSignature.getAsmMethod().getArgumentTypes();
    int add=0;
    List<ValueParameterDescriptor> valueParameters=scriptDescriptor.getUnsubstitutedPrimaryConstructor().getValueParameters();
    for (int i=0; i < valueParameters.size(); i++) {
      ValueParameterDescriptor parameter=valueParameters.get(i);
      frameMap.enter(parameter,argTypes[i + add]);
    }
    int offset=1;
    for (    ScriptDescriptor earlierScript : context.getEarlierScripts()) {
      Type earlierClassType=typeMapper.mapClass(earlierScript);
      iv.load(0,classType);
      iv.load(offset,earlierClassType);
      offset+=earlierClassType.getSize();
      iv.putfield(classType.getInternalName(),context.getScriptFieldName(earlierScript),earlierClassType.getDescriptor());
    }
    for (    ValueParameterDescriptor parameter : valueParameters) {
      Type parameterType=typeMapper.mapType(parameter.getType());
      iv.load(0,classType);
      iv.load(offset,parameterType);
      offset+=parameterType.getSize();
      iv.putfield(classType.getInternalName(),parameter.getName().getIdentifier(),parameterType.getDescriptor());
    }
    final ExpressionCodegen codegen=new ExpressionCodegen(mv,frameMap,Type.VOID_TYPE,methodContext,state,this);
    generateInitializers(new Function0<ExpressionCodegen>(){
      @Override public ExpressionCodegen invoke(){
        return codegen;
      }
    }
);
    iv.areturn(Type.VOID_TYPE);
  }
  mv.visitMaxs(-1,-1);
  mv.visitEnd();
}
