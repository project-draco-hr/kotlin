{
  intrinsicsMap.registerIntrinsic(KOTLIN_JVM,RECEIVER_PARAMETER_FQ_NAME,"javaClass",-1,new JavaClassProperty());
  intrinsicsMap.registerIntrinsic(KOTLIN_JVM,KotlinBuiltIns.FQ_NAMES.kClass,"java",-1,new KClassJavaProperty());
  intrinsicsMap.registerIntrinsic(new FqName("kotlin.jvm.internal.unsafe"),null,"monitorEnter",1,MonitorInstruction.MONITOR_ENTER);
  intrinsicsMap.registerIntrinsic(new FqName("kotlin.jvm.internal.unsafe"),null,"monitorExit",1,MonitorInstruction.MONITOR_EXIT);
  intrinsicsMap.registerIntrinsic(KOTLIN_JVM,KotlinBuiltIns.FQ_NAMES.array,"isArrayOf",0,new IsArrayOf());
  intrinsicsMap.registerIntrinsic(BUILT_INS_PACKAGE_FQ_NAME,null,"arrayOf",1,new ArrayOf());
  ImmutableList<Name> primitiveCastMethods=OperatorConventions.NUMBER_CONVERSIONS.asList();
  for (  Name method : primitiveCastMethods) {
    String methodName=method.asString();
    declareIntrinsicFunction(FQ_NAMES.number,methodName,0,NUMBER_CAST);
    for (    PrimitiveType type : PrimitiveType.NUMBER_TYPES) {
      declareIntrinsicFunction(type.getTypeFqName(),methodName,0,NUMBER_CAST);
    }
  }
  for (  PrimitiveType type : PrimitiveType.NUMBER_TYPES) {
    FqName typeFqName=type.getTypeFqName();
    declareIntrinsicFunction(typeFqName,"plus",0,UNARY_PLUS);
    declareIntrinsicFunction(typeFqName,"unaryPlus",0,UNARY_PLUS);
    declareIntrinsicFunction(typeFqName,"minus",0,UNARY_MINUS);
    declareIntrinsicFunction(typeFqName,"unaryMinus",0,UNARY_MINUS);
    declareIntrinsicFunction(typeFqName,"inv",0,INV);
    declareIntrinsicFunction(typeFqName,"rangeTo",1,RANGE_TO);
    declareIntrinsicFunction(typeFqName,"inc",0,INC);
    declareIntrinsicFunction(typeFqName,"dec",0,DEC);
  }
  for (  PrimitiveType type : PrimitiveType.values()) {
    FqName typeFqName=type.getTypeFqName();
    declareIntrinsicFunction(typeFqName,"equals",1,EQUALS);
    declareIntrinsicFunction(typeFqName,"hashCode",0,HASH_CODE);
    declareIntrinsicFunction(typeFqName,"toString",0,TO_STRING);
    intrinsicsMap.registerIntrinsic(BUILT_INS_PACKAGE_FQ_NAME,null,StringsKt.decapitalize(type.getArrayTypeName().asString()) + "Of",1,new ArrayOf());
  }
  declareBinaryOp("plus",IADD);
  declareBinaryOp("minus",ISUB);
  declareBinaryOp("times",IMUL);
  declareBinaryOp("div",IDIV);
  declareBinaryOp("mod",IREM);
  declareBinaryOp("shl",ISHL);
  declareBinaryOp("shr",ISHR);
  declareBinaryOp("ushr",IUSHR);
  declareBinaryOp("and",IAND);
  declareBinaryOp("or",IOR);
  declareBinaryOp("xor",IXOR);
  declareIntrinsicFunction(FQ_NAMES._boolean,"not",0,new Not());
  declareIntrinsicFunction(FQ_NAMES.string,"plus",1,new Concat());
  declareIntrinsicFunction(FQ_NAMES.string,"get",1,new StringGetChar());
  declareIntrinsicFunction(FQ_NAMES.cloneable,"clone",0,CLONE);
  intrinsicsMap.registerIntrinsic(BUILT_INS_PACKAGE_FQ_NAME,KotlinBuiltIns.FQ_NAMES.any,"toString",0,TO_STRING);
  intrinsicsMap.registerIntrinsic(BUILT_INS_PACKAGE_FQ_NAME,KotlinBuiltIns.FQ_NAMES.string,"plus",1,STRING_PLUS);
  intrinsicsMap.registerIntrinsic(BUILT_INS_PACKAGE_FQ_NAME,null,"arrayOfNulls",1,new NewArray());
  for (  PrimitiveType type : PrimitiveType.values()) {
    declareIntrinsicFunction(type.getTypeFqName(),"compareTo",1,new CompareTo());
    declareIntrinsicFunction(COLLECTIONS_PACKAGE_FQ_NAME.child(Name.identifier(type.getTypeName().asString() + "Iterator")),"next",0,ITERATOR_NEXT);
  }
  declareArrayMethods();
}
