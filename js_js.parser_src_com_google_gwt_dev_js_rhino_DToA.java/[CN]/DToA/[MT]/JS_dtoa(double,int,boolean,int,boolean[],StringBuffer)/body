{
  int b2, b5, i, ieps, ilim, ilim0, ilim1, j, j1, k, k0, m2, m5, s2, s5;
  char dig;
  long L;
  long x;
  BigInteger b, b1, delta, mlo, mhi, S;
  int[] be=new int[1];
  int[] bbits=new int[1];
  double d2, ds, eps;
  boolean spec_case, denorm, k_check, try_quick, leftright;
  if ((word0(d) & Sign_bit) != 0) {
    sign[0]=true;
    d=setWord0(d,word0(d) & ~Sign_bit);
  }
 else   sign[0]=false;
  if ((word0(d) & Exp_mask) == Exp_mask) {
    buf.append(((word1(d) == 0) && ((word0(d) & Frac_mask) == 0)) ? "Infinity" : "NaN");
    return 9999;
  }
  if (d == 0) {
    buf.setLength(0);
    buf.append('0');
    return 1;
  }
  b=d2b(d,be,bbits);
  if ((i=(int)(word0(d) >>> Exp_shift1 & (Exp_mask >> Exp_shift1))) != 0) {
    d2=setWord0(d,(word0(d) & Frac_mask1) | Exp_11);
    i-=Bias;
    denorm=false;
  }
 else {
    i=bbits[0] + be[0] + (Bias + (P - 1) - 1);
    x=(i > 32) ? word0(d) << (64 - i) | word1(d) >>> (i - 32) : word1(d) << (32 - i);
    d2=setWord0(x,word0(x) - 31 * Exp_msk1);
    i-=(Bias + (P - 1) - 1) + 1;
    denorm=true;
  }
  ds=(d2 - 1.5) * 0.289529654602168 + 0.1760912590558 + i * 0.301029995663981;
  k=(int)ds;
  if (ds < 0.0 && ds != k)   k--;
  k_check=true;
  if (k >= 0 && k <= Ten_pmax) {
    if (d < tens[k])     k--;
    k_check=false;
  }
  j=bbits[0] - i - 1;
  if (j >= 0) {
    b2=0;
    s2=j;
  }
 else {
    b2=-j;
    s2=0;
  }
  if (k >= 0) {
    b5=0;
    s5=k;
    s2+=k;
  }
 else {
    b2-=k;
    b5=-k;
    s5=0;
  }
  if (mode < 0 || mode > 9)   mode=0;
  try_quick=true;
  if (mode > 5) {
    mode-=4;
    try_quick=false;
  }
  leftright=true;
  ilim=ilim1=0;
switch (mode) {
case 0:
case 1:
    ilim=ilim1=-1;
  i=18;
ndigits=0;
break;
case 2:
leftright=false;
case 4:
if (ndigits <= 0) ndigits=1;
ilim=ilim1=i=ndigits;
break;
case 3:
leftright=false;
case 5:
i=ndigits + k + 1;
ilim=i;
ilim1=i - 1;
if (i <= 0) i=1;
}
boolean fast_failed=false;
if (ilim >= 0 && ilim <= Quick_max && try_quick) {
i=0;
d2=d;
k0=k;
ilim0=ilim;
ieps=2;
if (k > 0) {
ds=tens[k & 0xf];
j=k >> 4;
if ((j & Bletch) != 0) {
j&=Bletch - 1;
d/=bigtens[n_bigtens - 1];
ieps++;
}
for (; (j != 0); j>>=1, i++) if ((j & 1) != 0) {
ieps++;
ds*=bigtens[i];
}
d/=ds;
}
 else if ((j1=-k) != 0) {
d*=tens[j1 & 0xf];
for (j=j1 >> 4; (j != 0); j>>=1, i++) if ((j & 1) != 0) {
ieps++;
d*=bigtens[i];
}
}
if (k_check && d < 1.0 && ilim > 0) {
if (ilim1 <= 0) fast_failed=true;
 else {
ilim=ilim1;
k--;
d*=10.;
ieps++;
}
}
eps=ieps * d + 7.0;
eps=setWord0(eps,word0(eps) - (P - 1) * Exp_msk1);
if (ilim == 0) {
S=mhi=null;
d-=5.0;
if (d > eps) {
buf.append('1');
k++;
return k + 1;
}
if (d < -eps) {
buf.setLength(0);
buf.append('0');
return 1;
}
fast_failed=true;
}
if (!fast_failed) {
fast_failed=true;
if (leftright) {
eps=0.5 / tens[ilim - 1] - eps;
for (i=0; ; ) {
L=(long)d;
d-=L;
buf.append((char)('0' + L));
if (d < eps) {
return k + 1;
}
if (1.0 - d < eps) {
char lastCh;
while (true) {
lastCh=buf.charAt(buf.length() - 1);
buf.setLength(buf.length() - 1);
if (lastCh != '9') break;
if (buf.length() == 0) {
k++;
lastCh='0';
break;
}
}
buf.append((char)(lastCh + 1));
return k + 1;
}
if (++i >= ilim) break;
eps*=10.0;
d*=10.0;
}
}
 else {
eps*=tens[ilim - 1];
for (i=1; ; i++, d*=10.0) {
L=(long)d;
d-=L;
buf.append((char)('0' + L));
if (i == ilim) {
if (d > 0.5 + eps) {
char lastCh;
while (true) {
lastCh=buf.charAt(buf.length() - 1);
buf.setLength(buf.length() - 1);
if (lastCh != '9') break;
if (buf.length() == 0) {
k++;
lastCh='0';
break;
}
}
buf.append((char)(lastCh + 1));
return k + 1;
}
 else if (d < 0.5 - eps) {
while (buf.charAt(buf.length() - 1) == '0') buf.setLength(buf.length() - 1);
return k + 1;
}
break;
}
}
}
}
if (fast_failed) {
buf.setLength(0);
d=d2;
k=k0;
ilim=ilim0;
}
}
if (be[0] >= 0 && k <= Int_max) {
ds=tens[k];
if (ndigits < 0 && ilim <= 0) {
S=mhi=null;
if (ilim < 0 || d < 5 * ds || (!biasUp && d == 5 * ds)) {
buf.setLength(0);
buf.append('0');
return 1;
}
buf.append('1');
k++;
return k + 1;
}
for (i=1; ; i++) {
L=(long)(d / ds);
d-=L * ds;
buf.append((char)('0' + L));
if (i == ilim) {
d+=d;
if ((d > ds) || (d == ds && (((L & 1) != 0) || biasUp))) {
char lastCh;
while (true) {
lastCh=buf.charAt(buf.length() - 1);
buf.setLength(buf.length() - 1);
if (lastCh != '9') break;
if (buf.length() == 0) {
k++;
lastCh='0';
break;
}
}
buf.append((char)(lastCh + 1));
}
break;
}
d*=10.0;
if (d == 0) break;
}
return k + 1;
}
m2=b2;
m5=b5;
mhi=mlo=null;
if (leftright) {
if (mode < 2) {
i=(denorm) ? be[0] + (Bias + (P - 1) - 1 + 1) : 1 + P - bbits[0];
}
 else {
j=ilim - 1;
if (m5 >= j) m5-=j;
 else {
s5+=j-=m5;
b5+=j;
m5=0;
}
if ((i=ilim) < 0) {
m2-=i;
i=0;
}
}
b2+=i;
s2+=i;
mhi=BigInteger.valueOf(1);
}
if (m2 > 0 && s2 > 0) {
i=(m2 < s2) ? m2 : s2;
b2-=i;
m2-=i;
s2-=i;
}
if (b5 > 0) {
if (leftright) {
if (m5 > 0) {
mhi=pow5mult(mhi,m5);
b1=mhi.multiply(b);
b=b1;
}
if ((j=b5 - m5) != 0) b=pow5mult(b,j);
}
 else b=pow5mult(b,b5);
}
S=BigInteger.valueOf(1);
if (s5 > 0) S=pow5mult(S,s5);
spec_case=false;
if (mode < 2) {
if ((word1(d) == 0) && ((word0(d) & Bndry_mask) == 0) && ((word0(d) & (Exp_mask & Exp_mask << 1)) != 0)) {
b2+=Log2P;
s2+=Log2P;
spec_case=true;
}
}
byte[] S_bytes=S.toByteArray();
int S_hiWord=0;
for (int idx=0; idx < 4; idx++) {
S_hiWord=(S_hiWord << 8);
if (idx < S_bytes.length) S_hiWord|=(S_bytes[idx] & 0xFF);
}
if ((i=(((s5 != 0) ? 32 - hi0bits(S_hiWord) : 1) + s2) & 0x1f) != 0) i=32 - i;
if (i > 4) {
i-=4;
b2+=i;
m2+=i;
s2+=i;
}
 else if (i < 4) {
i+=28;
b2+=i;
m2+=i;
s2+=i;
}
if (b2 > 0) b=b.shiftLeft(b2);
if (s2 > 0) S=S.shiftLeft(s2);
if (k_check) {
if (b.compareTo(S) < 0) {
k--;
b=b.multiply(BigInteger.valueOf(10));
if (leftright) mhi=mhi.multiply(BigInteger.valueOf(10));
ilim=ilim1;
}
}
if (ilim <= 0 && mode > 2) {
if ((ilim < 0) || ((i=b.compareTo(S=S.multiply(BigInteger.valueOf(5)))) < 0) || ((i == 0 && !biasUp))) {
buf.setLength(0);
buf.append('0');
return 1;
}
buf.append('1');
k++;
return k + 1;
}
if (leftright) {
if (m2 > 0) mhi=mhi.shiftLeft(m2);
mlo=mhi;
if (spec_case) {
mhi=mlo;
mhi=mhi.shiftLeft(Log2P);
}
for (i=1; ; i++) {
BigInteger[] divResult=b.divideAndRemainder(S);
b=divResult[1];
dig=(char)(divResult[0].intValue() + '0');
j=b.compareTo(mlo);
delta=S.subtract(mhi);
j1=(delta.signum() <= 0) ? 1 : b.compareTo(delta);
if ((j1 == 0) && (mode == 0) && ((word1(d) & 1) == 0)) {
if (dig == '9') {
buf.append('9');
if (roundOff(buf)) {
k++;
buf.append('1');
}
return k + 1;
}
if (j > 0) dig++;
buf.append(dig);
return k + 1;
}
if ((j < 0) || ((j == 0) && (mode == 0) && ((word1(d) & 1) == 0))) {
if (j1 > 0) {
b=b.shiftLeft(1);
j1=b.compareTo(S);
if (((j1 > 0) || (j1 == 0 && (((dig & 1) == 1) || biasUp))) && (dig++ == '9')) {
buf.append('9');
if (roundOff(buf)) {
k++;
buf.append('1');
}
return k + 1;
}
}
buf.append(dig);
return k + 1;
}
if (j1 > 0) {
if (dig == '9') {
buf.append('9');
if (roundOff(buf)) {
k++;
buf.append('1');
}
return k + 1;
}
buf.append((char)(dig + 1));
return k + 1;
}
buf.append(dig);
if (i == ilim) break;
b=b.multiply(BigInteger.valueOf(10));
if (mlo == mhi) mlo=mhi=mhi.multiply(BigInteger.valueOf(10));
 else {
mlo=mlo.multiply(BigInteger.valueOf(10));
mhi=mhi.multiply(BigInteger.valueOf(10));
}
}
}
 else for (i=1; ; i++) {
BigInteger[] divResult=b.divideAndRemainder(S);
b=divResult[1];
dig=(char)(divResult[0].intValue() + '0');
buf.append(dig);
if (i >= ilim) break;
b=b.multiply(BigInteger.valueOf(10));
}
b=b.shiftLeft(1);
j=b.compareTo(S);
if ((j > 0) || (j == 0 && (((dig & 1) == 1) || biasUp))) {
if (roundOff(buf)) {
k++;
buf.append('1');
return k + 1;
}
}
 else {
while (buf.charAt(buf.length() - 1) == '0') buf.setLength(buf.length() - 1);
}
return k + 1;
}
