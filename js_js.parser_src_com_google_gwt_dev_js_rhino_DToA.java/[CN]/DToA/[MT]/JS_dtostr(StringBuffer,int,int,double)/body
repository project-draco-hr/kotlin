{
  int decPt;
  boolean[] sign=new boolean[1];
  int nDigits;
  if (mode == DTOSTR_FIXED && (d >= 1e21 || d <= -1e21))   mode=DTOSTR_STANDARD;
  decPt=JS_dtoa(d,dtoaModes[mode],mode >= DTOSTR_FIXED,precision,sign,buffer);
  nDigits=buffer.length();
  if (decPt != 9999) {
    boolean exponentialNotation=false;
    int minNDigits=0;
    int p;
    int q;
switch (mode) {
case DTOSTR_STANDARD:
      if (decPt < -5 || decPt > 21)       exponentialNotation=true;
 else       minNDigits=decPt;
    break;
case DTOSTR_FIXED:
  if (precision >= 0)   minNDigits=decPt + precision;
 else   minNDigits=decPt;
break;
case DTOSTR_EXPONENTIAL:
minNDigits=precision;
case DTOSTR_STANDARD_EXPONENTIAL:
exponentialNotation=true;
break;
case DTOSTR_PRECISION:
minNDigits=precision;
if (decPt < -5 || decPt > precision) exponentialNotation=true;
break;
}
if (nDigits < minNDigits) {
p=minNDigits;
nDigits=minNDigits;
do {
buffer.append('0');
}
 while (buffer.length() != p);
}
if (exponentialNotation) {
if (nDigits != 1) {
buffer.insert(1,'.');
}
buffer.append('e');
if ((decPt - 1) >= 0) buffer.append('+');
buffer.append(decPt - 1);
}
 else if (decPt != nDigits) {
if (decPt > 0) {
buffer.insert(decPt,'.');
}
 else {
for (int i=0; i < 1 - decPt; i++) buffer.insert(0,'0');
buffer.insert(1,'.');
}
}
}
if (sign[0] && !(word0(d) == Sign_bit && word1(d) == 0) && !((word0(d) & Exp_mask) == Exp_mask && ((word1(d) != 0) || ((word0(d) & Frac_mask) != 0)))) {
buffer.insert(0,'-');
}
}
