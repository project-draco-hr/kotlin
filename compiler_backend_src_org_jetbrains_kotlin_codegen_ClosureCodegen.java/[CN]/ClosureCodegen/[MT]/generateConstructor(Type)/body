{
  List<FieldInfo> args=calculateConstructorParameters(typeMapper,closure,asmType);
  Type[] argTypes=fieldListToTypeArray(args);
  Method constructor=new Method("<init>",Type.VOID_TYPE,argTypes);
  MethodVisitor mv=v.newMethod(OtherOrigin(element,funDescriptor),visibilityFlag,"<init>",constructor.getDescriptor(),null,ArrayUtil.EMPTY_STRING_ARRAY);
  if (state.getClassBuilderMode() == ClassBuilderMode.FULL) {
    mv.visitCode();
    InstructionAdapter iv=new InstructionAdapter(mv);
    int k=1;
    for (    FieldInfo fieldInfo : args) {
      k=genAssignInstanceFieldFromParam(fieldInfo,k,iv);
    }
    iv.load(0,superClassAsmType);
    iv.invokespecial(superClassAsmType.getInternalName(),"<init>","()V",false);
    iv.visitInsn(RETURN);
    FunctionCodegen.endVisit(iv,"constructor",element);
  }
  return constructor;
}
