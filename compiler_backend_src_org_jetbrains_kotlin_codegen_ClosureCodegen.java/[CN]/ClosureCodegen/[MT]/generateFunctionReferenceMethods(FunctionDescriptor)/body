{
  int flags=ACC_PUBLIC | ACC_FINAL;
  boolean generateBody=state.getClassBuilderMode() == ClassBuilderMode.FULL;
{
    MethodVisitor mv=v.newMethod(NO_ORIGIN,flags,"getOwner",Type.getMethodDescriptor(K_DECLARATION_CONTAINER_TYPE),null,null);
    if (generateBody) {
      mv.visitCode();
      InstructionAdapter iv=new InstructionAdapter(mv);
      generateCallableReferenceDeclarationContainer(iv,descriptor,state);
      iv.areturn(K_DECLARATION_CONTAINER_TYPE);
      FunctionCodegen.endVisit(iv,"function reference getOwner",element);
    }
  }
{
    MethodVisitor mv=v.newMethod(NO_ORIGIN,flags,"getName",Type.getMethodDescriptor(JAVA_STRING_TYPE),null,null);
    if (generateBody) {
      mv.visitCode();
      InstructionAdapter iv=new InstructionAdapter(mv);
      iv.aconst(descriptor.getName().asString());
      iv.areturn(JAVA_STRING_TYPE);
      FunctionCodegen.endVisit(iv,"function reference getName",element);
    }
  }
{
    MethodVisitor mv=v.newMethod(NO_ORIGIN,flags,"getSignature",Type.getMethodDescriptor(JAVA_STRING_TYPE),null,null);
    if (generateBody) {
      mv.visitCode();
      InstructionAdapter iv=new InstructionAdapter(mv);
      Method method=typeMapper.mapAsmMethod(descriptor.getOriginal());
      iv.aconst(method.getName() + method.getDescriptor());
      iv.areturn(JAVA_STRING_TYPE);
      FunctionCodegen.endVisit(iv,"function reference getSignature",element);
    }
  }
}
