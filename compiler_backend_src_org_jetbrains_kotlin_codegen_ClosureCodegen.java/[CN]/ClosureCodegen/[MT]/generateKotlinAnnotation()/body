{
  writeKotlinSyntheticClassAnnotation(v,syntheticClassKind);
  DescriptorSerializer serializer=DescriptorSerializer.createTopLevel(new JvmSerializerExtension(v.getSerializationBindings(),typeMapper));
  ProtoBuf.Callable callableProto=serializer.callableProto(funDescriptor).build();
  StringTable strings=serializer.getStringTable();
  NameResolver nameResolver=new NameResolver(strings.serializeSimpleNames(),strings.serializeQualifiedNames());
  AnnotationVisitor av=v.getVisitor().visitAnnotation(asmDescByFqNameWithoutInnerClasses(JvmAnnotationNames.KOTLIN_CALLABLE),true);
  JvmCodegenUtil.writeAbiVersion(av);
  AnnotationVisitor array=av.visitArray(JvmAnnotationNames.DATA_FIELD_NAME);
  for (  String string : BitEncoding.encodeBytes(SerializationUtil.serializeCallableData(nameResolver,callableProto))) {
    array.visit(null,string);
  }
  array.visitEnd();
  av.visitEnd();
}
