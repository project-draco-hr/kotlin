{
  DeclarationDescriptor container=descriptor.getContainingDeclaration();
  if (container instanceof ClassDescriptor) {
    StackValue value=generateClassLiteralReference(state.getTypeMapper(),((ClassDescriptor)container).getDefaultType());
    value.put(K_CLASS_TYPE,iv);
  }
 else   if (container instanceof PackageFragmentDescriptor) {
    String packageClassInternalName=PackageClassUtils.getPackageClassInternalName(((PackageFragmentDescriptor)container).getFqName());
    iv.aconst(Type.getObjectType(packageClassInternalName));
    iv.aconst(state.getModuleName());
    iv.invokestatic(REFLECTION,"createKotlinPackage",Type.getMethodDescriptor(K_PACKAGE_TYPE,getType(Class.class),getType(String.class)),false);
  }
 else   if (container instanceof ScriptDescriptor) {
    StackValue value=generateClassLiteralReference(state.getTypeMapper(),((ScriptDescriptor)container).getClassDescriptor().getDefaultType());
    value.put(K_CLASS_TYPE,iv);
  }
 else {
    iv.aconst(null);
  }
}
