{
  if (bridge.equals(delegate))   return;
  MethodVisitor mv=v.newMethod(OtherOrigin(element,funDescriptor),ACC_PUBLIC | ACC_BRIDGE,bridge.getName(),bridge.getDescriptor(),null,ArrayUtil.EMPTY_STRING_ARRAY);
  if (state.getClassBuilderMode() != ClassBuilderMode.FULL)   return;
  mv.visitCode();
  InstructionAdapter iv=new InstructionAdapter(mv);
  ImplementationBodyCodegen.markLineNumberForSyntheticFunction(DescriptorUtils.getParentOfType(funDescriptor,ClassDescriptor.class),iv);
  iv.load(0,asmType);
  ReceiverParameterDescriptor receiver=funDescriptor.getExtensionReceiverParameter();
  int count=1;
  if (receiver != null) {
    StackValue.local(count,bridge.getArgumentTypes()[count - 1]).put(typeMapper.mapType(receiver.getType()),iv);
    count++;
  }
  List<ValueParameterDescriptor> params=funDescriptor.getValueParameters();
  for (  ValueParameterDescriptor param : params) {
    StackValue.local(count,bridge.getArgumentTypes()[count - 1]).put(typeMapper.mapType(param.getType()),iv);
    count++;
  }
  iv.invokevirtual(asmType.getInternalName(),delegate.getName(),delegate.getDescriptor(),false);
  StackValue.onStack(delegate.getReturnType()).put(bridge.getReturnType(),iv);
  iv.areturn(bridge.getReturnType());
  FunctionCodegen.endVisit(mv,"bridge",element);
}
