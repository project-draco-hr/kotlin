{
  if (bridge.equals(delegate))   return;
  MethodVisitor mv=v.newMethod(JvmDeclarationOriginKt.OtherOrigin(element,funDescriptor),ACC_PUBLIC | ACC_BRIDGE,bridge.getName(),bridge.getDescriptor(),null,ArrayUtil.EMPTY_STRING_ARRAY);
  if (state.getClassBuilderMode() != ClassBuilderMode.FULL)   return;
  mv.visitCode();
  InstructionAdapter iv=new InstructionAdapter(mv);
  ImplementationBodyCodegen.markLineNumberForSyntheticFunction(DescriptorUtils.getParentOfType(funDescriptor,ClassDescriptor.class),iv);
  iv.load(0,asmType);
  Type[] myParameterTypes=bridge.getArgumentTypes();
  List<ParameterDescriptor> calleeParameters=CollectionsKt.<ParameterDescriptor>plus(org.jetbrains.kotlin.utils.CollectionsKt.<ParameterDescriptor>singletonOrEmptyList(funDescriptor.getExtensionReceiverParameter()),funDescriptor.getValueParameters());
  int slot=1;
  for (int i=0; i < calleeParameters.size(); i++) {
    Type type=myParameterTypes[i];
    StackValue.local(slot,type).put(typeMapper.mapType(calleeParameters.get(i)),iv);
    slot+=type.getSize();
  }
  iv.invokevirtual(asmType.getInternalName(),delegate.getName(),delegate.getDescriptor(),false);
  StackValue.onStack(delegate.getReturnType()).put(bridge.getReturnType(),iv);
  iv.areturn(bridge.getReturnType());
  FunctionCodegen.endVisit(mv,"bridge",element);
}
