{
  FunctionDescriptor erasedInterfaceFunction;
  if (samType == null) {
    erasedInterfaceFunction=getErasedInvokeFunction(funDescriptor);
  }
 else {
    erasedInterfaceFunction=samType.getAbstractMethod().getOriginal();
  }
  JvmMethodSignature jvmMethodSignature=typeMapper.mapSignature(funDescriptor);
  generateBridge(typeMapper.mapSignature(erasedInterfaceFunction).getAsmMethod(),jvmMethodSignature.getAsmMethod());
  functionCodegen.generateMethod(OtherOrigin(element,funDescriptor),jvmMethodSignature,funDescriptor,strategy);
  if (samType != null) {
    SimpleFunctionDescriptorImpl descriptorForBridges=SimpleFunctionDescriptorImpl.create(funDescriptor.getContainingDeclaration(),funDescriptor.getAnnotations(),erasedInterfaceFunction.getName(),CallableMemberDescriptor.Kind.DECLARATION,funDescriptor.getSource());
    descriptorForBridges.initialize(null,erasedInterfaceFunction.getDispatchReceiverParameter(),erasedInterfaceFunction.getTypeParameters(),erasedInterfaceFunction.getValueParameters(),erasedInterfaceFunction.getReturnType(),Modality.OPEN,erasedInterfaceFunction.getVisibility());
    descriptorForBridges.addOverriddenDescriptor(erasedInterfaceFunction);
    functionCodegen.generateBridges(descriptorForBridges);
  }
  this.constructor=generateConstructor(superClassAsmType);
  if (isConst(closure)) {
    generateConstInstance();
  }
  genClosureFields(closure,v,typeMapper);
  functionCodegen.generateDefaultIfNeeded(context.intoFunction(funDescriptor),typeMapper.mapSignature(funDescriptor),funDescriptor,context.getContextKind(),DefaultParameterValueLoader.DEFAULT,null);
}
