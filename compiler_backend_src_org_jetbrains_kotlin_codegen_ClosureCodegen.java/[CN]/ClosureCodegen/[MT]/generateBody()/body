{
  FunctionDescriptor erasedInterfaceFunction;
  if (samType == null) {
    erasedInterfaceFunction=getErasedInvokeFunction(funDescriptor);
  }
 else {
    erasedInterfaceFunction=samType.getAbstractMethod().getOriginal();
  }
  generateBridge(typeMapper.mapSignature(erasedInterfaceFunction).getAsmMethod(),typeMapper.mapSignature(funDescriptor).getAsmMethod());
  functionCodegen.generateMethod(OtherOrigin(element,funDescriptor),funDescriptor,strategy);
  if (samType != null) {
    SimpleFunctionDescriptorImpl descriptorForBridges=SimpleFunctionDescriptorImpl.create(funDescriptor.getContainingDeclaration(),funDescriptor.getAnnotations(),erasedInterfaceFunction.getName(),CallableMemberDescriptor.Kind.DECLARATION,funDescriptor.getSource());
    descriptorForBridges.initialize(null,erasedInterfaceFunction.getDispatchReceiverParameter(),erasedInterfaceFunction.getTypeParameters(),erasedInterfaceFunction.getValueParameters(),erasedInterfaceFunction.getReturnType(),Modality.OPEN,erasedInterfaceFunction.getVisibility(),false);
    descriptorForBridges.addOverriddenDescriptor(erasedInterfaceFunction);
    functionCodegen.generateBridges(descriptorForBridges);
  }
  if (functionReferenceTarget != null) {
    generateFunctionReferenceMethods(functionReferenceTarget);
  }
  this.constructor=generateConstructor();
  if (isConst(closure)) {
    generateConstInstance(asmType,asmType,UtilsPackage.<InstructionAdapter>doNothing());
  }
  genClosureFields(closure,v,typeMapper);
  functionCodegen.generateDefaultIfNeeded(context.intoFunction(funDescriptor),funDescriptor,context.getContextKind(),DefaultParameterValueLoader.DEFAULT,null);
}
