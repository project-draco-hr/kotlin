{
  JvmSignatureWriter sw=new BothSignatureWriter(BothSignatureWriter.Mode.CLASS);
  if (samType != null) {
    typeMapper.writeFormalTypeParameters(samType.getType().getConstructor().getParameters(),sw);
  }
  sw.writeSuperclass();
  superClassAsmType=typeMapper.mapSupertype(superClassType,sw);
  sw.writeSuperclassEnd();
  String[] superInterfaceAsmTypes=new String[superInterfaceTypes.size()];
  for (int i=0; i < superInterfaceTypes.size(); i++) {
    KotlinType superInterfaceType=superInterfaceTypes.get(i);
    sw.writeInterface();
    superInterfaceAsmTypes[i]=typeMapper.mapSupertype(superInterfaceType,sw).getInternalName();
    sw.writeInterfaceEnd();
  }
  v.defineClass(element,state.getClassFileVersion(),ACC_FINAL | ACC_SUPER | visibilityFlag,asmType.getInternalName(),sw.makeJavaGenericSignature(),superClassAsmType.getInternalName(),superInterfaceAsmTypes);
  InlineCodegenUtil.initDefaultSourceMappingIfNeeded(context,this,state);
  v.visitSource(element.getContainingFile().getName(),null);
}
