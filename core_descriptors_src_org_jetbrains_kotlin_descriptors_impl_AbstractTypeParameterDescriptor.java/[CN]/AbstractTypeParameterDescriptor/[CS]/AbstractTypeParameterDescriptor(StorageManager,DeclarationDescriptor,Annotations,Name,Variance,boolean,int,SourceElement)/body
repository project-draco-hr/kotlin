{
  super(containingDeclaration,annotations,name,source);
  this.variance=variance;
  this.reified=isReified;
  this.index=index;
  this.typeConstructor=storageManager.createLazyValue(new Function0<TypeConstructor>(){
    @Override public TypeConstructor invoke(){
      return createTypeConstructor();
    }
  }
);
  this.defaultType=storageManager.createLazyValue(new Function0<KotlinType>(){
    @Override public KotlinType invoke(){
      return KotlinTypeImpl.create(Annotations.Companion.getEMPTY(),getTypeConstructor(),false,Collections.<TypeProjection>emptyList(),new LazyScopeAdapter(storageManager.createLazyValue(new Function0<KtScope>(){
        @Override public KtScope invoke(){
          List<KtScope> scopes=new ArrayList<KtScope>();
          for (          KotlinType bound : getUpperBounds()) {
            scopes.add(bound.getMemberScope());
          }
          return new ChainedScope(AbstractTypeParameterDescriptor.this,"Scope for type parameter " + name.asString(),scopes.toArray(new KtScope[scopes.size()]));
        }
      }
)));
    }
  }
);
  this.upperBounds=storageManager.createRecursionTolerantLazyValue(new Function0<List<KotlinType>>(){
    @Override public List<KotlinType> invoke(){
      return resolveUpperBounds();
    }
  }
,FALLBACK_UPPER_BOUNDS_ON_RECURSION);
}
