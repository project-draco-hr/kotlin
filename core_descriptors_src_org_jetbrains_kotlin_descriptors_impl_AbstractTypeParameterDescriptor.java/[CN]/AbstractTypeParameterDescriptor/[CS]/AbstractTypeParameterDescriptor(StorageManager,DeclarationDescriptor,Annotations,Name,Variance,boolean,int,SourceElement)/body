{
  super(containingDeclaration,annotations,name,source);
  this.variance=variance;
  this.reified=isReified;
  this.index=index;
  this.typeConstructor=storageManager.createLazyValue(new Function0<TypeConstructor>(){
    @Override public TypeConstructor invoke(){
      return createTypeConstructor();
    }
  }
);
  this.defaultType=storageManager.createLazyValue(new Function0<KotlinType>(){
    @Override public KotlinType invoke(){
      return KotlinTypeImpl.create(Annotations.Companion.getEMPTY(),getTypeConstructor(),false,Collections.<TypeProjection>emptyList(),new LazyScopeAdapter(storageManager.createLazyValue(new Function0<KtScope>(){
        @Override public KtScope invoke(){
          return getUpperBoundsAsType().getMemberScope();
        }
      }
)));
    }
  }
);
  this.upperBounds=storageManager.createRecursionTolerantLazyValue(new Function0<Set<KotlinType>>(){
    @Override public Set<KotlinType> invoke(){
      return resolveUpperBounds();
    }
  }
,Collections.singleton(ErrorUtils.createErrorType("Recursion while calculating upper bounds")));
  this.upperBoundsAsType=storageManager.createLazyValue(new Function0<KotlinType>(){
    @Override public KotlinType invoke(){
      return computeUpperBoundsAsType();
    }
  }
);
}
