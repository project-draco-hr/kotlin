{
  super(containingDeclaration,annotations,name,source);
  this.variance=variance;
  this.reified=isReified;
  this.index=index;
  this.typeConstructor=storageManager.createLazyValue(new Function0<TypeConstructor>(){
    @Override public TypeConstructor invoke(){
      return new TypeParameterTypeConstructor(storageManager,supertypeLoopChecker);
    }
  }
);
  this.defaultType=storageManager.createLazyValue(new Function0<SimpleType>(){
    @Override public SimpleType invoke(){
      return KotlinTypeFactory.simpleType(Annotations.Companion.getEMPTY(),getTypeConstructor(),Collections.<TypeProjection>emptyList(),false,new LazyScopeAdapter(storageManager.createLazyValue(new Function0<MemberScope>(){
        @Override public MemberScope invoke(){
          return TypeIntersectionScope.create("Scope for type parameter " + name.asString(),getUpperBounds());
        }
      }
)));
    }
  }
);
}
