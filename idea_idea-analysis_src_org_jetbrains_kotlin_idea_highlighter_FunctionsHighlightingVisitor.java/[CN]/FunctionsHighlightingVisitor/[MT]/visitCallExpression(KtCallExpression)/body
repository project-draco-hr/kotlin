{
  KtExpression callee=expression.getCalleeExpression();
  ResolvedCall<?> resolvedCall=CallUtilKt.getResolvedCall(expression,bindingContext);
  if (callee instanceof KtReferenceExpression && resolvedCall != null) {
    CallableDescriptor calleeDescriptor=resolvedCall.getResultingDescriptor();
    if (DynamicCallsKt.isDynamic(calleeDescriptor)) {
      NameHighlighter.highlightName(holder,callee,KotlinHighlightingColors.DYNAMIC_FUNCTION_CALL);
    }
 else     if (resolvedCall instanceof VariableAsFunctionResolvedCall) {
      NameHighlighter.highlightName(holder,callee,containedInFunctionClassOrSubclass(calleeDescriptor) ? KotlinHighlightingColors.VARIABLE_AS_FUNCTION_CALL : KotlinHighlightingColors.VARIABLE_AS_FUNCTION_LIKE_CALL);
    }
 else {
      if (calleeDescriptor instanceof ConstructorDescriptor) {
        NameHighlighter.highlightName(holder,callee,KotlinHighlightingColors.CONSTRUCTOR_CALL);
      }
 else       if (calleeDescriptor instanceof FunctionDescriptor) {
        FunctionDescriptor fun=(FunctionDescriptor)calleeDescriptor;
        NameHighlighter.highlightName(holder,callee,KotlinHighlightingColors.FUNCTION_CALL);
        if (DescriptorUtils.isTopLevelDeclaration(fun)) {
          NameHighlighter.highlightName(holder,callee,KotlinHighlightingColors.PACKAGE_FUNCTION_CALL);
        }
        if (fun.getExtensionReceiverParameter() != null) {
          NameHighlighter.highlightName(holder,callee,KotlinHighlightingColors.EXTENSION_FUNCTION_CALL);
        }
      }
    }
  }
  super.visitCallExpression(expression);
}
