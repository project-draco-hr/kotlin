{
  Map<String,ResourceData> resources=new HashMap<String,ResourceData>(classNumberEstimate);
  for (  File jarFile : jarFiles) {
    if (handler != null) {
      handler.beforeLoadJar(jarFile);
    }
    FileInputStream fileInputStream=new FileInputStream(jarFile);
    try {
      byte[] buffer=new byte[10 * 1024];
      ZipInputStream stream=new ZipInputStream(new BufferedInputStream(fileInputStream));
      while (true) {
        ZipEntry entry=stream.getNextEntry();
        if (entry == null)         break;
        if (entry.isDirectory())         continue;
        String name=entry.getName();
        if (resources.containsKey(name))         continue;
        int size=(int)entry.getSize();
        boolean unknownArraySize=size < 0;
        int effectiveSize=unknownArraySize ? 32 : size;
        ByteArrayOutputStreamWithPublicArray bytes=new ByteArrayOutputStreamWithPublicArray(effectiveSize);
        int count;
        while ((count=stream.read(buffer)) > 0) {
          bytes.write(buffer,0,count);
        }
        resources.put(name,new ResourceData(jarFile,name,unknownArraySize ? bytes.toByteArray() : bytes.getBytes()));
      }
    }
  finally {
      try {
        fileInputStream.close();
      }
 catch (      IOException e) {
      }
    }
    if (handler != null) {
      handler.afterLoadJar(jarFile);
    }
  }
  return resources;
}
