{
  return new ClassLoader(null){
    @Override public Class<?> loadClass(    String name) throws ClassNotFoundException {
      Class<?> aClass=super.loadClass(name);
      if (aClass == null) {
        return parent.loadClass(name);
      }
      return aClass;
    }
    @Override protected Class<?> findClass(    String name) throws ClassNotFoundException {
      String internalName=name.replace('.','/').concat(".class");
      byte[] bytes=preloadedResources.get(internalName);
      if (bytes == null)       return null;
      return defineClass(name,bytes,0,bytes.length);
    }
    @Override protected URL findResource(    String name){
      final byte[] bytes=preloadedResources.get(name);
      if (bytes == null)       return null;
      try {
        String path="file:" + jarFile + "!"+ name;
        return new URL("jar",null,0,path,new URLStreamHandler(){
          @Override protected URLConnection openConnection(          URL u) throws IOException {
            return new URLConnection(u){
              @Override public void connect() throws IOException {
              }
              @Override public InputStream getInputStream() throws IOException {
                return new ByteArrayInputStream(bytes);
              }
            }
;
          }
        }
);
      }
 catch (      MalformedURLException e) {
        e.printStackTrace();
        return null;
      }
    }
    @Override protected Enumeration<URL> findResources(    String name) throws IOException {
      URL resource=findResource(name);
      if (resource == null) {
        return new CompoundEnumeration<URL>(new Enumeration[0]);
      }
      return Collections.enumeration(Collections.singletonList(resource));
    }
  }
;
}
