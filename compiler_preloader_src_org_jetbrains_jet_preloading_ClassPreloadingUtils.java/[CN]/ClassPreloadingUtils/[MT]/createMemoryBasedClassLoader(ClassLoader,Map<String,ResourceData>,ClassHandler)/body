{
  return new ClassLoader(null){
    @Override public Class<?> loadClass(    String name) throws ClassNotFoundException {
      Class<?> aClass=super.loadClass(name);
      if (aClass == null) {
        if (parent == null) {
          throw new ClassNotFoundException("Class not available in preloader: " + name);
        }
        return parent.loadClass(name);
      }
      return aClass;
    }
    @Override protected Class<?> findClass(    String name) throws ClassNotFoundException {
      String internalName=name.replace('.','/').concat(".class");
      ResourceData resourceData=preloadedResources.get(internalName);
      if (resourceData == null)       return null;
      int sizeInBytes=resourceData.bytes.length;
      if (handler != null) {
        handler.beforeDefineClass(name,sizeInBytes);
      }
      Class<?> definedClass=defineClass(name,resourceData.bytes,0,sizeInBytes);
      if (handler != null) {
        handler.afterDefineClass(name);
      }
      return definedClass;
    }
    @Override protected URL findResource(    String name){
      ResourceData resourceData=preloadedResources.get(name);
      if (resourceData == null)       return null;
      return resourceData.getURL();
    }
    @Override protected Enumeration<URL> findResources(    String name) throws IOException {
      URL resource=findResource(name);
      if (resource == null) {
        return new CompoundEnumeration<URL>(new Enumeration[0]);
      }
      return Collections.enumeration(Collections.singletonList(resource));
    }
  }
;
}
