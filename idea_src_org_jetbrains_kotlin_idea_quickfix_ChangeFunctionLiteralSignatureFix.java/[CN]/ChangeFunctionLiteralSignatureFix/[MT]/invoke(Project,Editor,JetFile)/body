{
  BindingContext bindingContext=ResolutionUtils.analyzeFully(file);
  runChangeSignature(project,functionDescriptor,new JetChangeSignatureConfiguration(){
    @NotNull @Override public JetMethodDescriptor configure(    @NotNull JetMethodDescriptor originalDescriptor,    @NotNull BindingContext bindingContext){
      return ChangeSignaturePackage.modify(originalDescriptor,new Function1<JetMutableMethodDescriptor,Unit>(){
        @Override public Unit invoke(        JetMutableMethodDescriptor descriptor){
          CollectingNameValidator validator=new CollectingNameValidator();
          descriptor.clearNonReceiverParameters();
          for (          JetType type : parameterTypes) {
            String name=KotlinNameSuggester.INSTANCE$.suggestNamesByType(type,validator,"param").get(0);
            descriptor.addParameter(new JetParameterInfo(functionDescriptor,-1,name,type,null,null,JetValVar.None,null));
          }
          return null;
        }
      }
);
    }
    @Override public boolean performSilently(    @NotNull Collection<? extends PsiElement> elements){
      return false;
    }
    @Override public boolean forcePerformForSelectedFunctionOnly(){
      return false;
    }
  }
,bindingContext,context,getText());
}
