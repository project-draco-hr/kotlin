{
  ClassDescriptor classDescriptor=classData.getClassDescriptor();
  final List<JetType> result=new ArrayList<JetType>();
  String context="class " + psiClass.getQualifiedName();
  if (psiClass.getJetClass().signature().length() > 0) {
    final TypeVariableResolver typeVariableResolver=TypeVariableResolvers.typeVariableResolverFromTypeParameters(typeParameters,classDescriptor,context);
    new JetSignatureReader(psiClass.getJetClass().signature()).accept(new JetSignatureExceptionsAdapter(){
      @Override public JetSignatureVisitor visitFormalTypeParameter(      String name,      TypeInfoVariance variance,      boolean reified){
        return new JetSignatureAdapter();
      }
      @Override public JetSignatureVisitor visitSuperclass(){
        return new JetTypeJetSignatureReader(javaDescriptorResolver.getSemanticServices(),JetStandardLibrary.getInstance(),typeVariableResolver){
          @Override protected void done(          @NotNull JetType jetType){
            if (!jetType.equals(JetStandardClasses.getAnyType())) {
              result.add(jetType);
            }
          }
        }
;
      }
      @Override public JetSignatureVisitor visitInterface(){
        return visitSuperclass();
      }
    }
);
  }
 else {
    TypeVariableResolver typeVariableResolverForSupertypes=TypeVariableResolvers.typeVariableResolverFromTypeParameters(typeParameters,classDescriptor,context);
    transformSupertypeList(result,psiClass.getPsiClass().getExtendsListTypes(),typeVariableResolverForSupertypes);
    transformSupertypeList(result,psiClass.getPsiClass().getImplementsListTypes(),typeVariableResolverForSupertypes);
  }
  for (  JetType supertype : result) {
    if (ErrorUtils.isErrorType(supertype)) {
      javaDescriptorResolver.getTrace().record(BindingContext.INCOMPLETE_HIERARCHY,classDescriptor);
    }
  }
  if (result.isEmpty()) {
    if (classData.isKotlin() || DescriptorResolverUtils.OBJECT_FQ_NAME.equalsTo(psiClass.getQualifiedName()) || classDescriptor.getKind() == ClassKind.ANNOTATION_CLASS) {
      result.add(JetStandardClasses.getAnyType());
    }
 else {
      ClassDescriptor object=resolveJavaLangObject();
      if (object != null) {
        result.add(object.getDefaultType());
      }
 else {
        result.add(JetStandardClasses.getAnyType());
      }
    }
  }
  return result;
}
