{
  if (qualifiedName.getFqName().endsWith(JvmAbi.TRAIT_IMPL_SUFFIX)) {
    return null;
  }
  ClassDescriptor builtinClassDescriptor=javaDescriptorResolver.getSemanticServices().getKotlinBuiltinClassDescriptor(qualifiedName);
  if (builtinClassDescriptor != null) {
    return builtinClassDescriptor;
  }
  ClassDescriptor kotlinClassDescriptor=javaDescriptorResolver.getSemanticServices().getKotlinClassDescriptor(qualifiedName);
  if (kotlinClassDescriptor != null) {
    if (searchRule == DescriptorSearchRule.ERROR_IF_FOUND_IN_KOTLIN) {
      throw new IllegalStateException("class must not be found in kotlin: " + qualifiedName);
    }
 else     if (searchRule == DescriptorSearchRule.IGNORE_IF_FOUND_IN_KOTLIN) {
      return null;
    }
 else     if (searchRule == DescriptorSearchRule.INCLUDE_KOTLIN) {
      return kotlinClassDescriptor;
    }
 else {
      throw new IllegalStateException("unknown searchRule: " + searchRule);
    }
  }
  ResolverClassData classData=classDescriptorCache.get(qualifiedName);
  if (classData == null) {
    PsiClass psiClass=javaDescriptorResolver.getPsiClassFinder().findPsiClass(qualifiedName,PsiClassFinder.RuntimeClassesHandleMode.THROW);
    if (psiClass == null) {
      ResolverClassData oldValue=classDescriptorCache.put(qualifiedName,ResolverBinaryClassData.NEGATIVE);
      if (oldValue != null) {
        throw new IllegalStateException("rewrite at " + qualifiedName);
      }
      return null;
    }
    classData=createJavaClassDescriptor(psiClass,tasks);
  }
  return classData.getClassDescriptor();
}
