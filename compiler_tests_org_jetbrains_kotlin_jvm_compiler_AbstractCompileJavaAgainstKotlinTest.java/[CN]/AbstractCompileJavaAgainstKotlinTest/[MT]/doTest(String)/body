{
  Assert.assertTrue(ktFilePath.endsWith(".kt"));
  File ktFile=new File(ktFilePath);
  File javaFile=new File(ktFilePath.replaceFirst("\\.kt$",".java"));
  File expectedFile=new File(ktFilePath.replaceFirst("\\.kt$",".txt"));
  File javaErrorFile=new File(ktFilePath.replaceFirst("\\.kt$",".javaerr.txt"));
  File out=new File(tmpdir,"out");
  compileKotlinWithJava(Collections.singletonList(javaFile),Collections.singletonList(ktFile),out,getTestRootDisposable(),javaErrorFile);
  KotlinCoreEnvironment environment=KotlinCoreEnvironment.createForTests(getTestRootDisposable(),compilerConfigurationForTests(ConfigurationKind.ALL,TestJdkKind.MOCK_JDK,getAnnotationsJar(),out),EnvironmentConfigFiles.JVM_CONFIG_FILES);
  AnalysisResult exhaust=JvmResolveUtil.analyzeFilesWithJavaIntegration(environment.getProject(),Collections.<KtFile>emptySet(),environment);
  PackageViewDescriptor packageView=exhaust.getModuleDescriptor().getPackage(LoadDescriptorUtil.TEST_PACKAGE_FQNAME);
  assertFalse("Nothing found in package " + LoadDescriptorUtil.TEST_PACKAGE_FQNAME,packageView.isEmpty());
  validateAndCompareDescriptorWithFile(packageView,CONFIGURATION,expectedFile);
}
