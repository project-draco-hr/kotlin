{
  super(project,TargetPlatform.JS);
  cachedKey=Key.create("KOTLIN_JS_DECLARATIONS_CACHE");
  declarationsProvider=new CachedValueProvider<KotlinDeclarationsCache>(){
    @Nullable @Override public Result<KotlinDeclarationsCache> compute(){
synchronized (declarationAnalysisLock) {
        LibrarySourcesConfig config=new LibrarySourcesConfig(project,"default",KotlinFrameworkDetector.getLibLocationForProject(project),EcmaVersion.defaultVersion(),false);
        AnalyzeExhaust analyzeExhaust=AnalyzerFacadeForJS.analyzeFiles(JetFilesProvider.getInstance(project).allInScope(GlobalSearchScope.allScope(project)),Predicates.<PsiFile>alwaysFalse(),config,true);
        return Result.<KotlinDeclarationsCache>create(new KotlinDeclarationsCacheImpl(analyzeExhaust),PsiModificationTracker.OUT_OF_CODE_BLOCK_MODIFICATION_COUNT,KotlinCacheManager.getInstance(project).getDeclarationsTracker());
      }
    }
  }
;
}
