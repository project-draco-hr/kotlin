{
  AnnotationDescriptor annotation=annotatedDescriptor.getAnnotations().findAnnotation(new FqName("kotlin.throws"));
  if (annotation == null)   return ArrayUtil.EMPTY_STRING_ARRAY;
  Collection<CompileTimeConstant<?>> values=annotation.getAllValueArguments().values();
  if (values.isEmpty())   return ArrayUtil.EMPTY_STRING_ARRAY;
  Object value=values.iterator().next();
  if (!(value instanceof ArrayValue))   return ArrayUtil.EMPTY_STRING_ARRAY;
  ArrayValue arrayValue=(ArrayValue)value;
  List<String> strings=ContainerUtil.mapNotNull(arrayValue.getValue(),new Function<CompileTimeConstant<?>,String>(){
    @Override public String fun(    CompileTimeConstant<?> constant){
      if (constant instanceof JavaClassValue) {
        JavaClassValue classValue=(JavaClassValue)constant;
        ClassDescriptor classDescriptor=DescriptorUtils.getClassDescriptorForType(classValue.getValue());
        return mapper.mapClass(classDescriptor).getInternalName();
      }
      return null;
    }
  }
);
  return strings.toArray(new String[strings.size()]);
}
