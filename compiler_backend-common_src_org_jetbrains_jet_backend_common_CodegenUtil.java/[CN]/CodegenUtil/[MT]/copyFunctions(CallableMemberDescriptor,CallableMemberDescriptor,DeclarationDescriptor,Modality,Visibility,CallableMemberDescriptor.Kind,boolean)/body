{
  CallableMemberDescriptor copy=inheritedMember.copy(newOwner,modality,visibility,kind,copyOverrides);
  Map<FunctionDescriptor,FunctionDescriptor> result=new LinkedHashMap<FunctionDescriptor,FunctionDescriptor>(0);
  if (traitMember instanceof SimpleFunctionDescriptor) {
    result.put((FunctionDescriptor)traitMember,(FunctionDescriptor)copy);
  }
 else   if (traitMember instanceof PropertyDescriptor) {
    for (    PropertyAccessorDescriptor traitAccessor : ((PropertyDescriptor)traitMember).getAccessors()) {
      for (      PropertyAccessorDescriptor inheritedAccessor : ((PropertyDescriptor)copy).getAccessors()) {
        if (inheritedAccessor.getClass() == traitAccessor.getClass()) {
          result.put(traitAccessor,inheritedAccessor);
        }
      }
    }
  }
  return result;
}
