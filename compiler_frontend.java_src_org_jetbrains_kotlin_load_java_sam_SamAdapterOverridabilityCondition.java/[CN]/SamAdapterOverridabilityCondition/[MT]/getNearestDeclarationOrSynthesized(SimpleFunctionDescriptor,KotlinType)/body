{
  if (samAdapter.getKind() != CallableMemberDescriptor.Kind.FAKE_OVERRIDE) {
    return new SamAdapterInfo(samAdapter,ownerType);
  }
  for (  CallableMemberDescriptor overridden : samAdapter.getOriginal().getOverriddenDescriptors()) {
    ClassDescriptor containingClass=(ClassDescriptor)overridden.getContainingDeclaration();
    for (    KotlinType immediateSupertype : TypeUtils.getImmediateSupertypes(ownerType)) {
      if (containingClass != immediateSupertype.getConstructor().getDeclarationDescriptor()) {
        continue;
      }
      SamAdapterInfo found=getNearestDeclarationOrSynthesized((SimpleFunctionDescriptor)overridden,immediateSupertype);
      if (found != null) {
        return found;
      }
    }
  }
  return null;
}
