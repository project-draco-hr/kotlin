{
  File kotlinSrc=new File(expectedFileName);
  File librarySrc=new File(expectedFileName.replaceFirst("\\.kt$",""));
  File expectedFile=new File(expectedFileName.replaceFirst("\\.kt$",".txt"));
  File libraryOut=new File(tmpdir,"libraryOut");
  compileKotlinWithJava(FileUtil.findFilesByMask(Pattern.compile(".+\\.java$"),librarySrc),FileUtil.findFilesByMask(Pattern.compile(".+\\.kt$"),librarySrc),libraryOut,getTestRootDisposable(),null);
  KotlinCoreEnvironment environment=KotlinCoreEnvironment.createForTests(getTestRootDisposable(),newConfiguration(ConfigurationKind.JDK_ONLY,getJdkKind(),getAnnotationsJar(),libraryOut),EnvironmentConfigFiles.JVM_CONFIG_FILES);
  KtFile ktFile=KotlinTestUtils.createFile(kotlinSrc.getPath(),FileUtil.loadFile(kotlinSrc,true),environment.getProject());
  ModuleDescriptor module=JvmResolveUtil.analyzeAndCheckForErrors(Collections.singleton(ktFile),environment).getModuleDescriptor();
  PackageViewDescriptor packageView=module.getPackage(TEST_PACKAGE_FQNAME);
  assertFalse(packageView.isEmpty());
  validateAndCompareDescriptorWithFile(packageView,DONT_INCLUDE_METHODS_OF_OBJECT.withValidationStrategy(new DeserializedScopeValidationVisitor()),expectedFile);
}
