{
  JsExpression expressionToMatchAgainst=translateExpressionForExpressionPattern(patternExpression);
  KotlinType patternType=BindingUtils.getTypeForExpression(bindingContext(),patternExpression);
  EqualityType matchEquality=equalityType(type);
  EqualityType patternEquality=equalityType(patternType);
  if (matchEquality == EqualityType.PRIMITIVE && patternEquality == EqualityType.PRIMITIVE) {
    return equality(expressionToMatch,expressionToMatchAgainst);
  }
 else   if (expressionToMatchAgainst == JsLiteral.NULL) {
    return TranslationUtils.nullCheck(expressionToMatch,false);
  }
 else {
    return TopLevelFIF.KOTLIN_EQUALS.apply(expressionToMatch,Collections.singletonList(expressionToMatchAgainst),context());
  }
}
