{
  final StringBuilder script=new StringBuilder();
  if (tests) {
    script.append("// Module script for tests\n");
  }
 else {
    script.append("// Module script for production\n");
  }
  script.append("import kotlin.modules.*\n");
  script.append("fun project() {\n");
  script.append("    module(\"" + moduleName + "\") {\n");
  for (  String sourceFile : sourceFilePaths) {
    script.append("        sources += \"" + sourceFile + "\"\n");
  }
  dependencyProvider.processClassPath(new DependencyProcessor(){
    @Override public void processClassPathSection(    @NotNull String sectionDescription,    @NotNull Collection<String> paths){
      script.append("        // " + sectionDescription + "\n");
      for (      String path : paths) {
        if (directoriesToFilterOut.contains(path)) {
          script.append("        // Output directory, commented out\n");
          script.append("        // ");
        }
        script.append("        classpath += \"" + path + "\"\n");
      }
    }
    @Override public void processAnnotationRoots(    @NotNull List<String> paths){
      script.append("        // External annotations\n");
      for (      String path : paths) {
        script.append("        annotationsPath += \"").append(path).append("\"\n");
      }
    }
  }
);
  script.append("    }\n");
  script.append("}\n");
  return script;
}
