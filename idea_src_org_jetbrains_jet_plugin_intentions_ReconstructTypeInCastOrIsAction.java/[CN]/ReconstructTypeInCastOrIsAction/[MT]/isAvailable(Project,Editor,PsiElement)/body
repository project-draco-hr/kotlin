{
  JetTypeReference typeRef=PsiTreeUtil.getTopmostParentOfType(element,JetTypeReference.class);
  if (typeRef == null)   return false;
  JetTypeElement typeElement=typeRef.getTypeElement();
  if (!(typeElement instanceof JetUserType))   return false;
  if (!((JetUserType)typeElement).getTypeArguments().isEmpty())   return false;
  JetExpression outerExpression=PsiTreeUtil.getParentOfType(typeRef,JetExpression.class);
  if (!(outerExpression instanceof JetBinaryExpressionWithTypeRHS)) {
    JetWhenConditionIsPattern outerIsCondition=PsiTreeUtil.getParentOfType(typeRef,JetWhenConditionIsPattern.class);
    if (outerIsCondition == null)     return false;
  }
  JetType type=getReconstructedType(typeRef);
  if (type == null)   return false;
  if (ErrorUtils.isErrorType(type))   return false;
  if (type.getConstructor().getParameters().isEmpty())   return false;
  setText(JetBundle.message("replace.by.reconstructed.type",type));
  return true;
}
