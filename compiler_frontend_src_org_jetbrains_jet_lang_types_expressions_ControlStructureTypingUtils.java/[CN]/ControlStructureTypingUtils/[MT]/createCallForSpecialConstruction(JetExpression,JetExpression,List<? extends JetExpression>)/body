{
  final List<ValueArgument> valueArguments=Lists.newArrayList();
  for (  JetExpression argument : arguments) {
    valueArguments.add(CallMaker.makeValueArgument(argument));
  }
  return new Call(){
    @Nullable @Override public ASTNode getCallOperationNode(){
      return expression.getNode();
    }
    @NotNull @Override public ReceiverValue getExplicitReceiver(){
      return ReceiverValue.NO_RECEIVER;
    }
    @NotNull @Override public ReceiverValue getThisObject(){
      return ReceiverValue.NO_RECEIVER;
    }
    @Nullable @Override public JetExpression getCalleeExpression(){
      return calleeExpression;
    }
    @Nullable @Override public JetValueArgumentList getValueArgumentList(){
      return null;
    }
    @NotNull @Override public List<? extends ValueArgument> getValueArguments(){
      return valueArguments;
    }
    @NotNull @Override public List<JetFunctionLiteralArgument> getFunctionLiteralArguments(){
      return Collections.emptyList();
    }
    @NotNull @Override public List<JetTypeProjection> getTypeArguments(){
      return Collections.emptyList();
    }
    @Nullable @Override public JetTypeArgumentList getTypeArgumentList(){
      return null;
    }
    @NotNull @Override public JetElement getCallElement(){
      return expression;
    }
    @NotNull @Override public CallType getCallType(){
      return CallType.DEFAULT;
    }
  }
;
}
