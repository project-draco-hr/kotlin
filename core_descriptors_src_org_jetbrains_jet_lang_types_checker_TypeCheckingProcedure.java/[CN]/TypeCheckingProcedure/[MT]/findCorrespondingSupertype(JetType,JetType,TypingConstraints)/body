{
  TypeConstructor subtypeConstructor=subtype.getConstructor();
  if (typingConstraints.assertEqualTypeConstructors(subtypeConstructor,supertype.getConstructor())) {
    return subtype;
  }
  for (  JetType immediateSupertype : subtypeConstructor.getSupertypes()) {
    JetType correspondingSupertype=findCorrespondingSupertype(immediateSupertype,supertype,typingConstraints);
    if (correspondingSupertype != null) {
      return TypeSubstitutor.create(subtype).safeSubstitute(correspondingSupertype,Variance.INVARIANT);
    }
  }
  return null;
}
