{
  super.visitCallExpression(expression);
  if (!myCheckAccess) {
    return;
  }
  PsiMethod method=expression.resolveMethod();
  if (method != null) {
    PsiClass containingClass=method.getContainingClass();
    if (containingClass == null) {
      return;
    }
    String fqcn=containingClass.getQualifiedName();
    String owner=IntellijLintUtils.getInternalName(containingClass);
    if (owner == null) {
      return;
    }
    String name=IntellijLintUtils.getInternalMethodName(method);
    String desc=IntellijLintUtils.getInternalDescription(method,false,false);
    if (desc == null) {
      return;
    }
    int api=mApiDatabase.getCallVersion(owner,name,desc);
    if (api == -1) {
      return;
    }
    int minSdk=getMinSdk(myContext);
    if (api <= minSdk) {
      return;
    }
    if (expression instanceof PsiMethodCallExpression) {
      PsiExpression qualifier=((PsiMethodCallExpression)expression).getMethodExpression().getQualifierExpression();
      if (qualifier != null && !(qualifier instanceof PsiThisExpression) && !(qualifier instanceof PsiSuperExpression)) {
        PsiType type=qualifier.getType();
        if (type != null && type instanceof PsiClassType) {
          String expressionOwner=IntellijLintUtils.getInternalName((PsiClassType)type);
          if (expressionOwner != null && !expressionOwner.equals(owner)) {
            int specificApi=mApiDatabase.getCallVersion(expressionOwner,name,desc);
            if (specificApi == -1) {
              if (ApiLookup.isRelevantOwner(expressionOwner)) {
                return;
              }
            }
 else             if (specificApi <= minSdk) {
              return;
            }
          }
        }
      }
 else {
        PsiClass cls=PsiTreeUtil.getParentOfType(expression,PsiClass.class);
        if (qualifier instanceof PsiThisExpression || qualifier instanceof PsiSuperExpression) {
          PsiQualifiedExpression pte=(PsiQualifiedExpression)qualifier;
          PsiJavaCodeReferenceElement operand=pte.getQualifier();
          if (operand != null) {
            PsiElement resolved=operand.resolve();
            if (resolved instanceof PsiClass) {
              cls=(PsiClass)resolved;
            }
          }
        }
        while (cls != null) {
          if (cls instanceof PsiAnonymousClass) {
            break;
          }
          String expressionOwner=IntellijLintUtils.getInternalName(cls);
          if (expressionOwner == null) {
            break;
          }
          int specificApi=mApiDatabase.getCallVersion(expressionOwner,name,desc);
          if (specificApi == -1) {
            if (ApiLookup.isRelevantOwner(expressionOwner)) {
              return;
            }
          }
 else           if (specificApi <= minSdk) {
            return;
          }
 else {
            break;
          }
          cls=cls.getSuperClass();
        }
      }
    }
    if (isSuppressed(api,expression,minSdk)) {
      return;
    }
    if (expression instanceof PsiMethodCallExpression) {
      PsiMethodCallExpression call=(PsiMethodCallExpression)expression;
      PsiReferenceExpression methodExpression=call.getMethodExpression();
      if (methodExpression.getQualifierExpression() instanceof PsiSuperExpression) {
        PsiMethod containingMethod=PsiTreeUtil.getParentOfType(expression,PsiMethod.class,true);
        if (containingMethod != null && name.equals(containingMethod.getName()) && MethodSignatureUtil.areSignaturesEqual(method,containingMethod) && !method.isConstructor()) {
          return;
        }
      }
    }
    PsiElement locationNode=IntellijLintUtils.getCallName(expression);
    if (locationNode == null) {
      locationNode=expression;
    }
    com.android.tools.klint.detector.api.Location location=IntellijLintUtils.getLocation(myContext.file,locationNode);
    String message=String.format("Call requires API level %1$d (current min is %2$d): %3$s",api,minSdk,fqcn + '#' + method.getName());
    myContext.report(UNSUPPORTED,location,message);
  }
}
