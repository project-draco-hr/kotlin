{
  assert(at(VAL_KEYWORD) || at(VAR_KEYWORD));
  advance();
  boolean typeParametersDeclared=at(LT) && parseTypeParameterList(TokenSet.create(IDENTIFIER,EQ,COLON,SEMICOLON));
  TokenSet propertyNameFollow=TokenSet.create(COLON,EQ,LBRACE,RBRACE,SEMICOLON,VAL_KEYWORD,VAR_KEYWORD,FUN_KEYWORD,CLASS_KEYWORD);
  myBuilder.disableJoiningComplexTokens();
  PsiBuilder.Marker receiver=mark();
  boolean receiverTypeDeclared=parseReceiverType("property",propertyNameFollow);
  boolean multiDeclaration=at(LPAR);
  errorIf(receiver,multiDeclaration && receiverTypeDeclared,"Receiver type is not allowed on a multi-declaration");
  if (multiDeclaration) {
    PsiBuilder.Marker multiDecl=mark();
    parseMultiDeclarationName(propertyNameFollow);
    errorIf(multiDecl,!local,"Multi-declarations are only allowed for local variables/values");
  }
 else {
    parseFunctionOrPropertyName(receiverTypeDeclared,"property",propertyNameFollow,false);
  }
  myBuilder.restoreJoiningComplexTokensState();
  if (at(COLON)) {
    PsiBuilder.Marker type=mark();
    advance();
    parseTypeRef();
    errorIf(type,multiDeclaration,"Type annotations are not allowed on multi-declarations");
  }
  parseTypeConstraintsGuarded(typeParametersDeclared);
  if (local) {
    if (at(BY_KEYWORD)) {
      parsePropertyDelegate();
    }
 else     if (at(EQ)) {
      advance();
      myExpressionParsing.parseExpression();
    }
  }
 else {
    if (at(BY_KEYWORD)) {
      parsePropertyDelegate();
      consumeIf(SEMICOLON);
    }
 else     if (at(EQ)) {
      advance();
      myExpressionParsing.parseExpression();
      consumeIf(SEMICOLON);
    }
    if (parsePropertyGetterOrSetter()) {
      parsePropertyGetterOrSetter();
    }
    if (!atSet(EOL_OR_SEMICOLON,RBRACE)) {
      if (getLastToken() != SEMICOLON) {
        errorUntil("Property getter or setter expected",TokenSet.create(EOL_OR_SEMICOLON,LBRACE,RBRACE));
      }
    }
 else {
      consumeIf(SEMICOLON);
    }
  }
  return multiDeclaration ? MULTI_VARIABLE_DECLARATION : PROPERTY;
}
