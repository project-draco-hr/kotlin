{
  configuration.add(CommonConfigurationKeys.SCRIPT_DEFINITIONS_KEY,REPL_LINE_AS_SCRIPT_DEFINITION);
  KotlinCoreEnvironment environment=KotlinCoreEnvironment.createForProduction(disposable,configuration,EnvironmentConfigFiles.JVM_CONFIG_FILES);
  Project project=environment.getProject();
  this.psiFileFactory=(PsiFileFactoryImpl)PsiFileFactory.getInstance(project);
  this.trace=new CliLightClassGenerationSupport.NoScopeRecordCliBindingTrace();
  MutableModuleContext moduleContext=TopDownAnalyzerFacadeForJVM.createContextWithSealedModule(project,ModuleNameKt.getModuleName(environment));
  this.module=moduleContext.getModule();
  scriptDeclarationFactory=new ScriptMutableDeclarationProviderFactory();
  ContainerForReplWithJava container=InjectionKt.createContainerForReplWithJava(moduleContext,trace,scriptDeclarationFactory,ProjectScope.getAllScope(project),new ReplLastLineScopeProvider(){
    @Nullable @Override public LexicalScope getLastLineScope(){
      return lastLineScope;
    }
  }
,new JvmPackagePartProvider(environment));
  this.topDownAnalysisContext=new TopDownAnalysisContext(TopDownAnalysisMode.LocalDeclarations,DataFlowInfoFactory.EMPTY,container.getResolveSession().getDeclarationScopeProvider());
  this.topDownAnalyzer=container.getLazyTopDownAnalyzerForTopLevel();
  this.resolveSession=container.getResolveSession();
  moduleContext.initializeModuleContents(new CompositePackageFragmentProvider(Arrays.asList(container.getResolveSession().getPackageFragmentProvider(),container.getJavaDescriptorResolver().getPackageFragmentProvider())));
  List<URL> classpath=Lists.newArrayList();
  for (  File file : JvmContentRootsKt.getJvmClasspathRoots(configuration)) {
    try {
      classpath.add(file.toURI().toURL());
    }
 catch (    MalformedURLException e) {
      throw ExceptionUtilsKt.rethrow(e);
    }
  }
  this.classLoader=new ReplClassLoader(new URLClassLoader(classpath.toArray(new URL[classpath.size()]),null));
  this.ideMode=ideMode;
  this.replReader=replReader;
}
