{
  KotlinCoreEnvironment environment=KotlinCoreEnvironment.createForProduction(disposable,configuration,EnvironmentConfigFiles.JVM_CONFIG_FILES);
  Project project=environment.getProject();
  this.psiFileFactory=(PsiFileFactoryImpl)PsiFileFactory.getInstance(project);
  this.trace=new CliLightClassGenerationSupport.NoScopeRecordCliBindingTrace();
  this.module=TopDownAnalyzerFacadeForJVM.createJavaModule("<repl>");
  GlobalContextImpl context=ContextPackage.GlobalContext();
  scriptDeclarationFactory=new ScriptMutableDeclarationProviderFactory();
  ScopeProvider.AdditionalFileScopeProvider scopeProvider=new ScopeProvider.AdditionalFileScopeProvider(){
    @NotNull @Override public List<JetScope> scopes(    @NotNull JetFile file){
      return lastLineScope != null ? new SmartList<JetScope>(lastLineScope) : Collections.<JetScope>emptyList();
    }
  }
;
  InjectorForReplWithJava injector=new InjectorForReplWithJava(project,context,trace,module,scriptDeclarationFactory,ProjectScope.getAllScope(project),scopeProvider);
  this.topDownAnalysisContext=new TopDownAnalysisContext(TopDownAnalysisMode.LocalDeclarations,DataFlowInfo.EMPTY);
  this.topDownAnalyzer=injector.getLazyTopDownAnalyzerForTopLevel();
  this.resolveSession=injector.getResolveSession();
  module.initialize(new CompositePackageFragmentProvider(Arrays.asList(injector.getResolveSession().getPackageFragmentProvider(),injector.getJavaDescriptorResolver().getPackageFragmentProvider())));
  module.addDependencyOnModule(module);
  module.addDependencyOnModule(KotlinBuiltIns.getInstance().getBuiltInsModule());
  module.seal();
  List<URL> classpath=Lists.newArrayList();
  for (  File file : getJvmClasspathRoots(configuration)) {
    try {
      classpath.add(file.toURI().toURL());
    }
 catch (    MalformedURLException e) {
      throw UtilsPackage.rethrow(e);
    }
  }
  this.classLoader=new ReplClassLoader(new URLClassLoader(classpath.toArray(new URL[classpath.size()]),null));
}
