{
  KotlinCoreEnvironment environment=KotlinCoreEnvironment.createForProduction(disposable,configuration,EnvironmentConfigFiles.JVM_CONFIG_FILES);
  Project project=environment.getProject();
  this.psiFileFactory=(PsiFileFactoryImpl)PsiFileFactory.getInstance(project);
  this.trace=new CliLightClassGenerationSupport.NoScopeRecordCliBindingTrace();
  MutableModuleContext moduleContext=TopDownAnalyzerFacadeForJVM.createContextWithSealedModule(project);
  this.module=moduleContext.getModule();
  scriptDeclarationFactory=new ScriptMutableDeclarationProviderFactory();
  FileScopeProvider.AdditionalScopes scopeProvider=new FileScopeProvider.AdditionalScopes(){
    @NotNull @Override public List<JetScope> scopes(    @NotNull JetFile file){
      return lastLineScope != null ? new SmartList<JetScope>(lastLineScope) : Collections.<JetScope>emptyList();
    }
  }
;
  ContainerForReplWithJava container=DiPackage.createContainerForReplWithJava(moduleContext,trace,scriptDeclarationFactory,ProjectScope.getAllScope(project),scopeProvider);
  this.topDownAnalysisContext=new TopDownAnalysisContext(TopDownAnalysisMode.LocalDeclarations,DataFlowInfo.EMPTY,container.getResolveSession().getDeclarationScopeProvider());
  this.topDownAnalyzer=container.getLazyTopDownAnalyzerForTopLevel();
  this.resolveSession=container.getResolveSession();
  moduleContext.initializeModuleContents(new CompositePackageFragmentProvider(Arrays.asList(container.getResolveSession().getPackageFragmentProvider(),container.getJavaDescriptorResolver().getPackageFragmentProvider())));
  List<URL> classpath=Lists.newArrayList();
  for (  File file : getJvmClasspathRoots(configuration)) {
    try {
      classpath.add(file.toURI().toURL());
    }
 catch (    MalformedURLException e) {
      throw UtilsPackage.rethrow(e);
    }
  }
  this.classLoader=new ReplClassLoader(new URLClassLoader(classpath.toArray(new URL[classpath.size()]),null));
}
