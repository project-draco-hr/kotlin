{
  this.resolveSession=resolveSession;
  this.jetTypeParameter=jetTypeParameter;
  this.variance=jetTypeParameter.getVariance();
  this.containingDeclaration=containingDeclaration;
  this.index=index;
  this.name=ResolveSessionUtils.safeNameForLazyResolve(jetTypeParameter.getNameAsName());
  this.resolveSession.getTrace().record(BindingContext.TYPE_PARAMETER,jetTypeParameter,this);
  this.reified=jetTypeParameter.hasModifier(JetTokens.REIFIED_KEYWORD);
  StorageManager storageManager=resolveSession.getStorageManager();
  this.typeConstructor=storageManager.createLazyValue(new Computable<TypeConstructor>(){
    @Override public TypeConstructor compute(){
      return createTypeConstructor();
    }
  }
);
  this.defaultType=storageManager.createLazyValue(new Computable<JetType>(){
    @Override public JetType compute(){
      return createDefaultType();
    }
  }
);
  this.upperBounds=storageManager.createLazyValue(new Computable<Set<JetType>>(){
    @Override public Set<JetType> compute(){
      return resolveUpperBounds();
    }
  }
);
  this.upperBoundsAsType=storageManager.createLazyValue(new Computable<JetType>(){
    @Override public JetType compute(){
      return computeUpperBoundsAsType();
    }
  }
);
}
