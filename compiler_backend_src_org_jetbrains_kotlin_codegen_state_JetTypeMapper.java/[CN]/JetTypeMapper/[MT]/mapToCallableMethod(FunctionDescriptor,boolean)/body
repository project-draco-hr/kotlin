{
  if (descriptor instanceof ConstructorDescriptor) {
    JvmMethodSignature method=mapSignature(descriptor);
    Type owner=mapClass(((ConstructorDescriptor)descriptor).getContainingDeclaration());
    String defaultImplDesc=mapDefaultMethod(descriptor,OwnerKind.IMPLEMENTATION).getDescriptor();
    return new CallableMethod(owner,owner,defaultImplDesc,method,INVOKESPECIAL,null,null,null);
  }
  DeclarationDescriptor functionParent=descriptor.getOriginal().getContainingDeclaration();
  FunctionDescriptor functionDescriptor=unwrapFakeOverride(descriptor.getOriginal());
  JvmMethodSignature signature;
  Type owner;
  Type ownerForDefaultImpl;
  FunctionDescriptor baseMethodDescriptor;
  int invokeOpcode;
  Type thisClass;
  if (functionParent instanceof ClassDescriptor) {
    FunctionDescriptor declarationFunctionDescriptor=findAnyDeclaration(functionDescriptor);
    ClassDescriptor currentOwner=(ClassDescriptor)functionParent;
    ClassDescriptor declarationOwner=(ClassDescriptor)declarationFunctionDescriptor.getContainingDeclaration();
    boolean originalIsInterface=isJvmInterface(declarationOwner);
    boolean currentIsInterface=isJvmInterface(currentOwner);
    boolean isInterface=currentIsInterface && originalIsInterface;
    baseMethodDescriptor=findBaseDeclaration(functionDescriptor).getOriginal();
    ClassDescriptor ownerForDefault=(ClassDescriptor)baseMethodDescriptor.getContainingDeclaration();
    ownerForDefaultImpl=isJvmInterface(ownerForDefault) ? mapDefaultImpls(ownerForDefault) : mapClass(ownerForDefault);
    if (isInterface && (superCall || descriptor.getVisibility() == Visibilities.PRIVATE)) {
      thisClass=mapClass(currentOwner);
      if (declarationOwner instanceof JavaClassDescriptor) {
        invokeOpcode=INVOKESPECIAL;
        signature=mapSignature(functionDescriptor);
        owner=thisClass;
      }
 else {
        invokeOpcode=INVOKESTATIC;
        signature=mapSignature(descriptor.getOriginal(),OwnerKind.DEFAULT_IMPLS);
        owner=mapDefaultImpls(currentOwner);
      }
    }
 else {
      boolean isStaticInvocation=(isStaticDeclaration(functionDescriptor) && !(functionDescriptor instanceof ImportedFromObjectCallableDescriptor)) || isStaticAccessor(functionDescriptor) || AnnotationUtilKt.isPlatformStaticInObjectOrClass(functionDescriptor);
      if (isStaticInvocation) {
        invokeOpcode=INVOKESTATIC;
      }
 else       if (isInterface) {
        invokeOpcode=INVOKEINTERFACE;
      }
 else {
        boolean isPrivateFunInvocation=Visibilities.isPrivate(functionDescriptor.getVisibility());
        invokeOpcode=superCall || isPrivateFunInvocation ? INVOKESPECIAL : INVOKEVIRTUAL;
      }
      FunctionDescriptor overriddenSpecialBuiltinFunction=SpecialBuiltinMembers.<FunctionDescriptor>getOverriddenBuiltinWithDifferentJvmDescriptor(functionDescriptor.getOriginal());
      FunctionDescriptor functionToCall=overriddenSpecialBuiltinFunction != null && !superCall ? overriddenSpecialBuiltinFunction.getOriginal() : functionDescriptor.getOriginal();
      signature=mapSignature(functionToCall);
      ClassDescriptor receiver=(currentIsInterface && !originalIsInterface) || currentOwner instanceof FunctionClassDescriptor ? declarationOwner : currentOwner;
      owner=mapClass(receiver);
      thisClass=owner;
    }
  }
 else {
    signature=mapSignature(functionDescriptor.getOriginal());
    owner=mapOwner(functionDescriptor);
    ownerForDefaultImpl=owner;
    baseMethodDescriptor=functionDescriptor;
    if (functionParent instanceof PackageFragmentDescriptor) {
      invokeOpcode=INVOKESTATIC;
      thisClass=null;
    }
 else     if (functionDescriptor instanceof ConstructorDescriptor) {
      invokeOpcode=INVOKESPECIAL;
      thisClass=null;
    }
 else {
      invokeOpcode=INVOKEVIRTUAL;
      thisClass=owner;
    }
  }
  Type calleeType=isLocalFunction(functionDescriptor) ? owner : null;
  Type receiverParameterType;
  ReceiverParameterDescriptor receiverParameter=functionDescriptor.getOriginal().getExtensionReceiverParameter();
  if (receiverParameter != null) {
    receiverParameterType=mapType(receiverParameter.getType());
  }
 else {
    receiverParameterType=null;
  }
  String defaultImplDesc=mapDefaultMethod(baseMethodDescriptor,getKindForDefaultImplCall(baseMethodDescriptor)).getDescriptor();
  return new CallableMethod(owner,ownerForDefaultImpl,defaultImplDesc,signature,invokeOpcode,thisClass,receiverParameterType,calleeType);
}
