{
  for (  Pair<? extends TypeParameterDescriptor,? extends TypeProjection> item : CollectionsKt.zip(parameters,arguments)) {
    TypeParameterDescriptor parameter=item.getFirst();
    TypeProjection argument=item.getSecond();
    if (argument.isStarProjection() || KotlinBuiltIns.isNothing(argument.getType()) && parameter.getVariance() == Variance.IN_VARIANCE) {
      signatureVisitor.writeUnboundedWildcard();
    }
 else {
      TypeMappingMode argumentMode=TypeMappingUtil.updateArgumentModeFromAnnotations(mode,argument.getType());
      Variance projectionKind=getVarianceForWildcard(parameter,argument,argumentMode);
      signatureVisitor.writeTypeArgument(projectionKind);
      mapType(argument.getType(),signatureVisitor,argumentMode.toGenericArgumentMode(TypeMappingUtil.getEffectiveVariance(parameter.getVariance(),argument.getProjectionKind())));
      signatureVisitor.writeTypeArgumentEnd();
    }
  }
}
