{
  Type builtinType=mapBuiltinType(jetType);
  if (builtinType != null) {
    Type asmType=mode.getNeedPrimitiveBoxing() ? boxType(builtinType) : builtinType;
    writeGenericType(jetType,asmType,signatureVisitor,mode);
    return asmType;
  }
  TypeConstructor constructor=jetType.getConstructor();
  if (constructor instanceof IntersectionTypeConstructor) {
    jetType=CommonSupertypes.commonSupertype(new ArrayList<KotlinType>(constructor.getSupertypes()));
    constructor=jetType.getConstructor();
  }
  DeclarationDescriptor descriptor=constructor.getDeclarationDescriptor();
  if (descriptor == null) {
    throw new UnsupportedOperationException("no descriptor for type constructor of " + jetType);
  }
  if (ErrorUtils.isError(descriptor)) {
    if (classBuilderMode != ClassBuilderMode.LIGHT_CLASSES) {
      throw new IllegalStateException(generateErrorMessageForErrorType(jetType,descriptor));
    }
    Type asmType=Type.getObjectType("error/NonExistentClass");
    if (signatureVisitor != null) {
      signatureVisitor.writeAsmType(asmType);
    }
    return asmType;
  }
  if (descriptor instanceof ClassDescriptor && KotlinBuiltIns.isArray(jetType)) {
    if (jetType.getArguments().size() != 1) {
      throw new UnsupportedOperationException("arrays must have one type argument");
    }
    TypeProjection memberProjection=jetType.getArguments().get(0);
    KotlinType memberType=memberProjection.getType();
    Type arrayElementType;
    if (memberProjection.getProjectionKind() == Variance.IN_VARIANCE) {
      arrayElementType=AsmTypes.OBJECT_TYPE;
      if (signatureVisitor != null) {
        signatureVisitor.writeArrayType();
        signatureVisitor.writeAsmType(arrayElementType);
        signatureVisitor.writeArrayEnd();
      }
    }
 else {
      arrayElementType=boxType(mapType(memberType,mode));
      if (signatureVisitor != null) {
        signatureVisitor.writeArrayType();
        mapType(memberType,signatureVisitor,mode.toGenericArgumentMode(memberProjection.getProjectionKind()));
        signatureVisitor.writeArrayEnd();
      }
    }
    return Type.getType("[" + arrayElementType.getDescriptor());
  }
  if (descriptor instanceof ClassDescriptor) {
    Type asmType=mode.isForAnnotationParameter() && KotlinBuiltIns.isKClass((ClassDescriptor)descriptor) ? AsmTypes.JAVA_CLASS_TYPE : computeAsmType((ClassDescriptor)descriptor.getOriginal());
    writeGenericType(jetType,asmType,signatureVisitor,mode);
    return asmType;
  }
  if (descriptor instanceof TypeParameterDescriptor) {
    Type type=mapType(getRepresentativeUpperBound((TypeParameterDescriptor)descriptor),mode);
    if (signatureVisitor != null) {
      signatureVisitor.writeTypeVariable(descriptor.getName(),type);
    }
    return type;
  }
  throw new UnsupportedOperationException("Unknown type " + jetType);
}
