{
  Type leftType=expressionType(left);
  Type rightType=expressionType(right);
  if (JetPsiUtil.isNullConstant(left)) {
    return genCmpWithNull(right,rightType,opToken);
  }
  if (JetPsiUtil.isNullConstant(right)) {
    return genCmpWithNull(left,leftType,opToken);
  }
  if (isIntZero(left,leftType) && isIntPrimitive(rightType)) {
    return genCmpWithZero(right,rightType,opToken);
  }
  if (isIntZero(right,rightType) && isIntPrimitive(leftType)) {
    return genCmpWithZero(left,leftType,opToken);
  }
  if (isPrimitive(leftType) != isPrimitive(rightType)) {
    leftType=boxType(leftType);
    rightType=boxType(rightType);
  }
  return genEqualsForExpressionsOnStack(opToken,genLazy(left,leftType),genLazy(right,rightType));
}
