{
  JetSimpleNameExpression reference=expression.getOperationReference();
  IElementType opToken=reference.getReferencedNameElementType();
  if (opToken == JetTokens.EQ) {
    return generateAssignmentExpression(expression);
  }
 else   if (JetTokens.AUGMENTED_ASSIGNMENTS.contains(opToken)) {
    return generateAugmentedAssignment(expression);
  }
 else   if (opToken == JetTokens.ANDAND) {
    return generateBooleanAnd(expression);
  }
 else   if (opToken == JetTokens.OROR) {
    return generateBooleanOr(expression);
  }
 else   if (opToken == JetTokens.EQEQ || opToken == JetTokens.EXCLEQ || opToken == JetTokens.EQEQEQ || opToken == JetTokens.EXCLEQEQEQ) {
    return generateEquals(expression.getLeft(),expression.getRight(),opToken);
  }
 else   if (opToken == JetTokens.LT || opToken == JetTokens.LTEQ || opToken == JetTokens.GT || opToken == JetTokens.GTEQ) {
    return generateComparison(expression,receiver);
  }
 else   if (opToken == JetTokens.ELVIS) {
    return generateElvis(expression);
  }
 else   if (opToken == JetTokens.IN_KEYWORD || opToken == JetTokens.NOT_IN) {
    return generateIn(StackValue.expression(expressionType(expression.getLeft()),expression.getLeft(),this),expression.getRight(),reference);
  }
 else {
    ResolvedCall<?> resolvedCall=getResolvedCallWithAssert(expression,bindingContext);
    FunctionDescriptor descriptor=(FunctionDescriptor)resolvedCall.getResultingDescriptor();
    if (descriptor instanceof ConstructorDescriptor) {
      return generateConstructorCall(resolvedCall,expressionType(expression));
    }
    Callable callable=resolveToCallable(descriptor,false,resolvedCall);
    if (callable instanceof IntrinsicMethod) {
      Type returnType=typeMapper.mapType(descriptor);
      return ((IntrinsicMethod)callable).generate(this,returnType,expression,Arrays.asList(expression.getLeft(),expression.getRight()),receiver);
    }
    return invokeFunction(resolvedCall,receiver);
  }
}
