{
  return StackValue.operation(Type.VOID_TYPE,new Function1<InstructionAdapter,Unit>(){
    @Override public Unit invoke(    InstructionAdapter adapter){
      KtExpression returnedExpression=expression.getReturnedExpression();
      CallableMemberDescriptor descriptor=getContext().getContextDescriptor();
      NonLocalReturnInfo nonLocalReturn=getNonLocalReturnInfo(descriptor,expression);
      boolean isNonLocalReturn=nonLocalReturn != null;
      if (isNonLocalReturn && state.isInlineDisabled()) {
        state.getDiagnostics().report(Errors.NON_LOCAL_RETURN_IN_DISABLED_INLINE.on(expression));
        genThrow(v,"java/lang/UnsupportedOperationException","Non-local returns are not allowed with inlining disabled");
        return Unit.INSTANCE;
      }
      Type returnType=isNonLocalReturn ? nonLocalReturn.returnType : ExpressionCodegen.this.returnType;
      StackValue valueToReturn=returnedExpression != null ? gen(returnedExpression) : null;
      StackValue handleResultValue=genControllerHandleResultCallIfNeeded(expression,valueToReturn);
      if (handleResultValue != null) {
        handleResultValue.put(Type.VOID_TYPE,v);
        returnType=Type.VOID_TYPE;
      }
 else       if (returnedExpression != null && valueToReturn != null) {
        putStackValue(returnedExpression,returnType,valueToReturn);
      }
      Label afterReturnLabel=new Label();
      generateFinallyBlocksIfNeeded(returnType,afterReturnLabel);
      if (isNonLocalReturn) {
        InlineCodegenUtil.generateGlobalReturnFlag(v,nonLocalReturn.labelName);
      }
      v.visitInsn(returnType.getOpcode(Opcodes.IRETURN));
      v.mark(afterReturnLabel);
      return Unit.INSTANCE;
    }
  }
);
}
