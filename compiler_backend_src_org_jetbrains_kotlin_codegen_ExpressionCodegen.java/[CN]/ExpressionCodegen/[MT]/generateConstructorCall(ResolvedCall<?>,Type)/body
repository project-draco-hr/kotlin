{
  return StackValue.functionCall(objectType,new Function1<InstructionAdapter,Unit>(){
    @Override public Unit invoke(    InstructionAdapter v){
      v.anew(objectType);
      v.dup();
      ConstructorDescriptor constructor=getConstructorDescriptor(resolvedCall);
      ReceiverParameterDescriptor dispatchReceiver=constructor.getDispatchReceiverParameter();
      ClassDescriptor containingDeclaration=constructor.getContainingDeclaration();
      if (dispatchReceiver != null) {
        Type receiverType=typeMapper.mapType(dispatchReceiver.getType());
        ReceiverValue receiver=resolvedCall.getDispatchReceiver();
        boolean callSuper=containingDeclaration.isInner() && receiver instanceof ClassReceiver && ((ClassReceiver)receiver).getDeclarationDescriptor().getOriginal() != containingDeclaration.getOriginal();
        generateReceiverValue(receiver,callSuper).put(receiverType,v);
      }
      pushClosureOnStack(containingDeclaration,dispatchReceiver == null,defaultCallGenerator);
      constructor=SamCodegenUtil.resolveSamAdapter(constructor);
      CallableMethod method=typeMapper.mapToCallableMethod(constructor,false);
      invokeMethodWithArguments(method,resolvedCall,StackValue.none());
      return Unit.INSTANCE$;
    }
  }
);
}
