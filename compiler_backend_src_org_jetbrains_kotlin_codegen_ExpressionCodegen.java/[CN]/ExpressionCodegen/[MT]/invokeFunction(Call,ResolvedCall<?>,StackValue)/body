{
  ResolvedCallWithRealDescriptor callWithRealDescriptor=CoroutineCodegenUtilKt.replaceSuspensionFunctionViewWithRealDescriptor(resolvedCall,state.getProject());
  if (callWithRealDescriptor != null) {
    tempVariables.put(callWithRealDescriptor.getFakeThisExpression(),genCoroutineInstanceValueFromResolvedCall(resolvedCall));
    return invokeFunction(callWithRealDescriptor.getResolvedCall(),receiver);
  }
  FunctionDescriptor fd=accessibleFunctionDescriptor(resolvedCall);
  ClassDescriptor superCallTarget=getSuperCallTarget(call);
  fd=context.getAccessorForSuperCallIfNeeded(fd,superCallTarget);
  Collection<ExpressionCodegenExtension> codegenExtensions=ExpressionCodegenExtension.Companion.getInstances(state.getProject());
  if (!codegenExtensions.isEmpty()) {
    ExpressionCodegenExtension.Context context=new ExpressionCodegenExtension.Context(typeMapper,v);
    for (    ExpressionCodegenExtension extension : codegenExtensions) {
      StackValue stackValue=extension.applyFunction(receiver,resolvedCall,context);
      if (stackValue != null)       return stackValue;
    }
  }
  Callable callable=resolveToCallable(fd,superCallTarget != null,resolvedCall);
  StackValue result=callable.invokeMethodWithArguments(resolvedCall,receiver,this);
  if (CoroutineCodegenUtilKt.isSuspensionPoint(resolvedCall)) {
    return new OperationStackValue(getSuspensionReturnTypeByResolvedCall(resolvedCall),((OperationStackValue)result).getLambda());
  }
  return result;
}
