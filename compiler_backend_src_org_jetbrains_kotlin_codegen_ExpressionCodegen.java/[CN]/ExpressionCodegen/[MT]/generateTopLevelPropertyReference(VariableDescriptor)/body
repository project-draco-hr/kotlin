{
  PackageFragmentDescriptor containingPackage=(PackageFragmentDescriptor)descriptor.getContainingDeclaration();
  final String packageClassInternalName=PackageClassUtils.getPackageClassInternalName(containingPackage.getFqName());
  final ReceiverParameterDescriptor receiverParameter=descriptor.getExtensionReceiverParameter();
  final Method factoryMethod;
  if (receiverParameter != null) {
    Type[] parameterTypes=new Type[]{JAVA_STRING_TYPE,K_PACKAGE_TYPE,getType(Class.class)};
    factoryMethod=descriptor.isVar() ? method("mutableTopLevelExtensionProperty",K_MUTABLE_PROPERTY1_TYPE,parameterTypes) : method("topLevelExtensionProperty",K_PROPERTY1_TYPE,parameterTypes);
  }
 else {
    Type[] parameterTypes=new Type[]{JAVA_STRING_TYPE,K_PACKAGE_TYPE};
    factoryMethod=descriptor.isVar() ? method("mutableTopLevelVariable",K_MUTABLE_PROPERTY0_TYPE,parameterTypes) : method("topLevelVariable",K_PROPERTY0_TYPE,parameterTypes);
  }
  return StackValue.operation(factoryMethod.getReturnType(),new Function1<InstructionAdapter,Unit>(){
    @Override public Unit invoke(    InstructionAdapter v){
      v.visitLdcInsn(descriptor.getName().asString());
      v.getstatic(packageClassInternalName,JvmAbi.KOTLIN_PACKAGE_FIELD_NAME,K_PACKAGE_TYPE.getDescriptor());
      if (receiverParameter != null) {
        putJavaLangClassInstance(v,typeMapper.mapType(receiverParameter));
      }
      v.invokestatic(REFLECTION,factoryMethod.getName(),factoryMethod.getDescriptor(),false);
      return Unit.INSTANCE$;
    }
  }
);
}
