{
  final SamType samType=bindingContext.get(SAM_VALUE,expression);
  if (samType == null)   return null;
  if (expression instanceof JetFunctionLiteralExpression) {
    return genClosure(((JetFunctionLiteralExpression)expression).getFunctionLiteral(),samType,KotlinSyntheticClass.Kind.SAM_LAMBDA);
  }
  final Type asmType=state.getSamWrapperClasses().getSamWrapperClass(samType,expression.getContainingJetFile(),getParentCodegen());
  return StackValue.operation(asmType,new Function1<InstructionAdapter,Unit>(){
    @Override public Unit invoke(    InstructionAdapter v){
      v.anew(asmType);
      v.dup();
      Type functionType=typeMapper.mapType(samType.getKotlinFunctionType());
      expression.accept(visitor,StackValue.none()).put(functionType,v);
      Label ifNonNull=new Label();
      Label afterAll=new Label();
      v.dup();
      v.ifnonnull(ifNonNull);
      v.pop();
      v.pop2();
      v.aconst(null);
      v.goTo(afterAll);
      v.mark(ifNonNull);
      v.invokespecial(asmType.getInternalName(),"<init>",Type.getMethodDescriptor(Type.VOID_TYPE,functionType),false);
      v.mark(afterAll);
      return null;
    }
  }
);
}
