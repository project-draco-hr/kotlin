{
  if (expression.getOperationReference().getReferencedNameElementType() == JetTokens.EXCLEXCL) {
    final StackValue base=genQualified(receiver,expression.getBaseExpression());
    if (isPrimitive(base.type)) {
      return base;
    }
 else {
      return StackValue.operation(base.type,new Function1<InstructionAdapter,Unit>(){
        @Override public Unit invoke(        InstructionAdapter v){
          base.put(base.type,v);
          v.dup();
          Label ok=new Label();
          v.ifnonnull(ok);
          v.invokestatic(IntrinsicMethods.INTRINSICS_CLASS_NAME,"throwNpe","()V",false);
          v.mark(ok);
          return null;
        }
      }
);
    }
  }
  DeclarationDescriptor originalOperation=bindingContext.get(REFERENCE_TARGET,expression.getOperationReference());
  String originalOperationName=originalOperation != null ? originalOperation.getName().asString() : null;
  final ResolvedCall<?> resolvedCall=CallUtilKt.getResolvedCallWithAssert(expression,bindingContext);
  DeclarationDescriptor op=resolvedCall.getResultingDescriptor();
  if (!(op instanceof FunctionDescriptor) || originalOperation == null) {
    throw new UnsupportedOperationException("Don't know how to generate this postfix expression: " + originalOperationName + " "+ op);
  }
  final Type asmResultType=expressionType(expression);
  final Type asmBaseType=expressionType(expression.getBaseExpression());
  DeclarationDescriptor cls=op.getContainingDeclaration();
  final int increment;
  if (originalOperationName.equals("inc")) {
    increment=1;
  }
 else   if (originalOperationName.equals("dec")) {
    increment=-1;
  }
 else {
    throw new UnsupportedOperationException("Unsupported postfix operation: " + originalOperationName + " "+ op);
  }
  final boolean isPrimitiveNumberClassDescriptor=isPrimitiveNumberClassDescriptor(cls);
  if (isPrimitiveNumberClassDescriptor && AsmUtil.isPrimitive(asmBaseType)) {
    JetExpression operand=expression.getBaseExpression();
    if (operand instanceof JetReferenceExpression && asmResultType == Type.INT_TYPE && bindingContext.get(BindingContext.SMARTCAST,operand) == null) {
      int index=indexOfLocal((JetReferenceExpression)operand);
      if (index >= 0) {
        return StackValue.postIncrement(index,increment);
      }
    }
  }
  return StackValue.operation(asmBaseType,new Function1<InstructionAdapter,Unit>(){
    @Override public Unit invoke(    InstructionAdapter v){
      StackValue value=gen(expression.getBaseExpression());
      value=StackValue.complexWriteReadReceiver(value);
      Type type=expressionType(expression.getBaseExpression());
      value.put(type,v);
      value.dup(v,true);
      Type storeType;
      if (isPrimitiveNumberClassDescriptor && AsmUtil.isPrimitive(asmBaseType)) {
        genIncrement(asmResultType,increment,v);
        storeType=type;
      }
 else {
        StackValue result=invokeFunction(resolvedCall,StackValue.onStack(type));
        result.put(result.type,v);
        storeType=result.type;
      }
      value.store(StackValue.onStack(storeType),v,true);
      return Unit.INSTANCE$;
    }
  }
);
}
