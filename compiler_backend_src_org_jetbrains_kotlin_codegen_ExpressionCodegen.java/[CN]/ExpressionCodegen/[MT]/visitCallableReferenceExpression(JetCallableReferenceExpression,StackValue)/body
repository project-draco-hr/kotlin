{
  ResolvedCall<?> resolvedCall=getResolvedCallWithAssert(expression.getCallableReference(),bindingContext);
  FunctionDescriptor functionDescriptor=bindingContext.get(FUNCTION,expression);
  if (functionDescriptor != null) {
    FunctionReferenceGenerationStrategy strategy=new FunctionReferenceGenerationStrategy(state,functionDescriptor,resolvedCall);
    return genClosure(expression,functionDescriptor,strategy,null,KotlinSyntheticClass.Kind.CALLABLE_REFERENCE_WRAPPER,(FunctionDescriptor)resolvedCall.getResultingDescriptor());
  }
  VariableDescriptor variableDescriptor=bindingContext.get(VARIABLE,expression);
  if (variableDescriptor == null) {
    throw new UnsupportedOperationException("Unsupported callable reference expression: " + expression.getText());
  }
  checkReflectionIsAvailable(expression);
  VariableDescriptor descriptor=(VariableDescriptor)resolvedCall.getResultingDescriptor();
  DeclarationDescriptor containingDeclaration=descriptor.getContainingDeclaration();
  if (containingDeclaration instanceof PackageFragmentDescriptor) {
    return generateTopLevelPropertyReference(descriptor);
  }
 else   if (containingDeclaration instanceof ClassDescriptor) {
    return generateMemberPropertyReference(descriptor,(ClassDescriptor)containingDeclaration);
  }
 else   if (containingDeclaration instanceof ScriptDescriptor) {
    return generateMemberPropertyReference(descriptor,((ScriptDescriptor)containingDeclaration).getClassDescriptor());
  }
 else {
    throw new UnsupportedOperationException("Unsupported callable reference container: " + containingDeclaration);
  }
}
