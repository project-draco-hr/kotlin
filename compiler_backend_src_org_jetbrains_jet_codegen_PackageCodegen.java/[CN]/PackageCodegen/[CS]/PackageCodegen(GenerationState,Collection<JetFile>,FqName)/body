{
  this.state=state;
  this.files=files;
  this.packageFragment=getOnlyPackageFragment();
  this.compiledPackageFragment=getCompiledPackageFragment(packageFragment);
  this.previouslyCompiledCallables=filterDeserializedCallables(compiledPackageFragment);
  this.v=new ClassBuilderOnDemand(new Function0<ClassBuilder>(){
    @Override public ClassBuilder invoke(){
      Collection<JetFile> files=PackageCodegen.this.files;
      JetFile sourceFile=getRepresentativePackageFile(files);
      String className=AsmUtil.internalNameByFqNameWithoutInnerClasses(getPackageClassFqName(fqName));
      ClassBuilder v=PackageCodegen.this.state.getFactory().newVisitor(Type.getObjectType(className),getPackageFilesWithCallables(files));
      v.defineClass(sourceFile,V1_6,ACC_PUBLIC | ACC_FINAL,className,null,"java/lang/Object",ArrayUtil.EMPTY_STRING_ARRAY);
      if (sourceFile != null) {
        v.visitSource(sourceFile.getName(),null);
      }
      return v;
    }
  }
);
}
