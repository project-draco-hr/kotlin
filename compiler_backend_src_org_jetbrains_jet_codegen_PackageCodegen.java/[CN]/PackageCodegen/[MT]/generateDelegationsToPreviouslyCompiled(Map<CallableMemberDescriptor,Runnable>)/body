{
  for (  final DeserializedCallableMemberDescriptor member : previouslyCompiledCallables) {
    generateCallableMemberTasks.put(member,new Runnable(){
      @Override public void run(){
        FieldOwnerContext context=CodegenContext.STATIC.intoPackageFacade(AsmUtil.asmTypeByFqNameWithoutInnerClasses(PackagePartClassUtils.getPackagePartFqName(member)),compiledPackageFragment);
        MemberCodegen<?> memberCodegen=createCodegenForPartOfPackageFacade(context);
        if (member instanceof DeserializedSimpleFunctionDescriptor) {
          DeserializedSimpleFunctionDescriptor function=(DeserializedSimpleFunctionDescriptor)member;
          JvmMethodSignature signature=state.getTypeMapper().mapSignature(function,OwnerKind.PACKAGE);
          memberCodegen.functionCodegen.generateMethod(null,signature,function,new FunctionGenerationStrategy(){
            @Override public void generateBody(            @NotNull MethodVisitor mv,            @NotNull JvmMethodSignature signature,            @NotNull MethodContext context,            @NotNull MemberCodegen<?> parentCodegen){
              throw new IllegalStateException("shouldn't be called");
            }
          }
);
        }
 else         if (member instanceof DeserializedPropertyDescriptor) {
          memberCodegen.propertyCodegen.generateInPackageFacade((DeserializedPropertyDescriptor)member);
        }
 else {
          throw new IllegalStateException("Unexpected member: " + member);
        }
      }
    }
);
  }
}
