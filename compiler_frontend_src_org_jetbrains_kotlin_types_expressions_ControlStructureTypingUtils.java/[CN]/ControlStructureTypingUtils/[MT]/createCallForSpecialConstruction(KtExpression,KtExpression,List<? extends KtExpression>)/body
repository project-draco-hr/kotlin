{
  final List<ValueArgument> valueArguments=Lists.newArrayList();
  for (  KtExpression argument : arguments) {
    valueArguments.add(CallMaker.makeValueArgument(argument));
  }
  return new Call(){
    @Nullable @Override public ASTNode getCallOperationNode(){
      return expression.getNode();
    }
    @Nullable @Override public ReceiverValue getExplicitReceiver(){
      return null;
    }
    @Nullable @Override public ReceiverValue getDispatchReceiver(){
      return null;
    }
    @Nullable @Override public KtExpression getCalleeExpression(){
      return calleeExpression;
    }
    @Nullable @Override public KtValueArgumentList getValueArgumentList(){
      return null;
    }
    @NotNull @Override public List<? extends ValueArgument> getValueArguments(){
      return valueArguments;
    }
    @NotNull @Override public List<LambdaArgument> getFunctionLiteralArguments(){
      return Collections.emptyList();
    }
    @NotNull @Override public List<KtTypeProjection> getTypeArguments(){
      return Collections.emptyList();
    }
    @Nullable @Override public KtTypeArgumentList getTypeArgumentList(){
      return null;
    }
    @NotNull @Override public KtElement getCallElement(){
      return expression;
    }
    @NotNull @Override public CallType getCallType(){
      return CallType.DEFAULT;
    }
  }
;
}
