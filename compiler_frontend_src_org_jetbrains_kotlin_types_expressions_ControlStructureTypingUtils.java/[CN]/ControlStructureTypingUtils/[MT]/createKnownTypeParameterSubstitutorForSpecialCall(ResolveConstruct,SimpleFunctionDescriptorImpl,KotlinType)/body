{
  if (construct == ResolveConstruct.ELVIS || TypeUtils.noExpectedType(expectedType) || TypeUtils.isDontCarePlaceholder(expectedType) || KotlinBuiltIns.isUnitOrNullableUnit(expectedType) || KotlinBuiltIns.isAnyOrNullableAny(expectedType)) {
    return null;
  }
  TypeConstructor typeParameterConstructor=function.getTypeParameters().get(0).getTypeConstructor();
  TypeProjection typeProjection=new TypeProjectionImpl(expectedType);
  return TypeSubstitutor.create(ImmutableMap.of(typeParameterConstructor,typeProjection));
}
