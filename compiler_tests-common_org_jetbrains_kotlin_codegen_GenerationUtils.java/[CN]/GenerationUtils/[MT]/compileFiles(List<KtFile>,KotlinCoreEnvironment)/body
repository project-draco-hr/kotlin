{
  PackagePartProvider packagePartProvider=environment == null ? PackagePartProvider.Companion.getEMPTY() : new JvmPackagePartProvider(environment);
  CompilerConfiguration configuration=environment == null ? CompilerConfiguration.EMPTY : environment.getConfiguration();
  AnalysisResult analysisResult=JvmResolveUtil.analyzeAndCheckForErrors(CollectionsKt.first(files).getProject(),files,configuration,packagePartProvider);
  analysisResult.throwIfError();
  GenerationState state=new GenerationState(CollectionsKt.first(files).getProject(),ClassBuilderFactories.TEST,analysisResult.getModuleDescriptor(),analysisResult.getBindingContext(),files,configuration.get(JVMConfigurationKeys.DISABLE_CALL_ASSERTIONS,false),configuration.get(JVMConfigurationKeys.DISABLE_PARAM_ASSERTIONS,false),GenerationState.GenerateClassFilter.GENERATE_ALL,configuration.get(JVMConfigurationKeys.DISABLE_INLINE,false),configuration.get(JVMConfigurationKeys.DISABLE_OPTIMIZATION,false),configuration.get(JVMConfigurationKeys.USE_TYPE_TABLE,false),configuration.get(JVMConfigurationKeys.INHERIT_MULTIFILE_PARTS,false),Collections.<FqName>emptySet(),Collections.<FqName>emptySet(),null,configuration.get(JVMConfigurationKeys.MODULE_NAME));
  KotlinCodegenFacade.compileCorrectFiles(state,CompilationErrorHandler.THROW_EXCEPTION);
  return state;
}
