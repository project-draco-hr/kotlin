{
  ClassDescriptorFromJvmBytecode classDescriptor=new ClassDescriptorFromJvmBytecode(containingDeclaration,javaClass.getKind(),isInnerClass(javaClass));
  cache(javaClassToKotlinFqName(fqName),classDescriptor);
  classDescriptor.setName(javaClass.getName());
  List<JavaSignatureResolver.TypeParameterDescriptorInitialization> typeParameterDescriptorInitializations=JavaSignatureResolver.createUninitializedClassTypeParameters(javaClass,classDescriptor);
  classDescriptor.setTypeParameterDescriptors(getTypeParametersDescriptors(typeParameterDescriptorInitializations));
  List<JetType> supertypes=Lists.newArrayList();
  classDescriptor.setSupertypes(supertypes);
  classDescriptor.setVisibility(javaClass.getVisibility());
  classDescriptor.setModality(javaClass.getModality());
  classDescriptor.createTypeConstructor();
  JavaClassNonStaticMembersScope scope=new JavaClassNonStaticMembersScope(classDescriptor,javaClass,false,javaDescriptorResolver);
  classDescriptor.setScopeForMemberLookup(scope);
  classDescriptor.setScopeForConstructorResolve(scope);
  signatureResolver.initializeTypeParameters(typeParameterDescriptorInitializations,classDescriptor,"class " + javaClass.getFqName());
  List<TypeParameterDescriptor> classTypeParameters=classDescriptor.getTypeConstructor().getParameters();
  supertypes.addAll(supertypesResolver.getSupertypes(classDescriptor,javaClass,classTypeParameters));
  if (javaClass.isEnum()) {
    ClassDescriptorFromJvmBytecode classObjectDescriptor=createClassObjectDescriptorForEnum(classDescriptor,javaClass);
    cache(getFqNameForClassObject(javaClass),classObjectDescriptor);
    classDescriptor.getBuilder().setClassObjectDescriptor(classObjectDescriptor);
  }
  classDescriptor.setAnnotations(annotationResolver.resolveAnnotations(javaClass,taskList));
  trace.record(BindingContext.CLASS,javaClass.getPsi(),classDescriptor);
  JavaMethod samInterfaceMethod=SingleAbstractMethodUtils.getSamInterfaceMethod(javaClass,javaClass.getPsi().getProject());
  if (samInterfaceMethod != null) {
    SimpleFunctionDescriptor abstractMethod=resolveFunctionOfSamInterface(samInterfaceMethod,classDescriptor);
    classDescriptor.setFunctionTypeForSamInterface(SingleAbstractMethodUtils.getFunctionTypeForAbstractMethod(abstractMethod));
  }
  return classDescriptor;
}
