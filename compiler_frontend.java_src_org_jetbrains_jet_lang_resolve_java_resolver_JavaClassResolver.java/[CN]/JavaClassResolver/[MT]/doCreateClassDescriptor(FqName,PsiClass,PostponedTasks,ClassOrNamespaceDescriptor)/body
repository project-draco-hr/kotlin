{
  JetClassAnnotation jetClassAnnotation=JetClassAnnotation.get(psiClass);
  ClassKind kind=getClassKind(psiClass,jetClassAnnotation);
  ResolverClassData classData=PsiDeclarationProviderFactory.createBinaryClassData(psiClass);
  ClassDescriptorFromJvmBytecode classDescriptor=new ClassDescriptorFromJvmBytecode(containingDeclaration,kind,javaDescriptorResolver,classData);
  cache(javaClassToKotlinFqName(fqName),classDescriptor);
  classDescriptor.setName(Name.identifier(psiClass.getName()));
  List<JavaSignatureResolver.TypeParameterDescriptorInitialization> typeParameterDescriptorInitializations=signatureResolver.createUninitializedClassTypeParameters(psiClass,classDescriptor);
  classDescriptor.setTypeParameterDescriptors(getTypeParametersDescriptors(typeParameterDescriptorInitializations));
  List<JetType> supertypes=Lists.newArrayList();
  classDescriptor.setSupertypes(supertypes);
  classDescriptor.setVisibility(DescriptorResolverUtils.resolveVisibility(psiClass,jetClassAnnotation));
  classDescriptor.setModality(resolveModality(psiClass,classDescriptor));
  classDescriptor.createTypeConstructor();
  classDescriptor.setScopeForMemberLookup(new JavaClassMembersScope(classDescriptor,semanticServices,classData));
  String context="class " + psiClass.getQualifiedName();
  signatureResolver.initializeTypeParameters(typeParameterDescriptorInitializations,classDescriptor,context);
  List<TypeParameterDescriptor> classTypeParameters=classDescriptor.getTypeConstructor().getParameters();
  supertypes.addAll(supertypesResolver.getSupertypes(classDescriptor,new PsiClassWrapper(psiClass),classData,classTypeParameters));
  ClassDescriptorFromJvmBytecode classObjectDescriptor=classObjectResolver.createClassObjectDescriptor(classDescriptor,psiClass);
  cache(DescriptorResolverUtils.getFqNameForClassObject(psiClass),classObjectDescriptor);
  if (classObjectDescriptor != null) {
    classDescriptor.getBuilder().setClassObjectDescriptor(classObjectDescriptor);
  }
  classDescriptor.setAnnotations(annotationResolver.resolveAnnotations(psiClass,taskList));
  trace.record(BindingContext.CLASS,psiClass,classDescriptor);
  return classDescriptor;
}
