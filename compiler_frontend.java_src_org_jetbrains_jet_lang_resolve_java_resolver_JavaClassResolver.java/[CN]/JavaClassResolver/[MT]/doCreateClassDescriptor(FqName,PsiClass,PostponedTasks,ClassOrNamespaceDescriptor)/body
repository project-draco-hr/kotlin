{
  ClassKind kind=getClassKind(psiClass);
  ClassPsiDeclarationProvider classData=new ClassPsiDeclarationProviderImpl(psiClass,false,psiClassFinder);
  ClassDescriptorFromJvmBytecode classDescriptor=new ClassDescriptorFromJvmBytecode(containingDeclaration,kind,isInnerClass(psiClass));
  cache(javaClassToKotlinFqName(fqName),classDescriptor);
  classDescriptor.setName(Name.identifier(psiClass.getName()));
  List<JavaSignatureResolver.TypeParameterDescriptorInitialization> typeParameterDescriptorInitializations=JavaSignatureResolver.createUninitializedClassTypeParameters(psiClass,classDescriptor);
  classDescriptor.setTypeParameterDescriptors(getTypeParametersDescriptors(typeParameterDescriptorInitializations));
  List<JetType> supertypes=Lists.newArrayList();
  classDescriptor.setSupertypes(supertypes);
  classDescriptor.setVisibility(DescriptorResolverUtils.resolveVisibility(psiClass));
  classDescriptor.setModality(resolveModality(psiClass,classDescriptor));
  classDescriptor.createTypeConstructor();
  JavaClassNonStaticMembersScope membersScope=new JavaClassNonStaticMembersScope(classDescriptor,classData,semanticServices);
  classDescriptor.setScopeForMemberLookup(membersScope);
  classDescriptor.setScopeForConstructorResolve(membersScope);
  String context="class " + psiClass.getQualifiedName();
  signatureResolver.initializeTypeParameters(typeParameterDescriptorInitializations,classDescriptor,context);
  List<TypeParameterDescriptor> classTypeParameters=classDescriptor.getTypeConstructor().getParameters();
  supertypes.addAll(supertypesResolver.getSupertypes(classDescriptor,psiClass,classTypeParameters));
  if (psiClass.isEnum()) {
    ClassDescriptorFromJvmBytecode classObjectDescriptor=createClassObjectDescriptorForEnum(classDescriptor,psiClass);
    cache(DescriptorResolverUtils.getFqNameForClassObject(psiClass),classObjectDescriptor);
    classDescriptor.getBuilder().setClassObjectDescriptor(classObjectDescriptor);
  }
  classDescriptor.setAnnotations(annotationResolver.resolveAnnotations(psiClass,taskList));
  trace.record(BindingContext.CLASS,psiClass,classDescriptor);
  PsiMethod samInterfaceMethod=MembersCache.getSamInterfaceMethod(psiClass);
  if (samInterfaceMethod != null) {
    SimpleFunctionDescriptor abstractMethod=resolveFunctionOfSamInterface(samInterfaceMethod,classDescriptor);
    classDescriptor.setFunctionTypeForSamInterface(SingleAbstractMethodUtils.getFunctionTypeForAbstractMethod(abstractMethod));
  }
  return classDescriptor;
}
