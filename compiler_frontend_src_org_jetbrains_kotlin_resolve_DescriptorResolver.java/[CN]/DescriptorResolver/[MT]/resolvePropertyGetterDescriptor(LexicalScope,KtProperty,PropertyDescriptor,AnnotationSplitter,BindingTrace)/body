{
  PropertyGetterDescriptorImpl getterDescriptor;
  KtPropertyAccessor getter=property.getGetter();
  if (getter != null) {
    Annotations getterAnnotations=new CompositeAnnotations(CollectionsKt.listOf(annotationSplitter.getAnnotationsForTarget(PROPERTY_GETTER),annotationResolver.resolveAnnotationsWithoutArguments(scope,getter.getModifierList(),trace)));
    KtType outType=propertyDescriptor.getType();
    KtType returnType=outType;
    KtTypeReference returnTypeReference=getter.getReturnTypeReference();
    if (returnTypeReference != null) {
      returnType=typeResolver.resolveType(scope,returnTypeReference,trace,true);
      if (outType != null && !TypeUtils.equalTypes(returnType,outType)) {
        trace.report(WRONG_GETTER_RETURN_TYPE.on(returnTypeReference,propertyDescriptor.getReturnType(),outType));
      }
    }
    getterDescriptor=new PropertyGetterDescriptorImpl(propertyDescriptor,getterAnnotations,resolveModalityFromModifiers(getter,propertyDescriptor.getModality()),resolveVisibilityFromModifiers(getter,propertyDescriptor.getVisibility()),getter.hasBody(),false,getter.hasModifier(EXTERNAL_KEYWORD),CallableMemberDescriptor.Kind.DECLARATION,null,KotlinSourceElementKt.toSourceElement(getter));
    getterDescriptor.initialize(returnType);
    trace.record(BindingContext.PROPERTY_ACCESSOR,getter,getterDescriptor);
  }
 else {
    Annotations getterAnnotations=annotationSplitter.getAnnotationsForTarget(PROPERTY_GETTER);
    getterDescriptor=DescriptorFactory.createGetter(propertyDescriptor,getterAnnotations,!property.hasDelegate(),false);
    getterDescriptor.initialize(propertyDescriptor.getType());
  }
  return getterDescriptor;
}
