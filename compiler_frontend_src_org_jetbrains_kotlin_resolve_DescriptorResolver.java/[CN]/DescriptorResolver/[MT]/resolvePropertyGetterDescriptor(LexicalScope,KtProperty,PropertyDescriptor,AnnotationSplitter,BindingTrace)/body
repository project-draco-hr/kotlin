{
  PropertyGetterDescriptorImpl getterDescriptor;
  KtPropertyAccessor getter=property.getGetter();
  if (getter != null) {
    Annotations getterAnnotations=new CompositeAnnotations(CollectionsKt.listOf(annotationSplitter.getAnnotationsForTarget(PROPERTY_GETTER),annotationResolver.resolveAnnotationsWithoutArguments(scopeWithTypeParameters,getter.getModifierList(),trace)));
    getterDescriptor=new PropertyGetterDescriptorImpl(propertyDescriptor,getterAnnotations,resolveModalityFromModifiers(getter,propertyDescriptor.getModality()),resolveVisibilityFromModifiers(getter,propertyDescriptor.getVisibility()),false,getter.hasModifier(EXTERNAL_KEYWORD),property.hasModifier(KtTokens.INLINE_KEYWORD) || getter.hasModifier(KtTokens.INLINE_KEYWORD),CallableMemberDescriptor.Kind.DECLARATION,null,KotlinSourceElementKt.toSourceElement(getter));
    KotlinType returnType=determineGetterReturnType(scopeWithTypeParameters,trace,getterDescriptor,getter,propertyDescriptor.getType());
    getterDescriptor.initialize(returnType);
    trace.record(BindingContext.PROPERTY_ACCESSOR,getter,getterDescriptor);
  }
 else {
    Annotations getterAnnotations=annotationSplitter.getAnnotationsForTarget(PROPERTY_GETTER);
    getterDescriptor=DescriptorFactory.createGetter(propertyDescriptor,getterAnnotations,!property.hasDelegate(),false,property.hasModifier(KtTokens.INLINE_KEYWORD));
    getterDescriptor.initialize(propertyDescriptor.getType());
  }
  return getterDescriptor;
}
