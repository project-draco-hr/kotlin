{
  final KtTypeReference typeReference=typeAlias.getTypeReference();
  if (typeReference == null)   return null;
  KtModifierList modifierList=typeAlias.getModifierList();
  Visibility visibility=resolveVisibilityFromModifiers(typeAlias,getDefaultVisibility(typeAlias,containingDeclaration));
  Annotations allAnnotations=annotationResolver.resolveAnnotationsWithArguments(scope,modifierList,trace);
  Name name=KtPsiUtil.safeName(typeAlias.getName());
  SourceElement sourceElement=KotlinSourceElementKt.toSourceElement(typeAlias);
  final LazyTypeAliasDescriptor typeAliasDescriptor=LazyTypeAliasDescriptor.create(storageManager,trace,containingDeclaration,allAnnotations,name,sourceElement,visibility);
  List<TypeParameterDescriptorImpl> typeParameterDescriptors;
  final LexicalScope scopeWithTypeParameters;
{
    List<KtTypeParameter> typeParameters=typeAlias.getTypeParameters();
    if (typeParameters.isEmpty()) {
      scopeWithTypeParameters=scope;
      typeParameterDescriptors=Collections.emptyList();
    }
 else {
      LexicalWritableScope writableScope=new LexicalWritableScope(scope,containingDeclaration,false,null,new TraceBasedLocalRedeclarationChecker(trace,overloadChecker),LexicalScopeKind.TYPE_ALIAS_HEADER);
      typeParameterDescriptors=resolveTypeParametersForDescriptor(typeAliasDescriptor,writableScope,scope,typeParameters,trace);
      writableScope.freeze();
      checkNoGenericBoundsOnTypeAliasParameters(typeAlias,trace);
      resolveGenericBounds(typeAlias,typeAliasDescriptor,writableScope,typeParameterDescriptors,trace);
      scopeWithTypeParameters=writableScope;
    }
  }
  if (!languageFeatureSettings.supportsFeature(LanguageFeature.TypeAliases)) {
    typeResolver.resolveType(scopeWithTypeParameters,typeReference,trace,true);
    trace.report(UNSUPPORTED_TYPEALIAS.on(typeAlias.getTypeAliasKeyword()));
    return null;
  }
  typeAliasDescriptor.initialize(typeParameterDescriptors,DeferredType.create(storageManager,trace,new Function0<KotlinType>(){
    @Override public KotlinType invoke(){
      return typeResolver.resolveAbbreviatedType(scopeWithTypeParameters,typeReference,trace,true);
    }
  }
),DeferredType.create(storageManager,trace,new Function0<KotlinType>(){
    @Override public KotlinType invoke(){
      return typeResolver.resolveType(scopeWithTypeParameters,typeReference,trace,true);
    }
  }
));
  trace.record(TYPE_ALIAS,typeAlias,typeAliasDescriptor);
  return typeAliasDescriptor;
}
