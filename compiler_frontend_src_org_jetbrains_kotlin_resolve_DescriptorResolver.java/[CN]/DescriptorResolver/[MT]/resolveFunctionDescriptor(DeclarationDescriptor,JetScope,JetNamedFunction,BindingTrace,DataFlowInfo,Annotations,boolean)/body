{
  if (!nameCanBeOmitted && function.getName() == null) {
    trace.report(FUNCTION_DECLARATION_WITH_NO_NAME.on(function));
  }
  final SimpleFunctionDescriptorImpl functionDescriptor=SimpleFunctionDescriptorImpl.create(containingDescriptor,annotations,function.getNameAsSafeName(),CallableMemberDescriptor.Kind.DECLARATION,toSourceElement(function));
  WritableScope innerScope=new WritableScopeImpl(scope,functionDescriptor,new TraceBasedRedeclarationHandler(trace),"Function descriptor header scope");
  innerScope.addLabeledDeclaration(functionDescriptor);
  List<TypeParameterDescriptorImpl> typeParameterDescriptors=resolveTypeParametersForCallableDescriptor(functionDescriptor,innerScope,function.getTypeParameters(),trace);
  innerScope.changeLockLevel(WritableScope.LockLevel.BOTH);
  resolveGenericBounds(function,functionDescriptor,innerScope,typeParameterDescriptors,trace);
  JetType receiverType=null;
  JetTypeReference receiverTypeRef=function.getReceiverTypeReference();
  if (receiverTypeRef != null) {
    JetScope scopeForReceiver=function.hasTypeParameterListBeforeFunctionName() ? innerScope : scope;
    receiverType=typeResolver.resolveType(scopeForReceiver,receiverTypeRef,trace,true);
  }
  List<ValueParameterDescriptor> valueParameterDescriptors=resolveValueParameters(functionDescriptor,innerScope,function.getValueParameters(),trace);
  innerScope.changeLockLevel(WritableScope.LockLevel.READING);
  JetTypeReference returnTypeRef=function.getTypeReference();
  JetType returnType;
  if (returnTypeRef != null) {
    returnType=typeResolver.resolveType(innerScope,returnTypeRef,trace,true);
  }
 else   if (function.hasBlockBody()) {
    returnType=builtIns.getUnitType();
  }
 else {
    if (function.hasBody()) {
      returnType=DeferredType.createRecursionIntolerant(storageManager,trace,new Function0<JetType>(){
        @Override public JetType invoke(){
          JetType type=expressionTypingServices.getBodyExpressionType(trace,scope,dataFlowInfo,function,functionDescriptor);
          return transformAnonymousTypeIfNeeded(functionDescriptor,function,type,trace);
        }
      }
);
    }
 else {
      returnType=ErrorUtils.createErrorType("No type, no body");
    }
  }
  Modality modality=resolveModalityFromModifiers(function,getDefaultModality(containingDescriptor,function.hasBody()));
  Visibility visibility=resolveVisibilityFromModifiers(function,getDefaultVisibility(function,containingDescriptor));
  functionDescriptor.initialize(receiverType,getDispatchReceiverParameterIfNeeded(containingDescriptor),typeParameterDescriptors,valueParameterDescriptors,returnType,modality,visibility);
  BindingContextUtils.recordFunctionDeclarationToDescriptor(trace,function,functionDescriptor);
  return functionDescriptor;
}
