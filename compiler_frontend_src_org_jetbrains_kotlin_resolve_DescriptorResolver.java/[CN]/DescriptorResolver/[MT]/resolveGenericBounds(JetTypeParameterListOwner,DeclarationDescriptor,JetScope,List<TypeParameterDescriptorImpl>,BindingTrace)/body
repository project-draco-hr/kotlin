{
  List<UpperBoundCheckerTask> deferredUpperBoundCheckerTasks=Lists.newArrayList();
  List<JetTypeParameter> typeParameters=declaration.getTypeParameters();
  Map<Name,TypeParameterDescriptorImpl> parameterByName=Maps.newHashMap();
  for (int i=0; i < typeParameters.size(); i++) {
    JetTypeParameter jetTypeParameter=typeParameters.get(i);
    TypeParameterDescriptorImpl typeParameterDescriptor=parameters.get(i);
    parameterByName.put(typeParameterDescriptor.getName(),typeParameterDescriptor);
    JetTypeReference extendsBound=jetTypeParameter.getExtendsBound();
    if (extendsBound != null) {
      JetType type=typeResolver.resolveType(scope,extendsBound,trace,false);
      if (type.getConstructor().equals(typeParameterDescriptor.getTypeConstructor())) {
        trace.report(Errors.CYCLIC_GENERIC_UPPER_BOUND.on(extendsBound));
        type=ErrorUtils.createErrorType("Cyclic upper bound: " + type);
      }
      typeParameterDescriptor.addUpperBound(type);
      deferredUpperBoundCheckerTasks.add(new UpperBoundCheckerTask(extendsBound,type));
    }
  }
  for (  JetTypeConstraint constraint : declaration.getTypeConstraints()) {
    JetSimpleNameExpression subjectTypeParameterName=constraint.getSubjectTypeParameterName();
    if (subjectTypeParameterName == null) {
      continue;
    }
    Name referencedName=subjectTypeParameterName.getReferencedNameAsName();
    TypeParameterDescriptorImpl typeParameterDescriptor=parameterByName.get(referencedName);
    JetTypeReference boundTypeReference=constraint.getBoundTypeReference();
    JetType bound=null;
    if (boundTypeReference != null) {
      bound=typeResolver.resolveType(scope,boundTypeReference,trace,false);
      deferredUpperBoundCheckerTasks.add(new UpperBoundCheckerTask(boundTypeReference,bound));
    }
    if (typeParameterDescriptor != null) {
      trace.record(BindingContext.REFERENCE_TARGET,subjectTypeParameterName,typeParameterDescriptor);
      if (bound != null) {
        typeParameterDescriptor.addUpperBound(bound);
      }
    }
  }
  for (  TypeParameterDescriptorImpl parameter : parameters) {
    parameter.addDefaultUpperBound();
    parameter.setInitialized();
    checkConflictingUpperBounds(trace,parameter,typeParameters.get(parameter.getIndex()));
  }
  if (!(declaration instanceof JetClass)) {
    for (    UpperBoundCheckerTask checkerTask : deferredUpperBoundCheckerTasks) {
      checkUpperBoundType(checkerTask.upperBound,checkerTask.upperBoundType,trace);
    }
    checkNamesInConstraints(declaration,descriptor,scope,trace);
  }
}
