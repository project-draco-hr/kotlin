{
  return DeferredType.createRecursionIntolerant(storageManager,trace,new Function0<KotlinType>(){
    @Override public KotlinType invoke(){
      PreliminaryDeclarationVisitor.Companion.createForDeclaration(function,trace);
      KotlinType type=expressionTypingServices.getBodyExpressionType(trace,scope,dataFlowInfo,function,functionDescriptor);
      KotlinType result=transformAnonymousTypeIfNeeded(functionDescriptor,function,type,trace);
      functionsTypingVisitor.checkTypesForReturnStatements(function,trace,result);
      return result;
    }
  }
);
}
