{
  JetPropertyAccessor setter=property.getSetter();
  PropertySetterDescriptorImpl setterDescriptor=null;
  if (setter != null) {
    Annotations annotations=new CompositeAnnotations(CollectionsKt.listOf(annotationSplitter.getAnnotationsForTarget(PROPERTY_SETTER),annotationResolver.resolveAnnotationsWithoutArguments(scope,setter.getModifierList(),trace)));
    JetParameter parameter=setter.getParameter();
    setterDescriptor=new PropertySetterDescriptorImpl(propertyDescriptor,annotations,resolveModalityFromModifiers(setter,propertyDescriptor.getModality()),resolveVisibilityFromModifiers(setter,propertyDescriptor.getVisibility()),setter.hasBody(),false,setter.hasModifier(EXTERNAL_KEYWORD),CallableMemberDescriptor.Kind.DECLARATION,null,KotlinSourceElementKt.toSourceElement(setter));
    if (parameter != null) {
      if (parameter.hasDefaultValue()) {
        trace.report(SETTER_PARAMETER_WITH_DEFAULT_VALUE.on(parameter.getDefaultValue()));
      }
      JetType type;
      JetTypeReference typeReference=parameter.getTypeReference();
      if (typeReference == null) {
        type=propertyDescriptor.getType();
      }
 else {
        type=typeResolver.resolveType(scope,typeReference,trace,true);
        JetType inType=propertyDescriptor.getType();
        if (inType != null) {
          if (!TypeUtils.equalTypes(type,inType)) {
            trace.report(WRONG_SETTER_PARAMETER_TYPE.on(typeReference,inType,type));
          }
        }
 else {
        }
      }
      ValueParameterDescriptorImpl valueParameterDescriptor=resolveValueParameterDescriptor(scope,setterDescriptor,parameter,0,type,trace);
      setterDescriptor.initialize(valueParameterDescriptor);
    }
 else {
      setterDescriptor.initializeDefault();
    }
    trace.record(BindingContext.PROPERTY_ACCESSOR,setter,setterDescriptor);
  }
 else   if (property.isVar()) {
    Annotations setterAnnotations=annotationSplitter.getAnnotationsForTarget(PROPERTY_SETTER);
    setterDescriptor=DescriptorFactory.createSetter(propertyDescriptor,setterAnnotations,!property.hasDelegate(),false);
  }
  if (!property.isVar()) {
    if (setter != null) {
      trace.report(VAL_WITH_SETTER.on(setter));
    }
  }
  return setterDescriptor;
}
