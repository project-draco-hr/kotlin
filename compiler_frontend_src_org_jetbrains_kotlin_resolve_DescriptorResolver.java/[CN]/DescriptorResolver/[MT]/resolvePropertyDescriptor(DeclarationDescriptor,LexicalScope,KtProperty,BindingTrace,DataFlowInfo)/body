{
  KtModifierList modifierList=property.getModifierList();
  boolean isVar=property.isVar();
  boolean hasBody=hasBody(property);
  Visibility visibility=resolveVisibilityFromModifiers(property,getDefaultVisibility(property,containingDeclaration));
  Modality modality=containingDeclaration instanceof ClassDescriptor ? resolveModalityFromModifiers(property,getDefaultModality(containingDeclaration,visibility,hasBody)) : Modality.FINAL;
  final AnnotationSplitter.PropertyWrapper wrapper=new AnnotationSplitter.PropertyWrapper();
  Annotations allAnnotations=annotationResolver.resolveAnnotationsWithoutArguments(scope,modifierList,trace);
  AnnotationSplitter annotationSplitter=new AnnotationSplitter(storageManager,allAnnotations,new Function0<Set<AnnotationUseSiteTarget>>(){
    @Override public Set<AnnotationUseSiteTarget> invoke(){
      return AnnotationSplitter.getTargetSet(false,trace.getBindingContext(),wrapper);
    }
  }
);
  Annotations propertyAnnotations=new CompositeAnnotations(CollectionsKt.listOf(annotationSplitter.getAnnotationsForTargets(PROPERTY,FIELD),annotationSplitter.getOtherAnnotations()));
  PropertyDescriptorImpl propertyDescriptor=PropertyDescriptorImpl.create(containingDeclaration,propertyAnnotations,modality,visibility,isVar,KtPsiUtil.safeName(property.getName()),CallableMemberDescriptor.Kind.DECLARATION,KotlinSourceElementKt.toSourceElement(property),modifierList != null && modifierList.hasModifier(KtTokens.LATEINIT_KEYWORD),modifierList != null && modifierList.hasModifier(KtTokens.CONST_KEYWORD));
  wrapper.setProperty(propertyDescriptor);
  List<TypeParameterDescriptorImpl> typeParameterDescriptors;
  LexicalScope scopeWithTypeParameters;
  KotlinType receiverType=null;
{
    List<KtTypeParameter> typeParameters=property.getTypeParameters();
    if (typeParameters.isEmpty()) {
      scopeWithTypeParameters=scope;
      typeParameterDescriptors=Collections.emptyList();
    }
 else {
      LexicalWritableScope writableScope=new LexicalWritableScope(scope,containingDeclaration,false,null,new TraceBasedRedeclarationHandler(trace),LexicalScopeKind.PROPERTY_HEADER);
      typeParameterDescriptors=resolveTypeParametersForCallableDescriptor(propertyDescriptor,writableScope,scope,typeParameters,trace);
      writableScope.changeLockLevel(LexicalWritableScope.LockLevel.READING);
      resolveGenericBounds(property,propertyDescriptor,writableScope,typeParameterDescriptors,trace);
      scopeWithTypeParameters=writableScope;
    }
    KtTypeReference receiverTypeRef=property.getReceiverTypeReference();
    if (receiverTypeRef != null) {
      receiverType=typeResolver.resolveType(scopeWithTypeParameters,receiverTypeRef,trace,true);
    }
  }
  ReceiverParameterDescriptor receiverDescriptor=DescriptorFactory.createExtensionReceiverParameterForCallable(propertyDescriptor,receiverType);
  KotlinType type=getVariableType(propertyDescriptor,JetScopeUtils.makeScopeForPropertyInitializer(scopeWithTypeParameters,propertyDescriptor),property,dataFlowInfo,true,trace);
  propertyDescriptor.setType(type,typeParameterDescriptors,getDispatchReceiverParameterIfNeeded(containingDeclaration),receiverDescriptor);
  PropertyGetterDescriptorImpl getter=resolvePropertyGetterDescriptor(scopeWithTypeParameters,property,propertyDescriptor,annotationSplitter,trace);
  PropertySetterDescriptor setter=resolvePropertySetterDescriptor(scopeWithTypeParameters,property,propertyDescriptor,annotationSplitter,trace);
  propertyDescriptor.initialize(getter,setter);
  trace.record(BindingContext.VARIABLE,property,propertyDescriptor);
  return propertyDescriptor;
}
