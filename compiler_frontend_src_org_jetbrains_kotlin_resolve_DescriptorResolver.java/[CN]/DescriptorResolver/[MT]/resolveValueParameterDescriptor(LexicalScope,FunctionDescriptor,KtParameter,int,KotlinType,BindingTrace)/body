{
  KotlinType varargElementType=null;
  KotlinType variableType=type;
  if (valueParameter.hasModifier(VARARG_KEYWORD)) {
    varargElementType=type;
    variableType=getVarargParameterType(type);
  }
  KtModifierList modifierList=valueParameter.getModifierList();
  Annotations allAnnotations=annotationResolver.resolveAnnotationsWithoutArguments(scope,valueParameter.getModifierList(),trace);
  Annotations valueParameterAnnotations=Annotations.Companion.getEMPTY();
  if (modifierList != null) {
    if (valueParameter.hasValOrVar()) {
      AnnotationSplitter annotationSplitter=AnnotationSplitter.create(storageManager,allAnnotations,SetsKt.setOf(CONSTRUCTOR_PARAMETER));
      valueParameterAnnotations=annotationSplitter.getAnnotationsForTarget(CONSTRUCTOR_PARAMETER);
    }
 else {
      valueParameterAnnotations=allAnnotations;
    }
  }
  KtDestructuringDeclaration destructuringDeclaration=valueParameter.getDestructuringDeclaration();
  List<VariableDescriptor> destructuringVariables;
  if (destructuringDeclaration != null) {
    if (!languageVersionSettings.supportsFeature(LanguageFeature.DestructuringLambdaParameters)) {
      trace.report(Errors.UNSUPPORTED_FEATURE.on(valueParameter,LanguageFeature.DestructuringLambdaParameters));
    }
    destructuringVariables=destructuringDeclarationResolver.resolveLocalVariablesFromDestructuringDeclaration(scope,destructuringDeclaration,new TransientReceiver(type),null,ExpressionTypingContext.newContext(trace,scope,DataFlowInfoFactory.EMPTY,TypeUtils.NO_EXPECTED_TYPE));
  }
 else {
    destructuringVariables=null;
  }
  ValueParameterDescriptorImpl valueParameterDescriptor=ValueParameterDescriptorImpl.createWithDestructuringDeclarations(owner,null,index,valueParameterAnnotations,destructuringVariables == null ? KtPsiUtil.safeName(valueParameter.getName()) : Name.special("<name for destructuring parameter " + index + ">"),variableType,valueParameter.hasDefaultValue(),valueParameter.hasModifier(CROSSINLINE_KEYWORD),valueParameter.hasModifier(NOINLINE_KEYWORD),valueParameter.hasModifier(COROUTINE_KEYWORD),varargElementType,KotlinSourceElementKt.toSourceElement(valueParameter),destructuringVariables);
  trace.record(BindingContext.VALUE_PARAMETER,valueParameter,valueParameterDescriptor);
  return valueParameterDescriptor;
}
