{
  List<UpperBoundCheckerTask> deferredUpperBoundCheckerTasks=Lists.newArrayList();
  List<KtTypeParameter> typeParameters=declaration.getTypeParameters();
  Map<Name,TypeParameterDescriptorImpl> parameterByName=Maps.newHashMap();
  for (int i=0; i < typeParameters.size(); i++) {
    KtTypeParameter ktTypeParameter=typeParameters.get(i);
    TypeParameterDescriptorImpl typeParameterDescriptor=parameters.get(i);
    parameterByName.put(typeParameterDescriptor.getName(),typeParameterDescriptor);
    KtTypeReference extendsBound=ktTypeParameter.getExtendsBound();
    if (extendsBound != null) {
      KotlinType type=typeResolver.resolveType(scope,extendsBound,trace,false);
      typeParameterDescriptor.addUpperBound(type);
      deferredUpperBoundCheckerTasks.add(new UpperBoundCheckerTask(ktTypeParameter.getNameAsName(),extendsBound,type));
    }
  }
  for (  KtTypeConstraint constraint : declaration.getTypeConstraints()) {
    KtSimpleNameExpression subjectTypeParameterName=constraint.getSubjectTypeParameterName();
    if (subjectTypeParameterName == null) {
      continue;
    }
    Name referencedName=subjectTypeParameterName.getReferencedNameAsName();
    TypeParameterDescriptorImpl typeParameterDescriptor=parameterByName.get(referencedName);
    KtTypeReference boundTypeReference=constraint.getBoundTypeReference();
    KotlinType bound=null;
    if (boundTypeReference != null) {
      bound=typeResolver.resolveType(scope,boundTypeReference,trace,false);
      deferredUpperBoundCheckerTasks.add(new UpperBoundCheckerTask(referencedName,boundTypeReference,bound));
    }
    if (typeParameterDescriptor != null) {
      trace.record(BindingContext.REFERENCE_TARGET,subjectTypeParameterName,typeParameterDescriptor);
      if (bound != null) {
        typeParameterDescriptor.addUpperBound(bound);
      }
    }
  }
  for (  TypeParameterDescriptorImpl parameter : parameters) {
    parameter.addDefaultUpperBound();
    parameter.setInitialized();
  }
  for (  TypeParameterDescriptorImpl parameter : parameters) {
    checkConflictingUpperBounds(trace,parameter,typeParameters.get(parameter.getIndex()));
  }
  if (!(declaration instanceof KtClass)) {
    checkUpperBoundTypes(trace,deferredUpperBoundCheckerTasks);
    checkNamesInConstraints(declaration,descriptor,scope,trace);
  }
}
