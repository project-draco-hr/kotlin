{
  if (!shouldRecordInitializerForProperty(variableDescriptor,variableType))   return;
  if (!variable.hasInitializer())   return;
  variableDescriptor.setCompileTimeInitializer(storageManager.createRecursionTolerantNullableLazyValue(new Function0<ConstantValue<?>>(){
    @Nullable @Override public ConstantValue<?> invoke(){
      KtExpression initializer=variable.getInitializer();
      KtType initializerType=expressionTypingServices.safeGetType(scope,initializer,variableType,dataFlowInfo,trace);
      CompileTimeConstant<?> constant=constantExpressionEvaluator.evaluateExpression(initializer,trace,initializerType);
      if (constant == null)       return null;
      if (constant.getUsesNonConstValAsConstant() && variableDescriptor.isConst()) {
        trace.report(Errors.NON_CONST_VAL_USED_IN_CONSTANT_EXPRESSION.on(initializer));
      }
      return constant.toConstantValue(initializerType);
    }
  }
,null));
}
