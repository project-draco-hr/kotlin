{
  KtTypeReference propertyTypeRef=variable.getTypeReference();
  boolean hasDelegate=variable instanceof KtProperty && ((KtProperty)variable).hasDelegateExpression();
  if (propertyTypeRef == null) {
    if (!variable.hasInitializer()) {
      if (hasDelegate && variableDescriptor instanceof PropertyDescriptor) {
        final KtProperty property=(KtProperty)variable;
        if (property.hasDelegateExpression()) {
          return DeferredType.createRecursionIntolerant(storageManager,trace,new Function0<KotlinType>(){
            @Override public KotlinType invoke(){
              return resolveDelegatedPropertyType(property,(PropertyDescriptor)variableDescriptor,scopeForInitializer,property.getDelegateExpression(),dataFlowInfo,trace);
            }
          }
);
        }
      }
      if (!notLocal) {
        trace.report(VARIABLE_WITH_NO_TYPE_NO_INITIALIZER.on(variable));
      }
      return ErrorUtils.createErrorType("No type, no body");
    }
 else {
      if (notLocal) {
        return DeferredType.createRecursionIntolerant(storageManager,trace,new Function0<KotlinType>(){
          @Override public KotlinType invoke(){
            PreliminaryDeclarationVisitor.Companion.createForDeclaration(variable,trace);
            KotlinType initializerType=resolveInitializerType(scopeForInitializer,variable.getInitializer(),dataFlowInfo,trace);
            setConstantForVariableIfNeeded(variableDescriptor,scopeForInitializer,variable,dataFlowInfo,initializerType,trace);
            return transformAnonymousTypeIfNeeded(variableDescriptor,variable,initializerType,trace);
          }
        }
);
      }
 else {
        KotlinType initializerType=resolveInitializerType(scopeForInitializer,variable.getInitializer(),dataFlowInfo,trace);
        setConstantForVariableIfNeeded(variableDescriptor,scopeForInitializer,variable,dataFlowInfo,initializerType,trace);
        return initializerType;
      }
    }
  }
 else {
    KotlinType type=typeResolver.resolveType(scopeForInitializer,propertyTypeRef,trace,true);
    setConstantForVariableIfNeeded(variableDescriptor,scopeForInitializer,variable,dataFlowInfo,type,trace);
    return type;
  }
}
