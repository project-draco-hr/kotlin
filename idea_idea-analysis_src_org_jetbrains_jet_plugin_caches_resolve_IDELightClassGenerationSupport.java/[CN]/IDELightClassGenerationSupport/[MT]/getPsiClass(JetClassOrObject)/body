{
  VirtualFile virtualFile=classOrObject.getContainingFile().getVirtualFile();
  if (virtualFile != null && LibraryUtil.findLibraryEntry(virtualFile,classOrObject.getProject()) != null) {
    if (ProjectRootsUtil.isLibraryClassFile(project,virtualFile)) {
      return getLightClassForDecompiledClassOrObject(classOrObject);
    }
    return JetSourceNavigationHelper.getOriginalClass(classOrObject);
  }
  return KotlinLightClassForExplicitDeclaration.create(psiManager,classOrObject);
}
