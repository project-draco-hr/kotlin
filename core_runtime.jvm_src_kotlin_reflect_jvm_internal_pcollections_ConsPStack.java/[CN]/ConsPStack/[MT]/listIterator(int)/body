{
  if (index < 0 || index > size)   throw new IndexOutOfBoundsException();
  return new ListIterator<E>(){
    int i=index;
    ConsPStack<E> next=subList(index);
    @Override public boolean hasNext(){
      return next.size > 0;
    }
    @Override public boolean hasPrevious(){
      return i > 0;
    }
    @Override public int nextIndex(){
      return index;
    }
    @Override public int previousIndex(){
      return index - 1;
    }
    @Override public E next(){
      E e=next.first;
      next=next.rest;
      return e;
    }
    @Override public E previous(){
      System.err.println("ConsPStack.listIterator().previous() is inefficient, don't use it!");
      next=subList(index - 1);
      return next.first;
    }
    @Override public void add(    E o){
      throw new UnsupportedOperationException();
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
    @Override public void set(    E o){
      throw new UnsupportedOperationException();
    }
  }
;
}
