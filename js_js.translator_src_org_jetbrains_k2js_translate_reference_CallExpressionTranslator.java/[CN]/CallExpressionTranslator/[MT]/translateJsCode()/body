{
  List<? extends ValueArgument> arguments=expression.getValueArguments();
  JetExpression argumentExpression=arguments.get(0).getArgumentExpression();
  if (!(argumentExpression instanceof JetStringTemplateExpression)) {
    context().getTrace().report(ErrorsJs.JSCODE_ARGUMENT_SHOULD_BE_LITERAL.on(expression));
    return program().getEmptyExpression();
  }
  List<JsStatement> statements=parseJsCode(argumentExpression);
  int size=statements.size();
  if (size == 0) {
    return program().getEmptyExpression();
  }
 else   if (size > 1) {
    return new JsBlock(statements);
  }
 else {
    JsStatement resultStatement=statements.get(0);
    if (resultStatement instanceof JsExpressionStatement) {
      return ((JsExpressionStatement)resultStatement).getExpression();
    }
    return resultStatement;
  }
}
