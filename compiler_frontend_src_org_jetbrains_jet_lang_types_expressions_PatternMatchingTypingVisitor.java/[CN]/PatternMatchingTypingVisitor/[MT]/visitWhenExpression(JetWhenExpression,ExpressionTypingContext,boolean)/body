{
  DataFlowUtils.recordExpectedType(contextWithExpectedType.trace,expression,contextWithExpectedType.expectedType);
  ExpressionTypingContext context=contextWithExpectedType.replaceExpectedType(NO_EXPECTED_TYPE).replaceContextDependency(INDEPENDENT);
  JetExpression subjectExpression=expression.getSubjectExpression();
  JetType subjectType;
  if (subjectExpression == null) {
    subjectType=ErrorUtils.createErrorType("Unknown type");
  }
 else {
    JetTypeInfo typeInfo=facade.safeGetTypeInfo(subjectExpression,context);
    subjectType=typeInfo.getType();
    context=context.replaceDataFlowInfo(typeInfo.getDataFlowInfo());
  }
  DataFlowValue subjectDataFlowValue=subjectExpression != null ? DataFlowValueFactory.createDataFlowValue(subjectExpression,subjectType,context.trace.getBindingContext()) : DataFlowValue.NULL;
  Set<JetType> expressionTypes=Sets.newHashSet();
  DataFlowInfo commonDataFlowInfo=null;
  DataFlowInfo elseDataFlowInfo=context.dataFlowInfo;
  for (  JetWhenEntry whenEntry : expression.getEntries()) {
    JetWhenCondition[] conditions=whenEntry.getConditions();
    DataFlowInfo newDataFlowInfo;
    WritableScope scopeToExtend;
    if (whenEntry.isElse()) {
      scopeToExtend=newWritableScopeImpl(context,"Scope extended in when-else entry");
      newDataFlowInfo=elseDataFlowInfo;
    }
 else     if (conditions.length == 1) {
      scopeToExtend=newWritableScopeImpl(context,"Scope extended in when entry");
      newDataFlowInfo=context.dataFlowInfo;
      JetWhenCondition condition=conditions[0];
      if (condition != null) {
        DataFlowInfos infos=checkWhenCondition(subjectExpression,subjectExpression == null,subjectType,condition,context,subjectDataFlowValue);
        newDataFlowInfo=infos.thenInfo;
        elseDataFlowInfo=elseDataFlowInfo.and(infos.elseInfo);
      }
    }
 else {
      scopeToExtend=newWritableScopeImpl(context,"pattern matching");
      newDataFlowInfo=null;
      for (      JetWhenCondition condition : conditions) {
        DataFlowInfos infos=checkWhenCondition(subjectExpression,subjectExpression == null,subjectType,condition,context,subjectDataFlowValue);
        if (newDataFlowInfo == null) {
          newDataFlowInfo=infos.thenInfo;
        }
 else {
          newDataFlowInfo=newDataFlowInfo.or(infos.thenInfo);
        }
        elseDataFlowInfo=elseDataFlowInfo.and(infos.elseInfo);
      }
      if (newDataFlowInfo == null) {
        newDataFlowInfo=context.dataFlowInfo;
      }
    }
    JetExpression bodyExpression=whenEntry.getExpression();
    if (bodyExpression != null) {
      ExpressionTypingContext newContext=contextWithExpectedType.replaceScope(scopeToExtend).replaceDataFlowInfo(newDataFlowInfo).replaceContextDependency(INDEPENDENT);
      CoercionStrategy coercionStrategy=isStatement ? CoercionStrategy.COERCION_TO_UNIT : CoercionStrategy.NO_COERCION;
      JetTypeInfo typeInfo=context.expressionTypingServices.getBlockReturnedTypeWithWritableScope(scopeToExtend,Collections.singletonList(bodyExpression),coercionStrategy,newContext,context.trace);
      JetType type=typeInfo.getType();
      if (type != null) {
        expressionTypes.add(type);
      }
      if (commonDataFlowInfo == null) {
        commonDataFlowInfo=typeInfo.getDataFlowInfo();
      }
 else {
        commonDataFlowInfo=commonDataFlowInfo.or(typeInfo.getDataFlowInfo());
      }
    }
  }
  if (commonDataFlowInfo == null) {
    commonDataFlowInfo=context.dataFlowInfo;
  }
  if (!expressionTypes.isEmpty()) {
    return DataFlowUtils.checkImplicitCast(CommonSupertypes.commonSupertype(expressionTypes),expression,contextWithExpectedType,isStatement,commonDataFlowInfo);
  }
  return JetTypeInfo.create(null,commonDataFlowInfo);
}
