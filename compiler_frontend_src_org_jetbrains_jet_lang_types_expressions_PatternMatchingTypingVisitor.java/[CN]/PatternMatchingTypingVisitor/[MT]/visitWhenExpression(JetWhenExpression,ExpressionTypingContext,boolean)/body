{
  ExpressionTypingContext context=contextWithExpectedType.replaceExpectedType(TypeUtils.NO_EXPECTED_TYPE);
  final JetExpression subjectExpression=expression.getSubjectExpression();
  final JetType subjectType=subjectExpression != null ? context.expressionTypingServices.safeGetType(context.scope,subjectExpression,TypeUtils.NO_EXPECTED_TYPE,context.dataFlowInfo,context.trace) : ErrorUtils.createErrorType("Unknown type");
  final DataFlowValue variableDescriptor=subjectExpression != null ? DataFlowValueFactory.INSTANCE.createDataFlowValue(subjectExpression,subjectType,context.trace.getBindingContext()) : DataFlowValue.NULL;
  Set<JetType> expressionTypes=Sets.newHashSet();
  DataFlowInfo commonDataFlowInfo=null;
  for (  JetWhenEntry whenEntry : expression.getEntries()) {
    JetWhenCondition[] conditions=whenEntry.getConditions();
    DataFlowInfo newDataFlowInfo;
    WritableScope scopeToExtend;
    if (conditions.length == 1) {
      scopeToExtend=newWritableScopeImpl(context,"Scope extended in when entry");
      newDataFlowInfo=context.dataFlowInfo;
      JetWhenCondition condition=conditions[0];
      if (condition != null) {
        newDataFlowInfo=checkWhenCondition(subjectExpression,subjectExpression == null,subjectType,condition,scopeToExtend,context,variableDescriptor);
      }
    }
 else {
      scopeToExtend=newWritableScopeImpl(context,"pattern matching");
      newDataFlowInfo=null;
      for (      JetWhenCondition condition : conditions) {
        DataFlowInfo dataFlowInfo=checkWhenCondition(subjectExpression,subjectExpression == null,subjectType,condition,newWritableScopeImpl(context,""),context,variableDescriptor);
        if (newDataFlowInfo == null) {
          newDataFlowInfo=dataFlowInfo;
        }
 else {
          newDataFlowInfo=newDataFlowInfo.or(dataFlowInfo);
        }
      }
      if (newDataFlowInfo == null) {
        newDataFlowInfo=context.dataFlowInfo;
      }
 else {
        newDataFlowInfo=newDataFlowInfo.and(context.dataFlowInfo);
      }
    }
    JetExpression bodyExpression=whenEntry.getExpression();
    if (bodyExpression != null) {
      ExpressionTypingContext newContext=contextWithExpectedType.replaceScope(scopeToExtend).replaceDataFlowInfo(newDataFlowInfo);
      CoercionStrategy coercionStrategy=isStatement ? CoercionStrategy.COERCION_TO_UNIT : CoercionStrategy.NO_COERCION;
      JetTypeInfo typeInfo=context.expressionTypingServices.getBlockReturnedTypeWithWritableScope(scopeToExtend,Collections.singletonList(bodyExpression),coercionStrategy,newContext,context.trace);
      JetType type=typeInfo.getType();
      if (type != null) {
        expressionTypes.add(type);
      }
      if (commonDataFlowInfo == null) {
        commonDataFlowInfo=typeInfo.getDataFlowInfo();
      }
 else {
        commonDataFlowInfo=commonDataFlowInfo.or(typeInfo.getDataFlowInfo());
      }
    }
  }
  if (commonDataFlowInfo == null) {
    commonDataFlowInfo=context.dataFlowInfo;
  }
  if (!expressionTypes.isEmpty()) {
    return DataFlowUtils.checkImplicitCast(CommonSupertypes.commonSupertype(expressionTypes),expression,contextWithExpectedType,isStatement,commonDataFlowInfo);
  }
  return JetTypeInfo.create(null,commonDataFlowInfo);
}
