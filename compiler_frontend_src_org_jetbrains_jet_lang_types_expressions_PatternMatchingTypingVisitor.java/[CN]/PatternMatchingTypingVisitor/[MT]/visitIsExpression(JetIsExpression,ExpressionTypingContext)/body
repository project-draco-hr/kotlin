{
  ExpressionTypingContext context=contextWithExpectedType.replaceExpectedType(TypeUtils.NO_EXPECTED_TYPE);
  JetExpression leftHandSide=expression.getLeftHandSide();
  JetType knownType=facade.safeGetType(leftHandSide,context.replaceScope(context.scope));
  JetPattern pattern=expression.getPattern();
  if (pattern != null) {
    WritableScopeImpl scopeToExtend=newWritableScopeImpl(context).setDebugName("Scope extended in 'is'");
    DataFlowInfo newDataFlowInfo=checkPatternType(pattern,knownType,false,scopeToExtend,context,DataFlowValueFactory.INSTANCE.createDataFlowValue(leftHandSide,knownType,context.trace.getBindingContext()));
    context.patternsToDataFlowInfo.put(pattern,newDataFlowInfo);
    context.patternsToBoundVariableLists.put(pattern,scopeToExtend.getDeclaredVariables());
  }
  return DataFlowUtils.checkType(JetStandardLibrary.getInstance().getBooleanType(),expression,contextWithExpectedType);
}
