{
  if (typeReferenceAfterIs == null) {
    return noChange(context);
  }
  JetType type=context.expressionTypingServices.getTypeResolver().resolveType(context.scope,typeReferenceAfterIs,context.trace,true);
  checkTypeCompatibility(context,type,subjectType,typeReferenceAfterIs);
  if (BasicExpressionTypingVisitor.isCastErased(subjectType,type,JetTypeChecker.INSTANCE)) {
    context.trace.report(Errors.CANNOT_CHECK_FOR_ERASED.on(typeReferenceAfterIs,type));
  }
  return new DataFlowInfos(context.dataFlowInfo.establishSubtyping(subjectVariables,type),context.dataFlowInfo);
}
