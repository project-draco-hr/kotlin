{
  final Ref<Pair<DataFlowInfo,DataFlowInfo>> newDataFlowInfo=new Ref<Pair<DataFlowInfo,DataFlowInfo>>(Pair.create(context.dataFlowInfo,context.dataFlowInfo));
  condition.accept(new JetVisitorVoid(){
    @Override public void visitWhenConditionInRange(    JetWhenConditionInRange condition){
      JetExpression rangeExpression=condition.getRangeExpression();
      if (rangeExpression == null)       return;
      if (expectedCondition) {
        context.trace.report(EXPECTED_CONDITION.on(condition));
        facade.getTypeInfo(rangeExpression,context);
        return;
      }
      if (!facade.checkInExpression(condition,condition.getOperationReference(),subjectExpression,rangeExpression,context)) {
        context.trace.report(TYPE_MISMATCH_IN_RANGE.on(condition));
      }
    }
    @Override public void visitWhenConditionIsPattern(    JetWhenConditionIsPattern condition){
      JetPattern pattern=condition.getPattern();
      if (expectedCondition) {
        context.trace.report(EXPECTED_CONDITION.on(condition));
      }
      if (pattern != null) {
        Pair<DataFlowInfo,DataFlowInfo> result=checkPatternType(pattern,subjectType,subjectExpression == null,scopeToExtend,context,subjectVariables);
        if (condition.isNegated()) {
          newDataFlowInfo.set(Pair.create(result.second,result.first));
        }
 else {
          newDataFlowInfo.set(result);
        }
      }
    }
    @Override public void visitWhenConditionWithExpression(    JetWhenConditionWithExpression condition){
      JetPattern pattern=condition.getPattern();
      if (pattern != null) {
        newDataFlowInfo.set(checkPatternType(pattern,subjectType,subjectExpression == null,scopeToExtend,context,subjectVariables));
      }
    }
    @Override public void visitJetElement(    JetElement element){
      context.trace.report(UNSUPPORTED.on(element,getClass().getCanonicalName()));
    }
  }
);
  return newDataFlowInfo.get();
}
