{
  final Ref<DataFlowInfos> newDataFlowInfo=new Ref<DataFlowInfos>(noChange(context));
  condition.accept(new JetVisitorVoid(){
    @Override public void visitWhenConditionInRange(    JetWhenConditionInRange condition){
      JetExpression rangeExpression=condition.getRangeExpression();
      if (rangeExpression == null)       return;
      if (expectedCondition) {
        context.trace.report(EXPECTED_CONDITION.on(condition));
        DataFlowInfo dataFlowInfo=facade.getTypeInfo(rangeExpression,context).getDataFlowInfo();
        newDataFlowInfo.set(new DataFlowInfos(dataFlowInfo,dataFlowInfo));
        return;
      }
      JetTypeInfo typeInfo=facade.checkInExpression(condition,condition.getOperationReference(),subjectExpression,rangeExpression,context);
      DataFlowInfo dataFlowInfo=typeInfo.getDataFlowInfo();
      newDataFlowInfo.set(new DataFlowInfos(dataFlowInfo,dataFlowInfo));
      if (!KotlinBuiltIns.getInstance().getBooleanType().equals(typeInfo.getType())) {
        context.trace.report(TYPE_MISMATCH_IN_RANGE.on(condition));
      }
    }
    @Override public void visitWhenConditionIsPattern(    JetWhenConditionIsPattern condition){
      if (expectedCondition) {
        context.trace.report(EXPECTED_CONDITION.on(condition));
      }
      if (condition.getTypeRef() != null) {
        DataFlowInfos result=checkTypeForIs(context,subjectType,condition.getTypeRef(),subjectDataFlowValue);
        if (condition.isNegated()) {
          newDataFlowInfo.set(new DataFlowInfos(result.elseInfo,result.thenInfo));
        }
 else {
          newDataFlowInfo.set(result);
        }
      }
    }
    @Override public void visitWhenConditionWithExpression(    JetWhenConditionWithExpression condition){
      JetExpression expression=condition.getExpression();
      if (expression != null) {
        newDataFlowInfo.set(checkTypeForExpressionCondition(context,expression,subjectType,subjectExpression == null,subjectDataFlowValue));
      }
    }
    @Override public void visitJetElement(    JetElement element){
      context.trace.report(UNSUPPORTED.on(element,getClass().getCanonicalName()));
    }
  }
);
  return newDataFlowInfo.get();
}
