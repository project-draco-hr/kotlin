{
  Map<JetClassOrObject,MutableClassDescriptor> classes=bodiesResolveContext.getClasses();
  for (  Map.Entry<JetClassOrObject,MutableClassDescriptor> entry : classes.entrySet()) {
    JetClassOrObject classOrObject=entry.getKey();
    MutableClassDescriptor classDescriptor=entry.getValue();
    if (!bodiesResolveContext.completeAnalysisNeeded(classOrObject))     continue;
    if (classOrObject instanceof JetClass) {
      checkClass((JetClass)classOrObject,classDescriptor);
    }
 else     if (classOrObject instanceof JetObjectDeclaration) {
      checkObject((JetObjectDeclaration)classOrObject);
    }
    modifiersChecker.checkModifiersForDeclaration(classOrObject,classDescriptor);
  }
  Map<JetObjectDeclaration,MutableClassDescriptor> objects=bodiesResolveContext.getObjects();
  for (  Map.Entry<JetObjectDeclaration,MutableClassDescriptor> entry : objects.entrySet()) {
    JetObjectDeclaration objectDeclaration=entry.getKey();
    MutableClassDescriptor objectDescriptor=entry.getValue();
    if (!bodiesResolveContext.completeAnalysisNeeded(objectDeclaration))     continue;
    checkObject(objectDeclaration);
    modifiersChecker.checkModifiersForDeclaration(objectDeclaration,objectDescriptor);
  }
  Map<JetNamedFunction,SimpleFunctionDescriptor> functions=bodiesResolveContext.getFunctions();
  for (  Map.Entry<JetNamedFunction,SimpleFunctionDescriptor> entry : functions.entrySet()) {
    JetNamedFunction function=entry.getKey();
    SimpleFunctionDescriptor functionDescriptor=entry.getValue();
    if (!bodiesResolveContext.completeAnalysisNeeded(function))     continue;
    checkFunction(function,functionDescriptor);
    modifiersChecker.checkModifiersForDeclaration(function,functionDescriptor);
  }
  Map<JetProperty,PropertyDescriptor> properties=bodiesResolveContext.getProperties();
  for (  Map.Entry<JetProperty,PropertyDescriptor> entry : properties.entrySet()) {
    JetProperty property=entry.getKey();
    PropertyDescriptor propertyDescriptor=entry.getValue();
    if (!bodiesResolveContext.completeAnalysisNeeded(property))     continue;
    checkProperty(property,propertyDescriptor);
    modifiersChecker.checkModifiersForDeclaration(property,propertyDescriptor);
  }
}
