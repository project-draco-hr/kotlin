{
  JetTypeParameter typeParameter=PsiTreeUtil.getParentOfType(element,JetTypeParameter.class,false);
  if (typeParameter != null && PsiTreeUtil.isAncestor(typeParameter.getExtendsBound(),element,false)) {
    return JetUsageTypes.TYPE_CONSTRAINT;
  }
  JetTypeConstraint typeConstraint=PsiTreeUtil.getParentOfType(element,JetTypeConstraint.class,false);
  if (typeConstraint != null && PsiTreeUtil.isAncestor(typeConstraint.getBoundTypeReference(),element,false)) {
    return JetUsageTypes.TYPE_CONSTRAINT;
  }
  JetDelegationSpecifier delegationSpecifier=PsiTreeUtil.getParentOfType(element,JetDelegationSpecifier.class,false);
  if (delegationSpecifier != null && (delegationSpecifier == element || PsiTreeUtil.isAncestor(delegationSpecifier.getTypeReference(),element,false))) {
    return JetUsageTypes.SUPER_TYPE;
  }
  JetTypedef typedef=PsiTreeUtil.getParentOfType(element,JetTypedef.class,false);
  if (typedef != null && PsiTreeUtil.isAncestor(typedef.getTypeReference(),element,false)) {
    return JetUsageTypes.TYPE_DEFINITION;
  }
  JetTypeProjection typeProjection=PsiTreeUtil.getParentOfType(element,JetTypeProjection.class,false);
  if (typeProjection != null)   return JetUsageTypes.TYPE_ARGUMENT;
  JetParameter parameter=PsiTreeUtil.getParentOfType(element,JetParameter.class,false);
  if (parameter != null) {
    if (PsiTreeUtil.isAncestor(parameter.getTypeReference(),element,false))     return JetUsageTypes.VALUE_PARAMETER_TYPE;
  }
  JetProperty property=PsiTreeUtil.getParentOfType(element,JetProperty.class,false);
  if (property != null) {
    if (PsiTreeUtil.isAncestor(property.getTypeRef(),element,false)) {
      return property.isLocal() ? JetUsageTypes.LOCAL_VARIABLE_TYPE : JetUsageTypes.NON_LOCAL_PROPERTY_TYPE;
    }
    if (PsiTreeUtil.isAncestor(property.getReceiverTypeRef(),element,false)) {
      return JetUsageTypes.EXTENSION_RECEIVER_TYPE;
    }
  }
  JetFunction function=PsiTreeUtil.getParentOfType(element,JetFunction.class,false);
  if (function != null) {
    if (PsiTreeUtil.isAncestor(function.getReturnTypeRef(),element,false)) {
      return JetUsageTypes.FUNCTION_RETURN_TYPE;
    }
    if (PsiTreeUtil.isAncestor(function.getReceiverTypeRef(),element,false)) {
      return JetUsageTypes.EXTENSION_RECEIVER_TYPE;
    }
  }
  JetIsExpression isExpression=PsiTreeUtil.getParentOfType(element,JetIsExpression.class,false);
  if (isExpression != null && PsiTreeUtil.isAncestor(isExpression.getTypeRef(),element,false)) {
    return JetUsageTypes.IS;
  }
  JetBinaryExpressionWithTypeRHS typeRHSExpression=PsiTreeUtil.getParentOfType(element,JetBinaryExpressionWithTypeRHS.class,false);
  if (typeRHSExpression != null && PsiTreeUtil.isAncestor(typeRHSExpression.getRight(),element,false)) {
    IElementType opType=typeRHSExpression.getOperationReference().getReferencedNameElementType();
    if (opType == JetTokens.AS_KEYWORD || opType == JetTokens.AS_SAFE)     return JetUsageTypes.AS;
  }
  JetDotQualifiedExpression dotQualifiedExpression=PsiTreeUtil.getParentOfType(element,JetDotQualifiedExpression.class,false);
  if (dotQualifiedExpression != null && dotQualifiedExpression.getReceiverExpression() instanceof JetSimpleNameExpression && PsiTreeUtil.isAncestor(dotQualifiedExpression.getReceiverExpression(),element,false)) {
    return JetUsageTypes.CLASS_OBJECT_ACCESS;
  }
  JetSuperExpression superExpression=PsiTreeUtil.getParentOfType(element,JetSuperExpression.class,false);
  if (superExpression != null && PsiTreeUtil.isAncestor(superExpression.getSuperTypeQualifier(),element,false)) {
    return JetUsageTypes.SUPER_TYPE_QUALIFIER;
  }
  return null;
}
