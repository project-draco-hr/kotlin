{
  if (type == null)   return false;
  if (isSpecialType.invoke(type))   return true;
  KotlinType unwrappedType=KotlinTypeKt.unwrap(type);
  FlexibleType flexibleType=unwrappedType instanceof FlexibleType ? (FlexibleType)unwrappedType : null;
  if (flexibleType != null && (contains(flexibleType.getLowerBound(),isSpecialType) || contains(flexibleType.getUpperBound(),isSpecialType))) {
    return true;
  }
  for (  TypeProjection projection : type.getArguments()) {
    if (!projection.isStarProjection() && contains(projection.getType(),isSpecialType))     return true;
  }
  return false;
}
