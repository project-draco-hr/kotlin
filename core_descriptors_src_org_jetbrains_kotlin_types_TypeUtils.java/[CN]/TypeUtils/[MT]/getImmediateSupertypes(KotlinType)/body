{
  boolean isNullable=type.isMarkedNullable();
  TypeSubstitutor substitutor=TypeSubstitutor.create(type);
  Collection<KotlinType> originalSupertypes=type.getConstructor().getSupertypes();
  List<KotlinType> result=new ArrayList<KotlinType>(originalSupertypes.size());
  for (  KotlinType supertype : originalSupertypes) {
    KotlinType substitutedType=substitutor.substitute(supertype,Variance.INVARIANT);
    if (substitutedType != null) {
      result.add(makeNullableIfNeeded(substitutedType,isNullable));
    }
  }
  return result;
}
