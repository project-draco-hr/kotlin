{
  List<ValueParameterDescriptor> parameterDescriptors=valueParameterDescriptors.descriptors;
  if (parameterDescriptors.size() != altFunDeclaration.getValueParameters().size()) {
    throw new AlternativeSignatureMismatchException(String.format("Method signature has %d value parameters, but alternative signature has %d",parameterDescriptors.size(),altFunDeclaration.getValueParameters().size()));
  }
  List<ValueParameterDescriptor> altParamDescriptors=new ArrayList<ValueParameterDescriptor>();
  for (int i=0, size=parameterDescriptors.size(); i < size; i++) {
    ValueParameterDescriptor pd=parameterDescriptors.get(i);
    JetTypeElement alternativeTypeElement=altFunDeclaration.getValueParameters().get(i).getTypeReference().getTypeElement();
    JetType alternativeType;
    JetType alternativeVarargElementType;
    if (pd.getVarargElementType() == null) {
      alternativeType=computeAlternativeTypeFromAnnotation(alternativeTypeElement,pd.getType());
      alternativeVarargElementType=null;
    }
 else {
      alternativeVarargElementType=computeAlternativeTypeFromAnnotation(alternativeTypeElement,pd.getVarargElementType());
      alternativeType=JetStandardLibrary.getInstance().getArrayType(alternativeVarargElementType);
    }
    altParamDescriptors.add(new ValueParameterDescriptorImpl(pd.getContainingDeclaration(),pd.getIndex(),pd.getAnnotations(),pd.getName(),pd.isVar(),alternativeType,pd.declaresDefaultValue(),alternativeVarargElementType));
  }
  JetType altReceiverType=null;
  if (valueParameterDescriptors.receiverType != null) {
    altReceiverType=computeAlternativeTypeFromAnnotation(altFunDeclaration.getReceiverTypeRef().getTypeElement(),valueParameterDescriptors.receiverType);
  }
  return new JavaDescriptorResolver.ValueParameterDescriptors(altReceiverType,altParamDescriptors);
}
