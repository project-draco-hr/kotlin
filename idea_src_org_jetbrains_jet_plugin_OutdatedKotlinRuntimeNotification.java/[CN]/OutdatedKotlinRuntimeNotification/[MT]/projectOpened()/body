{
  if (ApplicationManager.getApplication().isInternal())   return;
  String runtimeVersion=getRuntimeVersion();
  final String pluginVersion=getPluginVersion();
  if (runtimeVersion == null)   return;
  if ("@snapshot@".equals(pluginVersion))   return;
  if (pluginVersion.equals(PropertiesComponent.getInstance(myProject).getValue(SUPPRESSED_PROPERTY_NAME)))   return;
  boolean isRuntimeOutdated="snapshot".equals(runtimeVersion) || UNKNOWN_VERSION.equals(runtimeVersion) || runtimeVersion.startsWith("internal-") != pluginVersion.startsWith("internal-") || VersionComparatorUtil.compare(pluginVersion,runtimeVersion) > 0;
  if (!isRuntimeOutdated)   return;
  String message=String.format("<p>Your version of Kotlin runtime library is %s, while plugin version is %s." + " Runtime library should be updated to avoid compatibility problems.</p>" + "<p><a href=\"update\">Update Runtime</a> <a href=\"ignore\">Ignore</a></p>",UNKNOWN_VERSION.equals(runtimeVersion) ? "older than 0.1.2296" : runtimeVersion,pluginVersion);
  Notifications.Bus.notify(new Notification("Outdated Kotlin Runtime","Outdated Kotlin Runtime",message,NotificationType.WARNING,new NotificationListener(){
    @Override public void hyperlinkUpdate(    @NotNull Notification notification,    @NotNull HyperlinkEvent event){
      if (event.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
        if ("update".equals(event.getDescription())) {
          updateRuntime();
        }
 else         if ("ignore".equals(event.getDescription())) {
          PropertiesComponent.getInstance(myProject).setValue(SUPPRESSED_PROPERTY_NAME,pluginVersion);
        }
 else {
          throw new AssertionError();
        }
        notification.expire();
      }
    }
  }
),myProject);
}
