{
  Project project=element.getProject();
  PsiModifierListOwner annotationOwner=KotlinSignatureUtil.getAnalyzableAnnotationOwner(element);
  if (!(annotationOwner instanceof PsiMember)) {
    return;
  }
  DeclarationDescriptor memberDescriptor=ResolvePackage.getJavaMemberDescriptor((PsiMember)annotationOwner);
  if (memberDescriptor == null)   return;
  BindingContext bindingContext=KotlinCacheService.getInstance(project).getGlobalFacade(JvmPlatform.INSTANCE$).getFrontendService(annotationOwner,BindingTrace.class).getBindingContext();
  List<String> errors=bindingContext.get(JavaBindingContext.LOAD_FROM_JAVA_SIGNATURE_ERRORS,memberDescriptor);
  boolean hasSignatureAnnotation=KotlinSignatureUtil.findKotlinSignatureAnnotation(annotationOwner) != null;
  if (errors != null || hasSignatureAnnotation) {
    result.add(new MyLineMarkerInfo((PsiModifierListOwner)element,errors,hasSignatureAnnotation));
  }
}
