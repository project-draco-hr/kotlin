{
  List<String> versions=Lists.newArrayList();
  String bundledRuntimeVersion=KotlinRuntimeLibraryUtilKt.bundledRuntimeVersion(KotlinPluginUtil.getPluginVersion());
  if (ConfigureKotlinInProjectUtilsKt.isEap(bundledRuntimeVersion)) {
    HttpURLConnection eapConnection=HttpConfigurable.getInstance().openHttpConnection(EAP_VERSIONS_URL + bundledRuntimeVersion);
    try {
      int timeout=(int)TimeUnit.SECONDS.toMillis(30);
      eapConnection.setConnectTimeout(timeout);
      eapConnection.setReadTimeout(timeout);
      if (eapConnection.getResponseCode() == 200) {
        versions.add(bundledRuntimeVersion);
      }
    }
  finally {
      eapConnection.disconnect();
    }
  }
  HttpURLConnection urlConnection=HttpConfigurable.getInstance().openHttpConnection(VERSIONS_LIST_URL);
  try {
    int timeout=(int)TimeUnit.SECONDS.toMillis(30);
    urlConnection.setConnectTimeout(timeout);
    urlConnection.setReadTimeout(timeout);
    urlConnection.connect();
    InputStreamReader streamReader=new InputStreamReader(urlConnection.getInputStream());
    try {
      JsonElement rootElement=new JsonParser().parse(streamReader);
      JsonArray docsElements=rootElement.getAsJsonObject().get("response").getAsJsonObject().get("docs").getAsJsonArray();
      for (      JsonElement element : docsElements) {
        String versionNumber=element.getAsJsonObject().get("v").getAsString();
        if (VersionComparatorUtil.compare("1.0.0",versionNumber) <= 0) {
          versions.add(versionNumber);
        }
      }
    }
  finally {
      streamReader.close();
    }
  }
  finally {
    urlConnection.disconnect();
  }
  return versions;
}
