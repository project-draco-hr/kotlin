{
  BindingContext bindingContext1=AnalyzingUtils.analyzeNamespace(namespace,JetControlFlowDataTraceFactory.EMPTY);
  AnalyzingUtils.applyHandler(ErrorHandler.THROW_EXCEPTION,bindingContext1);
  BindingContext bindingContext=bindingContext1;
  final JetStandardLibrary standardLibrary=JetStandardLibrary.getJetStandardLibrary(project);
  final FunctionCodegen functionCodegen=new FunctionCodegen(namespace,v,standardLibrary,bindingContext);
  final PropertyCodegen propertyCodegen=new PropertyCodegen(v,standardLibrary,bindingContext,functionCodegen);
  final ClassCodegen classCodegen=codegens.forClass(bindingContext);
  if (hasNonConstantPropertyInitializers(namespace)) {
    generateStaticInitializers(namespace,bindingContext);
  }
  for (  JetDeclaration declaration : namespace.getDeclarations()) {
    if (declaration instanceof JetProperty) {
      propertyCodegen.gen((JetProperty)declaration,OwnerKind.NAMESPACE);
    }
 else     if (declaration instanceof JetFunction) {
      try {
        functionCodegen.gen((JetFunction)declaration,OwnerKind.NAMESPACE);
      }
 catch (      Exception e) {
        throw new RuntimeException("Failed to generate function " + declaration.getName(),e);
      }
    }
 else     if (declaration instanceof JetClass) {
      classCodegen.generate((JetClass)declaration);
    }
  }
}
