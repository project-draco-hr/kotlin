{
  final ClassContext context=ClassContext.STATIC.intoNamespace(state.getBindingContext().getNamespaceDescriptor(namespace));
  final FunctionCodegen functionCodegen=new FunctionCodegen(context,v,state);
  final PropertyCodegen propertyCodegen=new PropertyCodegen(context,v,functionCodegen,state);
  final ClassCodegen classCodegen=state.forClass();
  GenerationState.prepareAnonymousClasses(namespace,state.getTypeMapper());
  if (hasNonConstantPropertyInitializers(namespace)) {
    generateStaticInitializers(namespace);
  }
  for (  JetDeclaration declaration : namespace.getDeclarations()) {
    if (declaration instanceof JetProperty) {
      propertyCodegen.gen((JetProperty)declaration);
    }
 else     if (declaration instanceof JetNamedFunction) {
      try {
        functionCodegen.gen((JetNamedFunction)declaration);
      }
 catch (      Exception e) {
        throw new RuntimeException("Failed to generate function " + declaration.getName(),e);
      }
    }
 else     if (declaration instanceof JetClassOrObject) {
      classCodegen.generate(context,(JetClassOrObject)declaration);
    }
 else     if (declaration instanceof JetNamespace) {
      JetNamespace childNamespace=(JetNamespace)declaration;
      state.forNamespace(childNamespace).generate(childNamespace);
    }
  }
}
