{
  List<JetDeclaration> declarations=namespace.getDeclarations();
  JetSemanticServices semanticServices=JetSemanticServices.createSemanticServices(project,ErrorHandler.THROW_EXCEPTION);
  BindingTraceContext bindingTraceContext=new BindingTraceContext();
  ScopeWithImports scope=new ScopeWithImports(semanticServices.getStandardLibrary().getLibraryScope());
  scope.addImport(new JavaLangScope(new JavaSemanticServices(project,semanticServices,bindingTraceContext)));
  new TopDownAnalyzer(semanticServices,bindingTraceContext).process(scope,declarations);
  BindingContext bindingContext=bindingTraceContext;
  final PropertyCodegen propertyCodegen=new PropertyCodegen(v);
  final FunctionCodegen functionCodegen=new FunctionCodegen(v,semanticServices.getStandardLibrary(),bindingContext);
  v.visit(Opcodes.V1_6,Opcodes.ACC_PUBLIC,getJVMClassName(namespace),null,"java/lang/Object",new String[0]);
  for (  JetDeclaration declaration : namespace.getDeclarations()) {
    if (declaration instanceof JetProperty) {
      propertyCodegen.gen((JetProperty)declaration,namespace);
    }
 else     if (declaration instanceof JetFunction) {
      functionCodegen.gen((JetFunction)declaration,namespace);
    }
  }
  v.visitEnd();
}
