{
  MethodVisitor mv=v.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC,"<clinit>",new Method("<clinit>",Type.VOID_TYPE,new Type[0]).getDescriptor(),null,null);
  mv.visitCode();
  FrameMap frameMap=new FrameMap();
  JetTypeMapper typeMapper=new JetTypeMapper(JetStandardLibrary.getJetStandardLibrary(namespace.getProject()),bindingContext);
  ExpressionCodegen codegen=new ExpressionCodegen(mv,bindingContext,frameMap,typeMapper,Type.VOID_TYPE,null,OwnerKind.NAMESPACE);
  for (  JetDeclaration declaration : namespace.getDeclarations()) {
    if (declaration instanceof JetProperty) {
      final JetExpression initializer=((JetProperty)declaration).getInitializer();
      if (initializer != null && !(initializer instanceof JetConstantExpression)) {
        final PropertyDescriptor descriptor=(PropertyDescriptor)bindingContext.getVariableDescriptor((JetProperty)declaration);
        codegen.genToJVMStack(initializer);
        codegen.intermediateValueForProperty(descriptor,false).store(new InstructionAdapter(mv));
      }
    }
  }
  mv.visitInsn(Opcodes.RETURN);
  mv.visitMaxs(0,0);
  mv.visitEnd();
}
