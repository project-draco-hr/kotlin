{
  if (classDescriptorMap == null) {
    classDescriptorMap=Maps.newHashMap();
    for (    JvmPrimitiveType jvmPrimitiveType : JvmPrimitiveType.values()) {
      PrimitiveType primitiveType=jvmPrimitiveType.getPrimitiveType();
      classDescriptorMap.put(jvmPrimitiveType.getWrapper().getFqName(),JetStandardLibrary.getInstance().getPrimitiveClassDescriptor(primitiveType));
    }
    classDescriptorMap.put(new FqName("java.lang.Object"),JetStandardClasses.getAny());
    classDescriptorMap.put(new FqName("java.lang.String"),JetStandardLibrary.getInstance().getString());
    classDescriptorMap.put(new FqName("java.lang.CharSequence"),JetStandardLibrary.getInstance().getCharSequence());
    classDescriptorMap.put(new FqName("java.lang.Throwable"),JetStandardLibrary.getInstance().getThrowable());
    classDescriptorMap.put(new FqName("java.lang.Number"),JetStandardLibrary.getInstance().getNumber());
    classDescriptorMap.put(new FqName("java.lang.Comparable"),JetStandardLibrary.getInstance().getComparable());
    classDescriptorMap.put(new FqName("java.lang.Enum"),JetStandardLibrary.getInstance().getEnum());
    classDescriptorMap.put(new FqName("java.lang.Iterable"),JetStandardLibrary.getInstance().getIterable());
    classDescriptorMap.put(new FqName("java.util.Iterator"),JetStandardLibrary.getInstance().getIterator());
  }
  return classDescriptorMap;
}
