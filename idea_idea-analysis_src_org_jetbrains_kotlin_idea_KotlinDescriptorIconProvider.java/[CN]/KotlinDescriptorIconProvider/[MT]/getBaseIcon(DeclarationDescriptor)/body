{
  if (descriptor instanceof PackageFragmentDescriptor || descriptor instanceof PackageViewDescriptor) {
    return PlatformIcons.PACKAGE_ICON;
  }
  if (descriptor instanceof FunctionDescriptor) {
    FunctionDescriptor functionDescriptor=(FunctionDescriptor)descriptor;
    if (functionDescriptor.getExtensionReceiverParameter() != null) {
      return KotlinIcons.EXTENSION_FUNCTION;
    }
    if (descriptor.getContainingDeclaration() instanceof ClassDescriptor) {
      if (Modality.ABSTRACT == functionDescriptor.getModality()) {
        return PlatformIcons.ABSTRACT_METHOD_ICON;
      }
 else {
        return PlatformIcons.METHOD_ICON;
      }
    }
 else {
      return KotlinIcons.FUNCTION;
    }
  }
  if (descriptor instanceof ClassDescriptor) {
switch (((ClassDescriptor)descriptor).getKind()) {
case INTERFACE:
      return KotlinIcons.INTERFACE;
case ENUM_CLASS:
    return KotlinIcons.ENUM;
case ENUM_ENTRY:
  return KotlinIcons.ENUM;
case ANNOTATION_CLASS:
return KotlinIcons.ANNOTATION;
case OBJECT:
return KotlinIcons.OBJECT;
case CLASS:
return KotlinIcons.CLASS;
default :
LOG.warn("No icon for descriptor: " + descriptor);
return null;
}
}
if (descriptor instanceof ValueParameterDescriptor) {
return KotlinIcons.PARAMETER;
}
if (descriptor instanceof LocalVariableDescriptor) {
return ((VariableDescriptor)descriptor).isVar() ? KotlinIcons.VAR : KotlinIcons.VAL;
}
if (descriptor instanceof PropertyDescriptor) {
return ((VariableDescriptor)descriptor).isVar() ? KotlinIcons.FIELD_VAR : KotlinIcons.FIELD_VAL;
}
if (descriptor instanceof TypeParameterDescriptor) {
return PlatformIcons.CLASS_ICON;
}
LOG.warn("No icon for descriptor: " + descriptor);
return null;
}
