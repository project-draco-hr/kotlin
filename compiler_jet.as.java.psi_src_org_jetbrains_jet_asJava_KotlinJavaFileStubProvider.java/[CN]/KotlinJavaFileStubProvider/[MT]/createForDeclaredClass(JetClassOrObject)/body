{
  return new KotlinJavaFileStubProvider(classOrObject.getProject(),JetPsiUtil.isLocal(classOrObject),new StubGenerationStrategy.WithDeclaredClasses(){
    private JetFile getFile(){
      return (JetFile)classOrObject.getContainingFile();
    }
    @NotNull @Override public LightClassConstructionContext createLightClassConstructionContext(    @NotNull Collection<JetFile> files){
      return LightClassGenerationSupport.getInstance(classOrObject.getProject()).analyzeRelevantCode(classOrObject);
    }
    @NotNull @Override public LightClassStubWithData createLightClassStubWithData(    PsiJavaFileStub javaFileStub,    BindingContext bindingContext){
      ClassDescriptor classDescriptor=bindingContext.get(BindingContext.CLASS,classOrObject);
      if (classDescriptor == null) {
        return new LightClassStubWithData(javaFileStub,new OutermostKotlinClassLightClassData("",classOrObject,null,Collections.<JetClassOrObject,LightClassDataForKotlinClass>emptyMap()));
      }
      String jvmInternalName=CodegenBinding.getJvmInternalName(bindingContext,classDescriptor);
      Collection<ClassDescriptor> allInnerClasses=CodegenBinding.getAllInnerClasses(bindingContext,classDescriptor);
      Map<JetClassOrObject,LightClassDataForKotlinClass> innerClassesMap=ContainerUtil.newHashMap();
      for (      ClassDescriptor innerClassDescriptor : allInnerClasses) {
        JetClassOrObject innerClass=(JetClassOrObject)BindingContextUtils.descriptorToDeclaration(bindingContext,innerClassDescriptor);
        if (innerClass == null)         continue;
        InnerKotlinClassLightClassData innerLightClassData=new InnerKotlinClassLightClassData(CodegenBinding.getJvmInternalName(bindingContext,innerClassDescriptor),innerClass,innerClassDescriptor);
        innerClassesMap.put(innerClass,innerLightClassData);
      }
      return new LightClassStubWithData(javaFileStub,new OutermostKotlinClassLightClassData(jvmInternalName,classOrObject,classDescriptor,innerClassesMap));
    }
    @NotNull @Override public Collection<JetFile> getFiles(){
      return Collections.singletonList(getFile());
    }
    @NotNull @Override public FqName getPackageFqName(){
      return JetPsiUtil.getFQName(getFile());
    }
    @Override public void generate(    @NotNull GenerationState state,    @NotNull Collection<JetFile> files){
      PackageCodegen packageCodegen=state.getFactory().forPackage(getPackageFqName(),files);
      packageCodegen.generateClassOrObject(classOrObject);
      state.getFactory().asList();
    }
  }
);
}
