{
  return new KotlinJavaFileStubProvider(project,false,new StubGenerationStrategy.NoDeclaredClasses(){
    @NotNull @Override public LightClassConstructionContext createLightClassConstructionContext(    @NotNull Collection<JetFile> files){
      return LightClassGenerationSupport.getInstance(project).analyzeRelevantCode(files);
    }
    @NotNull @Override public Collection<JetFile> getFiles(){
      return LightClassGenerationSupport.getInstance(project).findFilesForPackage(packageFqName,searchScope);
    }
    @NotNull @Override public LightClassStubWithData createLightClassStubWithData(    PsiJavaFileStub javaFileStub,    BindingContext bindingContext){
      return new LightClassStubWithData(javaFileStub,KotlinPackageLightClassData.instance$);
    }
    @NotNull @Override public FqName getPackageFqName(){
      return packageFqName;
    }
    @Override public void generate(    @NotNull GenerationState state,    @NotNull Collection<JetFile> files){
      NamespaceCodegen codegen=state.getFactory().forNamespace(packageFqName,files);
      codegen.generate(CompilationErrorHandler.THROW_EXCEPTION);
      state.getFactory().asList();
    }
  }
);
}
