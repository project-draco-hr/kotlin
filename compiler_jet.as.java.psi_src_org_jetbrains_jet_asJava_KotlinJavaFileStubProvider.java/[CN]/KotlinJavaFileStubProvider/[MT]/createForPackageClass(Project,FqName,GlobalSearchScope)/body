{
  return new KotlinJavaFileStubProvider<KotlinPackageLightClassData>(project,false,new StubGenerationStrategy<KotlinPackageLightClassData>(){
    @NotNull @Override public LightClassConstructionContext getContext(    @NotNull Collection<JetFile> files){
      return LightClassGenerationSupport.getInstance(project).getContextForPackage(files);
    }
    @NotNull @Override public Collection<JetFile> getFiles(){
      return LightClassGenerationSupport.getInstance(project).findFilesForPackage(packageFqName,searchScope);
    }
    @NotNull @Override public KotlinPackageLightClassData createLightClassData(    PsiJavaFileStub javaFileStub,    BindingContext bindingContext,    Diagnostics extraDiagnostics){
      return new KotlinPackageLightClassData(javaFileStub,extraDiagnostics);
    }
    @NotNull @Override public FqName getPackageFqName(){
      return packageFqName;
    }
    @Override public GenerationState.GenerateClassFilter getGenerateClassFilter(){
      return new GenerationState.GenerateClassFilter(){
        @Override public boolean shouldProcess(        JetClassOrObject classOrObject){
          return JetPsiUtil.isLocal(classOrObject);
        }
      }
;
    }
    @Override public void generate(    @NotNull GenerationState state,    @NotNull Collection<JetFile> files){
      PackageCodegen codegen=state.getFactory().forPackage(packageFqName,files);
      codegen.generate(CompilationErrorHandler.THROW_EXCEPTION);
      state.getFactory().asList();
    }
    @Override public String toString(){
      return StubGenerationStrategy.class.getName() + " for package class";
    }
  }
);
}
