{
  if (element instanceof JetFile) {
    Project project=element.getProject();
    JetFile file=(JetFile)element;
    try {
      final BindingContext bindingContext=AnalyzingUtils.analyzeFile(file,new ErrorHandler(){
        @Override public void unresolvedReference(        JetReferenceExpression referenceExpression){
          holder.createErrorAnnotation(referenceExpression,"Unresolved").setHighlightType(ProblemHighlightType.LIKE_UNKNOWN_SYMBOL);
        }
        @Override public void structuralError(        ASTNode node,        String errorMessage){
          holder.createErrorAnnotation(node,errorMessage);
        }
        @Override public void typeMismatch(        JetExpression expression,        Type expectedType,        Type actualType){
          holder.createErrorAnnotation(expression,"Type mismatch: inferred type is " + actualType + " but "+ expectedType+ " was expected");
        }
      }
);
      file.getRootNamespace().accept(new JetVisitor(){
        @Override public void visitClass(        JetClass klass){
          for (          JetDelegationSpecifier specifier : klass.getDelegationSpecifiers()) {
            JetTypeReference typeReference=specifier.getTypeReference();
            Type type=bindingContext.resolveTypeReference(typeReference);
            holder.createWeakWarningAnnotation(typeReference,type.toString());
          }
        }
        @Override public void visitNamespace(        JetNamespace namespace){
          for (          JetDeclaration declaration : namespace.getDeclarations()) {
            declaration.accept(this);
          }
        }
      }
);
    }
 catch (    ProcessCanceledException e) {
      throw e;
    }
catch (    Throwable e) {
      holder.createErrorAnnotation(element,e.getClass().getCanonicalName() + ": " + e.getMessage());
      e.printStackTrace();
    }
  }
}
