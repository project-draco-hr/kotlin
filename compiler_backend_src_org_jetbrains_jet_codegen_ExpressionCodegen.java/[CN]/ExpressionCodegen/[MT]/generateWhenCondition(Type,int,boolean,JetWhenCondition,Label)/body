{
  if (condition instanceof JetWhenConditionInRange) {
    JetWhenConditionInRange conditionInRange=(JetWhenConditionInRange)condition;
    JetExpression rangeExpression=conditionInRange.getRangeExpression();
    while (rangeExpression instanceof JetParenthesizedExpression) {
      rangeExpression=((JetParenthesizedExpression)rangeExpression).getExpression();
    }
    boolean inverted=conditionInRange.getOperationReference().getReferencedNameElementType() == JetTokens.NOT_IN;
    if (isIntRangeExpr(rangeExpression)) {
      getInIntRange(new StackValue.Local(subjectLocal,subjectType),(JetBinaryExpression)rangeExpression,inverted);
    }
 else {
      ResolvedCall<? extends CallableDescriptor> resolvedCall=bindingContext.get(BindingContext.RESOLVED_CALL,conditionInRange.getOperationReference());
      Call call=bindingContext.get(BindingContext.CALL,conditionInRange.getOperationReference());
      invokeFunction(call,StackValue.local(subjectLocal,subjectType),resolvedCall);
      if (inverted) {
        invertBoolean();
      }
    }
    return StackValue.onStack(Type.BOOLEAN_TYPE);
  }
  JetPattern pattern;
  boolean isNegated;
  if (condition instanceof JetWhenConditionIsPattern) {
    JetWhenConditionIsPattern patternCondition=(JetWhenConditionIsPattern)condition;
    pattern=patternCondition.getPattern();
    isNegated=patternCondition.isNegated();
  }
 else   if (condition instanceof JetWhenConditionWithExpression) {
    pattern=((JetWhenConditionWithExpression)condition).getPattern();
    isNegated=false;
  }
 else {
    throw new UnsupportedOperationException("unsupported kind of when condition");
  }
  return generatePatternMatch(pattern,isNegated,subjectLocal == -1 ? null : StackValue.local(subjectLocal,subjectType),subjectIsNullable,nextEntry);
}
