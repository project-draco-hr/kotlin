{
  if (condition instanceof JetWhenConditionInRange) {
    JetWhenConditionInRange conditionInRange=(JetWhenConditionInRange)condition;
    JetExpression rangeExpression=conditionInRange.getRangeExpression();
    while (rangeExpression instanceof JetParenthesizedExpression) {
      rangeExpression=((JetParenthesizedExpression)rangeExpression).getExpression();
    }
    JetSimpleNameExpression operationReference=conditionInRange.getOperationReference();
    boolean inverted=operationReference.getReferencedNameElementType() == JetTokens.NOT_IN;
    if (isIntRangeExpr(rangeExpression)) {
      getInIntRange(new StackValue.Local(subjectLocal,subjectType),(JetBinaryExpression)rangeExpression,inverted);
    }
 else {
      invokeFunctionByReference(operationReference);
      if (inverted) {
        invertBoolean(v);
      }
    }
    return StackValue.onStack(Type.BOOLEAN_TYPE);
  }
  StackValue.Local match=subjectLocal == -1 ? null : StackValue.local(subjectLocal,subjectType);
  if (condition instanceof JetWhenConditionIsPattern) {
    JetWhenConditionIsPattern patternCondition=(JetWhenConditionIsPattern)condition;
    return generateIsCheck(match,patternCondition.getTypeRef(),patternCondition.isNegated());
  }
 else   if (condition instanceof JetWhenConditionWithExpression) {
    JetExpression patternExpression=((JetWhenConditionWithExpression)condition).getExpression();
    return generateExpressionMatch(match,patternExpression,subjectIsNullable);
  }
 else {
    throw new UnsupportedOperationException("unsupported kind of when condition");
  }
}
