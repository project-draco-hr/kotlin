{
  if (expression.getOperationReference().getReferencedNameElementType() == JetTokens.EXCLEXCL) {
    StackValue base=genQualified(receiver,expression.getBaseExpression());
    if (isPrimitive(base.type)) {
      return base;
    }
    base.put(base.type,v);
    v.dup();
    Label ok=new Label();
    v.ifnonnull(ok);
    v.invokestatic("kotlin/jvm/internal/Intrinsics","throwNpe","()V",false);
    v.mark(ok);
    return StackValue.onStack(base.type);
  }
  DeclarationDescriptor originalOperation=bindingContext.get(REFERENCE_TARGET,expression.getOperationReference());
  String originalOperationName=originalOperation != null ? originalOperation.getName().asString() : null;
  ResolvedCall<?> resolvedCall=getResolvedCallWithAssert(expression,bindingContext);
  DeclarationDescriptor op=resolvedCall.getResultingDescriptor();
  if (!(op instanceof FunctionDescriptor) || originalOperation == null) {
    throw new UnsupportedOperationException("Don't know how to generate this postfix expression: " + originalOperationName + " "+ op);
  }
  Type asmType=expressionType(expression);
  DeclarationDescriptor cls=op.getContainingDeclaration();
  int increment;
  if (originalOperationName.equals("inc")) {
    increment=1;
  }
 else   if (originalOperationName.equals("dec")) {
    increment=-1;
  }
 else {
    throw new UnsupportedOperationException("Unsupported postfix operation: " + originalOperationName + " "+ op);
  }
  boolean isPrimitiveNumberClassDescriptor=isPrimitiveNumberClassDescriptor(cls);
  if (isPrimitiveNumberClassDescriptor) {
    JetExpression operand=expression.getBaseExpression();
    if (operand instanceof JetReferenceExpression && asmType == Type.INT_TYPE) {
      int index=indexOfLocal((JetReferenceExpression)operand);
      if (index >= 0) {
        return StackValue.postIncrement(index,increment);
      }
    }
  }
  StackValue value=gen(expression.getBaseExpression());
  value.dupReceiver(v);
  Type type=expressionType(expression.getBaseExpression());
  value.put(type,v);
  pushReceiverAndValueViaDup(value,type);
  Type storeType;
  if (isPrimitiveNumberClassDescriptor) {
    genIncrement(asmType,increment,v);
    storeType=type;
  }
 else {
    Callable callable=resolveToCallable((FunctionDescriptor)op,false);
    invokeFunction(resolvedCall,StackValue.onStack(type));
    CallableMethod callableMethod=(CallableMethod)callable;
    storeType=callableMethod.getReturnType();
  }
  value.store(storeType,v);
  return StackValue.onStack(asmType);
}
