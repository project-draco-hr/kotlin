{
  boolean superCall=false;
  if (expression.getParent() instanceof JetQualifiedExpression) {
    final JetExpression receiverExpression=((JetQualifiedExpression)expression.getParent()).getReceiverExpression();
    if (receiverExpression instanceof JetSuperExpression) {
      superCall=true;
      receiver=StackValue.thisOrOuter(this,context.getThisDescriptor());
      JetSuperExpression superExpression=(JetSuperExpression)receiverExpression;
      PsiElement enclosingElement=bindingContext.get(BindingContext.LABEL_TARGET,superExpression.getTargetLabel());
      ClassDescriptor enclosed=(ClassDescriptor)bindingContext.get(BindingContext.DECLARATION_TO_DESCRIPTOR,enclosingElement);
      if (!CodegenUtil.isInterface(fd.getContainingDeclaration())) {
        if (enclosed != null && enclosed != context.getThisDescriptor()) {
          CodegenContext c=context;
          while (c.getContextDescriptor() != enclosed) {
            c=c.getParentContext();
          }
          fd=(FunctionDescriptor)c.getAccessor(fd);
          superCall=false;
          receiver=StackValue.thisOrOuter(this,enclosed);
        }
      }
    }
  }
  if (fd.getVisibility() == Visibilities.PRIVATE && !DescriptorUtils.isClassObject(fd.getContainingDeclaration())) {
    if (context.getClassOrNamespaceDescriptor() != fd.getContainingDeclaration()) {
      DeclarationDescriptor enclosed=fd.getContainingDeclaration();
      if (enclosed != context.getThisDescriptor()) {
        CodegenContext c=context;
        while (c.getContextDescriptor() != enclosed) {
          c=c.getParentContext();
        }
        fd=(FunctionDescriptor)c.getAccessor(fd);
      }
    }
  }
  Callable callable=resolveToCallable(fd,superCall);
  if (callable instanceof CallableMethod) {
    final CallableMethod callableMethod=(CallableMethod)callable;
    invokeMethodWithArguments(callableMethod,expression,receiver);
    final Type callReturnType=callableMethod.getSignature().getAsmMethod().getReturnType();
    return returnValueAsStackValue(fd,callReturnType);
  }
 else {
    receiver=StackValue.receiver(resolvedCall,receiver,this,null,state);
    IntrinsicMethod intrinsic=(IntrinsicMethod)callable;
    List<JetExpression> args=new ArrayList<JetExpression>();
    for (    ValueArgument argument : expression.getValueArguments()) {
      args.add(argument.getArgumentExpression());
    }
    return intrinsic.generate(this,v,expressionType(expression),expression,args,receiver,state);
  }
}
