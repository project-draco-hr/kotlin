{
  StringBuilder constantValue=new StringBuilder("");
  for (  JetStringTemplateEntry entry : expression.getEntries()) {
    if (entry instanceof JetLiteralStringTemplateEntry) {
      constantValue.append(entry.getText());
    }
 else     if (entry instanceof JetEscapeStringTemplateEntry) {
      constantValue.append(((JetEscapeStringTemplateEntry)entry).getUnescapedValue());
    }
 else {
      constantValue=null;
      break;
    }
  }
  if (constantValue != null) {
    final Type type=expressionType(expression);
    return StackValue.constant(constantValue.toString(),type);
  }
 else {
    generateStringBuilderConstructor(v);
    for (    JetStringTemplateEntry entry : expression.getEntries()) {
      if (entry instanceof JetStringTemplateEntryWithExpression) {
        invokeAppend(entry.getExpression());
      }
 else {
        String text=entry instanceof JetEscapeStringTemplateEntry ? ((JetEscapeStringTemplateEntry)entry).getUnescapedValue() : entry.getText();
        v.aconst(text);
        invokeAppendMethod(v,JAVA_STRING_TYPE);
      }
    }
    v.invokevirtual("java/lang/StringBuilder","toString","()Ljava/lang/String;");
    return StackValue.onStack(AsmTypeConstants.JAVA_STRING_TYPE);
  }
}
