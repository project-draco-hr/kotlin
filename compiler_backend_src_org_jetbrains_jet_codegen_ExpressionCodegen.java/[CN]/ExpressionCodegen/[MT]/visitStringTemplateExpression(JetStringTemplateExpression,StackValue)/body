{
  StringBuilder constantValue=new StringBuilder("");
  final JetStringTemplateEntry[] entries=expression.getEntries();
  if (entries.length == 1 && entries[0] instanceof JetStringTemplateEntryWithExpression) {
    JetExpression expr=entries[0].getExpression();
    return genToString(gen(expr),expressionType(expr));
  }
  for (  JetStringTemplateEntry entry : entries) {
    if (entry instanceof JetLiteralStringTemplateEntry) {
      constantValue.append(entry.getText());
    }
 else     if (entry instanceof JetEscapeStringTemplateEntry) {
      constantValue.append(((JetEscapeStringTemplateEntry)entry).getUnescapedValue());
    }
 else {
      constantValue=null;
      break;
    }
  }
  if (constantValue != null) {
    Type type=expressionType(expression);
    return StackValue.constant(constantValue.toString(),type);
  }
 else {
    return StackValue.operation(AsmTypeConstants.JAVA_STRING_TYPE,new Function1<InstructionAdapter,Unit>(){
      @Override public Unit invoke(      InstructionAdapter v){
        genStringBuilderConstructor(v);
        for (        JetStringTemplateEntry entry : entries) {
          if (entry instanceof JetStringTemplateEntryWithExpression) {
            invokeAppend(entry.getExpression());
          }
 else {
            String text=entry instanceof JetEscapeStringTemplateEntry ? ((JetEscapeStringTemplateEntry)entry).getUnescapedValue() : entry.getText();
            v.aconst(text);
            genInvokeAppendMethod(v,JAVA_STRING_TYPE);
          }
        }
        v.invokevirtual("java/lang/StringBuilder","toString","()Ljava/lang/String;",false);
        return Unit.INSTANCE$;
      }
    }
);
  }
}
