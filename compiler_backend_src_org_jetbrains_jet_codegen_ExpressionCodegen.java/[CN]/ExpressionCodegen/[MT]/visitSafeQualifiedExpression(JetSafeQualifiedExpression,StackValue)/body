{
  JetExpression expr=expression.getReceiverExpression();
  JetType receiverJetType=bindingContext.get(BindingContext.EXPRESSION_TYPE,expression.getReceiverExpression());
  Type receiverType=typeMapper.mapType(receiverJetType);
  gen(expr,receiverType);
  if (receiverType.getSort() != Type.OBJECT && receiverType.getSort() != Type.ARRAY) {
    StackValue propValue=genQualified(StackValue.onStack(receiverType),expression.getSelectorExpression());
    Type type=propValue.type;
    propValue.put(type,v);
    if (JetTypeMapper.isPrimitive(type) && !type.equals(Type.VOID_TYPE)) {
      StackValue.valueOf(v,type);
      type=JetTypeMapper.boxType(type);
    }
    return StackValue.onStack(type);
  }
 else {
    Label ifnull=new Label();
    Label end=new Label();
    v.dup();
    v.ifnull(ifnull);
    StackValue propValue=genQualified(StackValue.onStack(receiverType),expression.getSelectorExpression());
    Type type=propValue.type;
    propValue.put(type,v);
    if (JetTypeMapper.isPrimitive(type) && !type.equals(Type.VOID_TYPE)) {
      StackValue.valueOf(v,type);
      type=JetTypeMapper.boxType(type);
    }
    v.goTo(end);
    v.mark(ifnull);
    v.pop();
    if (!propValue.type.equals(Type.VOID_TYPE)) {
      v.aconst(null);
    }
    v.mark(end);
    return StackValue.onStack(type);
  }
}
