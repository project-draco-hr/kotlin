{
  ResolvedCall<?> resolvedCall=getResolvedCallWithAssert(expression.getCallableReference(),bindingContext);
  FunctionDescriptor functionDescriptor=bindingContext.get(FUNCTION,expression);
  if (functionDescriptor != null) {
    CallableReferenceGenerationStrategy strategy=new CallableReferenceGenerationStrategy(state,functionDescriptor,resolvedCall);
    ClosureCodegen closureCodegen=new ClosureCodegen(state,expression,functionDescriptor,null,context,KotlinSyntheticClass.Kind.CALLABLE_REFERENCE_WRAPPER,this,strategy,getParentCodegen());
    closureCodegen.gen();
    return closureCodegen.putInstanceOnStack(v,this);
  }
  VariableDescriptor variableDescriptor=bindingContext.get(VARIABLE,expression);
  if (variableDescriptor != null) {
    VariableDescriptor descriptor=(VariableDescriptor)resolvedCall.getResultingDescriptor();
    DeclarationDescriptor containingDeclaration=descriptor.getContainingDeclaration();
    if (containingDeclaration instanceof PackageFragmentDescriptor) {
      return generateTopLevelPropertyReference(descriptor);
    }
 else     if (containingDeclaration instanceof ClassDescriptor) {
      return generateMemberPropertyReference(descriptor,(ClassDescriptor)containingDeclaration);
    }
 else     if (containingDeclaration instanceof ScriptDescriptor) {
      return generateMemberPropertyReference(descriptor,((ScriptDescriptor)containingDeclaration).getClassDescriptor());
    }
 else {
      throw new UnsupportedOperationException("Unsupported callable reference container: " + containingDeclaration);
    }
  }
  throw new UnsupportedOperationException("Unsupported callable reference expression: " + expression.getText());
}
