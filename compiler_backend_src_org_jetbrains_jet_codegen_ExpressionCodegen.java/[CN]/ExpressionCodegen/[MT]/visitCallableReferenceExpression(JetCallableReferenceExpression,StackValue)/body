{
  ResolvedCall<?> resolvedCall=resolvedCall(expression.getCallableReference());
  FunctionDescriptor functionDescriptor=bindingContext.get(FUNCTION,expression);
  if (functionDescriptor != null) {
    CallableReferenceGenerationStrategy strategy=new CallableReferenceGenerationStrategy(state,functionDescriptor,resolvedCall);
    ClosureCodegen closureCodegen=new ClosureCodegen(state,expression,functionDescriptor,null,context,KotlinSyntheticClass.Kind.CALLABLE_REFERENCE_WRAPPER,this,strategy,getParentCodegen());
    closureCodegen.gen();
    return closureCodegen.putInstanceOnStack(v,this);
  }
  VariableDescriptor variableDescriptor=bindingContext.get(VARIABLE,expression);
  if (variableDescriptor != null) {
    VariableDescriptor descriptor=(VariableDescriptor)resolvedCall.getResultingDescriptor();
    ReceiverParameterDescriptor receiverParameter=descriptor.getReceiverParameter();
    String reflectionFieldOwner;
    Type propertyType;
    Type ownerType;
    String reflectionFieldName;
    DeclarationDescriptor containingDeclaration=descriptor.getContainingDeclaration();
    if (containingDeclaration instanceof PackageFragmentDescriptor) {
      reflectionFieldOwner=PackageClassUtils.getPackageClassInternalName(((PackageFragmentDescriptor)containingDeclaration).getFqName());
      if (receiverParameter != null) {
        propertyType=descriptor.isVar() ? K_MUTABLE_EXTENSION_PROPERTY_IMPL_TYPE : K_EXTENSION_PROPERTY_IMPL_TYPE;
      }
 else {
        propertyType=descriptor.isVar() ? K_MUTABLE_TOP_LEVEL_PROPERTY_IMPL_TYPE : K_TOP_LEVEL_PROPERTY_IMPL_TYPE;
      }
      ownerType=K_PACKAGE_IMPL_TYPE;
      reflectionFieldName=JvmAbi.KOTLIN_PACKAGE_FIELD_NAME;
    }
 else     if (containingDeclaration instanceof ClassDescriptor) {
      reflectionFieldOwner=typeMapper.mapClass((ClassDescriptor)containingDeclaration).getInternalName();
      propertyType=descriptor.isVar() ? K_MUTABLE_MEMBER_PROPERTY_IMPL_TYPE : K_MEMBER_PROPERTY_IMPL_TYPE;
      ownerType=K_CLASS_IMPL_TYPE;
      reflectionFieldName=JvmAbi.KOTLIN_CLASS_FIELD_NAME;
    }
 else {
      throw new UnsupportedOperationException("Unsupported callable reference container: " + containingDeclaration);
    }
    v.anew(propertyType);
    v.dup();
    v.visitLdcInsn(descriptor.getName().asString());
    v.getstatic(reflectionFieldOwner,reflectionFieldName,ownerType.getDescriptor());
    String constructorDesc;
    if (receiverParameter != null) {
      putJavaLangClassInstance(v,typeMapper.mapType(receiverParameter));
      constructorDesc=Type.getMethodDescriptor(Type.VOID_TYPE,JAVA_STRING_TYPE,ownerType,getType(Class.class));
    }
 else {
      constructorDesc=Type.getMethodDescriptor(Type.VOID_TYPE,JAVA_STRING_TYPE,ownerType);
    }
    v.invokespecial(propertyType.getInternalName(),"<init>",constructorDesc,false);
    return StackValue.onStack(propertyType);
  }
  throw new UnsupportedOperationException("Unsupported callable reference expression: " + expression.getText());
}
