{
  final JetExpression array=expression.getArrayExpression();
  JetType type=bindingContext.get(BindingContext.EXPRESSION_TYPE,array);
  final Type arrayType=type == null ? Type.VOID_TYPE : typeMapper.mapType(type);
  gen(array,arrayType);
  final List<JetExpression> indices=expression.getIndexExpressions();
  FunctionDescriptor operationDescriptor=(FunctionDescriptor)bindingContext.get(BindingContext.REFERENCE_TARGET,expression);
  if (arrayType.getSort() == Type.ARRAY && indices.size() == 1 && operationDescriptor.getValueParameters().get(0).getOutType().equals(state.getStandardLibrary().getIntType())) {
    for (    JetExpression index : indices) {
      gen(index,Type.INT_TYPE);
    }
    if (state.getStandardLibrary().getArray().equals(type.getConstructor().getDeclarationDescriptor())) {
      JetType elementType=type.getArguments().get(0).getType();
      Type notBoxed=typeMapper.mapType(elementType);
      Type boxed=JetTypeMapper.boxType(notBoxed);
      return StackValue.arrayElement(notBoxed,true);
    }
 else {
      return StackValue.arrayElement(arrayType.getElementType(),false);
    }
  }
 else {
    CallableMethod accessor=typeMapper.mapToCallableMethod(operationDescriptor,OwnerKind.IMPLEMENTATION);
    boolean isGetter=accessor.getSignature().getName().equals("get");
    ResolvedCall<FunctionDescriptor> resolvedSetCall=bindingContext.get(BindingContext.INDEXED_LVALUE_SET,expression);
    FunctionDescriptor setterDescriptor=resolvedSetCall == null ? null : resolvedSetCall.getResultingDescriptor();
    CallableMethod setter=resolvedSetCall == null ? null : typeMapper.mapToCallableMethod(setterDescriptor,OwnerKind.IMPLEMENTATION);
    ResolvedCall<FunctionDescriptor> resolvedGetCall=bindingContext.get(BindingContext.INDEXED_LVALUE_GET,expression);
    FunctionDescriptor getterDescriptor=resolvedGetCall == null ? null : resolvedGetCall.getResultingDescriptor();
    CallableMethod getter=resolvedGetCall == null ? null : typeMapper.mapToCallableMethod(getterDescriptor,OwnerKind.IMPLEMENTATION);
    Type asmType;
    Type[] argumentTypes=accessor.getSignature().getArgumentTypes();
    int index=0;
    if (isGetter) {
      if (getterDescriptor.getReceiverParameter().exists()) {
        index++;
      }
      asmType=accessor.getSignature().getReturnType();
    }
 else {
      if (setterDescriptor.getReceiverParameter().exists()) {
        index++;
      }
      asmType=argumentTypes[argumentTypes.length - 1];
    }
    for (    JetExpression jetExpression : expression.getIndexExpressions()) {
      gen(jetExpression,argumentTypes[index]);
      index++;
    }
    return StackValue.collectionElement(asmType,getter,setter,myFrameMap);
  }
}
