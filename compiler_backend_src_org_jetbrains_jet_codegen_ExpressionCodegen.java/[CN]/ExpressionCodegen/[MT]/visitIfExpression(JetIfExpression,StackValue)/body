{
  Type asmType=expressionType(expression);
  JetExpression thenExpression=expression.getThen();
  JetExpression elseExpression=expression.getElse();
  if (thenExpression == null && elseExpression == null) {
    throw new CompilationException("Both brunches of if/else are null",null,expression);
  }
  if (isEmptyExpression(thenExpression)) {
    if (isEmptyExpression(elseExpression)) {
      if (!asmType.equals(JetTypeMapper.TUPLE0_TYPE)) {
        throw new CompilationException("Completely empty 'if' is expected to have Unit type",null,expression);
      }
      StackValue.putTuple0Instance(v);
      return StackValue.onStack(asmType);
    }
    StackValue condition=gen(expression.getCondition());
    return generateSingleBranchIf(condition,elseExpression,false);
  }
 else {
    if (isEmptyExpression(elseExpression)) {
      StackValue condition=gen(expression.getCondition());
      return generateSingleBranchIf(condition,thenExpression,true);
    }
  }
  Label elseLabel=new Label();
  StackValue condition=gen(expression.getCondition());
  condition.condJump(elseLabel,true,v);
  Label end=new Label();
  gen(thenExpression,asmType);
  v.goTo(end);
  v.mark(elseLabel);
  gen(elseExpression,asmType);
  v.mark(end);
  return StackValue.onStack(asmType);
}
