{
  final StackValue value=typeParameterExpressions.get(typeParameterDescriptor);
  if (value != null) {
    value.put(JetTypeMapper.TYPE_TYPEINFO,v);
    return;
  }
  DeclarationDescriptor containingDeclaration=typeParameterDescriptor.getContainingDeclaration();
  if (containingDeclaration == contextType() && contextType() instanceof ClassDescriptor) {
    ClassDescriptor descriptor=(ClassDescriptor)contextType();
    JetType defaultType=descriptor.getDefaultType();
    Type ownerType=typeMapper.mapType(defaultType);
    ownerType=JetTypeMapper.boxType(ownerType);
    if (!CodegenUtil.isInterface(descriptor)) {
      if (descriptor.getTypeConstructor().getParameters().size() > 0) {
        v.load(0,JetTypeMapper.TYPE_OBJECT);
        v.getfield(ownerType.getInternalName(),"$typeInfo","Ljet/typeinfo/TypeInfo;");
      }
 else {
        v.getstatic(ownerType.getInternalName(),"$typeInfo","Ljet/typeinfo/TypeInfo;");
      }
    }
 else {
      v.load(0,JetTypeMapper.TYPE_OBJECT);
      v.invokeinterface("jet/JetObject","getTypeInfo","()Ljet/typeinfo/TypeInfo;");
    }
    v.aconst(ownerType);
    v.iconst(typeParameterDescriptor.getIndex());
    v.invokevirtual("jet/typeinfo/TypeInfo","getArgumentType","(Ljava/lang/Class;I)Ljet/typeinfo/TypeInfo;");
    return;
  }
  throw new UnsupportedOperationException("don't know what this type parameter resolves to");
}
