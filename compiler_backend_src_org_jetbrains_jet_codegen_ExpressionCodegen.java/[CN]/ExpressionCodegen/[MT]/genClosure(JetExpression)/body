{
  final FunctionDescriptor descriptor=bindingContext.get(BindingContext.FUNCTION,expression);
  final ClosureAnnotator closureAnnotator=state.getInjector().getClosureAnnotator();
  final ClassDescriptor classDescriptor=closureAnnotator.classDescriptorForFunctionDescriptor(descriptor);
  final CalculatedClosure closure=closureAnnotator.getCalculatedClosure(classDescriptor);
  ClosureCodegen closureCodegen=new ClosureCodegen(state,(MutableClosure)closure).gen(expression,context,this);
  final JvmClassName className=closureCodegen.name;
  final Type asmType=className.getAsmType();
  final String internalName=className.getInternalName();
  if (CodegenUtil.isConst(closure)) {
    v.invokestatic(internalName,"$getInstance","()" + className.getDescriptor());
  }
 else {
    v.anew(asmType);
    v.dup();
    final Method cons=closureCodegen.constructor;
    pushClosureOnStack(closure,false);
    v.invokespecial(internalName,"<init>",cons.getDescriptor());
  }
  return StackValue.onStack(asmType);
}
