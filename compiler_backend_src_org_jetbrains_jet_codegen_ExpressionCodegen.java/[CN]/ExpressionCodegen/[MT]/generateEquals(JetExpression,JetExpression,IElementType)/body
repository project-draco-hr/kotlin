{
  Type leftType=expressionType(left);
  Type rightType=expressionType(right);
  if (leftType.equals(JET_NOTHING_TYPE)) {
    return genCmpWithNull(right,rightType,opToken);
  }
  if (rightType.equals(JET_NOTHING_TYPE)) {
    return genCmpWithNull(left,leftType,opToken);
  }
  if (isIntZero(left,leftType) && isIntPrimitive(rightType)) {
    return genCmpWithZero(right,rightType,opToken);
  }
  if (isIntZero(right,rightType) && isIntPrimitive(leftType)) {
    return genCmpWithZero(left,leftType,opToken);
  }
  if (isPrimitive(leftType) != isPrimitive(rightType)) {
    leftType=boxType(leftType);
    gen(left,leftType);
    rightType=boxType(rightType);
    gen(right,rightType);
  }
 else {
    gen(left,leftType);
    gen(right,rightType);
  }
  return genEqualsForExpressionsOnStack(v,opToken,leftType,rightType);
}
