{
  boolean isSuper=superExpression != null;
  DeclarationDescriptor containingDeclaration=propertyDescriptor.getContainingDeclaration().getOriginal();
  boolean isStatic=containingDeclaration instanceof NamespaceDescriptorImpl;
  propertyDescriptor=propertyDescriptor.getOriginal();
  boolean isInsideClass=((containingDeclaration == context.getThisDescriptor()) || (context.getParentContext() instanceof CodegenContext.NamespaceContext) && context.getParentContext().getContextDescriptor() == containingDeclaration) && contextKind() != OwnerKind.TRAIT_IMPL;
  Method getter;
  Method setter;
  if (forceField) {
    getter=null;
    setter=null;
  }
 else {
    if (isInsideClass && (propertyDescriptor.getGetter() == null || propertyDescriptor.getGetter().isDefault())) {
      getter=null;
    }
 else {
      if (isSuper) {
        PsiElement enclosingElement=bindingContext.get(BindingContext.LABEL_TARGET,superExpression.getTargetLabel());
        ClassDescriptor enclosed=(ClassDescriptor)bindingContext.get(BindingContext.DECLARATION_TO_DESCRIPTOR,enclosingElement);
        if (!CodegenUtil.isInterface(propertyDescriptor.getContainingDeclaration())) {
          if (enclosed != null && enclosed != context.getThisDescriptor()) {
            CodegenContext c=context;
            while (c.getContextDescriptor() != enclosed) {
              c=c.getParentContext();
            }
            propertyDescriptor=(PropertyDescriptor)c.getAccessor(propertyDescriptor);
            isSuper=false;
          }
        }
      }
      getter=typeMapper.mapGetterSignature(propertyDescriptor,OwnerKind.IMPLEMENTATION);
    }
    if (isInsideClass && (propertyDescriptor.getSetter() == null || propertyDescriptor.getSetter().isDefault())) {
      setter=null;
    }
 else {
      setter=typeMapper.mapSetterSignature(propertyDescriptor,OwnerKind.IMPLEMENTATION);
    }
  }
  String owner;
  boolean isInterface;
  if (isInsideClass || isStatic) {
    owner=typeMapper.getOwner(propertyDescriptor,contextKind());
    isInterface=false;
  }
 else {
    owner=typeMapper.getOwner(propertyDescriptor,OwnerKind.IMPLEMENTATION);
    if (containingDeclaration instanceof ClassDescriptor && ((ClassDescriptor)containingDeclaration).getKind() == ClassKind.OBJECT)     isInterface=false;
 else {
      JetClass jetClass=(JetClass)bindingContext.get(BindingContext.DESCRIPTOR_TO_DECLARATION,containingDeclaration);
      isInterface=jetClass == null || jetClass.isTrait();
    }
  }
  return StackValue.property(propertyDescriptor.getName(),owner,typeMapper.mapType(propertyDescriptor.getOutType()),isStatic,isInterface,isSuper,getter,setter);
}
