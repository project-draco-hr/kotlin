{
  JetSimpleNameExpression operationSign=expression.getOperationSign();
  IElementType opToken=operationSign.getReferencedNameElementType();
  if (opToken == JetTokens.COLON) {
    return gen(expression.getLeft());
  }
 else {
    JetTypeReference typeReference=expression.getRight();
    JetType jetType=bindingContext.get(BindingContext.TYPE,typeReference);
    DeclarationDescriptor descriptor=jetType.getConstructor().getDeclarationDescriptor();
    if (!(descriptor instanceof ClassDescriptor)) {
      throw new UnsupportedOperationException("don't know how to handle non-class types in as/as?");
    }
    Type type=typeMapper.boxType(typeMapper.mapType(jetType,OwnerKind.INTERFACE));
    generateInstanceOf(StackValue.expression(OBJECT_TYPE,expression.getLeft(),this),jetType,true);
    Label isInstance=new Label();
    v.ifne(isInstance);
    v.pop();
    if (opToken == JetTokens.AS_SAFE) {
      v.aconst(null);
    }
 else {
      throwNewException(CLASS_TYPE_CAST_EXCEPTION);
    }
    v.mark(isInstance);
    v.checkcast(type);
    return StackValue.onStack(type);
  }
}
