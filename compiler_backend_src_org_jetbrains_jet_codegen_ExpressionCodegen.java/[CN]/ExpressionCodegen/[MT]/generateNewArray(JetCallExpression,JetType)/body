{
  List<? extends ValueArgument> args=expression.getValueArguments();
  if (args.size() != 1) {
    throw new CompilationException("array constructor requires one value argument");
  }
  gen(args.get(0).getArgumentExpression(),Type.INT_TYPE);
  if (state.getStandardLibrary().getArray().equals(arrayType.getConstructor().getDeclarationDescriptor())) {
    JetType elementType=typeMapper.getGenericsElementType(arrayType);
    if (elementType != null) {
      generateTypeInfo(elementType);
      v.invokestatic("jet/typeinfo/TypeInfo","newArray","(ILjet/typeinfo/TypeInfo;)[Ljava/lang/Object;");
    }
 else {
      v.newarray(JetTypeMapper.boxType(typeMapper.mapType(arrayType.getArguments().get(0).getType())));
    }
  }
 else {
    Type type=typeMapper.mapType(arrayType,OwnerKind.IMPLEMENTATION);
    v.newarray(type.getElementType());
  }
}
