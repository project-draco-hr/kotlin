{
  List<JetExpression> args=new ArrayList<JetExpression>();
  for (  ValueArgument va : expression.getValueArguments()) {
    args.add(va.getArgumentExpression());
  }
  args.addAll(expression.getFunctionLiteralArguments());
  boolean isArray=KotlinBuiltIns.getInstance().isArray(arrayType);
  if (!isArray && args.size() != 1) {
    throw new CompilationException("primitive array constructor requires one argument",null,expression);
  }
  if (isArray) {
    gen(args.get(0),Type.INT_TYPE);
    v.newarray(boxType(asmType(arrayType.getArguments().get(0).getType())));
  }
 else {
    Type type=typeMapper.mapType(arrayType);
    gen(args.get(0),Type.INT_TYPE);
    v.newarray(correctElementType(type));
  }
  if (args.size() == 2) {
    int sizeIndex=myFrameMap.enterTemp(Type.INT_TYPE);
    int indexIndex=myFrameMap.enterTemp(Type.INT_TYPE);
    v.dup();
    v.arraylength();
    v.store(sizeIndex,Type.INT_TYPE);
    v.iconst(0);
    v.store(indexIndex,Type.INT_TYPE);
    gen(args.get(1),JET_FUNCTION1_TYPE);
    Label begin=new Label();
    Label end=new Label();
    v.visitLabel(begin);
    v.load(indexIndex,Type.INT_TYPE);
    v.load(sizeIndex,Type.INT_TYPE);
    v.ificmpge(end);
    v.dup2();
    v.load(indexIndex,Type.INT_TYPE);
    v.invokestatic("java/lang/Integer","valueOf","(I)Ljava/lang/Integer;");
    v.invokeinterface("jet/Function1","invoke","(Ljava/lang/Object;)Ljava/lang/Object;");
    v.load(indexIndex,Type.INT_TYPE);
    v.iinc(indexIndex,1);
    v.swap();
    v.astore(OBJECT_TYPE);
    v.goTo(begin);
    v.visitLabel(end);
    v.pop();
    myFrameMap.leaveTemp(Type.INT_TYPE);
    myFrameMap.leaveTemp(Type.INT_TYPE);
  }
}
