{
  doJavaTest(new JavaRefactoringProvider(){
    @NotNull @Override ParameterInfoImpl[] getNewParameters(    @NotNull PsiMethod method){
      return new ParameterInfoImpl[]{new ParameterInfoImpl(-1,"n",PsiType.INT,"1"),new ParameterInfoImpl(-1,"s",PsiType.getJavaLangString(getPsiManager(),GlobalSearchScope.allScope(getProject())),"\"abc\"")};
    }
    @NotNull @Override Set<PsiMethod> getParameterPropagationTargets(    @NotNull PsiMethod method){
      PsiClass classA=CollectionsKt.first(JavaFullClassNameIndex.getInstance().get("A".hashCode(),getProject(),GlobalSearchScope.allScope(getProject())),new Function1<PsiClass,Boolean>(){
        @Override public Boolean invoke(        PsiClass aClass){
          return "A".equals(aClass.getName());
        }
      }
);
      PsiMethod methodBar=ArraysKt.first(classA.getMethods(),new Function1<PsiMethod,Boolean>(){
        @Override public Boolean invoke(        PsiMethod method){
          return "bar".equals(method.getName());
        }
      }
);
      JetNamedFunction functionTest=JetTopLevelFunctionFqnNameIndex.getInstance().get("test",getProject(),GlobalSearchScope.allScope(getProject())).iterator().next();
      return SetsKt.setOf(methodBar,AsJavaPackage.getRepresentativeLightMethod(functionTest));
    }
  }
);
}
