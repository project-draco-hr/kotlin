{
  try {
    JetChangeInfo changeInfo=getChangeInfo();
    JetElement method=(JetElement)changeInfo.getMethod();
    JetChangeSignatureConfiguration empty=new JetChangeSignatureConfiguration(){
      @NotNull @Override public JetMethodDescriptor configure(      @NotNull JetMethodDescriptor originalDescriptor,      @NotNull BindingContext bindingContext){
        return originalDescriptor;
      }
      @Override public boolean performSilently(      @NotNull Collection<? extends PsiElement> elements){
        return true;
      }
      @Override public boolean forcePerformForSelectedFunctionOnly(){
        return false;
      }
    }
;
    BindingContext context=ResolutionUtils.analyze(method,BodyResolveMode.FULL);
    JetChangeSignatureKt.runChangeSignature(getProject(),JetChangeInfoKt.getOriginalBaseFunctionDescriptor(changeInfo),empty,context,method,"test");
  }
 catch (  RuntimeException e) {
    assertTrue(e.getMessage().startsWith("Refactoring cannot be"));
    return;
  }
  fail("Exception expected");
}
