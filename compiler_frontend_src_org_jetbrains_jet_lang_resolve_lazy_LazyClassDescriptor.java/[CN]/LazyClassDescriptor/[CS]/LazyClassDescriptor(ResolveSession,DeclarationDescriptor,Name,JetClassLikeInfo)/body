{
  this.resolveSession=resolveSession;
  this.name=name;
  if (classLikeInfo.getCorrespondingClassOrObject() != null) {
    this.resolveSession.getTrace().record(BindingContext.CLASS,classLikeInfo.getCorrespondingClassOrObject(),this);
  }
  this.originalClassInfo=classLikeInfo;
  JetClassLikeInfo classLikeInfoForMembers=classLikeInfo.getClassKind() != ClassKind.ENUM_CLASS ? classLikeInfo : noEnumEntries(classLikeInfo);
  this.declarationProvider=resolveSession.getDeclarationProviderFactory().getClassMemberDeclarationProvider(classLikeInfoForMembers);
  this.containingDeclaration=containingDeclaration;
  this.unsubstitutedMemberScope=new LazyClassMemberScope(resolveSession,declarationProvider,this);
  this.unsubstitutedInnerClassesScope=new InnerClassesScopeWrapper(unsubstitutedMemberScope);
  this.typeConstructor=new LazyClassTypeConstructor();
  this.kind=classLikeInfo.getClassKind();
  if (kind.isObject()) {
    this.modality=Modality.FINAL;
  }
 else {
    Modality defaultModality=kind == ClassKind.TRAIT ? Modality.ABSTRACT : Modality.FINAL;
    JetModifierList modifierList=classLikeInfo.getModifierList();
    this.modality=resolveModalityFromModifiers(modifierList,defaultModality);
  }
  JetModifierList modifierList=classLikeInfo.getModifierList();
  this.visibility=resolveVisibilityFromModifiers(modifierList,Visibilities.INTERNAL);
}
