{
  if (descriptor.getKind().isReal())   return;
  if (descriptor.getVisibility() == Visibilities.INVISIBLE_FAKE)   return;
  Collection<? extends CallableMemberDescriptor> directOverridden=descriptor.getOverriddenDescriptors();
  if (directOverridden.size() == 0) {
    throw new IllegalStateException("A 'fake override' " + descriptor.getName().asString() + " must override something");
  }
  Map<CallableMemberDescriptor,Set<CallableMemberDescriptor>> overriddenDeclarationsByDirectParent=collectOverriddenDeclarations(directOverridden);
  List<CallableMemberDescriptor> allOverriddenDeclarations=ContainerUtil.flatten(overriddenDeclarationsByDirectParent.values());
  Set<CallableMemberDescriptor> allFilteredOverriddenDeclarations=filterOutOverridden(Sets.newLinkedHashSet(allOverriddenDeclarations));
  Set<CallableMemberDescriptor> relevantDirectlyOverridden=getRelevantDirectlyOverridden(overriddenDeclarationsByDirectParent,allFilteredOverriddenDeclarations);
  checkInheritedSignaturesForFakeOverride(descriptor,relevantDirectlyOverridden,reportingStrategy);
  collectJava8MissingOverrides(relevantDirectlyOverridden,reportingStrategy);
  List<CallableMemberDescriptor> implementations=collectImplementations(relevantDirectlyOverridden);
  if (implementations.size() == 1 && isReturnTypeOkForOverride(descriptor,implementations.get(0)))   return;
  List<CallableMemberDescriptor> abstractOverridden=new ArrayList<CallableMemberDescriptor>(allFilteredOverriddenDeclarations.size());
  List<CallableMemberDescriptor> concreteOverridden=new ArrayList<CallableMemberDescriptor>(allFilteredOverriddenDeclarations.size());
  filterNotSynthesizedDescriptorsByModality(allFilteredOverriddenDeclarations,abstractOverridden,concreteOverridden);
  if (implementations.isEmpty()) {
    for (    CallableMemberDescriptor member : abstractOverridden) {
      reportingStrategy.abstractMemberNoImpl(member);
    }
  }
 else   if (implementations.size() > 1) {
    for (    CallableMemberDescriptor member : concreteOverridden) {
      reportingStrategy.manyImplMemberNoImpl(member);
    }
  }
 else {
    List<CallableMemberDescriptor> membersWithMoreSpecificReturnType=collectAbstractMethodsWithMoreSpecificReturnType(abstractOverridden,implementations.get(0));
    for (    CallableMemberDescriptor member : membersWithMoreSpecificReturnType) {
      reportingStrategy.abstractMemberNoImpl(member);
    }
  }
}
