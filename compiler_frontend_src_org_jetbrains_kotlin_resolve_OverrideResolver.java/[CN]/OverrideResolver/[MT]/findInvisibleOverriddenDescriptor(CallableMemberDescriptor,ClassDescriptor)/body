{
  for (  KotlinType supertype : declaringClass.getTypeConstructor().getSupertypes()) {
    Set<CallableMemberDescriptor> all=Sets.newLinkedHashSet();
    all.addAll(supertype.getMemberScope().getFunctions(declared.getName(),NoLookupLocation.WHEN_CHECK_OVERRIDES));
    all.addAll((Collection)supertype.getMemberScope().getProperties(declared.getName(),NoLookupLocation.WHEN_CHECK_OVERRIDES));
    for (    CallableMemberDescriptor fromSuper : all) {
      if (OverridingUtil.DEFAULT.isOverridableBy(fromSuper,declared).getResult() == OVERRIDABLE) {
        if (Visibilities.isVisible(ReceiverValue.IRRELEVANT_RECEIVER,fromSuper,declared)) {
          throw new IllegalStateException("Descriptor " + fromSuper + " is overridable by "+ declared+ " and visible but does not appear in its getOverriddenDescriptors()");
        }
        return fromSuper;
      }
    }
  }
  return null;
}
