{
  final PsiElement dataModifier=findDataModifierForDataClass(componentFunction.getContainingDeclaration());
  checkOverridesForMember(componentFunction,componentFunction.getOverriddenDescriptors(),new CheckOverrideReportStrategy(){
    private boolean overrideConflict=false;
    @Override public void overridingFinalMember(    @NotNull CallableMemberDescriptor overriding,    @NotNull CallableMemberDescriptor overridden){
      if (!overrideConflict) {
        overrideConflict=true;
        trace.report(DATA_CLASS_OVERRIDE_CONFLICT.on(dataModifier,componentFunction,overridden.getContainingDeclaration()));
      }
    }
    @Override public void returnTypeMismatchOnOverride(    @NotNull CallableMemberDescriptor overriding,    @NotNull CallableMemberDescriptor overridden){
      if (!overrideConflict) {
        overrideConflict=true;
        trace.report(DATA_CLASS_OVERRIDE_CONFLICT.on(dataModifier,componentFunction,overridden.getContainingDeclaration()));
      }
    }
    @Override public void propertyTypeMismatchOnOverride(    @NotNull PropertyDescriptor overriding,    @NotNull PropertyDescriptor overridden){
      throw new IllegalStateException("Component functions are not properties");
    }
    @Override public void varOverriddenByVal(    @NotNull CallableMemberDescriptor overriding,    @NotNull CallableMemberDescriptor overridden){
      throw new IllegalStateException("Component functions are not properties");
    }
  }
);
}
