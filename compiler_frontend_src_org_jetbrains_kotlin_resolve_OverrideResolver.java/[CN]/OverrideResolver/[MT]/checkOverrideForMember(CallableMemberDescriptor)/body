{
  if (declared.getKind() == CallableMemberDescriptor.Kind.SYNTHESIZED) {
    if (DataClassUtilsKt.isComponentLike(declared.getName())) {
      checkOverrideForComponentFunction(declared);
    }
    return;
  }
  if (declared.getKind() != CallableMemberDescriptor.Kind.DECLARATION) {
    return;
  }
  final KtNamedDeclaration member=(KtNamedDeclaration)DescriptorToSourceUtils.descriptorToDeclaration(declared);
  if (member == null) {
    throw new IllegalStateException("declared descriptor is not resolved to declaration: " + declared);
  }
  KtModifierList modifierList=member.getModifierList();
  boolean hasOverrideNode=modifierList != null && modifierList.hasModifier(KtTokens.OVERRIDE_KEYWORD);
  Collection<? extends CallableMemberDescriptor> overriddenDescriptors=declared.getOverriddenDescriptors();
  if (hasOverrideNode) {
    checkOverridesForMemberMarkedOverride(declared,true,new CheckOverrideReportStrategy(){
      private boolean finalOverriddenError=false;
      private boolean typeMismatchError=false;
      private boolean kindMismatchError=false;
      @Override public void overridingFinalMember(      @NotNull CallableMemberDescriptor overridden){
        if (!finalOverriddenError) {
          finalOverriddenError=true;
          trace.report(OVERRIDING_FINAL_MEMBER.on(member,overridden,overridden.getContainingDeclaration()));
        }
      }
      @Override public void returnTypeMismatchOnOverride(      @NotNull CallableMemberDescriptor overridden){
        if (!typeMismatchError) {
          typeMismatchError=true;
          trace.report(RETURN_TYPE_MISMATCH_ON_OVERRIDE.on(member,declared,overridden));
        }
      }
      @Override public void propertyTypeMismatchOnOverride(      @NotNull CallableMemberDescriptor overridden){
        if (!typeMismatchError) {
          typeMismatchError=true;
          trace.report(PROPERTY_TYPE_MISMATCH_ON_OVERRIDE.on(member,declared,overridden));
        }
      }
      @Override public void varOverriddenByVal(      @NotNull CallableMemberDescriptor overridden){
        if (!kindMismatchError) {
          kindMismatchError=true;
          trace.report(VAR_OVERRIDDEN_BY_VAL.on(member,(PropertyDescriptor)declared,(PropertyDescriptor)overridden));
        }
      }
      @Override public void cannotOverrideInvisibleMember(      @NotNull CallableMemberDescriptor invisibleOverridden){
        trace.report(CANNOT_OVERRIDE_INVISIBLE_MEMBER.on(member,declared,invisibleOverridden));
      }
      @Override public void nothingToOverride(){
        trace.report(NOTHING_TO_OVERRIDE.on(member,declared));
      }
    }
);
  }
 else   if (!overriddenDescriptors.isEmpty()) {
    CallableMemberDescriptor overridden=overriddenDescriptors.iterator().next();
    trace.report(VIRTUAL_MEMBER_HIDDEN.on(member,declared,overridden,overridden.getContainingDeclaration()));
  }
}
