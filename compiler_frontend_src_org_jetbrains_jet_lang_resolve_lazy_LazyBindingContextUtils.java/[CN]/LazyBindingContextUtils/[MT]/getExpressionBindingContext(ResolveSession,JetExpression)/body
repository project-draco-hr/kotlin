{
  final DelegatingBindingTrace trace=new DelegatingBindingTrace(resolveSession.getBindingContext());
  JetFile file=(JetFile)expression.getContainingFile();
  JetNamedFunction namedFunction=PsiTreeUtil.getTopmostParentOfType(expression,JetNamedFunction.class);
  if (namedFunction != null) {
    TopDownAnalysisParameters parameters=new TopDownAnalysisParameters(Predicates.<PsiFile>alwaysTrue(),false,true,Collections.<AnalyzerScriptParameter>emptyList());
    InjectorForBodyResolve bodyResolve=new InjectorForBodyResolve(file.getProject(),parameters,trace,new EmptyBodyResolveContext());
    final BodyResolver bodyResolver=bodyResolve.getBodyResolver();
    if (namedFunction.getParent() instanceof JetFile || namedFunction.getParent() instanceof JetClassBody || namedFunction.getParent() instanceof JetClassObject) {
      JetScope scope=resolveSession.getResolutionScope(namedFunction);
      FunctionDescriptor functionDescriptor=(FunctionDescriptor)resolveSession.resolveToDescriptor(namedFunction);
      bodyResolver.resolveFunctionBody(trace,namedFunction,functionDescriptor,scope);
    }
 else {
      LOG.warn(String.format("Not expected parent for function: %s in %s",namedFunction.getName(),namedFunction.getContainingFile()));
    }
  }
  if (trace.getBindingContext().get(BindingContext.RESOLUTION_SCOPE,expression) == null) {
    JetScope scope=getExpressionMemberScope(resolveSession,expression);
    if (scope != null) {
      trace.record(BindingContext.RESOLUTION_SCOPE,expression,scope);
    }
  }
  return trace.getBindingContext();
}
