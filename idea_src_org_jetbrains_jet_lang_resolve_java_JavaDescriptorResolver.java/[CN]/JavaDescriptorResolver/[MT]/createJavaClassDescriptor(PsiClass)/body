{
  String name=psiClass.getName();
  PsiModifierList modifierList=psiClass.getModifierList();
  ClassDescriptorImpl classDescriptor=new ClassDescriptorImpl(JAVA_ROOT,Collections.<Attribute>emptyList(),name);
  classDescriptor.initialize(modifierList == null ? false : modifierList.hasModifierProperty(PsiModifier.FINAL),Collections.<TypeParameterDescriptor>emptyList(),getSupertypes(psiClass),new JavaClassMembersScope(classDescriptor,psiClass,semanticServices,false),new FunctionGroup(){
    @NotNull @Override public String getName(){
      throw new UnsupportedOperationException();
    }
    @NotNull @Override public Collection<FunctionDescriptor> getPossiblyApplicableFunctions(    @NotNull List<JetType> typeArguments,    @NotNull List<JetType> positionedValueArgumentTypes){
      throw new UnsupportedOperationException();
    }
    @Override public boolean isEmpty(){
      throw new UnsupportedOperationException();
    }
  }
);
  semanticServices.getTrace().recordDeclarationResolution(psiClass,classDescriptor);
  return classDescriptor;
}
