{
  WritableFunctionGroup writableFunctionGroup=new WritableFunctionGroup(methodName);
  final Collection<HierarchicalMethodSignature> signatures=psiClass.getVisibleSignatures();
  for (  HierarchicalMethodSignature signature : signatures) {
    PsiMethod method=signature.getMethod();
    if (method.hasModifierProperty(PsiModifier.STATIC) != staticMembers) {
      continue;
    }
    if (!methodName.equals(method.getName())) {
      continue;
    }
    FunctionDescriptor functionDescriptor=methodDescriptorCache.get(method);
    if (functionDescriptor != null) {
      writableFunctionGroup.addFunction(functionDescriptor);
      continue;
    }
    PsiParameter[] parameters=method.getParameterList().getParameters();
    FunctionDescriptorImpl functionDescriptorImpl=new FunctionDescriptorImpl(JavaDescriptorResolver.JAVA_ROOT,Collections.<Annotation>emptyList(),methodName);
    functionDescriptorImpl.initialize(null,resolveTypeParameters(method.getTypeParameters()),semanticServices.getDescriptorResolver().resolveParameterDescriptors(functionDescriptorImpl,parameters),semanticServices.getTypeTransformer().transformToType(method.getReturnType()));
    semanticServices.getTrace().recordDeclarationResolution(method,functionDescriptorImpl);
    writableFunctionGroup.addFunction(functionDescriptorImpl);
    methodDescriptorCache.put(method,functionDescriptorImpl);
  }
  return writableFunctionGroup;
}
