{
  if (!debugInfoEnabled) {
    return;
  }
  if (element instanceof JetFile) {
    JetFile file=(JetFile)element;
    try {
      final BindingContext bindingContext=AnalyzerFacade.analyzeFileWithCache(file);
      final Set<JetReferenceExpression> unresolvedReferences=Sets.newHashSet();
      for (      Diagnostic diagnostic : bindingContext.getDiagnostics()) {
        if (diagnostic instanceof UnresolvedReferenceDiagnostic) {
          unresolvedReferences.add(((UnresolvedReferenceDiagnostic)diagnostic).getPsiElement());
        }
      }
      file.acceptChildren(new JetVisitorVoid(){
        @Override public void visitReferenceExpression(        JetReferenceExpression expression){
          if (expression instanceof JetSimpleNameExpression) {
            JetSimpleNameExpression nameExpression=(JetSimpleNameExpression)expression;
            IElementType elementType=expression.getNode().getElementType();
            if (elementType == JetNodeTypes.OPERATION_REFERENCE) {
              IElementType referencedNameElementType=nameExpression.getReferencedNameElementType();
              if (EXCLUDED.contains(referencedNameElementType)) {
                return;
              }
              if (JetTokens.LABELS.contains(referencedNameElementType))               return;
            }
 else             if (nameExpression.getReferencedNameElementType() == JetTokens.THIS_KEYWORD) {
              return;
            }
          }
          String target=null;
          DeclarationDescriptor declarationDescriptor=bindingContext.get(REFERENCE_TARGET,expression);
          if (declarationDescriptor != null) {
            target=declarationDescriptor.toString();
          }
 else {
            PsiElement labelTarget=bindingContext.get(LABEL_TARGET,expression);
            if (labelTarget != null) {
              target=labelTarget.getText();
            }
 else {
              Collection<? extends DeclarationDescriptor> declarationDescriptors=bindingContext.get(AMBIGUOUS_REFERENCE_TARGET,expression);
              if (declarationDescriptors != null) {
                target="[" + declarationDescriptors.size() + " descriptors]";
              }
            }
          }
          boolean resolved=target != null;
          boolean unresolved=unresolvedReferences.contains(expression);
          if (declarationDescriptor != null && !ApplicationManager.getApplication().isUnitTestMode() && ErrorUtils.isError(declarationDescriptor)) {
            holder.createErrorAnnotation(expression,"[DEBUG] Resolved to error element").setTextAttributes(JetHighlighter.JET_RESOLVED_TO_ERROR);
          }
          if (resolved && unresolved) {
            holder.createErrorAnnotation(expression,"[DEBUG] Reference marked as unresolved is actually resolved to " + target).setTextAttributes(JetHighlighter.JET_DEBUG_INFO);
          }
 else           if (!resolved && !unresolved) {
            holder.createErrorAnnotation(expression,"[DEBUG] Reference is not resolved to anything, but is not marked unresolved").setTextAttributes(JetHighlighter.JET_DEBUG_INFO);
          }
        }
        @Override public void visitJetElement(        JetElement element){
          element.acceptChildren(this);
        }
      }
);
    }
 catch (    ProcessCanceledException e) {
      throw e;
    }
catch (    Throwable e) {
      holder.createErrorAnnotation(element,e.getClass().getCanonicalName() + ": " + e.getMessage());
      e.printStackTrace();
    }
  }
}
