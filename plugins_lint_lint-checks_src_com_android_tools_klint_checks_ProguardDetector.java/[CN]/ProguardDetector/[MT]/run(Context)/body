{
  String contents=context.getContents();
  if (contents != null) {
    if (context.isEnabled(WRONG_KEEP)) {
      int index=contents.indexOf("-keepclasseswithmembernames class * {\n" + "    public <init>(android.");
      if (index != -1) {
        context.report(WRONG_KEEP,Location.create(context.file,contents,index,index),"Obsolete ProGuard file; use `-keepclasseswithmembers` instead of " + "`-keepclasseswithmembernames`");
      }
    }
    if (context.isEnabled(SPLIT_CONFIG)) {
      int index=contents.indexOf("-keep public class * extends android.app.Activity");
      if (index != -1) {
        File propertyFile=new File(context.file.getParentFile(),PROJECT_PROPERTIES);
        if (!propertyFile.exists()) {
          return;
        }
        String properties=context.getClient().readFile(propertyFile);
        int i=properties.indexOf(PROGUARD_CONFIG);
        if (i == -1) {
          return;
        }
        for (; i >= 0; i--) {
          char c=properties.charAt(i);
          if (c == '#') {
            return;
          }
          if (c == '\n') {
            break;
          }
        }
        if (properties.contains(PROGUARD_CONFIG)) {
          context.report(SPLIT_CONFIG,Location.create(context.file,contents,index,index),String.format("Local ProGuard configuration contains general Android " + "configuration: Inherit these settings instead? " + "Modify `project.properties` to define "+ "`proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:%1$s`"+ " and then keep only project-specific configuration here",context.file.getName()));
        }
      }
    }
  }
}
