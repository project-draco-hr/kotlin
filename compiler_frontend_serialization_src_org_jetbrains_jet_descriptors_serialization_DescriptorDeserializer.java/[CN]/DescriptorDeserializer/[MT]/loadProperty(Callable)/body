{
  int flags=proto.getFlags();
  PropertyDescriptorImpl property=new PropertyDescriptorImpl(containingDeclaration,getAnnotations(proto),modality(Flags.MODALITY.get(flags)),visibility(Flags.VISIBILITY.get(flags)),Flags.CALLABLE_KIND.get(flags) == Callable.CallableKind.VAR,nameResolver.getName(proto.getName()),memberKind(Flags.MEMBER_KIND.get(flags)));
  List<TypeParameterDescriptor> typeParameters=new ArrayList<TypeParameterDescriptor>(proto.getTypeParameterCount());
  DescriptorDeserializer local=createChildDeserializer(property,proto.getTypeParameterList(),typeParameters);
  property.setType(local.typeDeserializer.type(proto.getReturnType()),typeParameters,getExpectedThisObject(),local.typeDeserializer.typeOrNull(proto.hasReceiverType() ? proto.getReceiverType() : null));
  PropertyGetterDescriptorImpl getter=null;
  PropertySetterDescriptorImpl setter=null;
  if (Flags.HAS_GETTER.get(flags)) {
    int getterFlags=proto.getGetterFlags();
    Boolean isNotDefault=proto.hasGetterFlags() || Flags.IS_NOT_DEFAULT.get(getterFlags);
    if (!isNotDefault) {
      getter=DescriptorResolver.createDefaultGetter(property);
    }
 else {
      getter=new PropertyGetterDescriptorImpl(property,Collections.<AnnotationDescriptor>emptyList(),modality(Flags.MODALITY.get(getterFlags)),visibility(Flags.VISIBILITY.get(getterFlags)),isNotDefault,!isNotDefault,property.getKind());
    }
    getter.initialize(property.getReturnType());
  }
  if (Flags.HAS_SETTER.get(flags)) {
    int setterFlags=proto.getSetterFlags();
    Boolean isNotDefault=proto.hasSetterFlags() || Flags.IS_NOT_DEFAULT.get(setterFlags);
    if (!isNotDefault) {
      setter=DescriptorResolver.createDefaultSetter(property);
    }
 else {
      setter=new PropertySetterDescriptorImpl(property,getSetterAnnotations(proto,setterFlags),modality(Flags.MODALITY.get(setterFlags)),visibility(Flags.VISIBILITY.get(setterFlags)),isNotDefault,!isNotDefault,property.getKind());
      setter.initializeDefault();
    }
  }
  property.initialize(getter,setter);
  return property;
}
