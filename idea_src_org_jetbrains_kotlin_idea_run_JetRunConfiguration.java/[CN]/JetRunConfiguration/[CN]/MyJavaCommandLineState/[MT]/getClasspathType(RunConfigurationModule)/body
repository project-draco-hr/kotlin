{
  Module module=configurationModule.getModule();
  if (module == null)   throw CantRunException.noModuleConfigured(configurationModule.getModuleName());
  String runClass=myConfiguration.getRunClass();
  if (runClass == null)   throw new CantRunException(String.format("Run class should be defined for configuration '%s'",myConfiguration.getName()));
  PsiClass psiClass=JavaExecutionUtil.findMainClass(module,runClass);
  if (psiClass == null)   throw CantRunException.classNotFound(runClass,module);
  KtNamedFunction mainFun=findMainFun(psiClass);
  if (mainFun == null)   throw new CantRunException(noFunctionFoundMessage(psiClass));
  Module classModule=ModuleUtilCore.findModuleForPsiElement(mainFun);
  if (classModule == null)   classModule=module;
  VirtualFile virtualFileForMainFun=mainFun.getContainingFile().getVirtualFile();
  if (virtualFileForMainFun == null)   throw new CantRunException(noFunctionFoundMessage(psiClass));
  ModuleFileIndex fileIndex=ModuleRootManager.getInstance(classModule).getFileIndex();
  if (fileIndex.isInSourceContent(virtualFileForMainFun)) {
    if (fileIndex.isInTestSourceContent(virtualFileForMainFun)) {
      return JavaParameters.JDK_AND_CLASSES_AND_TESTS;
    }
 else {
      return JavaParameters.JDK_AND_CLASSES;
    }
  }
  List<OrderEntry> entriesForFile=fileIndex.getOrderEntriesForFile(virtualFileForMainFun);
  for (  OrderEntry entry : entriesForFile) {
    if (entry instanceof ExportableOrderEntry && ((ExportableOrderEntry)entry).getScope() == DependencyScope.TEST) {
      return JavaParameters.JDK_AND_CLASSES_AND_TESTS;
    }
  }
  return JavaParameters.JDK_AND_CLASSES;
}
