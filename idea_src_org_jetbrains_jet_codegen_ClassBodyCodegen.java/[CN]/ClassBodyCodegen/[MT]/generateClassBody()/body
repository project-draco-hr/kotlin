{
  final FunctionCodegen functionCodegen=new FunctionCodegen(myClass,v,stdlib,bindingContext);
  final PropertyCodegen propertyCodegen=new PropertyCodegen(v,stdlib,bindingContext,functionCodegen);
  for (  JetDeclaration declaration : myClass.getDeclarations()) {
    if (declaration instanceof JetProperty) {
      propertyCodegen.gen((JetProperty)declaration,kind);
    }
 else     if (declaration instanceof JetFunction) {
      try {
        functionCodegen.gen((JetFunction)declaration,kind);
      }
 catch (      RuntimeException e) {
        throw new RuntimeException("Error generating method " + myClass.getName() + "."+ declaration.getName(),e);
      }
    }
  }
  for (  JetParameter p : myClass.getPrimaryConstructorParameters()) {
    if (p.getValOrVarNode() != null) {
      PropertyDescriptor propertyDescriptor=bindingContext.getPropertyDescriptor(p);
      if (propertyDescriptor != null) {
        propertyCodegen.generateDefaultGetter(propertyDescriptor,Opcodes.ACC_PUBLIC,kind);
        if (propertyDescriptor.isVar()) {
          propertyCodegen.generateDefaultSetter(propertyDescriptor,Opcodes.ACC_PUBLIC,kind);
        }
        if (!(kind instanceof OwnerKind.DelegateKind) && kind != OwnerKind.INTERFACE && bindingContext.hasBackingField(propertyDescriptor)) {
          v.visitField(Opcodes.ACC_PRIVATE,p.getName(),typeMapper.mapType(propertyDescriptor.getOutType()).getDescriptor(),null,null);
        }
      }
    }
  }
}
