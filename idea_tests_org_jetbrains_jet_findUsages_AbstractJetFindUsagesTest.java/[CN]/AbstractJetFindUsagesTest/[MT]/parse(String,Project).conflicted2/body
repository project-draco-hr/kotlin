{
  KotlinClassFindUsagesOptions options=new KotlinClassFindUsagesOptions(project);
  options.isUsages=false;
  options.setSearchConstructorUsages(false);
  for (  String s : InTextDirectivesUtils.findListWithPrefixes(text,"// OPTIONS: ")) {
    if (parseCommonOptions(options,s))     continue;
    if (s.equals("constructorUsages")) {
      options.setSearchConstructorUsages(true);
    }
 else     if (s.equals("derivedInterfaces")) {
      options.isDerivedInterfaces=true;
    }
 else     if (s.equals("derivedClasses")) {
      options.isDerivedClasses=true;
    }
 else     if (s.equals("functionUsages")) {
      options.isMethodsUsages=true;
    }
 else     if (s.equals("propertyUsages")) {
      options.isFieldsUsages=true;
    }
 else     fail("Invalid option: " + s);
  }
  return options;
}
