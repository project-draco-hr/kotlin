{
  if (!at(LT))   return null;
  PsiBuilder.Marker list=mark();
  myBuilder.disableNewlines();
  advance();
  while (true) {
    PsiBuilder.Marker projection=mark();
    TokenSet lookFor=TokenSet.create(IDENTIFIER);
    TokenSet stopAt=TokenSet.create(COMMA,COLON,GT);
    parseModifierListWithShortAnnotations(MODIFIER_LIST,lookFor,stopAt);
    if (at(MUL)) {
      advance();
    }
 else {
      parseTypeRef();
    }
    projection.done(TYPE_PROJECTION);
    if (!at(COMMA))     break;
    advance();
  }
  if (expectedGtOffset >= 0 && myBuilder.getCurrentOffset() < expectedGtOffset) {
    final PsiBuilder.Marker error=mark();
    while (myBuilder.getCurrentOffset() < expectedGtOffset) {
      advance();
    }
    error.error("Expecting a '>'");
  }
  expect(GT,"Expecting a '>'");
  myBuilder.restoreNewlinesState();
  list.done(TYPE_ARGUMENT_LIST);
  return list;
}
