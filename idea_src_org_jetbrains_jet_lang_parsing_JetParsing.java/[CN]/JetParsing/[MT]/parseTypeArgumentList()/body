{
  if (!at(LT))   return null;
  PsiBuilder.Marker list=mark();
  myBuilder.disableNewlines();
  advance();
  while (true) {
    PsiBuilder.Marker projection=mark();
    int lastId=findLastBefore(TokenSet.create(IDENTIFIER),TokenSet.create(COMMA,COLON,GT),false);
    createTruncatedBuilder(lastId).parseModifierList();
    if (at(MUL)) {
      advance();
    }
 else {
      parseTypeRef();
    }
    projection.done(TYPE_PROJECTION);
    if (!at(COMMA))     break;
    advance();
  }
  expect(GT,"Expecting a '>'");
  myBuilder.restoreNewlinesState();
  list.done(TYPE_ARGUMENT_LIST);
  return list;
}
