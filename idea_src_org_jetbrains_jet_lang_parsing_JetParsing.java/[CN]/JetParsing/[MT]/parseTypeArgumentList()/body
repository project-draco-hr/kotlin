{
  if (!at(LT))   return null;
  PsiBuilder.Marker list=mark();
  myBuilder.disableNewlines();
  advance();
  while (true) {
    PsiBuilder.Marker projection=mark();
    TokenDetector projectionDetector=new TokenDetector(TokenSet.create(IN_KEYWORD,OUT_KEYWORD));
    parseModifierList(projectionDetector);
    if (at(MUL)) {
      if (projectionDetector.isDetected()) {
        errorAndAdvance("The '*' projection cannot be marked 'in' or 'out'");
      }
 else {
        advance();
      }
    }
 else {
      parseTypeRef();
    }
    projection.done(TYPE_PROJECTION);
    if (!at(COMMA))     break;
    advance();
  }
  expect(GT,"Expecting a '>'");
  myBuilder.restoreNewlinesState();
  list.done(TYPE_ARGUMENT_LIST);
  return list;
}
