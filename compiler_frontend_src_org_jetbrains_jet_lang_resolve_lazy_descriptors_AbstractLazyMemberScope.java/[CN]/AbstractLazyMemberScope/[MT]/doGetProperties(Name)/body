{
  Set<VariableDescriptor> result=Sets.newLinkedHashSet();
  Collection<JetProperty> declarations=declarationProvider.getPropertyDeclarations(name);
  for (  JetProperty propertyDeclaration : declarations) {
    JetScope resolutionScope=getScopeForMemberDeclarationResolution(propertyDeclaration);
    PropertyDescriptor propertyDescriptor=resolveSession.getInjector().getDescriptorResolver().resolvePropertyDescriptor(thisDescriptor,resolutionScope,propertyDeclaration,resolveSession.getTrace(),DataFlowInfo.EMPTY);
    result.add(propertyDescriptor);
    resolveSession.getInjector().getAnnotationResolver().resolveAnnotationsArguments(propertyDescriptor,resolveSession.getTrace(),resolutionScope);
  }
  Collection<JetClassOrObject> classOrObjectDeclarations=declarationProvider.getClassOrObjectDeclarations(name);
  for (  JetClassOrObject classOrObjectDeclaration : classOrObjectDeclarations) {
    if (declaresObjectOrEnumConstant(classOrObjectDeclaration)) {
      ClassDescriptor classifier=getObjectDescriptor(name);
      if (classifier == null) {
        throw new IllegalStateException("Object declaration " + name + " found in the DeclarationProvider "+ declarationProvider+ " but not in the scope "+ this);
      }
      VariableDescriptor propertyDescriptor=resolveSession.getInjector().getDescriptorResolver().resolveObjectDeclaration(thisDescriptor,classOrObjectDeclaration,classifier,resolveSession.getTrace());
      result.add(propertyDescriptor);
    }
  }
  getNonDeclaredProperties(name,result);
  return result;
}
