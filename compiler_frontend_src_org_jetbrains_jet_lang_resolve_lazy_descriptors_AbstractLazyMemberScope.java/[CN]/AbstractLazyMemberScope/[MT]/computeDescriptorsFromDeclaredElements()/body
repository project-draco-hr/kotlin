{
  List<JetDeclaration> declarations=declarationProvider.getAllDeclarations();
  ArrayList<DeclarationDescriptor> result=new ArrayList<DeclarationDescriptor>(declarations.size());
  for (  JetDeclaration declaration : declarations) {
    if (declaration instanceof JetClassOrObject) {
      JetClassOrObject classOrObject=(JetClassOrObject)declaration;
      result.addAll(classDescriptors.invoke(safeNameForLazyResolve(classOrObject.getNameAsName())));
    }
 else     if (declaration instanceof JetFunction) {
      JetFunction function=(JetFunction)declaration;
      result.addAll(getFunctions(safeNameForLazyResolve(function)));
    }
 else     if (declaration instanceof JetProperty) {
      JetProperty property=(JetProperty)declaration;
      result.addAll(getProperties(safeNameForLazyResolve(property)));
    }
 else     if (declaration instanceof JetParameter) {
      JetParameter parameter=(JetParameter)declaration;
      result.addAll(getProperties(safeNameForLazyResolve(parameter)));
    }
 else     if (declaration instanceof JetTypedef || declaration instanceof JetMultiDeclaration) {
    }
 else {
      throw new IllegalArgumentException("Unsupported declaration kind: " + declaration);
    }
  }
  result.trimToSize();
  return result;
}
