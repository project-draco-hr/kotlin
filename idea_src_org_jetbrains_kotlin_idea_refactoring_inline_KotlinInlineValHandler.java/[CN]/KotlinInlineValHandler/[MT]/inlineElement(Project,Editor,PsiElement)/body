{
  final JetProperty val=(JetProperty)element;
  final JetFile file=val.getContainingJetFile();
  String name=val.getName();
  JetExpression initializerInDeclaration=val.getInitializer();
  final List<JetExpression> referenceExpressions=findReferenceExpressions(val);
  final Set<PsiElement> assignments=Sets.newHashSet();
  for (  JetExpression expression : referenceExpressions) {
    PsiElement parent=expression.getParent();
    if (parent instanceof JetBinaryExpression && ((JetBinaryExpression)parent).getOperationToken() == JetTokens.EQ && ((JetBinaryExpression)parent).getLeft() == expression) {
      assignments.add(parent);
    }
  }
  final JetExpression initializer;
  if (initializerInDeclaration != null) {
    initializer=initializerInDeclaration;
  }
 else {
    if (assignments.size() == 1) {
      initializer=((JetBinaryExpression)assignments.iterator().next()).getRight();
    }
 else {
      initializer=null;
    }
    if (initializer == null) {
      String key=assignments.isEmpty() ? "variable.has.no.initializer" : "variable.has.no.dominating.definition";
      String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message(key,name));
      CommonRefactoringUtil.showErrorHint(project,editor,message,RefactoringBundle.message("inline.variable.title"),HelpID.INLINE_VARIABLE);
      return;
    }
  }
  final String typeArgumentsForCall=getTypeArgumentsStringForCall(initializer);
  final String parametersForFunctionLiteral=getParametersForFunctionLiteral(initializer);
  final boolean canHighlight=KotlinPackage.all(referenceExpressions,new Function1<JetExpression,Boolean>(){
    @Override public Boolean invoke(    JetExpression expression){
      return expression.getContainingFile() == file;
    }
  }
);
  if (canHighlight) {
    highlightExpressions(project,editor,referenceExpressions);
  }
  if (!showDialog(project,name,referenceExpressions)) {
    if (canHighlight) {
      StatusBar statusBar=WindowManager.getInstance().getStatusBar(project);
      if (statusBar != null) {
        statusBar.setInfo(RefactoringBundle.message("press.escape.to.remove.the.highlighting"));
      }
    }
    return;
  }
  final List<JetExpression> inlinedExpressions=Lists.newArrayList();
  CommandProcessor.getInstance().executeCommand(project,new Runnable(){
    @Override public void run(){
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        @Override public void run(){
          for (          JetExpression referenceExpression : referenceExpressions) {
            if (assignments.contains(referenceExpression.getParent())) {
              continue;
            }
            inlinedExpressions.add(replaceExpression(referenceExpression,initializer));
          }
          for (          PsiElement assignment : assignments) {
            assignment.delete();
          }
          val.delete();
          if (typeArgumentsForCall != null) {
            addTypeArguments(typeArgumentsForCall,inlinedExpressions);
          }
          if (parametersForFunctionLiteral != null) {
            addFunctionLiteralParameterTypes(parametersForFunctionLiteral,inlinedExpressions);
          }
          if (canHighlight) {
            highlightExpressions(project,editor,inlinedExpressions);
          }
        }
      }
);
    }
  }
,RefactoringBundle.message("inline.command",name),null);
}
