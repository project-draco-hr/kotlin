{
  BindingContext context=ResolutionUtils.analyze(initializer,BodyResolveMode.FULL);
  ResolvedCall<?> call=CallUtilKt.getResolvedCall(initializer,context);
  if (call == null)   return null;
  List<KotlinType> typeArguments=Lists.newArrayList();
  Map<TypeParameterDescriptor,KotlinType> typeArgumentMap=call.getTypeArguments();
  for (  TypeParameterDescriptor typeParameter : call.getCandidateDescriptor().getTypeParameters()) {
    typeArguments.add(typeArgumentMap.get(typeParameter));
  }
  return StringUtil.join(typeArguments,new Function<KotlinType,String>(){
    @Override public String fun(    KotlinType type){
      return IdeDescriptorRenderers.SOURCE_CODE_FOR_TYPE_ARGUMENTS.renderType(type);
    }
  }
,", ");
}
