{
  String relativePath=notNull(quickFixTestCase.getBasePath(),"") + "/" + StringsKt.decapitalize(testName);
  final String testFullPath=quickFixTestCase.getTestDataPath().replace(File.separatorChar,'/') + relativePath;
  final File testFile=new File(testFullPath);
  CommandProcessor.getInstance().executeCommand(quickFixTestCase.getProject(),new Runnable(){
    @SuppressWarnings({"AssignmentToStaticFieldFromInstanceMethod","CallToPrintStackTrace"}) @Override public void run(){
      String fileText="";
      String expectedErrorMessage="";
      List<String> fixtureClasses=Collections.emptyList();
      try {
        fileText=FileUtil.loadFile(testFile,CharsetToolkit.UTF8_CHARSET);
        fixtureClasses=InTextDirectivesUtils.findListWithPrefixes(fileText,"// FIXTURE_CLASS: ");
        for (        String fixtureClass : fixtureClasses) {
          TestFixtureExtension.Companion.loadFixture(fixtureClass,getModule());
        }
        expectedErrorMessage=InTextDirectivesUtils.findStringWithPrefixes(fileText,"// SHOULD_FAIL_WITH: ");
        String contents=StringUtil.convertLineSeparators(fileText);
        quickFixTestCase.configureFromFileText(testFile.getName(),contents);
        quickFixTestCase.bringRealEditorBack();
        checkForUnexpectedActions();
        configExtra(fileText);
        applyAction(contents,quickFixTestCase,testName,testFullPath);
        assertEmpty(expectedErrorMessage);
      }
 catch (      FileComparisonFailure e) {
        throw e;
      }
catch (      AssertionError e) {
        throw e;
      }
catch (      Throwable e) {
        if (expectedErrorMessage == null || !expectedErrorMessage.equals(e.getMessage())) {
          e.printStackTrace();
          fail(testName);
        }
      }
 finally {
        for (        String fixtureClass : fixtureClasses) {
          TestFixtureExtension.Companion.unloadFixture(fixtureClass);
        }
        ConfigLibraryUtil.unconfigureLibrariesByDirective(getModule(),fileText);
      }
    }
  }
,"","");
}
