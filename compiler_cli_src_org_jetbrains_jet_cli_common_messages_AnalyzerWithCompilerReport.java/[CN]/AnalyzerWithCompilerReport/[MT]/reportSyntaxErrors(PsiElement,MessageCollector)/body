{
class ErrorReportingVisitor extends AnalyzingUtils.PsiErrorElementVisitor {
    boolean hasErrors=false;
    boolean onlyErrorAtEof=false;
    private <E extends PsiElement>void reportDiagnostic(    E element,    DiagnosticFactory0<E> factory,    String message){
      MyDiagnostic<?> diagnostic=new MyDiagnostic<E>(element,factory,message);
      AnalyzerWithCompilerReport.reportDiagnostic(diagnostic,messageCollector);
      if (element.getTextRange().getStartOffset() == file.getTextRange().getEndOffset()) {
        onlyErrorAtEof=!hasErrors;
      }
      hasErrors=true;
    }
    @Override public void visitErrorElement(    PsiErrorElement element){
      String description=element.getErrorDescription();
      reportDiagnostic(element,SYNTAX_ERROR_FACTORY,StringUtil.isEmpty(description) ? "Syntax error" : description);
    }
  }
  ErrorReportingVisitor visitor=new ErrorReportingVisitor();
  file.accept(visitor);
  return new SyntaxErrorReport(visitor.hasErrors,visitor.onlyErrorAtEof);
}
