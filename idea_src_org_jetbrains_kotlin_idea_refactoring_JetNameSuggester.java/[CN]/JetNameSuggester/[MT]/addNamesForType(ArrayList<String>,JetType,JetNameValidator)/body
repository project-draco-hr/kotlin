{
  KotlinBuiltIns builtIns=KotlinBuiltIns.getInstance();
  JetTypeChecker typeChecker=JetTypeChecker.DEFAULT;
  jetType=TypeUtils.makeNotNullable(jetType);
  if (ErrorUtils.containsErrorType(jetType))   return;
  if (typeChecker.equalTypes(builtIns.getBooleanType(),jetType)) {
    addName(result,"b",validator);
  }
 else   if (typeChecker.equalTypes(builtIns.getIntType(),jetType)) {
    addName(result,"i",validator);
  }
 else   if (typeChecker.equalTypes(builtIns.getByteType(),jetType)) {
    addName(result,"byte",validator);
  }
 else   if (typeChecker.equalTypes(builtIns.getLongType(),jetType)) {
    addName(result,"l",validator);
  }
 else   if (typeChecker.equalTypes(builtIns.getFloatType(),jetType)) {
    addName(result,"fl",validator);
  }
 else   if (typeChecker.equalTypes(builtIns.getDoubleType(),jetType)) {
    addName(result,"d",validator);
  }
 else   if (typeChecker.equalTypes(builtIns.getShortType(),jetType)) {
    addName(result,"sh",validator);
  }
 else   if (typeChecker.equalTypes(builtIns.getCharType(),jetType)) {
    addName(result,"c",validator);
  }
 else   if (typeChecker.equalTypes(builtIns.getStringType(),jetType)) {
    addName(result,"s",validator);
  }
 else   if (KotlinBuiltIns.isArray(jetType) || KotlinBuiltIns.isPrimitiveArray(jetType)) {
    JetType elementType=KotlinBuiltIns.getInstance().getArrayElementType(jetType);
    if (typeChecker.equalTypes(builtIns.getBooleanType(),elementType)) {
      addName(result,"booleans",validator);
    }
 else     if (typeChecker.equalTypes(builtIns.getIntType(),elementType)) {
      addName(result,"ints",validator);
    }
 else     if (typeChecker.equalTypes(builtIns.getByteType(),elementType)) {
      addName(result,"bytes",validator);
    }
 else     if (typeChecker.equalTypes(builtIns.getLongType(),elementType)) {
      addName(result,"longs",validator);
    }
 else     if (typeChecker.equalTypes(builtIns.getFloatType(),elementType)) {
      addName(result,"floats",validator);
    }
 else     if (typeChecker.equalTypes(builtIns.getDoubleType(),elementType)) {
      addName(result,"doubles",validator);
    }
 else     if (typeChecker.equalTypes(builtIns.getShortType(),elementType)) {
      addName(result,"shorts",validator);
    }
 else     if (typeChecker.equalTypes(builtIns.getCharType(),elementType)) {
      addName(result,"chars",validator);
    }
 else     if (typeChecker.equalTypes(builtIns.getStringType(),elementType)) {
      addName(result,"strings",validator);
    }
 else {
      ClassDescriptor classDescriptor=TypeUtils.getClassDescriptor(elementType);
      if (classDescriptor != null) {
        Name className=classDescriptor.getName();
        addName(result,"arrayOf" + StringUtil.capitalize(className.asString()) + "s",validator);
      }
    }
  }
 else {
    addForClassType(result,jetType,validator);
  }
}
