{
  if (!source.exists()) {
    throw new AssertionError(source + " doesn't exist");
  }
  JarFile sourceJar=new JarFile(source);
  JarOutputStream targetJar=new JarOutputStream(new FileOutputStream(target));
  List<String> foundEntries=Lists.newArrayList();
  List<JarEntry> sourceList=Collections.list(sourceJar.entries());
  for (  JarEntry entry : sourceList) {
    String topLevelClassFile=entry.getName().replaceAll("\\$.+\\.class$",".class");
    if (entryNamesToInclude.contains(topLevelClassFile)) {
      targetJar.putNextEntry(new ZipEntry(entry.getName()));
      FileUtil.copy(sourceJar.getInputStream(entry),targetJar);
      foundEntries.add(topLevelClassFile);
    }
  }
  targetJar.close();
  sourceJar.close();
  if (assertAllFound) {
    HashSet<String> notFound=Sets.newHashSet(entryNamesToInclude);
    notFound.removeAll(foundEntries);
    if (!notFound.isEmpty()) {
      System.err.println("Not found:");
      for (      String entry : notFound) {
        System.err.println(entry);
      }
      throw new AssertionError("See errors above");
    }
  }
}
