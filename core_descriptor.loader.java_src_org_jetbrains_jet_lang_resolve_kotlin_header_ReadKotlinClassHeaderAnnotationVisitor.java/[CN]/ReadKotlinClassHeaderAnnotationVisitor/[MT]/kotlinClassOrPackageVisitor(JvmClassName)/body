{
  return new AnnotationArgumentVisitor(){
    @Override public void visit(    @Nullable Name name,    @Nullable Object value){
      visitIntValueForSupportedAnnotation(name,value,annotationClassName);
    }
    @Override public void visitEnum(    @NotNull Name name,    @NotNull JvmClassName enumClassName,    @NotNull Name enumEntryName){
      unexpectedArgument(name,annotationClassName);
    }
    @Override @Nullable public AnnotationArrayArgumentVisitor visitArray(    @NotNull Name name){
      if (name.asString().equals(DATA_FIELD_NAME)) {
        return stringArrayVisitor();
      }
 else       if (isAbiVersionCompatible(version)) {
        throw new IllegalStateException("Unexpected array argument " + name + " for annotation "+ annotationClassName);
      }
      return null;
    }
    @NotNull private AnnotationArrayArgumentVisitor stringArrayVisitor(){
      final List<String> strings=new ArrayList<String>(1);
      return new AnnotationArrayArgumentVisitor(){
        @Override public void visit(        @Nullable Object value){
          if (!(value instanceof String)) {
            throw new IllegalStateException("Unexpected argument value: " + value);
          }
          strings.add((String)value);
        }
        @Override public void visitEnum(        @NotNull JvmClassName enumClassName,        @NotNull Name enumEntryName){
          unexpectedArgument(null,annotationClassName);
        }
        @Override public void visitEnd(){
          annotationData=strings.toArray(new String[strings.size()]);
        }
      }
;
    }
    @Override public void visitEnd(){
    }
  }
;
}
