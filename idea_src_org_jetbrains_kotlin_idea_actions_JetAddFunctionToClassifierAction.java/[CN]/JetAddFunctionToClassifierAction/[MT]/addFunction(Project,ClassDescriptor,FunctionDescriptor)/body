{
  final String signatureString=IdeDescriptorRenderers.SOURCE_CODE.render(functionDescriptor);
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  final JetClass classifierDeclaration=(JetClass)DescriptorToSourceUtilsIde.INSTANCE$.getAnyDeclaration(project,typeDescriptor);
  CommandProcessor.getInstance().executeCommand(project,new Runnable(){
    @Override public void run(){
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        @Override public void run(){
          JetPsiFactory psiFactory=JetPsiFactory(classifierDeclaration);
          JetClassBody body=classifierDeclaration.getOrCreateBody();
          String functionBody="";
          if (typeDescriptor.getKind() != ClassKind.INTERFACE && functionDescriptor.getModality() != Modality.ABSTRACT) {
            functionBody="{}";
            JetType returnType=functionDescriptor.getReturnType();
            if (returnType == null || !KotlinBuiltIns.isUnit(returnType)) {
              functionBody="{ throw UnsupportedOperationException() }";
            }
          }
          JetNamedFunction functionElement=psiFactory.createFunction(signatureString + functionBody);
          PsiElement anchor=body.getRBrace();
          JetNamedFunction insertedFunctionElement=(JetNamedFunction)body.addBefore(functionElement,anchor);
          ShortenReferences.DEFAULT.process(insertedFunctionElement);
        }
      }
);
    }
  }
,JetBundle.message("add.function.to.type.action"),null);
}
