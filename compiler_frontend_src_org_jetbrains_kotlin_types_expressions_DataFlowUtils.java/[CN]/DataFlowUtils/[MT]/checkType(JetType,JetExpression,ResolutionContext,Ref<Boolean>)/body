{
  if (hasError != null)   hasError.set(false);
  final JetExpression expression=JetPsiUtil.safeDeparenthesize(expressionToCheck,false);
  recordExpectedType(c.trace,expression,c.expectedType);
  if (expressionType == null)   return null;
  if (noExpectedType(c.expectedType) || !c.expectedType.getConstructor().isDenotable() || JetTypeChecker.DEFAULT.isSubtypeOf(expressionType,c.expectedType)) {
    if (!noExpectedType(c.expectedType)) {
      Approximation.Info approximationInfo=TypesPackage.getApproximationTo(expressionType,c.expectedType,new Approximation.DataFlowExtras(){
        private DataFlowValue getDataFlowValue(){
          return DataFlowValueFactory.createDataFlowValue(expression,expressionType,c.trace.getBindingContext());
        }
        @Override public boolean getCanBeNull(){
          return c.dataFlowInfo.getNullability(getDataFlowValue()).canBeNull();
        }
        @Override public Set<JetType> getPossibleTypes(){
          return c.dataFlowInfo.getPossibleTypes(getDataFlowValue());
        }
        @NotNull @Override public String getPresentableText(){
          return StringUtil.trimMiddle(expression.getText(),50);
        }
      }
);
      if (approximationInfo != null) {
        c.trace.record(BindingContext.EXPRESSION_RESULT_APPROXIMATION,expression,approximationInfo);
      }
    }
    return expressionType;
  }
  if (expression instanceof JetConstantExpression) {
    CompileTimeConstant<?> value=ConstantExpressionEvaluator.OBJECT$.evaluate(expression,c.trace,c.expectedType);
    if (value instanceof IntegerValueTypeConstant) {
      value=EvaluatePackage.createCompileTimeConstantWithType((IntegerValueTypeConstant)value,c.expectedType);
    }
    boolean error=new CompileTimeConstantChecker(c.trace,true).checkConstantExpressionType(value,(JetConstantExpression)expression,c.expectedType);
    if (hasError != null)     hasError.set(error);
    return expressionType;
  }
  DataFlowValue dataFlowValue=DataFlowValueFactory.createDataFlowValue(expression,expressionType,c.trace.getBindingContext());
  for (  JetType possibleType : c.dataFlowInfo.getPossibleTypes(dataFlowValue)) {
    if (JetTypeChecker.DEFAULT.isSubtypeOf(possibleType,c.expectedType)) {
      SmartCastUtils.recordCastOrError(expression,possibleType,c.trace,dataFlowValue.isStableIdentifier(),false);
      return possibleType;
    }
  }
  c.trace.report(TYPE_MISMATCH.on(expression,c.expectedType,expressionType));
  if (hasError != null)   hasError.set(true);
  return expressionType;
}
