{
  for (  JetDeclaration declaration : declarations) {
    declaration.accept(new JetVisitorVoid(){
      @Override public void visitNamedFunction(      @NotNull JetNamedFunction function){
        SimpleFunctionDescriptor functionDescriptor=descriptorResolver.resolveFunctionDescriptor(packageLike.getOwnerForChildren(),scopeForFunctions,function,trace,c.getOuterDataFlowInfo());
        packageLike.addFunctionDescriptor(functionDescriptor);
        c.getFunctions().put(function,functionDescriptor);
        c.registerDeclaringScope(function,scopeForFunctions);
      }
      @Override public void visitProperty(      @NotNull JetProperty property){
        PropertyDescriptor propertyDescriptor=descriptorResolver.resolvePropertyDescriptor(packageLike.getOwnerForChildren(),scopeForPropertyInitializers,property,trace,c.getOuterDataFlowInfo());
        packageLike.addPropertyDescriptor(propertyDescriptor);
        c.getProperties().put(property,propertyDescriptor);
        c.registerDeclaringScope(property,scopeForPropertyInitializers);
        JetPropertyAccessor getter=property.getGetter();
        if (getter != null) {
          c.registerDeclaringScope(getter,scopeForPropertyAccessors);
        }
        JetPropertyAccessor setter=property.getSetter();
        if (setter != null) {
          c.registerDeclaringScope(setter,scopeForPropertyAccessors);
        }
      }
    }
);
  }
}
