{
  if (classDescriptor.getKind() == ClassKind.TRAIT) {
    JetParameterList primaryConstructorParameterList=klass.getPrimaryConstructorParameterList();
    if (primaryConstructorParameterList != null) {
      trace.report(CONSTRUCTOR_IN_TRAIT.on(primaryConstructorParameterList));
    }
    if (!klass.hasPrimaryConstructor())     return;
  }
  JetScope memberScope=classDescriptor.getScopeForSupertypeResolution();
  ConstructorDescriptor constructorDescriptor=descriptorResolver.resolvePrimaryConstructorDescriptor(memberScope,classDescriptor,klass,trace);
  for (  JetParameter parameter : klass.getPrimaryConstructorParameters()) {
    if (parameter.getValOrVarNode() != null) {
      PropertyDescriptor propertyDescriptor=descriptorResolver.resolvePrimaryConstructorParameterToAProperty(classDescriptor,memberScope,parameter,trace);
      classDescriptor.addPropertyDescriptor(propertyDescriptor);
      context.getPrimaryConstructorParameterProperties().put(parameter,propertyDescriptor);
    }
  }
  if (constructorDescriptor != null) {
    classDescriptor.setPrimaryConstructor(constructorDescriptor,trace);
  }
}
