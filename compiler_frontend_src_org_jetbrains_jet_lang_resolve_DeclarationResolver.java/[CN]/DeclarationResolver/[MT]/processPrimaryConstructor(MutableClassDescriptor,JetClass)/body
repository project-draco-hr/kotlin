{
  if (!klass.hasPrimaryConstructor())   return;
  if (classDescriptor.getKind() == ClassKind.TRAIT) {
    context.getTrace().getErrorHandler().genericError(klass.getPrimaryConstructorParameterList().getNode(),"A trait may not have a constructor");
  }
  JetScope memberScope=classDescriptor.getScopeForSupertypeResolution();
  ConstructorDescriptor constructorDescriptor=context.getClassDescriptorResolver().resolvePrimaryConstructorDescriptor(memberScope,classDescriptor,klass);
  for (  JetParameter parameter : klass.getPrimaryConstructorParameters()) {
    PropertyDescriptor propertyDescriptor=context.getClassDescriptorResolver().resolvePrimaryConstructorParameterToAProperty(classDescriptor,memberScope,parameter);
    classDescriptor.addPropertyDescriptor(propertyDescriptor);
    context.getPrimaryConstructorParameterProperties().add(propertyDescriptor);
  }
  if (constructorDescriptor != null) {
    classDescriptor.setPrimaryConstructor(constructorDescriptor);
  }
}
