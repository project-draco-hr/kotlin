{
  for (  Map.Entry<JetFile,WritableScope> entry : c.getFileScopes().entrySet()) {
    JetFile file=entry.getKey();
    WritableScope fileScope=entry.getValue();
    PackageLikeBuilder packageBuilder=c.getPackageFragments().get(file).getBuilder();
    resolveFunctionAndPropertyHeaders(c,file.getDeclarations(),fileScope,fileScope,fileScope,packageBuilder);
  }
  for (  Map.Entry<JetClassOrObject,ClassDescriptorWithResolutionScopes> entry : c.getClasses().entrySet()) {
    JetClassOrObject classOrObject=entry.getKey();
    MutableClassDescriptor classDescriptor=(MutableClassDescriptor)entry.getValue();
    JetClassBody jetClassBody=classOrObject.getBody();
    if (classDescriptor.getKind() == ClassKind.ANNOTATION_CLASS && jetClassBody != null) {
      trace.report(ANNOTATION_CLASS_WITH_BODY.on(jetClassBody));
    }
    resolveFunctionAndPropertyHeaders(c,classOrObject.getDeclarations(),classDescriptor.getScopeForMemberDeclarationResolution(),classDescriptor.getScopeForInitializerResolution(),classDescriptor.getScopeForMemberDeclarationResolution(),classDescriptor.getBuilder());
  }
  scriptHeaderResolver.resolveScriptDeclarations(c);
}
