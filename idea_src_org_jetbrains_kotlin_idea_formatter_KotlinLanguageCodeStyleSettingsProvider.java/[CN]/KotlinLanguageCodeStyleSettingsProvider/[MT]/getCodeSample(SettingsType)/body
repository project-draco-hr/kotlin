{
switch (settingsType) {
case WRAPPING_AND_BRACES_SETTINGS:
    return "public class ThisIsASampleClass {\n" + "    fun foo1(i1: Int, i2: Int, i3: Int) : Int {\n" + "        when (i1) {\n"+ "            is Number -> 0\n"+ "            else -> 1\n"+ "        }\n"+ "        return 0\n"+ "    }\n"+ "    private fun foo2():Int {\n"+ "// todo: something\n"+ "        try {"+ "            return foo1(12, 13, 14)\n"+ "        }"+ "        catch (e: Exception) {"+ "            return 0"+ "        }"+ "        finally {"+ "           if (true) {"+ "               return 1"+ "           }"+ "           else {"+ "               return 2"+ "           }"+ "        }"+ "    }\n"+ "    private val f = {(a: Int)->a*2}\n"+ "}";
default :
  return "open class Some {\n" + "    private val f: (Int)->Int = { (a: Int) -> a * 2 }\n" + "    fun foo(): Int {\n"+ "        val test: Int = 12\n"+ "        for (i in 10..42) {\n"+ "            println (when {\n"+ "                i < test -> -1\n"+ "                i > test -> 1\n"+ "                else -> 0\n"+ "            })\n"+ "        }\n"+ "        return test\n"+ "    }\n"+ "    private fun <T>foo2(): Int where T : List<T> {\n"+ "        return 0\n"+ "    }\n"+ "}\n"+ "class AnotherClass<T : Any> : Some()\n";
}
}
