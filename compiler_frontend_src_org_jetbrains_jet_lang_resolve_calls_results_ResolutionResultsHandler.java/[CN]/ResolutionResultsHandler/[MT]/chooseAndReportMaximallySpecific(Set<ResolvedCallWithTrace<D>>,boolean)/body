{
  if (candidates.size() == 1) {
    return OverloadResolutionResultsImpl.success(candidates.iterator().next());
  }
  Set<ResolvedCallWithTrace<D>> cleanCandidates=Sets.newLinkedHashSet(candidates);
  for (Iterator<ResolvedCallWithTrace<D>> iterator=cleanCandidates.iterator(); iterator.hasNext(); ) {
    ResolvedCallWithTrace<D> candidate=iterator.next();
    if (candidate.isDirty()) {
      iterator.remove();
    }
  }
  if (cleanCandidates.isEmpty()) {
    cleanCandidates=candidates;
  }
  ResolvedCallWithTrace<D> maximallySpecific=OverloadingConflictResolver.INSTANCE.findMaximallySpecific(cleanCandidates,false);
  if (maximallySpecific != null) {
    return OverloadResolutionResultsImpl.success(maximallySpecific);
  }
  if (discriminateGenerics) {
    ResolvedCallWithTrace<D> maximallySpecificGenericsDiscriminated=OverloadingConflictResolver.INSTANCE.findMaximallySpecific(cleanCandidates,true);
    if (maximallySpecificGenericsDiscriminated != null) {
      return OverloadResolutionResultsImpl.success(maximallySpecificGenericsDiscriminated);
    }
  }
  Set<ResolvedCallWithTrace<D>> noOverrides=OverridingUtil.filterOverrides(candidates,MAP_TO_RESULT);
  if (noOverrides.size() == 1) {
    return OverloadResolutionResultsImpl.success(noOverrides.iterator().next());
  }
  return OverloadResolutionResultsImpl.ambiguity(noOverrides);
}
