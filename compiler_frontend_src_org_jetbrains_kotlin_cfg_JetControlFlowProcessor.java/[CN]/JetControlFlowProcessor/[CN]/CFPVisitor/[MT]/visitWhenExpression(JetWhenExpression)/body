{
  mark(expression);
  JetExpression subjectExpression=expression.getSubjectExpression();
  if (subjectExpression != null) {
    generateInstructions(subjectExpression);
  }
  List<JetExpression> branches=new ArrayList<JetExpression>();
  Label doneLabel=builder.createUnboundLabel("after 'when' expression");
  Label nextLabel=null;
  for (Iterator<JetWhenEntry> iterator=expression.getEntries().iterator(); iterator.hasNext(); ) {
    JetWhenEntry whenEntry=iterator.next();
    mark(whenEntry);
    boolean isElse=whenEntry.isElse();
    if (isElse) {
      if (iterator.hasNext()) {
        trace.report(ELSE_MISPLACED_IN_WHEN.on(whenEntry));
      }
    }
    Label bodyLabel=builder.createUnboundLabel("'when' entry body");
    JetWhenCondition[] conditions=whenEntry.getConditions();
    for (int i=0; i < conditions.length; i++) {
      JetWhenCondition condition=conditions[i];
      condition.accept(conditionVisitor);
      if (i + 1 < conditions.length) {
        builder.nondeterministicJump(bodyLabel,expression,builder.getBoundValue(condition));
      }
    }
    if (!isElse) {
      nextLabel=builder.createUnboundLabel("next 'when' entry");
      JetWhenCondition lastCondition=ArraysKt.lastOrNull(conditions);
      builder.nondeterministicJump(nextLabel,expression,builder.getBoundValue(lastCondition));
    }
    builder.bindLabel(bodyLabel);
    JetExpression whenEntryExpression=whenEntry.getExpression();
    if (whenEntryExpression != null) {
      generateInstructions(whenEntryExpression);
      branches.add(whenEntryExpression);
    }
    builder.jump(doneLabel,expression);
    if (!isElse) {
      builder.bindLabel(nextLabel);
      if (!iterator.hasNext() && WhenChecker.isWhenExhaustive(expression,trace)) {
        builder.jumpToError(expression);
      }
    }
  }
  builder.bindLabel(doneLabel);
  mergeValues(branches,expression);
}
