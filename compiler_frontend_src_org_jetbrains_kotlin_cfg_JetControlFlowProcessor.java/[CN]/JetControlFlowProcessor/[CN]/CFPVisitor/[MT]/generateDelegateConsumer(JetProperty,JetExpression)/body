{
  DeclarationDescriptor descriptor=trace.get(BindingContext.DECLARATION_TO_DESCRIPTOR,property);
  if (!(descriptor instanceof PropertyDescriptor))   return;
  PseudoValue delegateValue=builder.getBoundValue(delegate);
  if (delegateValue == null)   return;
  List<TypePredicate> typePredicates=KotlinPackage.map(((PropertyDescriptor)descriptor).getAccessors(),new Function1<PropertyAccessorDescriptor,TypePredicate>(){
    @Override public TypePredicate invoke(    PropertyAccessorDescriptor descriptor){
      return getTypePredicateByReceiverValue(trace.get(BindingContext.DELEGATED_PROPERTY_RESOLVED_CALL,descriptor));
    }
  }
);
  Map<PseudoValue,TypePredicate> valuesToTypePredicates=SmartFMap.<PseudoValue,TypePredicate>emptyMap().plus(delegateValue,PseudocodePackage.and(KotlinPackage.filterNotNull(typePredicates)));
  builder.magic(property,null,Collections.singletonList(delegateValue),valuesToTypePredicates,MagicKind.VALUE_CONSUMER);
}
