{
  element.acceptChildren(new JetVisitorVoid(){
    @Override public void visitJetElement(    JetElement element){
      super.visitJetElement(element);
      element.acceptChildren(this);
    }
    @Override public void visitObjectLiteralExpression(    JetObjectLiteralExpression expression){
      typeMapper.classNameForAnonymousClass(expression.getObjectDeclaration());
    }
    @Override public void visitFunctionLiteralExpression(    JetFunctionLiteralExpression expression){
      typeMapper.classNameForAnonymousClass(expression.getFunctionLiteral());
    }
  }
);
}
