{
  if (context == null || context.getParameterOwner() == null || !context.getParameterOwner().isValid()) {
    return;
  }
  PsiElement parameterOwner=context.getParameterOwner();
  if (!(parameterOwner instanceof JetValueArgumentList)) {
    return;
  }
  JetValueArgumentList argumentList=(JetValueArgumentList)parameterOwner;
  if (!(descriptor instanceof FunctionDescriptor)) {
    context.setUIComponentEnabled(false);
    return;
  }
  FunctionDescriptor functionDescriptor=(FunctionDescriptor)descriptor;
  JetFile file=(JetFile)argumentList.getContainingFile();
  BindingContext bindingContext=AnalyzerFacadeWithCache.analyzeFileWithCache(file).getBindingContext();
  List<ValueParameterDescriptor> valueParameters=functionDescriptor.getValueParameters();
  List<JetValueArgument> valueArguments=argumentList.getArguments();
  StringBuilder builder=new StringBuilder();
  int currentParameterIndex=context.getCurrentParameterIndex();
  int boldStartOffset=-1;
  int boldEndOffset=-1;
  boolean isGrey=false;
  boolean isDeprecated=false;
  boolean[] usedIndexes=new boolean[valueParameters.size()];
  boolean namedMode=false;
  Arrays.fill(usedIndexes,false);
  if ((currentParameterIndex >= valueParameters.size() && (valueParameters.size() > 0 || currentParameterIndex > 0)) && (valueParameters.size() == 0 || valueParameters.get(valueParameters.size() - 1).getVarargElementType() == null)) {
    isGrey=true;
  }
  if (valueParameters.size() == 0) {
    builder.append(CodeInsightBundle.message("parameter.info.no.parameters"));
  }
  for (int i=0; i < valueParameters.size(); ++i) {
    if (i != 0) {
      builder.append(", ");
    }
    boolean highlightParameter=i == currentParameterIndex || (!namedMode && i < currentParameterIndex && valueParameters.get(valueParameters.size() - 1).getVarargElementType() != null);
    if (highlightParameter) {
      boldStartOffset=builder.length();
    }
    if (!namedMode) {
      if (valueArguments.size() > i) {
        JetValueArgument argument=valueArguments.get(i);
        if (argument.isNamed()) {
          namedMode=true;
        }
 else {
          ValueParameterDescriptor param=valueParameters.get(i);
          builder.append(renderParameter(param,false,bindingContext));
          if (i < currentParameterIndex) {
            if (argument.getArgumentExpression() != null) {
              JetType paramType=getActualParameterType(param);
              JetType exprType=bindingContext.get(BindingContext.EXPRESSION_TYPE,argument.getArgumentExpression());
              if (exprType != null && !JetTypeChecker.INSTANCE.isSubtypeOf(exprType,paramType)) {
                isGrey=true;
              }
            }
 else {
              isGrey=true;
            }
          }
          usedIndexes[i]=true;
        }
      }
 else {
        ValueParameterDescriptor param=valueParameters.get(i);
        builder.append(renderParameter(param,false,bindingContext));
      }
    }
    if (namedMode) {
      boolean takeAnyArgument=true;
      if (valueArguments.size() > i) {
        JetValueArgument argument=valueArguments.get(i);
        if (argument.isNamed()) {
          for (int j=0; j < valueParameters.size(); ++j) {
            JetSimpleNameExpression referenceExpression=argument.getArgumentName().getReferenceExpression();
            ValueParameterDescriptor param=valueParameters.get(j);
            if (referenceExpression != null && !usedIndexes[j] && param.getName().equals(referenceExpression.getReferencedNameAsName())) {
              takeAnyArgument=false;
              usedIndexes[j]=true;
              builder.append(renderParameter(param,true,bindingContext));
              if (i < currentParameterIndex) {
                if (argument.getArgumentExpression() != null) {
                  JetType paramType=getActualParameterType(param);
                  JetType exprType=bindingContext.get(BindingContext.EXPRESSION_TYPE,argument.getArgumentExpression());
                  if (exprType != null && !JetTypeChecker.INSTANCE.isSubtypeOf(exprType,paramType))                   isGrey=true;
                }
 else {
                  isGrey=true;
                }
              }
              break;
            }
          }
        }
      }
      if (takeAnyArgument) {
        if (i < currentParameterIndex) {
          isGrey=true;
        }
        for (int j=0; j < valueParameters.size(); ++j) {
          ValueParameterDescriptor param=valueParameters.get(j);
          if (!usedIndexes[j]) {
            usedIndexes[j]=true;
            builder.append(renderParameter(param,true,bindingContext));
            break;
          }
        }
      }
    }
    if (highlightParameter) {
      boldEndOffset=builder.length();
    }
  }
  Color color=getBackgroundColor(context,argumentList,functionDescriptor,bindingContext);
  if (builder.toString().isEmpty()) {
    context.setUIComponentEnabled(false);
  }
 else {
    context.setupUIComponentPresentation(builder.toString(),boldStartOffset,boldEndOffset,isGrey,isDeprecated,false,color);
  }
}
