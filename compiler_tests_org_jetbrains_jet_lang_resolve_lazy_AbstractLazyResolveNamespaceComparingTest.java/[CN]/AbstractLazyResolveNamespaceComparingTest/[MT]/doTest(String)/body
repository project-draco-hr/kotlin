{
  List<JetFile> files=JetTestUtils.createTestFiles(testFileName,FileUtil.loadFile(new File(testFileName),true),new JetTestUtils.TestFileFactory<JetFile>(){
    @Override public JetFile create(    String fileName,    String text){
      return JetPsiFactory.createFile(getProject(),fileName,text);
    }
  }
);
  ModuleDescriptor eagerModule=LazyResolveTestUtil.resolveEagerly(files,getEnvironment());
  ModuleDescriptor lazyModule=LazyResolveTestUtil.resolveLazily(files,getEnvironment());
  Name test=Name.identifier("test");
  NamespaceDescriptor actual=lazyModule.getRootNamespace().getMemberScope().getNamespace(test);
  NamespaceDescriptor expected=eagerModule.getRootNamespace().getMemberScope().getNamespace(test);
  File serializeResultsTo=new File(FileUtil.getNameWithoutExtension(testFileName) + ".txt");
  NamespaceComparator.compareNamespaces(expected,actual,NamespaceComparator.DONT_INCLUDE_METHODS_OF_OBJECT.filterOutput(new Predicate<NamespaceDescriptor>(){
    @Override public boolean apply(    NamespaceDescriptor namespaceDescriptor){
      return !namespaceDescriptor.getName().equals(Name.identifier("jet"));
    }
  }
),serializeResultsTo);
}
