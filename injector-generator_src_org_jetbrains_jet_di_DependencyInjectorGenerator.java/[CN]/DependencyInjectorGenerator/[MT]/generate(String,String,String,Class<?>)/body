{
  String outputFileName=targetSourceRoot + "/" + injectorPackageName.replace(".","/")+ "/"+ injectorClassName+ ".java";
  File file=new File(outputFileName);
  boolean useTmpfile=!SystemInfo.isWindows;
  File tmpfile=useTmpfile ? new File(outputFileName + ".tmp") : file;
  File parentFile=file.getParentFile();
  if (!parentFile.exists()) {
    if (parentFile.mkdirs()) {
      System.out.println("Directory created: " + parentFile.getAbsolutePath());
    }
 else {
      throw new IllegalStateException("Cannot create directory: " + parentFile);
    }
  }
  FileOutputStream fileOutputStream=new FileOutputStream(tmpfile);
  System.out.println("File opened: " + tmpfile.getAbsolutePath());
  PrintStream out=new PrintStream(fileOutputStream);
  try {
    for (    Field field : Lists.newArrayList(fields)) {
      satisfyDependenciesFor(field,field);
    }
    String copyright="injector-generator/copyright.txt";
    out.println(FileUtil.loadFile(new File(copyright)));
    out.println();
    out.println("package " + injectorPackageName + ";");
    out.println();
    generateImports(out,injectorPackageName);
    out.println();
    out.println("/* This file is generated by " + generatorClass.getName() + ". DO NOT EDIT! */");
    out.print("public class " + injectorClassName);
    generateImplementsList(out);
    out.println(" {");
    out.println();
    generateFields(out);
    out.println();
    generateConstructor(injectorClassName,out);
    out.println();
    generateDestroy(injectorClassName,out);
    out.println();
    generateGetters(out);
    out.println("}");
    fileOutputStream.close();
    if (useTmpfile) {
      if (!tmpfile.renameTo(file)) {
        throw new RuntimeException("failed to rename " + tmpfile + " to "+ file);
      }
      System.out.println("Renamed " + tmpfile + " to "+ file);
    }
  }
  finally {
    fileOutputStream.close();
    System.out.println("File closed");
  }
}
