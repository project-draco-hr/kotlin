{
  String outputFileName=targetSourceRoot + "/" + injectorPackageName.replace(".","/")+ "/"+ injectorClassName+ ".java";
  File file=new File(outputFileName);
  boolean useTmpfile=!SystemInfo.isWindows;
  File tmpfile=useTmpfile ? new File(outputFileName + ".tmp") : file;
  File parentFile=file.getParentFile();
  if (!parentFile.exists()) {
    if (parentFile.mkdirs()) {
      System.out.println("Directory created: " + parentFile.getAbsolutePath());
    }
 else {
      throw new IllegalStateException("Cannot create directory: " + parentFile);
    }
  }
  fields.addAll(dependencies.satisfyDependencies());
  StringBuilder preamble=new StringBuilder();
  generatePreamble(injectorPackageName,new Printer(preamble));
  StringBuilder body=new StringBuilder();
  Printer p=new Printer(body);
  p.println();
  p.println("/* This file is generated by " + generatorClass.getName() + ". DO NOT EDIT! */");
  p.print("public class " + injectorClassName);
  generateImplementsList(p);
  p.println(" {");
  p.pushIndent();
  p.println();
  generateFields(p);
  p.println();
  generateConstructor(injectorClassName,p);
  p.println();
  generateDestroy(injectorClassName,p);
  p.println();
  generateGetters(p);
  generateFactoryMethods(p);
  p.popIndent();
  p.println("}");
  importManager.addClass(org.jetbrains.annotations.NotNull.class);
  importManager.addClass(javax.annotation.PreDestroy.class);
  StringBuilder imports=new StringBuilder();
  generateImports(new Printer(imports),injectorPackageName);
  StringBuilder text=new StringBuilder(preamble);
  text.append(imports);
  text.append(body);
  FileUtil.writeToFile(tmpfile,text.toString());
  System.out.println("File written: " + tmpfile.getAbsolutePath());
  if (useTmpfile) {
    if (!tmpfile.renameTo(file)) {
      throw new RuntimeException("failed to rename " + tmpfile + " to "+ file);
    }
    System.out.println("Renamed " + tmpfile + " to "+ file);
  }
  System.out.println();
}
