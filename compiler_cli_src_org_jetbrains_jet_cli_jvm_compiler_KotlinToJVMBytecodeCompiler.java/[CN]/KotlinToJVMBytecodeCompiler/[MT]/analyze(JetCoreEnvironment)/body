{
  AnalyzerWithCompilerReport analyzerWithCompilerReport=new AnalyzerWithCompilerReport(environment.getConfiguration().get(CLIConfigurationKeys.MESSAGE_COLLECTOR_KEY));
  analyzerWithCompilerReport.analyzeAndReport(new Function0<AnalyzeExhaust>(){
    @NotNull @Override public AnalyzeExhaust invoke(){
      CliLightClassGenerationSupport support=CliLightClassGenerationSupport.getInstanceForCli(environment.getProject());
      BindingTrace sharedTrace=support.getTrace();
      ModuleDescriptorImpl sharedModule=support.getModule();
      return AnalyzerFacadeForJVM.analyzeFilesWithJavaIntegration(environment.getProject(),environment.getSourceFiles(),sharedTrace,environment.getConfiguration().getList(JVMConfigurationKeys.SCRIPT_PARAMETERS),Predicates.<PsiFile>alwaysTrue(),false,sharedModule);
    }
  }
,environment.getSourceFiles());
  return analyzerWithCompilerReport.hasErrors() ? null : analyzerWithCompilerReport.getAnalyzeExhaust();
}
