{
  FqName mainClass=null;
  for (  JetFile file : configuration.getEnvironment().getSourceFiles()) {
    if (JetMainDetector.hasMain(file.getDeclarations())) {
      FqName fqName=JetPsiUtil.getFQName(file);
      mainClass=fqName.child(Name.identifier(JvmAbi.PACKAGE_CLASS));
      break;
    }
  }
  GenerationState generationState=analyzeAndGenerate(configuration);
  if (generationState == null) {
    return false;
  }
  try {
    ClassFileFactory factory=generationState.getFactory();
    if (jar != null) {
      try {
        CompileEnvironmentUtil.writeToJar(factory,new FileOutputStream(jar),mainClass,includeRuntime);
      }
 catch (      FileNotFoundException e) {
        throw new CompileEnvironmentException("Invalid jar path " + jar,e);
      }
    }
 else     if (outputDir != null) {
      CompileEnvironmentUtil.writeToOutputDirectory(factory,outputDir);
    }
 else     if (script) {
      try {
        GeneratedClassLoader classLoader=new GeneratedClassLoader(factory,new URLClassLoader(new URL[]{configuration.getEnvironment().getCompilerDependencies().getRuntimeJar().toURI().toURL()},AllModules.class.getClassLoader()));
        Class<?> scriptClass=classLoader.loadClass(ScriptCodegen.SCRIPT_DEFAULT_CLASS_NAME.getFqName().getFqName());
        scriptClass.getConstructor(String[].class).newInstance(new Object[]{configuration.getScriptArgs().toArray(new String[0])});
      }
 catch (      Exception e) {
        throw new RuntimeException("Failed to evaluate script: " + e,e);
      }
    }
 else {
      throw new CompileEnvironmentException("Output directory or jar file is not specified - no files will be saved to the disk");
    }
    return true;
  }
  finally {
    generationState.destroy();
  }
}
