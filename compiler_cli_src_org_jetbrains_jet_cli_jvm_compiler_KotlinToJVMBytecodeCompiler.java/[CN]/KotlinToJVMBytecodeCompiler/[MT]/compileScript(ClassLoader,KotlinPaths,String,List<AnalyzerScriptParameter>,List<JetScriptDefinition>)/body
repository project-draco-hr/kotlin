{
  final MessageRenderer messageRenderer=MessageRenderer.PLAIN;
  GroupingMessageCollector messageCollector=new GroupingMessageCollector(new PrintingMessageCollector(System.err,messageRenderer,false));
  Disposable rootDisposable=CompileEnvironmentUtil.createMockDisposable();
  try {
    CompilerConfiguration compilerConfiguration=new CompilerConfiguration();
    compilerConfiguration.put(CLIConfigurationKeys.MESSAGE_COLLECTOR_KEY,messageCollector);
    compilerConfiguration.addAll(JVMConfigurationKeys.CLASSPATH_KEY,getClasspath(parentLoader));
    compilerConfiguration.add(JVMConfigurationKeys.CLASSPATH_KEY,PathUtil.findRtJar());
    compilerConfiguration.addAll(JVMConfigurationKeys.ANNOTATIONS_PATH_KEY,Collections.singletonList(paths.getJdkAnnotationsPath()));
    compilerConfiguration.add(CommonConfigurationKeys.SOURCE_ROOTS_KEY,scriptPath);
    compilerConfiguration.addAll(CommonConfigurationKeys.SCRIPT_DEFINITIONS_KEY,scriptDefinitions != null ? scriptDefinitions : Collections.<JetScriptDefinition>emptyList());
    compilerConfiguration.put(JVMConfigurationKeys.SCRIPT_PARAMETERS,scriptParameters);
    JetCoreEnvironment environment=new JetCoreEnvironment(rootDisposable,compilerConfiguration);
    try {
      JetScriptDefinitionProvider.getInstance(environment.getProject()).markFileAsScript(environment.getSourceFiles().get(0));
      return compileScript(paths,environment,parentLoader);
    }
 catch (    CompilationException e) {
      messageCollector.report(CompilerMessageSeverity.EXCEPTION,MessageRenderer.PLAIN.renderException(e),MessageUtil.psiElementToMessageLocation(e.getElement()));
      return null;
    }
catch (    Throwable t) {
      messageCollector.report(CompilerMessageSeverity.EXCEPTION,MessageRenderer.PLAIN.renderException(t),CompilerMessageLocation.NO_LOCATION);
      return null;
    }
  }
  finally {
    messageCollector.flush();
    Disposer.dispose(rootDisposable);
  }
}
