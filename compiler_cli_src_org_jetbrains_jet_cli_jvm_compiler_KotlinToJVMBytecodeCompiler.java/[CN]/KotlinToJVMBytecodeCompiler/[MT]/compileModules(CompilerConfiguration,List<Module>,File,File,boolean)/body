{
  Map<Module,ClassFileFactory> outputFiles=Maps.newHashMap();
  CompilerConfiguration compilerConfiguration=createCompilerConfiguration(configuration,chunk,directory);
  Disposable parentDisposable=Disposer.newDisposable();
  JetCoreEnvironment environment=null;
  try {
    environment=JetCoreEnvironment.createForProduction(parentDisposable,compilerConfiguration);
    AnalyzeExhaust exhaust=analyze(environment);
    if (exhaust == null) {
      return false;
    }
    exhaust.throwIfError();
    for (    Module module : chunk) {
      List<JetFile> jetFiles=CompileEnvironmentUtil.getJetFiles(environment.getProject(),getAbsolutePaths(directory,module),new Function1<String,Unit>(){
        @Override public Unit invoke(        String s){
          throw new IllegalStateException("Should have been checked before: " + s);
        }
      }
);
      GenerationState generationState=generate(environment,exhaust,jetFiles,module.getModuleName());
      outputFiles.put(module,generationState.getFactory());
    }
  }
  finally {
    if (environment != null) {
      Disposer.dispose(parentDisposable);
    }
  }
  for (  Module module : chunk) {
    writeOutput(configuration,outputFiles.get(module),new File(module.getOutputDirectory()),jarPath,jarRuntime,null);
  }
  return true;
}
