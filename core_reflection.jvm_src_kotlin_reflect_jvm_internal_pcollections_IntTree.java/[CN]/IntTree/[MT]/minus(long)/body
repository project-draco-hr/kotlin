{
  if (size == 0)   return this;
  if (key < this.key)   return rebalanced(left.minus(key - this.key),right);
  if (key > this.key)   return rebalanced(left,right.minus(key - this.key));
  if (left.size == 0)   return right.withKey(right.key + this.key);
  if (right.size == 0)   return left.withKey(left.key + this.key);
  long newKey=right.minKey() + this.key;
  V newValue=right.get(newKey - this.key);
  IntTree<V> newRight=right.minus(newKey - this.key);
  newRight=newRight.withKey((newRight.key + this.key) - newKey);
  IntTree<V> newLeft=left.withKey((left.key + this.key) - newKey);
  return rebalanced(newKey,newValue,newLeft,newRight);
}
