{
  boolean ok=true;
  if (at(LPAR)) {
    parseParenthesizedExpression();
  }
 else   if (at(THIS_KEYWORD)) {
    parseThisExpression();
  }
 else   if (at(SUPER_KEYWORD)) {
    parseSuperExpression();
  }
 else   if (at(OBJECT_KEYWORD)) {
    parseObjectLiteral();
  }
 else   if (at(THROW_KEYWORD)) {
    parseThrow();
  }
 else   if (at(RETURN_KEYWORD)) {
    parseReturn();
  }
 else   if (at(CONTINUE_KEYWORD)) {
    parseJump(CONTINUE);
  }
 else   if (at(BREAK_KEYWORD)) {
    parseJump(BREAK);
  }
 else   if (at(IF_KEYWORD)) {
    parseIf();
  }
 else   if (at(WHEN_KEYWORD)) {
    parseWhen();
  }
 else   if (at(TRY_KEYWORD)) {
    parseTry();
  }
 else   if (at(FOR_KEYWORD)) {
    parseFor();
  }
 else   if (at(WHILE_KEYWORD)) {
    parseWhile();
  }
 else   if (at(DO_KEYWORD)) {
    parseDoWhile();
  }
 else   if (atSet(LOCAL_DECLARATION_FIRST) && parseLocalDeclaration(myBuilder.newlineBeforeCurrentToken())) {
  }
 else   if (at(IDENTIFIER)) {
    parseSimpleNameExpression();
  }
 else   if (at(LBRACE)) {
    parseFunctionLiteral();
  }
 else   if (at(OPEN_QUOTE)) {
    parseStringTemplate();
  }
 else   if (!parseLiteralConstant()) {
    ok=false;
    errorWithRecovery("Expecting an element",EXPRESSION_FOLLOW);
  }
  return ok;
}
