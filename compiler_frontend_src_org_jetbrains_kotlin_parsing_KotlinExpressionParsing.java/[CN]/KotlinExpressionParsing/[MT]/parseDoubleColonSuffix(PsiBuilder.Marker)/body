{
  if (!at(COLONCOLON))   return false;
  advance();
  if (at(CLASS_KEYWORD)) {
    advance();
    expression.done(CLASS_LITERAL_EXPRESSION);
    return true;
  }
  parseSimpleNameExpression();
  if (at(LT)) {
    PsiBuilder.Marker typeArgumentList=mark();
    if (myKotlinParsing.tryParseTypeArgumentList(TYPE_ARGUMENT_LIST_STOPPERS)) {
      typeArgumentList.error("Type arguments are not allowed");
    }
 else {
      typeArgumentList.rollbackTo();
    }
  }
  if (at(LPAR) && !myBuilder.newlineBeforeCurrentToken()) {
    PsiBuilder.Marker lpar=mark();
    parseCallSuffix();
    lpar.error("This syntax is reserved for future use; to call a reference, enclose it in parentheses: (foo::bar)(args)");
  }
  expression.done(CALLABLE_REFERENCE_EXPRESSION);
  return true;
}
