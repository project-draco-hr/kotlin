{
  if (at(REGULAR_STRING_PART)) {
    PsiBuilder.Marker mark=mark();
    advance();
    mark.done(LITERAL_STRING_TEMPLATE_ENTRY);
  }
 else   if (at(ESCAPE_SEQUENCE)) {
    PsiBuilder.Marker mark=mark();
    advance();
    mark.done(ESCAPE_STRING_TEMPLATE_ENTRY);
  }
 else   if (at(SHORT_TEMPLATE_ENTRY_START)) {
    PsiBuilder.Marker entry=mark();
    advance();
    if (at(THIS_KEYWORD)) {
      PsiBuilder.Marker thisExpression=mark();
      PsiBuilder.Marker reference=mark();
      advance();
      reference.done(REFERENCE_EXPRESSION);
      thisExpression.done(THIS_EXPRESSION);
    }
 else {
      KtToken keyword=KEYWORD_TEXTS.get(myBuilder.getTokenText());
      if (keyword != null) {
        myBuilder.remapCurrentToken(keyword);
        errorAndAdvance("Keyword cannot be used as a reference");
      }
 else {
        PsiBuilder.Marker reference=mark();
        expect(IDENTIFIER,"Expecting a name");
        reference.done(REFERENCE_EXPRESSION);
      }
    }
    entry.done(SHORT_STRING_TEMPLATE_ENTRY);
  }
 else   if (at(LONG_TEMPLATE_ENTRY_START)) {
    PsiBuilder.Marker longTemplateEntry=mark();
    advance();
    parseExpression();
    expect(LONG_TEMPLATE_ENTRY_END,"Expecting '}'",TokenSet.create(CLOSING_QUOTE,DANGLING_NEWLINE,REGULAR_STRING_PART,ESCAPE_SEQUENCE,SHORT_TEMPLATE_ENTRY_START));
    longTemplateEntry.done(LONG_STRING_TEMPLATE_ENTRY);
  }
 else {
    errorAndAdvance("Unexpected token in a string template");
  }
}
