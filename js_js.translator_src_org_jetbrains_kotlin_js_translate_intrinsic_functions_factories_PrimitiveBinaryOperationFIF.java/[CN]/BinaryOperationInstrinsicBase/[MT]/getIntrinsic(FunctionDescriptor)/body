{
  if (pattern("Int|Short|Byte|Double|Float.compareTo(Char)").apply(descriptor)) {
    return new WithCharAsSecondOperandFunctionIntrinsic(PRIMITIVE_NUMBER_COMPARE_TO_INTRINSIC);
  }
  if (pattern("Char.compareTo(Int|Short|Byte|Double|Float)").apply(descriptor)) {
    return new WithCharAsFirstOperandFunctionIntrinsic(PRIMITIVE_NUMBER_COMPARE_TO_INTRINSIC);
  }
  if (pattern("Char.rangeTo(Char)").apply(descriptor)) {
    return CHAR_RANGE_TO_INTRINSIC;
  }
  if (PRIMITIVE_NUMBERS_COMPARE_TO_OPERATIONS.apply(descriptor)) {
    return PRIMITIVE_NUMBER_COMPARE_TO_INTRINSIC;
  }
  if (JsDescriptorUtils.isBuiltin(descriptor) && descriptor.getName().equals(OperatorConventions.COMPARE_TO)) {
    return BUILTINS_COMPARE_TO_INTRINSIC;
  }
  if (!PREDICATE.apply(descriptor)) {
    return null;
  }
  if (pattern("Int|Short|Byte.div(Int|Short|Byte)").apply(descriptor)) {
    return INTEGER_DIVISION_INTRINSIC;
  }
  if (pattern("Char.div(Int|Short|Byte)").apply(descriptor)) {
    return new WithCharAsFirstOperandFunctionIntrinsic(INTEGER_DIVISION_INTRINSIC);
  }
  if (pattern("Int|Short|Byte.div(Char)").apply(descriptor)) {
    return new WithCharAsSecondOperandFunctionIntrinsic(INTEGER_DIVISION_INTRINSIC);
  }
  if (descriptor.getName().equals(Name.identifier("rangeTo"))) {
    return RANGE_TO_INTRINSIC;
  }
  if (INT_WITH_BIT_OPERATIONS.apply(descriptor)) {
    JsBinaryOperator op=BINARY_BITWISE_OPERATIONS.get(descriptor.getName().asString());
    if (op != null) {
      return new PrimitiveBinaryOperationFunctionIntrinsic(op);
    }
  }
  JsBinaryOperator operator=getOperator(descriptor);
  BinaryOperationInstrinsicBase result=new PrimitiveBinaryOperationFunctionIntrinsic(operator);
  if (pattern("Char.plus|minus|times|div|mod(Int|Short|Byte|Double|Float)").apply(descriptor)) {
    return new WithCharAsFirstOperandFunctionIntrinsic(result);
  }
  if (pattern("Int|Short|Byte|Double|Float.plus|minus|times|div|mod(Char)").apply(descriptor)) {
    return new WithCharAsSecondOperandFunctionIntrinsic(result);
  }
  return result;
}
