{
  List<IntentionAction> actions=new LinkedList<IntentionAction>();
  BindingContext context=ResolvePackage.analyzeFully((JetFile)diagnostic.getPsiFile());
  PsiElement diagnosticElement=diagnostic.getPsiElement();
  if (!(diagnosticElement instanceof JetExpression)) {
    LOG.error("Unexpected element: " + diagnosticElement.getText());
    return Collections.emptyList();
  }
  JetExpression expression=(JetExpression)diagnosticElement;
  JetType expectedType;
  JetType expressionType;
  if (diagnostic.getFactory() == Errors.TYPE_MISMATCH) {
    DiagnosticWithParameters2<JetExpression,JetType,JetType> diagnosticWithParameters=Errors.TYPE_MISMATCH.cast(diagnostic);
    expectedType=diagnosticWithParameters.getA();
    expressionType=diagnosticWithParameters.getB();
  }
 else   if (diagnostic.getFactory() == Errors.NULL_FOR_NONNULL_TYPE) {
    DiagnosticWithParameters1<JetConstantExpression,JetType> diagnosticWithParameters=Errors.NULL_FOR_NONNULL_TYPE.cast(diagnostic);
    expectedType=diagnosticWithParameters.getA();
    expressionType=TypeUtilPackage.makeNullable(expectedType);
  }
 else   if (diagnostic.getFactory() == Errors.CONSTANT_EXPECTED_TYPE_MISMATCH) {
    DiagnosticWithParameters2<JetConstantExpression,String,JetType> diagnosticWithParameters=Errors.CONSTANT_EXPECTED_TYPE_MISMATCH.cast(diagnostic);
    expectedType=diagnosticWithParameters.getB();
    expressionType=context.getType(expression);
    if (expressionType == null) {
      LOG.error("No type inferred: " + expression.getText());
      return Collections.emptyList();
    }
  }
 else {
    LOG.error("Unexpected diagnostic: " + DefaultErrorMessages.render(diagnostic));
    return Collections.emptyList();
  }
  if (!(expression instanceof JetBinaryExpressionWithTypeRHS) && !(expression.getParent() instanceof JetBinaryExpressionWithTypeRHS)) {
    actions.add(new CastExpressionFix(expression,expectedType));
  }
  JetProperty property=PsiTreeUtil.getParentOfType(expression,JetProperty.class);
  if (property != null) {
    JetPropertyAccessor getter=property.getGetter();
    JetExpression initializer=property.getInitializer();
    if (QuickFixUtil.canEvaluateTo(initializer,expression) || (getter != null && QuickFixUtil.canFunctionOrGetterReturnExpression(property.getGetter(),expression))) {
      JetScope scope=CorePackage.getResolutionScope(property,context,ResolvePackage.getResolutionFacade(property));
      JetType typeToInsert=UtilPackage.approximateWithResolvableType(expressionType,scope,false);
      actions.add(new ChangeVariableTypeFix(property,typeToInsert));
    }
  }
  PsiElement expressionParent=expression.getParent();
  JetCallableDeclaration function=expressionParent instanceof JetReturnExpression ? BindingContextUtilPackage.getTargetFunction((JetReturnExpression)expressionParent,context) : PsiTreeUtil.getParentOfType(expression,JetFunction.class,true);
  if (function instanceof JetFunction && QuickFixUtil.canFunctionOrGetterReturnExpression(function,expression)) {
    JetScope scope=CorePackage.getResolutionScope(function,context,ResolvePackage.getResolutionFacade(function));
    JetType typeToInsert=UtilPackage.approximateWithResolvableType(expressionType,scope,false);
    actions.add(new ChangeFunctionReturnTypeFix((JetFunction)function,typeToInsert));
  }
  if (expression instanceof JetOperationExpression) {
    ResolvedCall<?> resolvedCall=CallUtilPackage.getResolvedCall(expression,context);
    if (resolvedCall != null) {
      JetFunction declaration=getFunctionDeclaration(resolvedCall);
      if (declaration != null) {
        actions.add(new ChangeFunctionReturnTypeFix(declaration,expectedType));
      }
    }
  }
  if (expression instanceof JetCallExpression) {
    ResolvedCall<?> resolvedCall=CallUtilPackage.getResolvedCall(expression,context);
    if (resolvedCall != null) {
      JetFunction declaration=getFunctionDeclaration(resolvedCall);
      if (declaration != null) {
        actions.add(new ChangeFunctionReturnTypeFix(declaration,expectedType));
      }
    }
  }
  ResolvedCall<? extends CallableDescriptor> resolvedCall=CallUtilPackage.getParentResolvedCall(expression,context,true);
  if (resolvedCall != null) {
    JetExpression parentIf=QuickFixUtil.getParentIfForBranch(expression);
    JetExpression argumentExpression=(parentIf != null) ? parentIf : expression;
    ValueArgument valueArgument=CallUtilPackage.getValueArgumentForExpression(resolvedCall.getCall(),argumentExpression);
    if (valueArgument != null) {
      JetParameter correspondingParameter=QuickFixUtil.getParameterDeclarationForValueArgument(resolvedCall,valueArgument);
      JetType valueArgumentType=diagnostic.getFactory() == Errors.NULL_FOR_NONNULL_TYPE ? expressionType : context.getType(valueArgument.getArgumentExpression());
      if (correspondingParameter != null && valueArgumentType != null) {
        JetCallableDeclaration callable=PsiTreeUtil.getParentOfType(correspondingParameter,JetCallableDeclaration.class,true);
        JetScope scope=callable != null ? CorePackage.getResolutionScope(callable,context,ResolvePackage.getResolutionFacade(callable)) : null;
        JetType typeToInsert=UtilPackage.approximateWithResolvableType(valueArgumentType,scope,true);
        actions.add(new ChangeParameterTypeFix(correspondingParameter,typeToInsert));
      }
    }
  }
  return actions;
}
