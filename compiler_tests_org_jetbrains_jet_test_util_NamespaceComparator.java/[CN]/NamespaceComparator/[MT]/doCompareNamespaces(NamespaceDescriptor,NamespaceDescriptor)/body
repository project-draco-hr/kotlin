{
  StringBuilder sb=new StringBuilder();
  deferred.assertEquals(nsa.getName(),nsb.getName());
  sb.append("namespace " + nsa.getName() + "\n\n");
  deferred.assertTrue("namespace " + nsa.getName() + " is empty",!nsa.getMemberScope().getAllDescriptors().isEmpty());
  Set<Name> classifierNames=new HashSet<Name>();
  Set<Name> propertyNames=new HashSet<Name>();
  Set<Name> functionNames=new HashSet<Name>();
  for (  DeclarationDescriptor ad : nsa.getMemberScope().getAllDescriptors()) {
    if (ad instanceof ClassifierDescriptor) {
      classifierNames.add(ad.getName());
    }
 else     if (ad instanceof PropertyDescriptor) {
      propertyNames.add(ad.getName());
    }
 else     if (ad instanceof FunctionDescriptor) {
      functionNames.add(ad.getName());
    }
 else     if (ad instanceof NamespaceDescriptor) {
      NamespaceDescriptor namespaceDescriptorA=(NamespaceDescriptor)ad;
      NamespaceDescriptor namespaceDescriptorB=nsb.getMemberScope().getNamespace(namespaceDescriptorA.getName());
      if (namespaceDescriptorB == null) {
        System.err.println("Namespace not found: " + namespaceDescriptorA.getQualifiedName());
      }
 else {
        String comparison=doCompareNamespaces(namespaceDescriptorA,namespaceDescriptorB);
        if (includeIntoOutput.apply(namespaceDescriptorA)) {
          sb.append("// <namespace name=\"" + namespaceDescriptorA.getName() + "\">\n");
          sb.append(comparison);
          sb.append("// </namespace name=\"" + namespaceDescriptorA.getName() + "\">\n");
        }
      }
    }
 else {
      throw new AssertionError("unknown member: " + ad);
    }
  }
  for (  Name name : sorted(classifierNames)) {
    ClassifierDescriptor ca=nsa.getMemberScope().getClassifier(name);
    ClassifierDescriptor cb=nsb.getMemberScope().getClassifier(name);
    deferred.assertTrue("Classifier not found in " + nsa + ": "+ name,ca != null);
    deferred.assertTrue("Classifier not found in " + nsb + ": "+ name,cb != null);
    compareClassifiers(ca,cb,sb);
  }
  for (  Name name : sorted(propertyNames)) {
    Collection<VariableDescriptor> pa=nsa.getMemberScope().getProperties(name);
    Collection<VariableDescriptor> pb=nsb.getMemberScope().getProperties(name);
    compareDeclarationSets("Properties in package " + nsa,pa,pb,sb);
    deferred.assertTrue(nsb.getMemberScope().getFunctions(Name.identifier(PropertyCodegen.getterName(name))).isEmpty());
    deferred.assertTrue(nsb.getMemberScope().getFunctions(Name.identifier(PropertyCodegen.setterName(name))).isEmpty());
  }
  for (  Name name : sorted(functionNames)) {
    Collection<FunctionDescriptor> fa=nsa.getMemberScope().getFunctions(name);
    Collection<FunctionDescriptor> fb=nsb.getMemberScope().getFunctions(name);
    compareDeclarationSets("Functions in package " + nsa,fa,fb,sb);
  }
  return sb.toString();
}
