{
  StringBuilder sb=new StringBuilder();
  deferred.assertEquals(expectedNamespace.getName(),actualNamespace.getName());
  sb.append("namespace " + expectedNamespace.getName() + "\n");
  Set<Name> classifierNames=Sets.newHashSet();
  Set<Name> propertyNames=Sets.newHashSet();
  Set<Name> functionNames=Sets.newHashSet();
  Set<Name> objectNames=Sets.newHashSet();
  for (  DeclarationDescriptor ad : expectedNamespace.getMemberScope().getAllDescriptors()) {
    if (ad instanceof ClassifierDescriptor) {
      classifierNames.add(ad.getName());
    }
 else     if (ad instanceof PropertyDescriptor) {
      propertyNames.add(ad.getName());
    }
 else     if (ad instanceof FunctionDescriptor) {
      functionNames.add(ad.getName());
    }
 else     if (ad instanceof NamespaceDescriptor) {
      if (conf.recurseIntoPackage.apply(DescriptorUtils.getFQName(ad))) {
        NamespaceDescriptor namespaceDescriptorA=(NamespaceDescriptor)ad;
        NamespaceDescriptor namespaceDescriptorB=actualNamespace.getMemberScope().getNamespace(namespaceDescriptorA.getName());
        if (namespaceDescriptorB == null) {
          System.err.println("Namespace not found: " + namespaceDescriptorA.getQualifiedName());
        }
 else {
          String comparison=doCompareNamespaces(namespaceDescriptorA,namespaceDescriptorB);
          sb.append("// <namespace name=\"" + namespaceDescriptorA.getName() + "\">\n");
          sb.append(comparison);
          sb.append("// </namespace name=\"" + namespaceDescriptorA.getName() + "\">\n");
        }
      }
    }
 else {
      throw new AssertionError("unknown member: " + ad);
    }
  }
  for (  ClassDescriptor objectDescriptor : expectedNamespace.getMemberScope().getObjectDescriptors()) {
    objectNames.add(objectDescriptor.getName());
  }
  for (  Name name : sorted(classifierNames)) {
    ClassifierDescriptor ca=expectedNamespace.getMemberScope().getClassifier(name);
    ClassifierDescriptor cb=actualNamespace.getMemberScope().getClassifier(name);
    deferred.assertTrue("Classifier not found in " + expectedNamespace + ": "+ name,ca != null);
    deferred.assertTrue("Classifier not found in " + actualNamespace + ": "+ name,cb != null);
    if (ca != null && cb != null) {
      compareClassifiers(ca,cb,sb);
    }
  }
  for (  Name name : sorted(objectNames)) {
    ClassifierDescriptor ca=expectedNamespace.getMemberScope().getObjectDescriptor(name);
    ClassifierDescriptor cb=actualNamespace.getMemberScope().getObjectDescriptor(name);
    deferred.assertTrue("Object not found in " + expectedNamespace + ": "+ name,ca != null);
    deferred.assertTrue("Object not found in " + actualNamespace + ": "+ name,cb != null);
    if (ca != null && cb != null) {
      compareClassifiers(ca,cb,sb);
    }
  }
  for (  Name name : sorted(propertyNames)) {
    Collection<VariableDescriptor> pa=expectedNamespace.getMemberScope().getProperties(name);
    Collection<VariableDescriptor> pb=actualNamespace.getMemberScope().getProperties(name);
    compareDeclarationSets("Properties in package " + expectedNamespace,pa,pb,sb);
    deferred.assertTrue(actualNamespace.getMemberScope().getFunctions(Name.identifier(PropertyCodegen.getterName(name))).isEmpty());
    deferred.assertTrue(actualNamespace.getMemberScope().getFunctions(Name.identifier(PropertyCodegen.setterName(name))).isEmpty());
  }
  for (  Name name : sorted(functionNames)) {
    Collection<FunctionDescriptor> fa=expectedNamespace.getMemberScope().getFunctions(name);
    Collection<FunctionDescriptor> fb=actualNamespace.getMemberScope().getFunctions(name);
    compareDeclarationSets("Functions in package " + expectedNamespace,fa,fb,sb);
  }
  return sb.toString();
}
