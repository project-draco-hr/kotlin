{
  FunctionDescriptor hashCodeFunction=CodegenUtil.getDeclaredFunctionByRawSignature(descriptor,Name.identifier(CodegenUtil.HASH_CODE_METHOD_NAME),KotlinBuiltIns.getInstance().getInt());
  MethodContext context=ImplementationBodyCodegen.this.context.intoFunction(hashCodeFunction);
  MethodVisitor mv=v.newMethod(OtherOrigin(hashCodeFunction),ACC_PUBLIC,"hashCode","()I",null,null);
  InstructionAdapter iv=new InstructionAdapter(mv);
  mv.visitCode();
  boolean first=true;
  for (  PropertyDescriptor propertyDescriptor : properties) {
    if (!first) {
      iv.iconst(31);
      iv.mul(Type.INT_TYPE);
    }
    genPropertyOnStack(iv,context,propertyDescriptor,0);
    Label ifNull=null;
    Type asmType=typeMapper.mapType(propertyDescriptor);
    if (!isPrimitive(asmType)) {
      ifNull=new Label();
      iv.dup();
      iv.ifnull(ifNull);
    }
    genHashCode(mv,iv,asmType);
    if (ifNull != null) {
      Label end=new Label();
      iv.goTo(end);
      iv.mark(ifNull);
      iv.pop();
      iv.iconst(0);
      iv.mark(end);
    }
    if (first) {
      first=false;
    }
 else {
      iv.add(Type.INT_TYPE);
    }
  }
  mv.visitInsn(IRETURN);
  FunctionCodegen.endVisit(mv,"hashCode",myClass);
}
