{
  functionCodegen.generateMethod(myClass,typeMapper.mapSignature(function),function,new FunctionGenerationStrategy(){
    @Override public void generateBody(    @NotNull MethodVisitor mv,    @NotNull JvmMethodSignature signature,    @NotNull MethodContext context,    @Nullable MemberCodegen<?> parentCodegen){
      Type componentType=signature.getReturnType();
      InstructionAdapter iv=new InstructionAdapter(mv);
      if (!componentType.equals(Type.VOID_TYPE)) {
        iv.load(0,classAsmType);
        String desc="()" + componentType.getDescriptor();
        iv.invokevirtual(classAsmType.getInternalName(),PropertyCodegen.getterName(parameter.getName()),desc);
      }
      iv.areturn(componentType);
    }
  }
);
}
