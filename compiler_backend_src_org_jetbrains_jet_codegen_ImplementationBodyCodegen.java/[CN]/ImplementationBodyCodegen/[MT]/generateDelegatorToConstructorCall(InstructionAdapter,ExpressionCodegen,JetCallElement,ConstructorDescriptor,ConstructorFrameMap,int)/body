{
  ClassDescriptor classDecl=constructorDescriptor.getContainingDeclaration();
  iv.load(0,TYPE_OBJECT);
  if (classDecl.getContainingDeclaration() instanceof ClassDescriptor) {
    iv.load(frameMap.getOuterThisIndex(),typeMapper.mapType(((ClassDescriptor)descriptor.getContainingDeclaration()).getDefaultType(),OwnerKind.IMPLEMENTATION));
  }
  CallableMethod method=typeMapper.mapToCallableMethod(constructorDescriptor,kind);
  if (myClass instanceof JetObjectDeclaration && superCall instanceof JetDelegatorToSuperCall && ((JetObjectDeclaration)myClass).isObjectLiteral()) {
    ConstructorDescriptor superConstructor=(ConstructorDescriptor)bindingContext.get(BindingContext.REFERENCE_TARGET,((JetDelegatorToSuperCall)superCall).getCalleeExpression().getConstructorReferenceExpression());
    CallableMethod superCallable=typeMapper.mapToCallableMethod(superConstructor,OwnerKind.IMPLEMENTATION);
    int nextVar=firstSuperArgument + 1;
    for (    Type t : superCallable.getSignature().getAsmMethod().getArgumentTypes()) {
      iv.load(nextVar,t);
      nextVar+=t.getSize();
    }
    method.invoke(codegen.v);
  }
 else {
    codegen.invokeMethodWithArguments(method,constructorCall,StackValue.none());
  }
}
