{
  List<String> result=Lists.newArrayList();
  KotlinBuiltIns builtIns=KotlinBuiltIns.getInstance();
  if (isSubclass(descriptor,builtIns.getCollection())) {
    ClassifierDescriptor classifier=getSubstituteForTypeParameterOf(builtIns.getCollection(),0);
    addStubSignature(result,"add(Ljava/lang/Object;)Z",builtIns.getBoolean(),classifier);
    addStubSignature(result,"remove(Ljava/lang/Object;)Z",builtIns.getBoolean(),builtIns.getAny());
    addStubSignature(result,"addAll(Ljava/util/Collection;)Z",builtIns.getBoolean(),builtIns.getCollection());
    addStubSignature(result,"removeAll(Ljava/util/Collection;)Z",builtIns.getBoolean(),builtIns.getCollection());
    addStubSignature(result,"retainAll(Ljava/util/Collection;)Z",builtIns.getBoolean(),builtIns.getCollection());
    addStubSignature(result,"clear()V",builtIns.getUnit());
  }
  if (isSubclass(descriptor,builtIns.getList())) {
    ClassifierDescriptor classifier=getSubstituteForTypeParameterOf(builtIns.getList(),0);
    addStubSignature(result,"set(ILjava/lang/Object;)Ljava/lang/Object;",classifier,builtIns.getInt(),classifier);
    addStubSignature(result,"add(ILjava/lang/Object;)V",builtIns.getUnit(),builtIns.getInt(),classifier);
    addStubSignature(result,"remove(I)Ljava/lang/Object;",classifier,builtIns.getInt());
  }
  if (isSubclass(descriptor,builtIns.getMap())) {
    ClassifierDescriptor keyClassifier=getSubstituteForTypeParameterOf(builtIns.getMap(),0);
    ClassifierDescriptor valueClassifier=getSubstituteForTypeParameterOf(builtIns.getMap(),1);
    addStubSignature(result,"put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;",valueClassifier,keyClassifier,valueClassifier);
    addStubSignature(result,"remove(Ljava/lang/Object;)Ljava/lang/Object;",valueClassifier,builtIns.getAny());
    addStubSignature(result,"putAll(Ljava/util/Map;)V",builtIns.getUnit(),builtIns.getMap());
    addStubSignature(result,"clear()V",builtIns.getUnit());
  }
  if (isSubclass(descriptor,builtIns.getMapEntry())) {
    ClassifierDescriptor valueClassifier=getSubstituteForTypeParameterOf(builtIns.getMapEntry(),1);
    addStubSignature(result,"setValue(Ljava/lang/Object;)Ljava/lang/Object;",valueClassifier,valueClassifier);
  }
  if (isSubclass(descriptor,builtIns.getIterator())) {
    addStubSignature(result,"remove()V",builtIns.getUnit());
  }
  return result;
}
