{
  List<String> result=Lists.newArrayList();
  KotlinBuiltIns builtIns=KotlinBuiltIns.getInstance();
  if (isSubclass(descriptor,builtIns.getCollection())) {
    ClassifierDescriptor classifier=getSubstituteForTypeParameterOf(builtIns.getCollection(),0);
    if (CodegenUtil.getDeclaredFunctionByRawSignature(descriptor,Name.identifier("add"),builtIns.getBoolean(),classifier) == null) {
      result.add("add(Ljava/lang/Object;)Z");
    }
    if (CodegenUtil.getDeclaredFunctionByRawSignature(descriptor,Name.identifier("remove"),builtIns.getBoolean(),builtIns.getAny()) == null) {
      result.add("remove(Ljava/lang/Object;)Z");
    }
    if (CodegenUtil.getDeclaredFunctionByRawSignature(descriptor,Name.identifier("addAll"),builtIns.getBoolean(),builtIns.getCollection()) == null) {
      result.add("addAll(Ljava/util/Collection;)Z");
    }
    if (CodegenUtil.getDeclaredFunctionByRawSignature(descriptor,Name.identifier("removeAll"),builtIns.getBoolean(),builtIns.getCollection()) == null) {
      result.add("removeAll(Ljava/util/Collection;)Z");
    }
    if (CodegenUtil.getDeclaredFunctionByRawSignature(descriptor,Name.identifier("retainAll"),builtIns.getBoolean(),builtIns.getCollection()) == null) {
      result.add("retainAll(Ljava/util/Collection;)Z");
    }
    if (CodegenUtil.getDeclaredFunctionByRawSignature(descriptor,Name.identifier("clear"),builtIns.getUnit()) == null) {
      result.add("clear()V");
    }
  }
  if (isSubclass(descriptor,builtIns.getList())) {
    ClassifierDescriptor classifier=getSubstituteForTypeParameterOf(builtIns.getList(),0);
    if (CodegenUtil.getDeclaredFunctionByRawSignature(descriptor,Name.identifier("set"),classifier,builtIns.getInt(),classifier) == null) {
      result.add("set(ILjava/lang/Object;)Ljava/lang/Object;");
    }
    if (CodegenUtil.getDeclaredFunctionByRawSignature(descriptor,Name.identifier("add"),builtIns.getUnit(),builtIns.getInt(),classifier) == null) {
      result.add("add(ILjava/lang/Object;)V");
    }
    if (CodegenUtil.getDeclaredFunctionByRawSignature(descriptor,Name.identifier("remove"),classifier,builtIns.getInt()) == null) {
      result.add("remove(I)Ljava/lang/Object;");
    }
  }
  if (isSubclass(descriptor,builtIns.getMap())) {
    ClassifierDescriptor keyClassifier=getSubstituteForTypeParameterOf(builtIns.getMap(),0);
    ClassifierDescriptor valueClassifier=getSubstituteForTypeParameterOf(builtIns.getMap(),1);
    if (CodegenUtil.getDeclaredFunctionByRawSignature(descriptor,Name.identifier("put"),valueClassifier,keyClassifier,valueClassifier) == null) {
      result.add("put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
    }
    if (CodegenUtil.getDeclaredFunctionByRawSignature(descriptor,Name.identifier("remove"),valueClassifier,builtIns.getAny()) == null) {
      result.add("remove(Ljava/lang/Object;)Ljava/lang/Object;");
    }
    if (CodegenUtil.getDeclaredFunctionByRawSignature(descriptor,Name.identifier("putAll"),builtIns.getUnit(),builtIns.getMap()) == null) {
      result.add("putAll(Ljava/util/Map;)V");
    }
    if (CodegenUtil.getDeclaredFunctionByRawSignature(descriptor,Name.identifier("clear"),builtIns.getUnit()) == null) {
      result.add("clear()V");
    }
  }
  if (isSubclass(descriptor,builtIns.getMapEntry())) {
    ClassifierDescriptor valueClassifier=getSubstituteForTypeParameterOf(builtIns.getMapEntry(),1);
    if (CodegenUtil.getDeclaredFunctionByRawSignature(descriptor,Name.identifier("setValue"),valueClassifier,valueClassifier) == null) {
      result.add("setValue(Ljava/lang/Object;)Ljava/lang/Object;");
    }
  }
  if (isSubclass(descriptor,builtIns.getIterator())) {
    if (CodegenUtil.getDeclaredFunctionByRawSignature(descriptor,Name.identifier("remove"),builtIns.getUnit()) == null) {
      result.add("remove()V");
    }
  }
  return result;
}
