{
  ConstructorDescriptor constructorDescriptor=bindingContext.get(BindingContext.CONSTRUCTOR,constructor);
  if (constructorDescriptor == null) {
    throw new UnsupportedOperationException("failed to get descriptor for secondary constructor");
  }
  CallableMethod method=typeMapper.mapToCallableMethod(constructorDescriptor,kind);
  int flags=Opcodes.ACC_PUBLIC;
  final MethodVisitor mv=v.newMethod(constructor,flags,"<init>",method.getSignature().getAsmMethod().getDescriptor(),null,null);
  if (v.generateCode()) {
    mv.visitCode();
    ConstructorFrameMap frameMap=new ConstructorFrameMap(method,constructorDescriptor,descriptor,kind);
    final InstructionAdapter iv=new InstructionAdapter(mv);
    ExpressionCodegen codegen=new ExpressionCodegen(mv,frameMap,Type.VOID_TYPE,context,state);
    for (    JetDelegationSpecifier initializer : constructor.getInitializers()) {
      if (initializer instanceof JetDelegatorToThisCall) {
        JetDelegatorToThisCall thisCall=(JetDelegatorToThisCall)initializer;
        DeclarationDescriptor thisDescriptor=bindingContext.get(BindingContext.REFERENCE_TARGET,thisCall.getThisReference());
        if (!(thisDescriptor instanceof ConstructorDescriptor)) {
          throw new UnsupportedOperationException("expected 'this' delegator to resolve to constructor");
        }
        generateDelegatorToConstructorCall(iv,codegen,thisCall,(ConstructorDescriptor)thisDescriptor,frameMap,flags);
      }
 else {
        throw new UnsupportedOperationException("unknown initializer type");
      }
    }
    JetExpression bodyExpression=constructor.getBodyExpression();
    if (bodyExpression != null) {
      codegen.gen(bodyExpression,Type.VOID_TYPE);
    }
    mv.visitInsn(Opcodes.RETURN);
    FunctionCodegen.endVisit(mv,"constructor",null);
  }
}
