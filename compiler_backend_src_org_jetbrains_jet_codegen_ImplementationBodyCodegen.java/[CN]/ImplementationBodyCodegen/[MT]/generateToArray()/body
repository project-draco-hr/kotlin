{
  KotlinBuiltIns builtIns=KotlinBuiltIns.getInstance();
  if (isSubclass(descriptor,builtIns.getCollection())) {
    if (CodegenUtil.getDeclaredFunctionByRawSignature(descriptor,Name.identifier("toArray"),builtIns.getArray()) == null) {
      MethodVisitor mv=v.getVisitor().visitMethod(ACC_PUBLIC,"toArray","()[Ljava/lang/Object;",null,null);
      InstructionAdapter iv=new InstructionAdapter(mv);
      mv.visitCode();
      iv.load(0,classAsmType);
      iv.invokestatic("jet/runtime/CollectionToArray","toArray","(Ljava/util/Collection;)[Ljava/lang/Object;");
      iv.areturn(Type.getObjectType("[Ljava/lang/Object;"));
      FunctionCodegen.endVisit(mv,"toArray",myClass);
    }
    if (!isGenericToArrayPresent()) {
      MethodVisitor mv=v.getVisitor().visitMethod(ACC_PUBLIC,"toArray","([Ljava/lang/Object;)[Ljava/lang/Object;",null,null);
      InstructionAdapter iv=new InstructionAdapter(mv);
      mv.visitCode();
      iv.load(0,classAsmType);
      iv.load(1,Type.getObjectType("[Ljava/lang/Object;"));
      iv.invokestatic("jet/runtime/CollectionToArray","toArray","(Ljava/util/Collection;[Ljava/lang/Object;)[Ljava/lang/Object;");
      iv.areturn(Type.getObjectType("[Ljava/lang/Object;"));
      FunctionCodegen.endVisit(mv,"toArray",myClass);
    }
  }
}
