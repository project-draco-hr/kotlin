{
  final MethodVisitor mv=v.getVisitor().visitMethod(ACC_PUBLIC,"hashCode","()I",null,null);
  final InstructionAdapter iv=new InstructionAdapter(mv);
  mv.visitCode();
  boolean first=true;
  for (  PropertyDescriptor propertyDescriptor : properties) {
    if (!first) {
      iv.iconst(31);
      iv.mul(Type.INT_TYPE);
    }
    genPropertyOnStack(iv,propertyDescriptor,0);
    Label ifNull=null;
    if (propertyDescriptor.getType().isNullable()) {
      ifNull=new Label();
      iv.dup();
      iv.ifnull(ifNull);
    }
    genHashCode(mv,iv,typeMapper.mapType(propertyDescriptor.getType()));
    if (ifNull != null) {
      Label end=new Label();
      iv.goTo(end);
      iv.mark(ifNull);
      iv.pop();
      iv.iconst(0);
      iv.mark(end);
    }
    if (first) {
      first=false;
    }
 else {
      iv.add(Type.INT_TYPE);
    }
  }
  mv.visitInsn(IRETURN);
  FunctionCodegen.endVisit(mv,"hashCode",myClass);
}
