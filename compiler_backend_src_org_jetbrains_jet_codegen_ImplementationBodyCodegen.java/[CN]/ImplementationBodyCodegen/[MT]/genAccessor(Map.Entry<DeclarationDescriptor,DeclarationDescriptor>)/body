{
  if (entry.getValue() instanceof FunctionDescriptor) {
    FunctionDescriptor bridge=(FunctionDescriptor)entry.getValue();
    FunctionDescriptor original=(FunctionDescriptor)entry.getKey();
    Method method=typeMapper.mapSignature(bridge.getName(),bridge).getAsmMethod();
    Method originalMethod=typeMapper.mapSignature(original.getName(),original).getAsmMethod();
    Type[] argTypes=method.getArgumentTypes();
    MethodVisitor mv=v.newMethod(null,ACC_PUBLIC | ACC_BRIDGE | ACC_FINAL,bridge.getName().getName(),method.getDescriptor(),null,null);
    if (state.getClassBuilderMode() == ClassBuilderMode.STUBS) {
      StubCodegen.generateStubCode(mv);
    }
 else     if (state.getClassBuilderMode() == ClassBuilderMode.FULL) {
      mv.visitCode();
      InstructionAdapter iv=new InstructionAdapter(mv);
      iv.load(0,JetTypeMapper.TYPE_OBJECT);
      for (int i=0, reg=1; i < argTypes.length; i++) {
        Type argType=argTypes[i];
        iv.load(reg,argType);
        reg+=argType.getSize();
      }
      iv.invokespecial(typeMapper.getOwner(original,OwnerKind.IMPLEMENTATION),originalMethod.getName(),originalMethod.getDescriptor());
      iv.areturn(method.getReturnType());
      FunctionCodegen.endVisit(iv,"accessor",null);
    }
  }
 else   if (entry.getValue() instanceof PropertyDescriptor) {
    PropertyDescriptor bridge=(PropertyDescriptor)entry.getValue();
    PropertyDescriptor original=(PropertyDescriptor)entry.getKey();
{
      Method method=typeMapper.mapGetterSignature(bridge,OwnerKind.IMPLEMENTATION).getJvmMethodSignature().getAsmMethod();
      JvmPropertyAccessorSignature originalSignature=typeMapper.mapGetterSignature(original,OwnerKind.IMPLEMENTATION);
      Method originalMethod=originalSignature.getJvmMethodSignature().getAsmMethod();
      MethodVisitor mv=v.newMethod(null,ACC_PUBLIC | ACC_BRIDGE | ACC_FINAL,method.getName(),method.getDescriptor(),null,null);
      PropertyCodegen.generateJetPropertyAnnotation(mv,originalSignature.getPropertyTypeKotlinSignature(),originalSignature.getJvmMethodSignature().getKotlinTypeParameter());
      if (state.getClassBuilderMode() == ClassBuilderMode.STUBS) {
        StubCodegen.generateStubCode(mv);
      }
 else       if (state.getClassBuilderMode() == ClassBuilderMode.FULL) {
        mv.visitCode();
        InstructionAdapter iv=new InstructionAdapter(mv);
        iv.load(0,JetTypeMapper.TYPE_OBJECT);
        if (original.getVisibility() == Visibilities.PRIVATE)         iv.getfield(typeMapper.getOwner(original,OwnerKind.IMPLEMENTATION),original.getName().getName(),originalMethod.getReturnType().getDescriptor());
 else         iv.invokespecial(typeMapper.getOwner(original,OwnerKind.IMPLEMENTATION),originalMethod.getName(),originalMethod.getDescriptor());
        iv.areturn(method.getReturnType());
        FunctionCodegen.endVisit(iv,"accessor",null);
      }
    }
    if (bridge.isVar()) {
      Method method=typeMapper.mapSetterSignature(bridge,OwnerKind.IMPLEMENTATION).getJvmMethodSignature().getAsmMethod();
      JvmPropertyAccessorSignature originalSignature2=typeMapper.mapSetterSignature(original,OwnerKind.IMPLEMENTATION);
      Method originalMethod=originalSignature2.getJvmMethodSignature().getAsmMethod();
      MethodVisitor mv=v.newMethod(null,ACC_PUBLIC | ACC_BRIDGE | ACC_FINAL,method.getName(),method.getDescriptor(),null,null);
      PropertyCodegen.generateJetPropertyAnnotation(mv,originalSignature2.getPropertyTypeKotlinSignature(),originalSignature2.getJvmMethodSignature().getKotlinTypeParameter());
      if (state.getClassBuilderMode() == ClassBuilderMode.STUBS) {
        StubCodegen.generateStubCode(mv);
      }
 else       if (state.getClassBuilderMode() == ClassBuilderMode.FULL) {
        mv.visitCode();
        InstructionAdapter iv=new InstructionAdapter(mv);
        iv.load(0,JetTypeMapper.TYPE_OBJECT);
        Type[] argTypes=method.getArgumentTypes();
        for (int i=0, reg=1; i < argTypes.length; i++) {
          Type argType=argTypes[i];
          iv.load(reg,argType);
          reg+=argType.getSize();
        }
        if (original.getVisibility() == Visibilities.PRIVATE && original.getModality() == Modality.FINAL)         iv.putfield(typeMapper.getOwner(original,OwnerKind.IMPLEMENTATION),original.getName().getName(),originalMethod.getArgumentTypes()[0].getDescriptor());
 else         iv.invokespecial(typeMapper.getOwner(original,OwnerKind.IMPLEMENTATION),originalMethod.getName(),originalMethod.getDescriptor());
        iv.areturn(method.getReturnType());
        FunctionCodegen.endVisit(iv,"accessor",null);
      }
    }
  }
 else {
    throw new UnsupportedOperationException();
  }
}
