{
  int innerClassAccess=getVisibilityAccessFlag(innerClass);
  if (innerClass.getModality() == Modality.FINAL) {
    innerClassAccess|=ACC_FINAL;
  }
 else   if (innerClass.getModality() == Modality.ABSTRACT) {
    innerClassAccess|=ACC_ABSTRACT;
  }
  if (innerClass.getKind() == ClassKind.TRAIT) {
    innerClassAccess|=ACC_INTERFACE;
  }
 else   if (innerClass.getKind() == ClassKind.ENUM_CLASS) {
    innerClassAccess|=ACC_ENUM;
  }
  if (!innerClass.isInner()) {
    innerClassAccess|=ACC_STATIC;
  }
  DeclarationDescriptor containing=innerClass.getContainingDeclaration();
  String outerClassInternalName=containing instanceof ClassDescriptor ? getInternalNameForImpl((ClassDescriptor)containing) : null;
  String innerClassInternalName;
  String innerName;
  if (isClassObject(innerClass)) {
    innerName=JvmAbi.CLASS_OBJECT_CLASS_NAME;
    innerClassInternalName=outerClassInternalName + JvmAbi.CLASS_OBJECT_SUFFIX;
  }
 else {
    innerName=innerClass.getName().isSpecial() ? null : innerClass.getName().asString();
    innerClassInternalName=getInternalNameForImpl(innerClass);
  }
  v.visitInnerClass(innerClassInternalName,outerClassInternalName,innerName,innerClassAccess);
}
