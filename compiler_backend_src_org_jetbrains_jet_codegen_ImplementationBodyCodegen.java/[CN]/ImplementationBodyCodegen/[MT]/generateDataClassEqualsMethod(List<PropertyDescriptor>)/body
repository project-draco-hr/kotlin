{
  final MethodVisitor mv=v.getVisitor().visitMethod(ACC_PUBLIC,"equals","(Ljava/lang/Object;)Z",null,null);
  final InstructionAdapter iv=new InstructionAdapter(mv);
  mv.visitCode();
  Label eq=new Label();
  Label ne=new Label();
  iv.load(0,OBJECT_TYPE);
  iv.load(1,AsmTypeConstants.OBJECT_TYPE);
  iv.ifacmpeq(eq);
  iv.load(1,AsmTypeConstants.OBJECT_TYPE);
  iv.instanceOf(classAsmType);
  iv.ifeq(ne);
  iv.load(1,AsmTypeConstants.OBJECT_TYPE);
  iv.checkcast(classAsmType);
  iv.store(2,AsmTypeConstants.OBJECT_TYPE);
  for (  PropertyDescriptor propertyDescriptor : properties) {
    final JetType type=propertyDescriptor.getType();
    final Type asmType=typeMapper.mapType(type);
    genPropertyOnStack(iv,propertyDescriptor,0);
    genPropertyOnStack(iv,propertyDescriptor,2);
    if (asmType.getSort() == Type.ARRAY) {
      final Type elementType=CodegenUtil.correctElementType(asmType);
      if (elementType.getSort() == Type.OBJECT || elementType.getSort() == Type.ARRAY) {
        iv.invokestatic("java/util/Arrays","equals","([Ljava/lang/Object;[Ljava/lang/Object;)Z");
      }
 else {
        iv.invokestatic("java/util/Arrays","equals","([" + elementType.getDescriptor() + "["+ elementType.getDescriptor()+ ")Z");
      }
    }
 else {
      final StackValue value=generateEqualsForExpressionsOnStack(iv,JetTokens.EQEQ,asmType,asmType,type.isNullable(),type.isNullable());
      value.put(Type.BOOLEAN_TYPE,iv);
    }
    iv.ifeq(ne);
  }
  iv.mark(eq);
  iv.iconst(1);
  iv.areturn(Type.INT_TYPE);
  iv.mark(ne);
  iv.iconst(0);
  iv.areturn(Type.INT_TYPE);
  FunctionCodegen.endVisit(mv,"equals",myClass);
}
