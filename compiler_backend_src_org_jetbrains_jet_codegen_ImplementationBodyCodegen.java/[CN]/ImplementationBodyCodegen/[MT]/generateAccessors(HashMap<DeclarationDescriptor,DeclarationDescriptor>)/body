{
  if (accessors != null) {
    for (    Map.Entry<DeclarationDescriptor,DeclarationDescriptor> entry : accessors.entrySet()) {
      if (entry.getValue() instanceof FunctionDescriptor) {
        FunctionDescriptor bridge=(FunctionDescriptor)entry.getValue();
        FunctionDescriptor original=(FunctionDescriptor)entry.getKey();
        Method method=typeMapper.mapSignature(bridge.getName(),bridge);
        Method originalMethod=typeMapper.mapSignature(original.getName(),original);
        Type[] argTypes=method.getArgumentTypes();
        MethodVisitor mv=v.newMethod(null,Opcodes.ACC_PUBLIC | Opcodes.ACC_BRIDGE | Opcodes.ACC_FINAL,bridge.getName(),method.getDescriptor(),null,null);
        if (v.generateCode()) {
          mv.visitCode();
          InstructionAdapter iv=new InstructionAdapter(mv);
          iv.load(0,JetTypeMapper.TYPE_OBJECT);
          for (int i=0, reg=1; i < argTypes.length; i++) {
            Type argType=argTypes[i];
            iv.load(reg,argType);
            reg+=argType.getSize();
          }
          iv.invokespecial(typeMapper.getOwner(original,OwnerKind.IMPLEMENTATION),originalMethod.getName(),originalMethod.getDescriptor());
          iv.areturn(method.getReturnType());
          mv.visitMaxs(0,0);
          mv.visitEnd();
        }
      }
 else       if (entry.getValue() instanceof PropertyDescriptor) {
        PropertyDescriptor bridge=(PropertyDescriptor)entry.getValue();
        PropertyDescriptor original=(PropertyDescriptor)entry.getKey();
        Method method=typeMapper.mapGetterSignature(bridge,OwnerKind.IMPLEMENTATION);
        Method originalMethod=typeMapper.mapGetterSignature(original,OwnerKind.IMPLEMENTATION);
        MethodVisitor mv=v.newMethod(null,Opcodes.ACC_PUBLIC | Opcodes.ACC_BRIDGE | Opcodes.ACC_FINAL,method.getName(),method.getDescriptor(),null,null);
        InstructionAdapter iv=null;
        if (v.generateCode()) {
          mv.visitCode();
          iv=new InstructionAdapter(mv);
          iv.load(0,JetTypeMapper.TYPE_OBJECT);
          if (original.getVisibility() == Visibility.PRIVATE)           iv.getfield(typeMapper.getOwner(original,OwnerKind.IMPLEMENTATION),original.getName(),originalMethod.getReturnType().getDescriptor());
 else           iv.invokespecial(typeMapper.getOwner(original,OwnerKind.IMPLEMENTATION),originalMethod.getName(),originalMethod.getDescriptor());
          iv.areturn(method.getReturnType());
          mv.visitMaxs(0,0);
          mv.visitEnd();
        }
        method=typeMapper.mapSetterSignature(bridge,OwnerKind.IMPLEMENTATION);
        originalMethod=typeMapper.mapSetterSignature(original,OwnerKind.IMPLEMENTATION);
        mv=v.newMethod(null,Opcodes.ACC_PUBLIC | Opcodes.ACC_BRIDGE | Opcodes.ACC_FINAL,method.getName(),method.getDescriptor(),null,null);
        if (v.generateCode()) {
          mv.visitCode();
          iv=new InstructionAdapter(mv);
          iv.load(0,JetTypeMapper.TYPE_OBJECT);
          Type[] argTypes=method.getArgumentTypes();
          for (int i=0, reg=1; i < argTypes.length; i++) {
            Type argType=argTypes[i];
            iv.load(reg,argType);
            reg+=argType.getSize();
          }
          if (original.getVisibility() == Visibility.PRIVATE)           iv.putfield(typeMapper.getOwner(original,OwnerKind.IMPLEMENTATION),original.getName(),originalMethod.getArgumentTypes()[0].getDescriptor());
 else           iv.invokespecial(typeMapper.getOwner(original,OwnerKind.IMPLEMENTATION),originalMethod.getName(),originalMethod.getDescriptor());
          iv.areturn(method.getReturnType());
          mv.visitMaxs(0,0);
          mv.visitEnd();
        }
      }
 else {
        throw new UnsupportedOperationException();
      }
    }
  }
}
