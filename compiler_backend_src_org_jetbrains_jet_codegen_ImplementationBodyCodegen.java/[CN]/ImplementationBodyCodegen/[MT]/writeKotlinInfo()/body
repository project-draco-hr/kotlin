{
  AnnotationVisitor av=v.getVisitor().visitAnnotation(JvmStdlibNames.KOTLIN_INFO_CLASS.getDescriptor(),true);
  DescriptorSerializer serializer=new DescriptorSerializer(DescriptorNamer.DEFAULT);
  final ByteArrayOutputStream classStream=new ByteArrayOutputStream();
  ClassSerializationUtil.serializeClass(descriptor,constantSerializer(serializer),new ClassSerializationUtil.Sink(){
    @Override public void writeClass(    @NotNull ClassDescriptor classDescriptor,    @NotNull ProtoBuf.Class classProto){
      if (classDescriptor == descriptor) {
        try {
          classProto.writeTo(classStream);
        }
 catch (        IOException e) {
          throw ExceptionUtils.rethrow(e);
        }
      }
    }
  }
);
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  NameSerializationUtil.serializeNameTable(out,serializer.getNameTable());
  try {
    out.write(classStream.toByteArray());
  }
 catch (  IOException e) {
    throw ExceptionUtils.rethrow(e);
  }
  av.visit("data",out.toByteArray());
  av.visitEnd();
}
