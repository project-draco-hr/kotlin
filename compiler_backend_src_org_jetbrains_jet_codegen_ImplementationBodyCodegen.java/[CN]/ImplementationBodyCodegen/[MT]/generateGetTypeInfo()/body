{
  if (myClass instanceof JetClass && ((JetClass)myClass).isTrait())   return;
  JetType defaultType=descriptor.getDefaultType();
  if (CodegenUtil.requireTypeInfoConstructorArg(defaultType)) {
    if (!CodegenUtil.hasDerivedTypeInfoField(defaultType)) {
      v.newField(myClass,Opcodes.ACC_PROTECTED,JvmAbi.TYPE_INFO_FIELD,"Ljet/TypeInfo;",null,null);
      MethodVisitor mv=v.newMethod(myClass,Opcodes.ACC_PUBLIC,JvmStdlibNames.JET_OBJECT_GET_TYPEINFO_METHOD,"()Ljet/TypeInfo;",null,null);
      if (v.generateCode()) {
        mv.visitCode();
        InstructionAdapter iv=new InstructionAdapter(mv);
        String owner=typeMapper.mapType(descriptor.getDefaultType(),OwnerKind.IMPLEMENTATION).getInternalName();
        iv.load(0,JetTypeMapper.TYPE_OBJECT);
        iv.getfield(owner,JvmAbi.TYPE_INFO_FIELD,"Ljet/TypeInfo;");
        iv.areturn(JetTypeMapper.TYPE_TYPEINFO);
        FunctionCodegen.endVisit(iv,JvmStdlibNames.JET_OBJECT_GET_TYPEINFO_METHOD,myClass);
      }
      mv=v.newMethod(myClass,Opcodes.ACC_PROTECTED | Opcodes.ACC_FINAL,JvmAbi.SET_TYPE_INFO_METHOD,"(Ljet/TypeInfo;)V",null,null);
      if (v.generateCode()) {
        mv.visitCode();
        InstructionAdapter iv=new InstructionAdapter(mv);
        String owner=typeMapper.mapType(descriptor.getDefaultType(),OwnerKind.IMPLEMENTATION).getInternalName();
        iv.load(0,JetTypeMapper.TYPE_OBJECT);
        iv.load(1,JetTypeMapper.TYPE_OBJECT);
        iv.putfield(owner,JvmAbi.TYPE_INFO_FIELD,"Ljet/TypeInfo;");
        mv.visitInsn(Opcodes.RETURN);
        FunctionCodegen.endVisit(iv,JvmAbi.SET_TYPE_INFO_METHOD,myClass);
      }
    }
  }
 else {
    genGetStaticGetTypeInfoMethod();
    staticTypeInfoField();
  }
}
