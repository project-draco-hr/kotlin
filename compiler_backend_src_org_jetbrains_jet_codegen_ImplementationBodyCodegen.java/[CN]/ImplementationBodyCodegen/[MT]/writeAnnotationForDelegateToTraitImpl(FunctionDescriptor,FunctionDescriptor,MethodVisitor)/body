{
  JvmMethodSignature jvmSignature=typeMapper.mapToCallableMethod(inheritedFun,false,isCallInsideSameClassAsDeclared(inheritedFun,context),isCallInsideSameModuleAsDeclared(inheritedFun,context),OwnerKind.IMPLEMENTATION).getSignature();
  JetMethodAnnotationWriter aw=JetMethodAnnotationWriter.visitAnnotation(mv);
  int kotlinFlags=getFlagsForVisibility(fun.getVisibility());
  if (fun instanceof PropertyAccessorDescriptor) {
    kotlinFlags|=JvmStdlibNames.FLAG_PROPERTY_BIT;
    aw.writeTypeParameters(jvmSignature.getKotlinTypeParameter());
    aw.writePropertyType(jvmSignature.getKotlinReturnType());
  }
 else {
    aw.writeTypeParameters(jvmSignature.getKotlinTypeParameter());
    aw.writeReturnType(jvmSignature.getKotlinReturnType());
  }
  kotlinFlags|=DescriptorKindUtils.kindToFlags(inheritedFun.getKind());
  aw.writeFlags(kotlinFlags);
  aw.visitEnd();
}
