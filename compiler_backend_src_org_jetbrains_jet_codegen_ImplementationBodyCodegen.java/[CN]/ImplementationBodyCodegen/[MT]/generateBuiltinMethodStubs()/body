{
  KotlinBuiltIns builtIns=KotlinBuiltIns.getInstance();
  MethodStubGenerator methodStubs=new MethodStubGenerator();
  if (isSubclass(descriptor,builtIns.getCollection())) {
    ClassifierDescriptor classifier=getSubstituteForTypeParameterOf(builtIns.getCollection(),0);
    methodStubs.generate("add","(Ljava/lang/Object;)Z",builtIns.getBoolean(),classifier);
    methodStubs.generate("remove","(Ljava/lang/Object;)Z",builtIns.getBoolean(),builtIns.getAny());
    methodStubs.generate("addAll","(Ljava/util/Collection;)Z",builtIns.getBoolean(),builtIns.getCollection());
    methodStubs.generate("removeAll","(Ljava/util/Collection;)Z",builtIns.getBoolean(),builtIns.getCollection());
    methodStubs.generate("retainAll","(Ljava/util/Collection;)Z",builtIns.getBoolean(),builtIns.getCollection());
    methodStubs.generate("clear","()V",builtIns.getUnit());
  }
  if (isSubclass(descriptor,builtIns.getList())) {
    ClassifierDescriptor classifier=getSubstituteForTypeParameterOf(builtIns.getList(),0);
    methodStubs.generate("set","(ILjava/lang/Object;)Ljava/lang/Object;",classifier,builtIns.getInt(),classifier);
    methodStubs.generate("add","(ILjava/lang/Object;)V",builtIns.getUnit(),builtIns.getInt(),classifier);
    methodStubs.generate("remove","(I)Ljava/lang/Object;",classifier,builtIns.getInt());
  }
  if (isSubclass(descriptor,builtIns.getMap())) {
    ClassifierDescriptor keyClassifier=getSubstituteForTypeParameterOf(builtIns.getMap(),0);
    ClassifierDescriptor valueClassifier=getSubstituteForTypeParameterOf(builtIns.getMap(),1);
    methodStubs.generate("put","(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;",valueClassifier,keyClassifier,valueClassifier);
    methodStubs.generate("remove","(Ljava/lang/Object;)Ljava/lang/Object;",valueClassifier,builtIns.getAny());
    methodStubs.generate("putAll","(Ljava/util/Map;)V",builtIns.getUnit(),builtIns.getMap());
    methodStubs.generate("clear","()V",builtIns.getUnit());
  }
  if (isSubclass(descriptor,builtIns.getMapEntry())) {
    ClassifierDescriptor valueClassifier=getSubstituteForTypeParameterOf(builtIns.getMapEntry(),1);
    methodStubs.generate("setValue","(Ljava/lang/Object;)Ljava/lang/Object;",valueClassifier,valueClassifier);
  }
  if (isSubclass(descriptor,builtIns.getIterator())) {
    methodStubs.generate("remove","()V",builtIns.getUnit());
  }
}
