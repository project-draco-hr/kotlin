{
  ConstructorDescriptor constructorDescriptor=state.getBindingContext().get(BindingContext.CONSTRUCTOR,constructor);
  if (constructorDescriptor == null) {
    throw new UnsupportedOperationException("failed to get descriptor for secondary constructor");
  }
  CallableMethod method=state.getTypeMapper().mapToCallableMethod(constructorDescriptor,kind);
  int flags=Opcodes.ACC_PUBLIC;
  final MethodVisitor mv=v.visitMethod(flags,"<init>",method.getSignature().getDescriptor(),null,null);
  mv.visitCode();
  ConstructorFrameMap frameMap=new ConstructorFrameMap(method,constructorDescriptor,descriptor,kind);
  final InstructionAdapter iv=new InstructionAdapter(mv);
  ExpressionCodegen codegen=new ExpressionCodegen(mv,frameMap,Type.VOID_TYPE,context,state);
  for (  JetDelegationSpecifier initializer : constructor.getInitializers()) {
    if (initializer instanceof JetDelegatorToThisCall) {
      JetDelegatorToThisCall thisCall=(JetDelegatorToThisCall)initializer;
      DeclarationDescriptor thisDescriptor=state.getBindingContext().get(BindingContext.REFERENCE_TARGET,thisCall.getThisReference());
      if (!(thisDescriptor instanceof ConstructorDescriptor)) {
        throw new UnsupportedOperationException("expected 'this' delegator to resolve to constructor");
      }
      generateDelegatorToConstructorCall(iv,codegen,thisCall,(ConstructorDescriptor)thisDescriptor,frameMap);
    }
 else {
      throw new UnsupportedOperationException("unknown initializer type");
    }
  }
  JetExpression bodyExpression=constructor.getBodyExpression();
  if (bodyExpression != null) {
    codegen.gen(bodyExpression,Type.VOID_TYPE);
  }
  mv.visitInsn(Opcodes.RETURN);
  mv.visitMaxs(0,0);
  mv.visitEnd();
}
