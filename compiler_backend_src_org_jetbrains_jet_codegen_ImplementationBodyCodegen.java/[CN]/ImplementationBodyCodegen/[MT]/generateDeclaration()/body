{
  getSuperClass();
  List<String> interfaces=new ArrayList<String>();
  interfaces.add(StdlibNames.JET_OBJECT_TYPE.getInternalName());
  interfaces.addAll(getSuperInterfaces(myClass));
  boolean isAbstract=false;
  boolean isInterface=false;
  if (myClass instanceof JetClass) {
    if (((JetClass)myClass).hasModifier(JetTokens.ABSTRACT_KEYWORD))     isAbstract=true;
    if (((JetClass)myClass).isTrait()) {
      isAbstract=true;
      isInterface=true;
    }
  }
  v.defineClass(myClass,Opcodes.V1_6,Opcodes.ACC_PUBLIC | (isAbstract ? Opcodes.ACC_ABSTRACT : 0) | (isInterface ? Opcodes.ACC_INTERFACE : 0),jvmName(),genericSignature(),superClass,interfaces.toArray(new String[interfaces.size()]));
  v.visitSource(myClass.getContainingFile().getName(),null);
  if (descriptor.getContainingDeclaration() instanceof ClassDescriptor) {
    v.visitOuterClass(typeMapper.mapType(((ClassDescriptor)descriptor.getContainingDeclaration()).getDefaultType(),OwnerKind.IMPLEMENTATION).getInternalName(),null,null);
  }
  if (myClass instanceof JetClass) {
    AnnotationVisitor annotationVisitor=v.newAnnotation(myClass,"Ljet/typeinfo/JetSignature;",true);
    annotationVisitor.visit("value",SignatureUtil.classToSignature((JetClass)myClass,bindingContext,typeMapper));
    annotationVisitor.visitEnd();
  }
}
