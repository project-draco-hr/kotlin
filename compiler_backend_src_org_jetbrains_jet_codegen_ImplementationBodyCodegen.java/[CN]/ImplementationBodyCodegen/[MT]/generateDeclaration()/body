{
  getSuperClass();
  JvmClassSignature signature=signature();
  boolean isAbstract=false;
  boolean isInterface=false;
  boolean isFinal=false;
  boolean isStatic=false;
  if (myClass instanceof JetClass) {
    JetClass jetClass=(JetClass)myClass;
    if (jetClass.hasModifier(JetTokens.ABSTRACT_KEYWORD))     isAbstract=true;
    if (jetClass.isTrait()) {
      isAbstract=true;
      isInterface=true;
    }
    if (!jetClass.hasModifier(JetTokens.OPEN_KEYWORD) && !isAbstract) {
      isFinal=true;
    }
  }
 else   if (myClass.getParent() instanceof JetClassObject) {
    isStatic=true;
  }
  int access=0;
  access|=ACC_PUBLIC;
  if (isAbstract) {
    access|=ACC_ABSTRACT;
  }
  if (isInterface) {
    access|=ACC_INTERFACE;
  }
  if (isFinal) {
    access|=ACC_FINAL;
  }
  if (isStatic) {
    access|=ACC_STATIC;
  }
  v.defineClass(myClass,V1_6,access,signature.getName(),signature.getJavaGenericSignature(),signature.getSuperclassName(),signature.getInterfaces().toArray(new String[0]));
  v.visitSource(myClass.getContainingFile().getName(),null);
  ClassDescriptor container=getContainingClassDescriptor(descriptor);
  if (container != null) {
    v.visitOuterClass(typeMapper.mapType(container.getDefaultType(),OwnerKind.IMPLEMENTATION).getInternalName(),null,null);
  }
  for (  ClassDescriptor innerClass : descriptor.getInnerClassesAndObjects()) {
    int innerClassAccess=ACC_PUBLIC;
    if (innerClass.getModality() == Modality.FINAL) {
      innerClassAccess|=ACC_FINAL;
    }
 else     if (innerClass.getModality() == Modality.ABSTRACT) {
      innerClassAccess|=ACC_ABSTRACT;
    }
    String outerClassInernalName=typeMapper.mapType(descriptor.getDefaultType(),OwnerKind.IMPLEMENTATION).getInternalName();
    String innerClassInternalName=typeMapper.mapType(innerClass.getDefaultType(),OwnerKind.IMPLEMENTATION).getInternalName();
    v.visitInnerClass(innerClassInternalName,outerClassInernalName,innerClass.getName(),innerClassAccess);
  }
  if (myClass instanceof JetClass && signature.getKotlinGenericSignature() != null) {
    AnnotationVisitor annotationVisitor=v.newAnnotation(myClass,JvmStdlibNames.JET_CLASS.getDescriptor(),true);
    annotationVisitor.visit(JvmStdlibNames.JET_CLASS_SIGNATURE,signature.getKotlinGenericSignature());
    annotationVisitor.visitEnd();
  }
}
