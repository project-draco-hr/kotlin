{
  getSuperClass();
  JvmClassSignature signature=signature();
  boolean isAbstract=false;
  boolean isInterface=false;
  if (myClass instanceof JetClass) {
    if (((JetClass)myClass).hasModifier(JetTokens.ABSTRACT_KEYWORD))     isAbstract=true;
    if (((JetClass)myClass).isTrait()) {
      isAbstract=true;
      isInterface=true;
    }
  }
  v.defineClass(myClass,Opcodes.V1_6,Opcodes.ACC_PUBLIC | (isAbstract ? Opcodes.ACC_ABSTRACT : 0) | (isInterface ? Opcodes.ACC_INTERFACE : 0),signature.getName(),signature.getJavaGenericSignature(),signature.getSuperclassName(),signature.getInterfaces().toArray(new String[0]));
  v.visitSource(myClass.getContainingFile().getName(),null);
  if (descriptor.getContainingDeclaration() instanceof ClassDescriptor) {
    v.visitOuterClass(typeMapper.mapType(((ClassDescriptor)descriptor.getContainingDeclaration()).getDefaultType(),OwnerKind.IMPLEMENTATION).getInternalName(),null,null);
  }
  if (myClass instanceof JetClass && signature.getKotlinGenericSignature() != null) {
    AnnotationVisitor annotationVisitor=v.newAnnotation(myClass,StdlibNames.JET_CLASS.getDescriptor(),true);
    annotationVisitor.visit(StdlibNames.JET_CLASS_SIGNATURE,signature.getKotlinGenericSignature());
    annotationVisitor.visitEnd();
  }
}
