{
  List<JetDelegationSpecifier> delegationSpecifiers=myClass.getDelegationSpecifiers();
  if (myClass instanceof JetClass && ((JetClass)myClass).isTrait())   return;
  for (  JetDelegationSpecifier specifier : delegationSpecifiers) {
    if (specifier instanceof JetDelegatorToSuperClass || specifier instanceof JetDelegatorToSuperCall) {
      JetType superType=state.getBindingContext().get(BindingContext.TYPE,specifier.getTypeReference());
      ClassDescriptor superClassDescriptor=(ClassDescriptor)superType.getConstructor().getDeclarationDescriptor();
      final PsiElement declaration=state.getBindingContext().get(BindingContext.DESCRIPTOR_TO_DECLARATION,superClassDescriptor);
      if (declaration != null) {
        if (declaration instanceof PsiClass) {
          if (!((PsiClass)declaration).isInterface()) {
            superClass=state.getTypeMapper().jvmName(superClassDescriptor,kind);
            superCall=specifier;
            return;
          }
        }
 else         if (declaration instanceof JetClass) {
          if (!((JetClass)declaration).isTrait()) {
            superClass=state.getTypeMapper().jvmName(superClassDescriptor,kind);
            superCall=specifier;
          }
        }
      }
    }
  }
}
