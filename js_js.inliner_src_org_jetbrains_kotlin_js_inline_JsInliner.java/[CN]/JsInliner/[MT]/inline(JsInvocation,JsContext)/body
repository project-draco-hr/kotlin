{
  JsInliningContext inliningContext=getInliningContext();
  FunctionContext functionContext=getFunctionContext();
  functionContext.declareFunctionConstructorCalls(call.getArguments());
  InlineableResult inlineableResult=getInlineableCallReplacement(call,inliningContext);
  JsStatement inlineableBody=inlineableResult.getInlineableBody();
  JsExpression resultExpression=inlineableResult.getResultExpression();
  JsContext<JsStatement> statementContext=inliningContext.getStatementContext();
  accept(inlineableBody);
  statementContext.addPrevious(flattenStatement(inlineableBody));
  if (resultExpression == null) {
    statementContext.removeMe();
    return;
  }
  resultExpression=accept(resultExpression);
  context.replaceMe(resultExpression);
}
