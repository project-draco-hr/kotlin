{
  ConcurrentMap<String,PsiPackage> cache=SoftReference.dereference(myPackageCache);
  if (cache == null) {
    myPackageCache=new SoftReference<ConcurrentMap<String,PsiPackage>>(cache=new ConcurrentHashMap<String,PsiPackage>());
  }
  PsiPackage aPackage=cache.get(qualifiedName);
  if (aPackage != null) {
    return aPackage;
  }
  for (  KotlinPsiElementFinderWrapper finder : filteredFinders()) {
    aPackage=finder.findPackage(qualifiedName,searchScope);
    if (aPackage != null) {
      return ConcurrencyUtil.cacheOrGet(cache,qualifiedName,aPackage);
    }
  }
  return null;
}
