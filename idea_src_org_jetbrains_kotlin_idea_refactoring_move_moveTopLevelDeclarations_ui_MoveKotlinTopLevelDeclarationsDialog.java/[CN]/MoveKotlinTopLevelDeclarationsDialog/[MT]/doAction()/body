{
  KotlinMoveTarget target=selectMoveTarget();
  if (target == null)   return;
  saveRefactoringSettings();
  List<KtNamedDeclaration> elementsToMove=getSelectedElementsToMove();
  final List<KtFile> sourceFiles=getSourceFiles(elementsToMove);
  final PsiDirectory sourceDirectory=getSourceDirectory(sourceFiles);
  for (  PsiElement element : elementsToMove) {
    String message=target.verify(element.getContainingFile());
    if (message != null) {
      CommonRefactoringUtil.showErrorMessage(RefactoringBundle.message("error.title"),message,null,myProject);
      return;
    }
  }
  try {
    boolean deleteSourceFile=false;
    if (isFullFileMove()) {
      if (isMoveToPackage()) {
        final MoveDestination moveDestination=selectPackageBasedMoveDestination(false);
        PsiDirectory targetDir=moveDestination.getTargetIfExists(sourceDirectory);
        final String targetFileName=sourceFiles.size() > 1 ? null : tfFileNameInPackage.getText();
        List<PsiFile> filesExistingInTargetDir=getFilesExistingInTargetDir(sourceFiles,targetFileName,targetDir);
        if (filesExistingInTargetDir.isEmpty()) {
          PsiDirectory targetDirectory=ApplicationUtilsKt.runWriteAction(new Function0<PsiDirectory>(){
            @Override public PsiDirectory invoke(){
              return moveDestination.getTargetDirectory(sourceDirectory);
            }
          }
);
          for (          KtFile sourceFile : sourceFiles) {
            MoveUtilsKt.setUpdatePackageDirective(sourceFile,cbUpdatePackageDirective.isSelected());
          }
          invokeRefactoring(new MoveFilesOrDirectoriesProcessor(myProject,sourceFiles.toArray(new PsiElement[sourceFiles.size()]),targetDirectory,true,isSearchInComments(),isSearchInNonJavaFiles(),new MoveCallback(){
            @Override public void refactoringCompleted(){
              try {
                if (targetFileName != null) {
                  CollectionsKt.single(sourceFiles).setName(targetFileName);
                }
              }
  finally {
                if (moveCallback != null) {
                  moveCallback.refactoringCompleted();
                }
              }
            }
          }
,EmptyRunnable.INSTANCE){
            @Override protected String getCommandName(){
              return targetFileName != null ? "Move " + CollectionsKt.single(sourceFiles).getName() : "Move";
            }
            @Override protected void performRefactoring(            @NotNull UsageInfo[] usages){
              if (targetFileName != null) {
                KtFile sourceFile=CollectionsKt.single(sourceFiles);
                String temporaryName=UniqueNameGenerator.generateUniqueName("temp","",".kt",ArraysKt.map(sourceFile.getContainingDirectory().getFiles(),new Function1<PsiFile,String>(){
                  @Override public String invoke(                  PsiFile file){
                    return file.getName();
                  }
                }
));
                sourceFile.setName(temporaryName);
              }
              super.performRefactoring(usages);
            }
          }
);
          return;
        }
      }
      int ret=Messages.showYesNoCancelDialog(myProject,"You are about to move all declarations out of the source file(s). Do you want to delete empty files?",RefactoringBundle.message("move.title"),Messages.getQuestionIcon());
      if (ret == Messages.CANCEL)       return;
      deleteSourceFile=ret == Messages.YES;
    }
    MoveKotlinTopLevelDeclarationsOptions options=new MoveKotlinTopLevelDeclarationsOptions(elementsToMove,target,isSearchInComments(),isSearchInNonJavaFiles(),true,deleteSourceFile,moveCallback);
    invokeRefactoring(new MoveKotlinTopLevelDeclarationsProcessor(myProject,options,Mover.Default.INSTANCE$));
  }
 catch (  IncorrectOperationException e) {
    CommonRefactoringUtil.showErrorMessage(RefactoringBundle.message("error.title"),e.getMessage(),null,myProject);
  }
}
