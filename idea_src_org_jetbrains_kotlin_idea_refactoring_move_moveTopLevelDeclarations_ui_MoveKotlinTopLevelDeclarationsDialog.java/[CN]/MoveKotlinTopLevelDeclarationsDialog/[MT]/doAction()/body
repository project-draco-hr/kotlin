{
  KotlinMoveTarget target=selectMoveTarget();
  if (target == null)   return;
  saveRefactoringSettings();
  List<JetNamedDeclaration> elementsToMove=getSelectedElementsToMove();
  for (  PsiElement element : elementsToMove) {
    String message=target.verify(element.getContainingFile());
    if (message != null) {
      CommonRefactoringUtil.showErrorMessage(RefactoringBundle.message("error.title"),message,null,myProject);
      return;
    }
  }
  try {
    boolean deleteSourceFile=false;
    if (elementsToMove.size() == sourceFile.getDeclarations().size()) {
      if (isMoveToPackage()) {
        final MoveDestination moveDestination=selectPackageBasedMoveDestination();
        PsiDirectory targetDir=moveDestination.getTargetIfExists(sourceFile);
        final String targetFileName=tfFileNameInPackage.getText();
        if (targetDir == null || targetDir.findFile(targetFileName) == null) {
          PsiDirectory targetDirectory=ApplicationPackage.runWriteAction(new Function0<PsiDirectory>(){
            @Override public PsiDirectory invoke(){
              return moveDestination.getTargetDirectory(sourceFile);
            }
          }
);
          MovePackage.setUpdatePackageDirective(sourceFile,cbUpdatePackageDirective.isSelected());
          invokeRefactoring(new MoveFilesOrDirectoriesProcessor(myProject,new PsiElement[]{sourceFile},targetDirectory,true,isSearchInComments(),isSearchInNonJavaFiles(),new MoveCallback(){
            @Override public void refactoringCompleted(){
              try {
                sourceFile.setName(targetFileName);
              }
  finally {
                if (moveCallback != null) {
                  moveCallback.refactoringCompleted();
                }
              }
            }
          }
,EmptyRunnable.INSTANCE){
            @Override protected String getCommandName(){
              return "Move " + sourceFile.getName();
            }
            @Override protected void performRefactoring(            UsageInfo[] usages){
              String temporaryName=UniqueNameGenerator.generateUniqueName("temp","",".kt",KotlinPackage.map(sourceFile.getContainingDirectory().getFiles(),new Function1<PsiFile,String>(){
                @Override public String invoke(                PsiFile file){
                  return file.getName();
                }
              }
));
              sourceFile.setName(temporaryName);
              super.performRefactoring(usages);
            }
          }
);
          return;
        }
        int ret=Messages.showYesNoCancelDialog(myProject,"You are going to move all declarations out of '" + sourceFile.getVirtualFile().getPath() + "'. Do you want to delete this file?",RefactoringBundle.message("move.title"),Messages.getQuestionIcon());
        if (ret == Messages.CANCEL)         return;
        deleteSourceFile=ret == Messages.YES;
      }
    }
    MoveKotlinTopLevelDeclarationsOptions options=new MoveKotlinTopLevelDeclarationsOptions(elementsToMove,target,isSearchInComments(),isSearchInNonJavaFiles(),true,deleteSourceFile,moveCallback);
    invokeRefactoring(new MoveKotlinTopLevelDeclarationsProcessor(myProject,options,Mover.Default.INSTANCE$));
  }
 catch (  IncorrectOperationException e) {
    CommonRefactoringUtil.showErrorMessage(RefactoringBundle.message("error.title"),e.getMessage(),null,myProject);
  }
}
