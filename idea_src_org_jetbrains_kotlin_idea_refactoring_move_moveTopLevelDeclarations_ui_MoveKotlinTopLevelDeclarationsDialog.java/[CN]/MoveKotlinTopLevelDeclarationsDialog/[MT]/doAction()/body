{
  KotlinMoveTarget target=selectMoveTarget();
  if (target == null)   return;
  saveRefactoringSettings();
  List<JetNamedDeclaration> elementsToMove=getSelectedElementsToMove();
  for (  PsiElement element : elementsToMove) {
    String message=target.verify(element.getContainingFile());
    if (message != null) {
      CommonRefactoringUtil.showErrorMessage(RefactoringBundle.message("error.title"),message,null,myProject);
      return;
    }
  }
  try {
    if (isMoveToPackage() && elementsToMove.equals(sourceFile.getDeclarations())) {
      final MoveDestination moveDestination=selectPackageBasedMoveDestination();
      PsiDirectory targetDir=moveDestination.getTargetIfExists(sourceFile);
      final String targetFileName=tfFileNameInPackage.getText();
      if (targetDir == null || targetDir.findFile(targetFileName) == null) {
        final String temporaryName=UniqueNameGenerator.generateUniqueName("temp","",".kt",KotlinPackage.map(sourceFile.getContainingDirectory().getFiles(),new Function1<PsiFile,String>(){
          @Override public String invoke(          PsiFile file){
            return file.getName();
          }
        }
));
        PsiDirectory targetDirectory=ApplicationPackage.runWriteAction(new Function0<PsiDirectory>(){
          @Override public PsiDirectory invoke(){
            sourceFile.setName(temporaryName);
            return moveDestination.getTargetDirectory(sourceFile);
          }
        }
);
        invokeRefactoring(new MoveFilesOrDirectoriesProcessor(myProject,new PsiElement[]{sourceFile},targetDirectory,RefactoringSettings.getInstance().MOVE_SEARCH_FOR_REFERENCES_FOR_FILE,isSearchInComments(),isSearchInNonJavaFiles(),new MoveCallback(){
          @Override public void refactoringCompleted(){
            try {
              sourceFile.setName(targetFileName);
            }
  finally {
              if (moveCallback != null) {
                moveCallback.refactoringCompleted();
              }
            }
          }
        }
,EmptyRunnable.INSTANCE));
        return;
      }
    }
    MoveKotlinTopLevelDeclarationsOptions options=new MoveKotlinTopLevelDeclarationsOptions(elementsToMove,target,isSearchInComments(),isSearchInNonJavaFiles(),true,moveCallback);
    invokeRefactoring(new MoveKotlinTopLevelDeclarationsProcessor(myProject,options,Mover.Default.INSTANCE$));
  }
 catch (  IncorrectOperationException e) {
    CommonRefactoringUtil.showErrorMessage(RefactoringBundle.message("error.title"),e.getMessage(),null,myProject);
  }
}
