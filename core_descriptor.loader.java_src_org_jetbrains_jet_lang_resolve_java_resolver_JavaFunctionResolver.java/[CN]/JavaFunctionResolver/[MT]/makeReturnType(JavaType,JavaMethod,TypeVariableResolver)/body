{
  TypeUsage typeUsage=annotationResolver.hasReadonlyAnnotation(method) && !annotationResolver.hasMutableAnnotation(method) ? TypeUsage.MEMBER_SIGNATURE_CONTRAVARIANT : TypeUsage.MEMBER_SIGNATURE_COVARIANT;
  JetType transformedType=typeTransformer.transformToType(returnType,typeUsage,typeVariableResolver);
  if (method.getContainingClass().isAnnotationType() || annotationResolver.hasNotNullAnnotation(method)) {
    return TypeUtils.makeNotNullable(transformedType);
  }
 else {
    return transformedType;
  }
}
