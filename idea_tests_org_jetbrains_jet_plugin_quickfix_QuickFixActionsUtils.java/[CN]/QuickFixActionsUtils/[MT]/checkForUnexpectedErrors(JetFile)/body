{
  if (!InTextDirectivesUtils.findLinesWithPrefixesRemoved(file.getText(),"// DISABLE-ERRORS").isEmpty()) {
    return;
  }
  AnalyzeExhaust exhaust=AnalyzerFacadeWithCache.analyzeFileWithCache(file);
  Collection<Diagnostic> diagnostics=exhaust.getBindingContext().getDiagnostics();
  Collection<Diagnostic> errorDiagnostics=Collections2.filter(diagnostics,new Predicate<Diagnostic>(){
    @Override public boolean apply(    @Nullable Diagnostic diagnostic){
      assert(diagnostic != null);
      return diagnostic.getSeverity() == Severity.ERROR;
    }
  }
);
  Collection<String> actualErrorStrings=Collections2.transform(errorDiagnostics,new Function<Diagnostic,String>(){
    @Override public String apply(    @Nullable Diagnostic diagnostic){
      assert(diagnostic != null);
      return IdeErrorMessages.RENDERER.render(diagnostic);
    }
  }
);
  List<String> expectedErrorStrings=InTextDirectivesUtils.findLinesWithPrefixesRemoved(file.getText(),"// ERROR:");
  Collections.sort(expectedErrorStrings);
  UsefulTestCase.assertOrderedEquals("All actual errors should be mentioned in test data with // ERROR: directive. But no unnecessary errors should be me mentioned",Ordering.natural().sortedCopy(actualErrorStrings),expectedErrorStrings);
}
