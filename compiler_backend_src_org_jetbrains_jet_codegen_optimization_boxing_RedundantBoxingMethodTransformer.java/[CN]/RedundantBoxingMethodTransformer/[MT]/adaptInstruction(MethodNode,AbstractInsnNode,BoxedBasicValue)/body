{
  boolean isDoubleSize=value.isDoubleSize();
switch (insn.getOpcode()) {
case Opcodes.POP:
    if (isDoubleSize) {
      node.instructions.set(insn,new InsnNode(Opcodes.POP2));
    }
  break;
case Opcodes.DUP:
if (isDoubleSize) {
  node.instructions.set(insn,new InsnNode(Opcodes.DUP2));
}
break;
case Opcodes.ASTORE:
case Opcodes.ALOAD:
int intVarOpcode=insn.getOpcode() == Opcodes.ASTORE ? Opcodes.ISTORE : Opcodes.ILOAD;
node.instructions.set(insn,new VarInsnNode(value.getPrimitiveType().getOpcode(intVarOpcode),((VarInsnNode)insn).var));
break;
case Opcodes.INSTANCEOF:
node.instructions.insertBefore(insn,new InsnNode(isDoubleSize ? Opcodes.POP2 : Opcodes.POP));
node.instructions.set(insn,new InsnNode(Opcodes.ICONST_1));
break;
default :
node.instructions.remove(insn);
}
}
