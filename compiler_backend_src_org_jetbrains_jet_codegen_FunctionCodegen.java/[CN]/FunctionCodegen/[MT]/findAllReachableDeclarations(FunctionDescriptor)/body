{
  DFS.Neighbors<FunctionDescriptor> neighbors=new DFS.Neighbors<FunctionDescriptor>(){
    @NotNull @Override public Iterable<FunctionDescriptor> getNeighbors(    FunctionDescriptor current){
      return KotlinPackage.map(current.getOverriddenDescriptors(),new Function1<FunctionDescriptor,FunctionDescriptor>(){
        @Override public FunctionDescriptor invoke(        FunctionDescriptor descriptor){
          return descriptor.getOriginal();
        }
      }
);
    }
  }
;
  DFS.NodeHandlerWithListResult<FunctionDescriptor,Method> collector=new DFS.NodeHandlerWithListResult<FunctionDescriptor,Method>(){
    @Override public void afterChildren(    FunctionDescriptor current){
      if (current.getKind() == CallableMemberDescriptor.Kind.DECLARATION) {
        result.add(typeMapper.mapSignature(current).getAsmMethod());
      }
    }
  }
;
  DFS.dfs(Collections.singleton(descriptor),neighbors,collector);
  return new HashSet<Method>(collector.result());
}
