{
  int flags=ACC_PUBLIC | ACC_BRIDGE;
  final MethodVisitor mv=v.newMethod(null,flags,jvmSignature.getName(),overridden.getDescriptor(),null,null);
  if (state.getClassBuilderMode() == ClassBuilderMode.STUBS) {
    genStubCode(mv);
  }
 else   if (state.getClassBuilderMode() == ClassBuilderMode.FULL) {
    mv.visitCode();
    Type[] argTypes=overridden.getArgumentTypes();
    Type[] originalArgTypes=jvmSignature.getArgumentTypes();
    InstructionAdapter iv=new InstructionAdapter(mv);
    iv.load(0,OBJECT_TYPE);
    for (int i=0, reg=1; i < argTypes.length; i++) {
      StackValue.local(reg,argTypes[i]).put(originalArgTypes[i],iv);
      reg+=argTypes[i].getSize();
    }
    iv.invokevirtual(state.getTypeMapper().mapType((ClassDescriptor)owner.getContextDescriptor()).getInternalName(),jvmSignature.getName(),jvmSignature.getDescriptor());
    StackValue.onStack(jvmSignature.getReturnType()).put(overridden.getReturnType(),iv);
    iv.areturn(overridden.getReturnType());
    endVisit(mv,"bridge method",callableDescriptorToDeclaration(state.getBindingContext(),functionDescriptor));
  }
}
