{
  int flags=ACC_PUBLIC | ACC_BRIDGE;
  final MethodVisitor mv=v.newMethod(null,flags,jvmSignature.getName(),overridden.getDescriptor(),null,null);
  if (state.getClassBuilderMode() == ClassBuilderMode.STUBS) {
    StubCodegen.generateStubCode(mv);
  }
 else   if (state.getClassBuilderMode() == ClassBuilderMode.FULL) {
    mv.visitCode();
    Type[] argTypes=overridden.getArgumentTypes();
    Type[] originalArgTypes=jvmSignature.getArgumentTypes();
    InstructionAdapter iv=new InstructionAdapter(mv);
    iv.load(0,OBJECT_TYPE);
    for (int i=0, reg=1; i < argTypes.length; i++) {
      Type argType=argTypes[i];
      iv.load(reg,argType);
      if (argType.getSort() == Type.OBJECT) {
        StackValue.onStack(OBJECT_TYPE).put(originalArgTypes[i],iv);
      }
 else       if (argType.getSort() == Type.ARRAY) {
        StackValue.onStack(JAVA_ARRAY_GENERIC_TYPE).put(originalArgTypes[i],iv);
      }
      reg+=argType.getSize();
    }
    iv.invokevirtual(state.getInjector().getJetTypeMapper().mapType(((ClassDescriptor)owner.getContextDescriptor()).getDefaultType(),MapTypeMode.VALUE).getInternalName(),jvmSignature.getName(),jvmSignature.getDescriptor());
    if (isPrimitive(jvmSignature.getReturnType()) && !isPrimitive(overridden.getReturnType())) {
      StackValue.valueOf(iv,jvmSignature.getReturnType());
    }
    if (jvmSignature.getReturnType() == Type.VOID_TYPE) {
      iv.aconst(null);
    }
    iv.areturn(overridden.getReturnType());
    endVisit(mv,"bridge method",callableDescriptorToDeclaration(state.getBindingContext(),functionDescriptor));
  }
}
