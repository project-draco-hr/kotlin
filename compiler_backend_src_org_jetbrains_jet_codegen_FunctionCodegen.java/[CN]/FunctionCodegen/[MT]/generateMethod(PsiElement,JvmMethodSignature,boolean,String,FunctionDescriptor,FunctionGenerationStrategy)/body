{
  MethodContext context=owner.intoFunction(functionDescriptor);
  Method asmMethod=jvmSignature.getAsmMethod();
  MethodVisitor mv=v.newMethod(origin,getMethodAsmFlags(functionDescriptor,context.getContextKind()),asmMethod.getName(),asmMethod.getDescriptor(),jvmSignature.getGenericsSignature(),null);
  AnnotationCodegen.forMethod(mv,typeMapper).genAnnotations(functionDescriptor);
  if (state.getClassBuilderMode() == ClassBuilderMode.SIGNATURES)   return;
  if (needJetAnnotations) {
    genJetAnnotations(mv,functionDescriptor,propertyTypeSignature);
  }
  if (isAbstract(functionDescriptor,context.getContextKind()))   return;
  if (state.getClassBuilderMode() == ClassBuilderMode.STUBS) {
    genStubCode(mv);
    return;
  }
  generateMethodBody(mv,functionDescriptor,context,jvmSignature,strategy);
  endVisit(mv,null,origin);
  generateBridgeIfNeeded(owner,state,v,jvmSignature.getAsmMethod(),functionDescriptor);
}
