{
  List<ValueParameterDescriptor> paramDescrs=functionDescriptor.getValueParameters();
  Modality modality=functionDescriptor.getModality();
  ReceiverDescriptor receiverParameter=functionDescriptor.getReceiverParameter();
  int start=0;
  if (functionDescriptor instanceof PropertyAccessorDescriptor) {
    PropertyCodegen.generateJetPropertyAnnotation(mv,propertyTypeSignature,jvmSignature.getKotlinTypeParameter(),((PropertyAccessorDescriptor)functionDescriptor).getCorrespondingProperty(),functionDescriptor.getVisibility());
  }
 else   if (functionDescriptor instanceof SimpleFunctionDescriptor) {
    if (propertyTypeSignature != null) {
      throw new IllegalStateException();
    }
    JetMethodAnnotationWriter aw=JetMethodAnnotationWriter.visitAnnotation(mv);
    BitSet kotlinFlags=getFlagsForVisibility(functionDescriptor.getVisibility());
    if (isInterface(functionDescriptor.getContainingDeclaration()) && modality != Modality.ABSTRACT) {
      kotlinFlags.set(modality == Modality.FINAL ? JvmStdlibNames.FLAG_FORCE_FINAL_BIT : JvmStdlibNames.FLAG_FORCE_OPEN_BIT);
    }
    aw.writeFlags(kotlinFlags);
    aw.writeKind(DescriptorKindUtils.kindToInt(functionDescriptor.getKind()));
    aw.writeNullableReturnType(functionDescriptor.getReturnType().isNullable());
    aw.writeTypeParameters(jvmSignature.getKotlinTypeParameter());
    aw.writeReturnType(jvmSignature.getKotlinReturnType());
    aw.visitEnd();
  }
 else {
    throw new IllegalStateException();
  }
  if (receiverParameter.exists()) {
    JetValueParameterAnnotationWriter av=JetValueParameterAnnotationWriter.visitParameterAnnotation(mv,start++);
    av.writeName("this$receiver");
    av.writeNullable(receiverParameter.getType().isNullable());
    av.writeReceiver();
    if (jvmSignature.getKotlinParameterTypes() != null && jvmSignature.getKotlinParameterTypes().get(0) != null) {
      av.writeType(jvmSignature.getKotlinParameterTypes().get(0).getKotlinSignature());
    }
    av.visitEnd();
  }
  for (int i=0; i != paramDescrs.size(); ++i) {
    ValueParameterDescriptor parameterDescriptor=paramDescrs.get(i);
    AnnotationCodegen.forParameter(i,mv,state.getTypeMapper()).genAnnotations(parameterDescriptor);
    JetValueParameterAnnotationWriter av=JetValueParameterAnnotationWriter.visitParameterAnnotation(mv,i + start);
    av.writeName(parameterDescriptor.getName().getName());
    av.writeHasDefaultValue(parameterDescriptor.declaresDefaultValue());
    av.writeNullable(parameterDescriptor.getType().isNullable());
    if (jvmSignature.getKotlinParameterTypes() != null && jvmSignature.getKotlinParameterTypes().get(i) != null) {
      av.writeType(jvmSignature.getKotlinParameterTypes().get(i + start).getKotlinSignature());
    }
    av.visitEnd();
  }
}
