{
  mv.visitCode();
  FrameMap frameMap=new FrameMap();
  if (!aStatic) {
    frameMap.enterTemp(OBJECT_TYPE);
  }
  ExpressionCodegen codegen=new ExpressionCodegen(mv,frameMap,signature.getReturnType(),methodContext,state,getParentCodegen());
  Type[] argTypes=signature.getAsmMethod().getArgumentTypes();
  List<ValueParameterDescriptor> paramDescrs=functionDescriptor.getValueParameters();
  Iterator<ValueParameterDescriptor> iterator=paramDescrs.iterator();
  int countOfExtraVarsInMethodArgs=0;
  for (  JvmMethodParameterSignature parameterSignature : signature.getKotlinParameterTypes()) {
    if (parameterSignature.getKind() != JvmMethodParameterKind.VALUE) {
      countOfExtraVarsInMethodArgs++;
      frameMap.enterTemp(parameterSignature.getAsmType());
    }
 else {
      frameMap.enter(iterator.next(),parameterSignature.getAsmType());
    }
  }
  int maskIndex=frameMap.enterTemp(Type.INT_TYPE);
  InstructionAdapter iv=new InstructionAdapter(mv);
  loadExplicitArgumentsOnStack(iv,OBJECT_TYPE,aStatic,signature);
  for (int index=0; index < paramDescrs.size(); index++) {
    ValueParameterDescriptor parameterDescriptor=paramDescrs.get(index);
    Type t=argTypes[countOfExtraVarsInMethodArgs + index];
    if (parameterDescriptor.declaresDefaultValue()) {
      iv.load(maskIndex,Type.INT_TYPE);
      iv.iconst(1 << index);
      iv.and(Type.INT_TYPE);
      Label loadArg=new Label();
      iv.ifeq(loadArg);
      loadStrategy.putValueOnStack(parameterDescriptor,codegen);
      int ind=frameMap.getIndex(parameterDescriptor);
      iv.store(ind,t);
      iv.mark(loadArg);
    }
    iv.load(frameMap.getIndex(parameterDescriptor),t);
  }
  CallableMethod method;
  if (functionDescriptor instanceof ConstructorDescriptor) {
    method=typeMapper.mapToCallableMethod((ConstructorDescriptor)functionDescriptor);
  }
 else {
    method=typeMapper.mapToCallableMethod(functionDescriptor,false,methodContext);
  }
  iv.visitMethodInsn(method.getInvokeOpcode(),method.getOwner().getInternalName(),method.getAsmMethod().getName(),method.getAsmMethod().getDescriptor());
  iv.areturn(signature.getReturnType());
  endVisit(mv,"default method",callableDescriptorToDeclaration(state.getBindingContext(),functionDescriptor));
}
