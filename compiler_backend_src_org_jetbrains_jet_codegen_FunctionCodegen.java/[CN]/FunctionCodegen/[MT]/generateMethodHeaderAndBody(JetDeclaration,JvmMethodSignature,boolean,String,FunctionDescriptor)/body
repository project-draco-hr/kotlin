{
  MethodContext context=owner.intoFunction(functionDescriptor);
  Method asmMethod=jvmSignature.getAsmMethod();
  MethodVisitor mv=v.newMethod(declaration,getMethodAsmFlags(functionDescriptor,context.getContextKind()),asmMethod.getName(),asmMethod.getDescriptor(),jvmSignature.getGenericsSignature(),null);
  AnnotationCodegen.forMethod(mv,typeMapper).genAnnotations(functionDescriptor);
  if (state.getClassBuilderMode() == ClassBuilderMode.SIGNATURES)   return;
  if (needJetAnnotations) {
    genJetAnnotations(state,functionDescriptor,jvmSignature,propertyTypeSignature,mv);
  }
  if (isAbstract(functionDescriptor,context.getContextKind()))   return;
  if (state.getClassBuilderMode() == ClassBuilderMode.STUBS) {
    genStubCode(mv);
    return;
  }
  MethodInfo info=generateMethodBody(mv,declaration,functionDescriptor,context,asmMethod);
  info.localVariableNames.addAll(getParameterNamesAsStrings(functionDescriptor));
  Type thisType=getThisTypeForFunction(functionDescriptor,context);
  generateLocalVariableTable(typeMapper,mv,functionDescriptor,thisType,info);
  endVisit(mv,null,declaration);
}
