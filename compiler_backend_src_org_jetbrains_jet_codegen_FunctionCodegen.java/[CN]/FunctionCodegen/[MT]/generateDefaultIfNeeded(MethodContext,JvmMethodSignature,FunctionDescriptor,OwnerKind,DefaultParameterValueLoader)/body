{
  DeclarationDescriptor contextClass=owner.getContextDescriptor().getContainingDeclaration();
  if (kind != OwnerKind.TRAIT_IMPL && contextClass instanceof ClassDescriptor && ((ClassDescriptor)contextClass).getKind() == ClassKind.TRAIT) {
    return;
  }
  if (!isDefaultNeeded(functionDescriptor)) {
    return;
  }
  boolean isStatic=isStatic(kind);
  Method jvmSignature=signature.getAsmMethod();
  int flags=getVisibilityAccessFlag(functionDescriptor) | getDeprecatedAccessFlag(functionDescriptor);
  Type ownerType=typeMapper.mapOwner(functionDescriptor,true);
  String descriptor=jvmSignature.getDescriptor().replace(")","I)");
  boolean isConstructor="<init>".equals(jvmSignature.getName());
  if (!isStatic && !isConstructor) {
    descriptor=descriptor.replace("(","(" + ownerType.getDescriptor());
  }
  Method defaultMethod=new Method(isConstructor ? "<init>" : jvmSignature.getName() + JvmAbi.DEFAULT_PARAMS_IMPL_SUFFIX,descriptor);
  MethodVisitor mv=v.newMethod(null,flags | (isConstructor ? 0 : ACC_STATIC),defaultMethod.getName(),defaultMethod.getDescriptor(),null,getThrownExceptions(functionDescriptor,typeMapper));
  if (state.getClassBuilderMode() == ClassBuilderMode.FULL) {
    if (this.owner instanceof PackageFacadeContext) {
      mv.visitCode();
      generateStaticDelegateMethodBody(mv,defaultMethod,(PackageFacadeContext)this.owner);
      endVisit(mv,"default method delegation",callableDescriptorToDeclaration(state.getBindingContext(),functionDescriptor));
    }
 else {
      generateDefaultImpl(owner,signature,functionDescriptor,isStatic,mv,loadStrategy);
    }
  }
}
