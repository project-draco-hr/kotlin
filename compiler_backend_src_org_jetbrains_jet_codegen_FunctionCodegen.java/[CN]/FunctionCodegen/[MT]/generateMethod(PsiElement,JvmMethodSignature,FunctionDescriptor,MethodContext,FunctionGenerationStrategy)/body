{
  Method asmMethod=jvmSignature.getAsmMethod();
  MethodVisitor mv=v.newMethod(origin,getMethodAsmFlags(functionDescriptor,methodContext.getContextKind()),asmMethod.getName(),asmMethod.getDescriptor(),jvmSignature.getGenericsSignature(),null);
  if (owner instanceof PackageFacadeContext) {
    Type ownerType=((PackageFacadeContext)owner).getDelegateToClassType();
    v.getSerializationBindings().put(IMPL_CLASS_NAME_FOR_CALLABLE,functionDescriptor,shortNameByAsmType(ownerType));
  }
 else {
    v.getSerializationBindings().put(METHOD_FOR_FUNCTION,functionDescriptor,asmMethod);
  }
  AnnotationCodegen.forMethod(mv,typeMapper).genAnnotations(functionDescriptor);
  generateParameterAnnotations(functionDescriptor,mv,jvmSignature);
  generateJetValueParameterAnnotations(mv,functionDescriptor,jvmSignature);
  if (state.getClassBuilderMode() == ClassBuilderMode.LIGHT_CLASSES || isAbstractMethod(functionDescriptor,methodContext.getContextKind())) {
    generateLocalVariableTable(mv,jvmSignature,functionDescriptor,getThisTypeForFunction(functionDescriptor,methodContext),new Label(),new Label(),methodContext.getContextKind());
    return;
  }
  generateMethodBody(mv,functionDescriptor,methodContext,jvmSignature,strategy);
  endVisit(mv,null,origin);
  generateBridgeIfNeeded(owner,state,v,functionDescriptor);
  methodContext.recordSyntheticAccessorIfNeeded(functionDescriptor,typeMapper);
}
