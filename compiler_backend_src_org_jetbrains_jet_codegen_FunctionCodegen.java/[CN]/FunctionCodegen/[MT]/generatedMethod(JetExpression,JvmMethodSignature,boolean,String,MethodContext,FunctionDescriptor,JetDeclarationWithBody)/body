{
  checkMustGenerateCode(functionDescriptor);
  List<ValueParameterDescriptor> paramDescrs=functionDescriptor.getValueParameters();
  OwnerKind kind=context.getContextKind();
  boolean isStatic=isStatic(kind);
  boolean isAbstract=isAbstract(functionDescriptor,kind);
  int flags=getMethodAsmFlags(functionDescriptor,kind);
  if (kind == OwnerKind.TRAIT_IMPL) {
    needJetAnnotations=false;
  }
  ReceiverDescriptor expectedThisObject=functionDescriptor.getExpectedThisObject();
  ReceiverDescriptor receiverParameter=functionDescriptor.getReceiverParameter();
  if (kind != OwnerKind.TRAIT_IMPL || bodyExpressions != null) {
    final MethodVisitor mv=v.newMethod(fun,flags,jvmSignature.getAsmMethod().getName(),jvmSignature.getAsmMethod().getDescriptor(),jvmSignature.getGenericsSignature(),null);
    AnnotationCodegen.forMethod(mv,state.getTypeMapper()).genAnnotations(functionDescriptor);
    if (state.getClassBuilderMode() != ClassBuilderMode.SIGNATURES) {
      if (needJetAnnotations) {
        genJetAnnotations(state,functionDescriptor,jvmSignature,propertyTypeSignature,mv);
      }
    }
    if (!isAbstract && state.getClassBuilderMode() == ClassBuilderMode.STUBS) {
      genStubCode(mv);
    }
    if (!isAbstract && state.getClassBuilderMode() == ClassBuilderMode.FULL) {
      mv.visitCode();
      Label methodBegin=new Label();
      mv.visitLabel(methodBegin);
      FrameMap frameMap=context.prepareFrame(state.getTypeMapper());
      ExpressionCodegen codegen=new ExpressionCodegen(mv,frameMap,jvmSignature.getAsmMethod().getReturnType(),context,state);
      Type[] argTypes=jvmSignature.getAsmMethod().getArgumentTypes();
      int add=0;
      if (kind == OwnerKind.TRAIT_IMPL) {
        add++;
      }
      if (receiverParameter.exists()) {
        add++;
      }
      for (int i=0; i < paramDescrs.size(); i++) {
        ValueParameterDescriptor parameter=paramDescrs.get(i);
        frameMap.enter(parameter,argTypes[i + add]);
      }
      if (!isStatic && (kind instanceof OwnerKind.DelegateKind) != (functionDescriptor.getKind() == FunctionDescriptor.Kind.DELEGATION)) {
        throw new IllegalStateException("mismatching kind in " + functionDescriptor);
      }
      Map<Name,Label> mapLabelsToDivideLocalVarVisibilityForSharedVar=new HashMap<Name,Label>();
      if (kind instanceof OwnerKind.StaticDelegateKind) {
        OwnerKind.StaticDelegateKind dk=(OwnerKind.StaticDelegateKind)kind;
        InstructionAdapter iv=new InstructionAdapter(mv);
        for (int i=0, k=0; i < argTypes.length; i++) {
          Type argType=argTypes[i];
          iv.load(k,argType);
          k+=argType.getSize();
        }
        iv.invokestatic(dk.getOwnerClass(),jvmSignature.getAsmMethod().getName(),jvmSignature.getAsmMethod().getDescriptor());
        iv.areturn(jvmSignature.getAsmMethod().getReturnType());
      }
 else       if (kind instanceof OwnerKind.DelegateKind) {
        OwnerKind.DelegateKind dk=(OwnerKind.DelegateKind)kind;
        InstructionAdapter iv=new InstructionAdapter(mv);
        iv.load(0,OBJECT_TYPE);
        dk.getDelegate().put(OBJECT_TYPE,iv);
        for (int i=0; i < argTypes.length; i++) {
          Type argType=argTypes[i];
          iv.load(i + 1,argType);
        }
        iv.invokeinterface(dk.getOwnerClass(),jvmSignature.getAsmMethod().getName(),jvmSignature.getAsmMethod().getDescriptor());
        iv.areturn(jvmSignature.getAsmMethod().getReturnType());
      }
 else {
        for (        ValueParameterDescriptor parameter : paramDescrs) {
          Type sharedVarType=state.getTypeMapper().getSharedVarType(parameter);
          if (sharedVarType != null) {
            Type localVarType=state.getTypeMapper().mapType(parameter);
            int index=frameMap.getIndex(parameter);
            mv.visitTypeInsn(NEW,sharedVarType.getInternalName());
            mv.visitInsn(DUP);
            mv.visitInsn(DUP);
            mv.visitMethodInsn(INVOKESPECIAL,sharedVarType.getInternalName(),"<init>","()V");
            mv.visitVarInsn(localVarType.getOpcode(ILOAD),index);
            mv.visitFieldInsn(PUTFIELD,sharedVarType.getInternalName(),"ref",StackValue.refType(localVarType).getDescriptor());
            Label labelToDivideLocalVarForSharedVarVisibility=new Label();
            mv.visitLabel(labelToDivideLocalVarForSharedVarVisibility);
            mapLabelsToDivideLocalVarVisibilityForSharedVar.put(parameter.getName(),labelToDivideLocalVarForSharedVarVisibility);
            mv.visitVarInsn(sharedVarType.getOpcode(ISTORE),index);
          }
        }
        codegen.returnExpression(bodyExpressions);
      }
      Label methodEnd=new Label();
      mv.visitLabel(methodEnd);
      Collection<String> localVariableNames=new HashSet<String>();
      localVariableNames.addAll(codegen.getLocalVariableNamesForExpression());
      for (      ValueParameterDescriptor parameterDescriptor : paramDescrs) {
        localVariableNames.add(parameterDescriptor.getName().getName());
      }
      int k=0;
      if (expectedThisObject.exists()) {
        Type type=state.getTypeMapper().mapType(expectedThisObject.getType());
        mv.visitLocalVariable("this",type.getDescriptor(),null,methodBegin,methodEnd,k++);
      }
 else       if (fun instanceof JetFunctionLiteralExpression || isLocalFun(bindingContext,functionDescriptor)) {
        Type type=state.getTypeMapper().mapType(context.getThisDescriptor());
        mv.visitLocalVariable("this",type.getDescriptor(),null,methodBegin,methodEnd,k++);
      }
      if (receiverParameter.exists()) {
        Type type=state.getTypeMapper().mapType(receiverParameter.getType());
        mv.visitLocalVariable(JvmAbi.RECEIVER_PARAMETER,type.getDescriptor(),null,methodBegin,methodEnd,k);
        k+=type.getSize();
      }
      for (      ValueParameterDescriptor parameter : paramDescrs) {
        Type type=state.getTypeMapper().mapType(parameter);
        Label divideLabel=mapLabelsToDivideLocalVarVisibilityForSharedVar.get(parameter.getName());
        String parameterName=parameter.getName().getName();
        if (divideLabel != null) {
          Type sharedVarType=state.getTypeMapper().getSharedVarType(parameter);
          mv.visitLocalVariable(parameterName,type.getDescriptor(),null,methodBegin,divideLabel,k);
          String nameForSharedVar=createTmpVariableName(localVariableNames);
          localVariableNames.add(nameForSharedVar);
          mv.visitLocalVariable(nameForSharedVar,sharedVarType.getDescriptor(),null,divideLabel,methodEnd,k);
          k+=Math.max(type.getSize(),sharedVarType.getSize());
        }
 else {
          mv.visitLocalVariable(parameter.getName().getName(),type.getDescriptor(),null,methodBegin,methodEnd,k);
          k+=type.getSize();
        }
      }
      endVisit(mv,null,fun);
      generateBridgeIfNeeded(owner,state,v,jvmSignature.getAsmMethod(),functionDescriptor,kind);
    }
  }
  generateDefaultIfNeeded(context,state,v,jvmSignature.getAsmMethod(),functionDescriptor,kind);
}
