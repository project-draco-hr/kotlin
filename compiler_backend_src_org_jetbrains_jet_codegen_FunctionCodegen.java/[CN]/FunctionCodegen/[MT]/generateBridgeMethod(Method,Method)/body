{
  int flags=Opcodes.ACC_PUBLIC;
  final MethodVisitor mv=v.visitMethod(flags,function.getName(),overriden.getDescriptor(),null,null);
  mv.visitCode();
  Type[] argTypes=function.getArgumentTypes();
  InstructionAdapter iv=new InstructionAdapter(mv);
  iv.load(0,JetTypeMapper.TYPE_OBJECT);
  for (int i=0, reg=1; i < argTypes.length; i++) {
    Type argType=argTypes[i];
    iv.load(reg,argType);
    reg+=argType.getSize();
  }
  iv.invokevirtual(state.getTypeMapper().jvmName((ClassDescriptor)owner.getContextDescriptor(),OwnerKind.IMPLEMENTATION),function.getName(),function.getDescriptor());
  if (JetTypeMapper.isPrimitive(function.getReturnType()) && !JetTypeMapper.isPrimitive(overriden.getReturnType()))   StackValue.valueOf(iv,function.getReturnType());
  if (function.getReturnType() == Type.VOID_TYPE)   iv.aconst(null);
  iv.areturn(overriden.getReturnType());
  mv.visitMaxs(0,0);
  mv.visitEnd();
}
