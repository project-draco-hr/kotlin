{
  Method method=jvmMethodSignature.getAsmMethod();
  int flags=ACC_PUBLIC | ACC_SYNTHETIC;
  final MethodVisitor mv=v.newMethod(null,flags,method.getName(),method.getDescriptor(),null,null);
  if (v.generateCode() == ClassBuilder.Mode.STUBS) {
    StubCodegen.generateStubCode(mv);
  }
 else   if (v.generateCode() == ClassBuilder.Mode.FULL) {
    mv.visitCode();
    Type[] argTypes=method.getArgumentTypes();
    InstructionAdapter iv=new InstructionAdapter(mv);
    iv.load(0,JetTypeMapper.TYPE_OBJECT);
    for (int i=0, reg=1; i < argTypes.length; i++) {
      Type argType=argTypes[i];
      iv.load(reg,argType);
      if (argType.getSort() == Type.OBJECT) {
        StackValue.onStack(JetTypeMapper.TYPE_OBJECT).put(method.getArgumentTypes()[i],iv);
      }
      reg+=argType.getSize();
    }
    iv.load(0,JetTypeMapper.TYPE_OBJECT);
    field.put(field.type,iv);
    ClassDescriptor classDescriptor=(ClassDescriptor)overriddenDescriptor.getContainingDeclaration();
    String internalName=state.getInjector().getJetTypeMapper().mapType(classDescriptor.getDefaultType(),MapTypeMode.VALUE).getInternalName();
    if (classDescriptor.getKind() == ClassKind.TRAIT)     iv.invokeinterface(internalName,method.getName(),method.getDescriptor());
 else     iv.invokevirtual(internalName,method.getName(),method.getDescriptor());
    iv.areturn(method.getReturnType());
    endVisit(mv,"delegate method",BindingContextUtils.descriptorToDeclaration(state.getBindingContext(),functionDescriptor));
  }
}
