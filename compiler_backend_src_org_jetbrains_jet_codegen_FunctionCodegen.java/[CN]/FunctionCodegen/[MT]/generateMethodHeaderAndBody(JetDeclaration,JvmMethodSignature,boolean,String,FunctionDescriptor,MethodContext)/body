{
  OwnerKind kind=context.getContextKind();
  Method asmMethod=jvmSignature.getAsmMethod();
  MethodVisitor mv=v.newMethod(declaration,getMethodAsmFlags(functionDescriptor,kind),asmMethod.getName(),asmMethod.getDescriptor(),jvmSignature.getGenericsSignature(),null);
  AnnotationCodegen.forMethod(mv,typeMapper).genAnnotations(functionDescriptor);
  if (state.getClassBuilderMode() == ClassBuilderMode.SIGNATURES)   return;
  if (needJetAnnotations) {
    genJetAnnotations(state,functionDescriptor,jvmSignature,propertyTypeSignature,mv);
  }
  if (isAbstract(functionDescriptor,kind))   return;
  if (state.getClassBuilderMode() == ClassBuilderMode.STUBS) {
    genStubCode(mv);
    return;
  }
  LocalVariablesInfo localVariablesInfo=generateLocalVariablesInfo(functionDescriptor);
  MethodBounds methodBounds=generateMethodBody(mv,declaration,functionDescriptor,context,asmMethod,localVariablesInfo);
  Type thisType;
  ReceiverParameterDescriptor expectedThisObject=functionDescriptor.getExpectedThisObject();
  if (expectedThisObject != null) {
    thisType=typeMapper.mapType(expectedThisObject.getType());
  }
 else   if (declaration instanceof JetFunctionLiteral || isLocalFun(bindingContext,functionDescriptor)) {
    thisType=typeMapper.mapType(context.getThisDescriptor());
  }
 else {
    thisType=null;
  }
  generateLocalVariableTable(typeMapper,mv,functionDescriptor,thisType,localVariablesInfo,methodBounds);
  endVisit(mv,null,declaration);
}
