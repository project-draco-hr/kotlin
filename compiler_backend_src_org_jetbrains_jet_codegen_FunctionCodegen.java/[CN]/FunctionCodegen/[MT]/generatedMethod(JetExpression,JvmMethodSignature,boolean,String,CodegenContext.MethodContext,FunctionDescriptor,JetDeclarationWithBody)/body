{
  List<ValueParameterDescriptor> paramDescrs=functionDescriptor.getValueParameters();
  List<TypeParameterDescriptor> typeParameters=(functionDescriptor instanceof PropertyAccessorDescriptor ? ((PropertyAccessorDescriptor)functionDescriptor).getCorrespondingProperty() : functionDescriptor).getTypeParameters();
  int flags=ACC_PUBLIC;
  if (!functionDescriptor.getValueParameters().isEmpty() && functionDescriptor.getValueParameters().get(functionDescriptor.getValueParameters().size() - 1).getVarargElementType() != null) {
    flags|=ACC_VARARGS;
  }
  if (functionDescriptor.getModality() == Modality.FINAL) {
    flags|=ACC_FINAL;
  }
  OwnerKind kind=context.getContextKind();
  if (kind == OwnerKind.TRAIT_IMPL) {
    needJetAnnotations=false;
  }
  ReceiverDescriptor expectedThisObject=functionDescriptor.getExpectedThisObject();
  ReceiverDescriptor receiverParameter=functionDescriptor.getReceiverParameter();
  if (kind != OwnerKind.TRAIT_IMPL || bodyExpressions != null) {
    boolean isStatic=kind == OwnerKind.NAMESPACE;
    if (isStatic || kind == OwnerKind.TRAIT_IMPL)     flags|=ACC_STATIC;
    boolean isAbstract=!isStatic && !(kind == OwnerKind.TRAIT_IMPL) && (bodyExpressions == null || CodegenUtil.isInterface(functionDescriptor.getContainingDeclaration()));
    if (isAbstract)     flags|=ACC_ABSTRACT;
    final MethodVisitor mv=v.newMethod(fun,flags,jvmSignature.getAsmMethod().getName(),jvmSignature.getAsmMethod().getDescriptor(),jvmSignature.getGenericsSignature(),null);
    AnnotationCodegen.forMethod(mv).genAnnotations(functionDescriptor,state.getTypeMapper());
    if (v.generateCode() != ClassBuilder.Mode.SIGNATURES) {
      int start=0;
      if (needJetAnnotations) {
        if (functionDescriptor instanceof PropertyAccessorDescriptor) {
          PropertyCodegen.generateJetPropertyAnnotation(mv,propertyTypeSignature,jvmSignature.getKotlinTypeParameter());
        }
 else         if (functionDescriptor instanceof SimpleFunctionDescriptor) {
          if (propertyTypeSignature != null) {
            throw new IllegalStateException();
          }
          JetMethodAnnotationWriter aw=JetMethodAnnotationWriter.visitAnnotation(mv);
          aw.writeKind(JvmStdlibNames.JET_METHOD_KIND_REGULAR);
          aw.writeNullableReturnType(functionDescriptor.getReturnType().isNullable());
          aw.writeTypeParameters(jvmSignature.getKotlinTypeParameter());
          aw.writeReturnType(jvmSignature.getKotlinReturnType());
          aw.visitEnd();
        }
 else {
          throw new IllegalStateException();
        }
        if (receiverParameter.exists()) {
          JetValueParameterAnnotationWriter av=JetValueParameterAnnotationWriter.visitParameterAnnotation(mv,start++);
          av.writeName("this$receiver");
          av.writeNullable(receiverParameter.getType().isNullable());
          av.writeReceiver();
          if (jvmSignature.getKotlinParameterTypes() != null && jvmSignature.getKotlinParameterTypes().get(0) != null) {
            av.writeType(jvmSignature.getKotlinParameterTypes().get(0).getKotlinSignature());
          }
          av.visitEnd();
        }
        for (int i=0; i != paramDescrs.size(); ++i) {
          JetValueParameterAnnotationWriter av=JetValueParameterAnnotationWriter.visitParameterAnnotation(mv,i + start);
          ValueParameterDescriptor parameterDescriptor=paramDescrs.get(i);
          av.writeName(parameterDescriptor.getName());
          av.writeHasDefaultValue(parameterDescriptor.hasDefaultValue());
          av.writeNullable(parameterDescriptor.getType().isNullable());
          if (jvmSignature.getKotlinParameterTypes() != null && jvmSignature.getKotlinParameterTypes().get(i) != null) {
            av.writeType(jvmSignature.getKotlinParameterTypes().get(i + start).getKotlinSignature());
          }
          av.visitEnd();
        }
      }
    }
    if (!isAbstract && v.generateCode() == ClassBuilder.Mode.STUBS) {
      StubCodegen.generateStubCode(mv);
    }
    if (!isAbstract && v.generateCode() == ClassBuilder.Mode.FULL) {
      mv.visitCode();
      Label methodBegin=new Label();
      mv.visitLabel(methodBegin);
      FrameMap frameMap=context.prepareFrame(typeMapper);
      ExpressionCodegen codegen=new ExpressionCodegen(mv,frameMap,jvmSignature.getAsmMethod().getReturnType(),context,state);
      Type[] argTypes=jvmSignature.getAsmMethod().getArgumentTypes();
      int add=0;
      if (kind == OwnerKind.TRAIT_IMPL)       add++;
      if (receiverParameter.exists())       add++;
      for (int i=0; i < paramDescrs.size(); i++) {
        ValueParameterDescriptor parameter=paramDescrs.get(i);
        frameMap.enter(parameter,argTypes[i + add].getSize());
      }
      if (kind instanceof OwnerKind.DelegateKind) {
        OwnerKind.DelegateKind dk=(OwnerKind.DelegateKind)kind;
        InstructionAdapter iv=new InstructionAdapter(mv);
        iv.load(0,JetTypeMapper.TYPE_OBJECT);
        dk.getDelegate().put(JetTypeMapper.TYPE_OBJECT,iv);
        for (int i=0; i < argTypes.length; i++) {
          Type argType=argTypes[i];
          iv.load(i + 1,argType);
        }
        iv.invokeinterface(dk.getOwnerClass(),jvmSignature.getAsmMethod().getName(),jvmSignature.getAsmMethod().getDescriptor());
        iv.areturn(jvmSignature.getAsmMethod().getReturnType());
      }
 else {
        for (        ValueParameterDescriptor parameter : paramDescrs) {
          Type sharedVarType=typeMapper.getSharedVarType(parameter);
          if (sharedVarType != null) {
            Type localVarType=typeMapper.mapType(parameter.getType());
            int index=frameMap.getIndex(parameter);
            mv.visitTypeInsn(NEW,sharedVarType.getInternalName());
            mv.visitInsn(DUP);
            mv.visitInsn(DUP);
            mv.visitMethodInsn(INVOKESPECIAL,sharedVarType.getInternalName(),"<init>","()V");
            mv.visitVarInsn(localVarType.getOpcode(ILOAD),index);
            mv.visitFieldInsn(PUTFIELD,sharedVarType.getInternalName(),"ref",StackValue.refType(localVarType).getDescriptor());
            mv.visitVarInsn(sharedVarType.getOpcode(ISTORE),index);
          }
        }
        codegen.returnExpression(bodyExpressions);
      }
      Label methodEnd=new Label();
      mv.visitLabel(methodEnd);
      int k=0;
      if (expectedThisObject.exists()) {
        Type type=typeMapper.mapType(expectedThisObject.getType());
        mv.visitLocalVariable("this",type.getDescriptor(),null,methodBegin,methodEnd,k++);
      }
      if (receiverParameter.exists()) {
        Type type=typeMapper.mapType(receiverParameter.getType());
        mv.visitLocalVariable("this$receiver",type.getDescriptor(),null,methodBegin,methodEnd,k);
        k+=type.getSize();
      }
      for (      ValueParameterDescriptor parameter : paramDescrs) {
        Type type=typeMapper.mapType(parameter.getType());
        mv.visitLocalVariable(parameter.getName(),type.getDescriptor(),null,methodBegin,methodEnd,k);
        k+=type.getSize();
      }
      endVisit(mv,null,fun);
      mv.visitEnd();
      generateBridgeIfNeeded(owner,state,v,jvmSignature.getAsmMethod(),functionDescriptor,kind);
    }
  }
  generateDefaultIfNeeded(context,state,v,jvmSignature.getAsmMethod(),functionDescriptor,kind);
}
