{
  mv.visitCode();
  Label methodBegin=new Label();
  mv.visitLabel(methodBegin);
  JetTypeMapper typeMapper=parentCodegen.typeMapper;
  if (context.getParentContext() instanceof PackageFacadeContext) {
    generateStaticDelegateMethodBody(mv,signature.getAsmMethod(),(PackageFacadeContext)context.getParentContext());
  }
 else {
    FrameMap frameMap=new FrameMap();
    if (context.getContextKind() == OwnerKind.IMPLEMENTATION) {
      frameMap.enterTemp(OBJECT_TYPE);
    }
    for (    JvmMethodParameterSignature parameter : signature.getValueParameters()) {
      if (parameter.getKind() != JvmMethodParameterKind.VALUE) {
        frameMap.enterTemp(parameter.getAsmType());
      }
    }
    for (    ValueParameterDescriptor parameter : functionDescriptor.getValueParameters()) {
      frameMap.enter(parameter,typeMapper.mapType(parameter));
    }
    Label methodEntry=new Label();
    mv.visitLabel(methodEntry);
    context.setMethodStartLabel(methodEntry);
    if (!JetTypeMapper.isAccessor(functionDescriptor)) {
      genNotNullAssertionsForParameters(new InstructionAdapter(mv),parentCodegen.state,functionDescriptor,frameMap);
    }
    strategy.generateBody(mv,frameMap,signature,context,parentCodegen);
  }
  Label methodEnd=new Label();
  mv.visitLabel(methodEnd);
  Type thisType=getThisTypeForFunction(functionDescriptor,context,typeMapper);
  generateLocalVariableTable(mv,signature,functionDescriptor,thisType,methodBegin,methodEnd,context.getContextKind());
}
