{
  mv.visitCode();
  boolean isEnumConstructor=functionDescriptor instanceof ConstructorDescriptor && DescriptorUtils.isEnumClass(functionDescriptor.getContainingDeclaration());
  FrameMap frameMap=owner.prepareFrame(state.getTypeMapper());
  if (kind instanceof OwnerKind.StaticDelegateKind) {
    frameMap.leaveTemp(OBJECT_TYPE);
  }
  if (hasOuter) {
    frameMap.enterTemp(OBJECT_TYPE);
  }
  if (isEnumConstructor) {
    frameMap.enterTemp(OBJECT_TYPE);
    frameMap.enterTemp(Type.INT_TYPE);
  }
  ExpressionCodegen codegen=new ExpressionCodegen(mv,frameMap,jvmSignature.getReturnType(),owner,state);
  Type receiverType=null;
  if (hasReceiver) {
    receiverType=state.getTypeMapper().mapType(receiverParameter.getType());
  }
  final int extraInLocalVariablesTable=getSizeOfExplicitArgumentsInLocalVariablesTable(aStatic,hasOuter,isEnumConstructor,receiverType);
  final int countOfExtraVarsInMethodArgs=getCountOfExplicitArgumentsInMethodArguments(hasOuter,hasReceiver,isEnumConstructor);
  Type[] argTypes=jvmSignature.getArgumentTypes();
  List<ValueParameterDescriptor> paramDescrs=functionDescriptor.getValueParameters();
  int paramSizeInLocalVariablesTable=0;
  for (int i=0; i < paramDescrs.size(); i++) {
    Type argType=argTypes[i + countOfExtraVarsInMethodArgs];
    int size=argType.getSize();
    frameMap.enter(paramDescrs.get(i),argType);
    paramSizeInLocalVariablesTable+=size;
  }
  final int maskIndex=extraInLocalVariablesTable + paramSizeInLocalVariablesTable;
  loadExplicitArgumentsOnStack(iv,OBJECT_TYPE,receiverType,ownerInternalName.getAsmType(),aStatic,hasOuter,isEnumConstructor);
  int indexInLocalVariablesTable=extraInLocalVariablesTable;
  for (int index=0; index < paramDescrs.size(); index++) {
    ValueParameterDescriptor parameterDescriptor=paramDescrs.get(index);
    Type t=argTypes[countOfExtraVarsInMethodArgs + index];
    if (frameMap.getIndex(parameterDescriptor) < 0) {
      frameMap.enter(parameterDescriptor,t);
    }
    if (parameterDescriptor.declaresDefaultValue()) {
      iv.load(maskIndex,Type.INT_TYPE);
      iv.iconst(1 << index);
      iv.and(Type.INT_TYPE);
      Label loadArg=new Label();
      iv.ifeq(loadArg);
      loadStrategy.putValueOnStack(parameterDescriptor,codegen);
      int ind=frameMap.getIndex(parameterDescriptor);
      iv.store(ind,t);
      iv.mark(loadArg);
    }
    iv.load(indexInLocalVariablesTable,t);
    indexInLocalVariablesTable+=t.getSize();
  }
  final String internalName=ownerInternalName.getInternalName();
  final String jvmSignatureName=jvmSignature.getName();
  final String jvmSignatureDescriptor=jvmSignature.getDescriptor();
  if (!aStatic) {
    if (kind == OwnerKind.TRAIT_IMPL) {
      iv.invokeinterface(internalName,jvmSignatureName,jvmSignatureDescriptor);
    }
 else {
      if (!constructor && functionDescriptor.getVisibility() != Visibilities.PRIVATE) {
        iv.invokevirtual(internalName,jvmSignatureName,jvmSignatureDescriptor);
      }
 else {
        iv.invokespecial(internalName,jvmSignatureName,jvmSignatureDescriptor);
      }
    }
  }
 else {
    iv.invokestatic(internalName,jvmSignatureName,jvmSignatureDescriptor);
  }
  iv.areturn(jvmSignature.getReturnType());
  endVisit(mv,"default method",callableDescriptorToDeclaration(state.getBindingContext(),functionDescriptor));
  mv.visitEnd();
}
