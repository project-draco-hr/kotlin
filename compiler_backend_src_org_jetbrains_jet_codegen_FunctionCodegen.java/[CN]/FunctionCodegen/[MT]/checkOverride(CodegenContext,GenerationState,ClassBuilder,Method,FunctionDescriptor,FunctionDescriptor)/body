{
  Method method=state.getInjector().getJetTypeMapper().mapSignature(functionDescriptor.getName(),functionDescriptor).getAsmMethod();
  Method overriden=state.getInjector().getJetTypeMapper().mapSignature(overriddenFunction.getName(),overriddenFunction.getOriginal()).getAsmMethod();
  if (overriddenFunction.getModality() == Modality.ABSTRACT) {
    Set<? extends FunctionDescriptor> overriddenFunctions=overriddenFunction.getOverriddenDescriptors();
    for (    FunctionDescriptor of : overriddenFunctions) {
      checkOverride(owner,state,v,jvmSignature,overriddenFunction,of.getOriginal());
    }
  }
  if (differentMethods(method,overriden)) {
    int flags=ACC_PUBLIC | ACC_BRIDGE;
    final MethodVisitor mv=v.newMethod(null,flags,jvmSignature.getName(),overriden.getDescriptor(),null,null);
    if (v.generateCode() == ClassBuilder.Mode.STUBS) {
      StubCodegen.generateStubCode(mv);
    }
 else     if (v.generateCode() == ClassBuilder.Mode.FULL) {
      mv.visitCode();
      Type[] argTypes=overriden.getArgumentTypes();
      InstructionAdapter iv=new InstructionAdapter(mv);
      iv.load(0,JetTypeMapper.TYPE_OBJECT);
      for (int i=0, reg=1; i < argTypes.length; i++) {
        Type argType=argTypes[i];
        iv.load(reg,argType);
        if (argType.getSort() == Type.OBJECT) {
          StackValue.onStack(JetTypeMapper.TYPE_OBJECT).put(method.getArgumentTypes()[i],iv);
        }
        reg+=argType.getSize();
      }
      iv.invokevirtual(state.getInjector().getJetTypeMapper().mapType(((ClassDescriptor)owner.getContextDescriptor()).getDefaultType(),MapTypeMode.VALUE).getInternalName(),jvmSignature.getName(),jvmSignature.getDescriptor());
      if (JetTypeMapper.isPrimitive(jvmSignature.getReturnType()) && !JetTypeMapper.isPrimitive(overriden.getReturnType()))       StackValue.valueOf(iv,jvmSignature.getReturnType());
      if (jvmSignature.getReturnType() == Type.VOID_TYPE)       iv.aconst(null);
      iv.areturn(overriden.getReturnType());
      endVisit(mv,"bridge method",state.getBindingContext().get(BindingContext.DESCRIPTOR_TO_DECLARATION,functionDescriptor));
    }
  }
}
