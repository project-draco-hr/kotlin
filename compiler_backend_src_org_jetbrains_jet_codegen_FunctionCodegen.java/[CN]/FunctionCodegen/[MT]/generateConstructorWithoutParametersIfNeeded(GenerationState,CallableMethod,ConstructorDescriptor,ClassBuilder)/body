{
  if (!isDefaultConstructorNeeded(state.getBindingContext(),constructorDescriptor)) {
    return;
  }
  int flags=getVisibilityAccessFlag(constructorDescriptor);
  MethodVisitor mv=classBuilder.newMethod(null,flags,"<init>","()V",null,null);
  if (state.getClassBuilderMode() == ClassBuilderMode.SIGNATURES) {
    return;
  }
 else   if (state.getClassBuilderMode() == ClassBuilderMode.STUBS) {
    genStubCode(mv);
  }
 else   if (state.getClassBuilderMode() == ClassBuilderMode.FULL) {
    InstructionAdapter v=new InstructionAdapter(mv);
    mv.visitCode();
    JvmClassName ownerInternalName=method.getOwner();
    Method jvmSignature=method.getSignature().getAsmMethod();
    v.load(0,ownerInternalName.getAsmType());
    int mask=0;
    for (    ValueParameterDescriptor parameterDescriptor : constructorDescriptor.getValueParameters()) {
      Type paramType=state.getTypeMapper().mapType(parameterDescriptor.getType());
      pushDefaultValueOnStack(paramType,v);
      mask|=(1 << parameterDescriptor.getIndex());
    }
    v.iconst(mask);
    String desc=jvmSignature.getDescriptor().replace(")","I)");
    v.invokespecial(ownerInternalName.getInternalName(),"<init>",desc);
    v.areturn(Type.VOID_TYPE);
    endVisit(mv,"default constructor for " + ownerInternalName.getInternalName(),null);
  }
}
