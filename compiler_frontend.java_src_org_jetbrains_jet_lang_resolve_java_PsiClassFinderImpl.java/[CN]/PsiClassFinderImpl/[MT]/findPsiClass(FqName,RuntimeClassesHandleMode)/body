{
  PsiClass original=javaFacade.findClass(qualifiedName.getFqName(),javaSearchScope);
  if (original != null) {
    String classQualifiedName=original.getQualifiedName();
    FqName actualQualifiedName=classQualifiedName != null ? new FqName(classQualifiedName) : null;
    if (!qualifiedName.equals(actualQualifiedName)) {
      throw new IllegalStateException("requested " + qualifiedName + ", got "+ actualQualifiedName);
    }
  }
  if (original instanceof JetJavaMirrorMarker) {
    throw new IllegalStateException("JetJavaMirrorMaker is not possible in resolve.java, resolving: " + qualifiedName);
  }
  if (original == null) {
    return null;
  }
  if (KotlinBuiltIns.BUILT_INS_PACKAGE_FQ_NAME.equals(qualifiedName.parent())) {
    PsiAnnotation assertInvisibleAnnotation=JavaAnnotationResolver.findOwnAnnotation(original,JvmStdlibNames.ASSERT_INVISIBLE_IN_RESOLVER.getFqName().getFqName());
    if (assertInvisibleAnnotation != null) {
      if (runtimeClassesHandleMode == RuntimeClassesHandleMode.IGNORE) {
        return null;
      }
 else       if (runtimeClassesHandleMode == RuntimeClassesHandleMode.THROW) {
        throw new IllegalStateException("classpath is configured incorrectly:" + " class " + qualifiedName + " from runtime must not be loaded by compiler");
      }
 else {
        throw new IllegalStateException("unknown parameter value: " + runtimeClassesHandleMode);
      }
    }
  }
  return original;
}
