{
  final Map<TypeParameterDescriptor,Variance> parameters=Maps.newHashMap();
  Processor<TypeParameterUsage> processor=new Processor<TypeParameterUsage>(){
    @Override public boolean process(    TypeParameterUsage parameterUsage){
      Variance howTheTypeIsUsedBefore=parameters.get(parameterUsage.typeParameterDescriptor);
      if (howTheTypeIsUsedBefore == null) {
        howTheTypeIsUsedBefore=Variance.INVARIANT;
      }
      parameters.put(parameterUsage.typeParameterDescriptor,parameterUsage.howTheTypeParameterIsUsed.superpose(howTheTypeIsUsedBefore));
      return true;
    }
  }
;
  processAllTypeParameters(withParameters,Variance.INVARIANT,processor);
  processAllTypeParameters(expected,Variance.INVARIANT,processor);
  ConstraintSystemImpl constraintSystem=new ConstraintSystemImpl();
  constraintSystem.registerTypeVariables(parameters);
  constraintSystem.addSubtypeConstraint(withParameters,expected,ConstraintPosition.SPECIAL);
  return constraintSystem.getStatus().isSuccessful();
}
