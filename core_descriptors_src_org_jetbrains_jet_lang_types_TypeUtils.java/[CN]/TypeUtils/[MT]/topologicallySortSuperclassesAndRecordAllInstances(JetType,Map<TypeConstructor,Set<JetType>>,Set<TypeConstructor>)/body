{
  return DFS.dfs(Collections.singletonList(type),new DFS.Neighbors<JetType>(){
    @NotNull @Override public Iterable<JetType> getNeighbors(    JetType current){
      TypeSubstitutor substitutor=TypeSubstitutor.create(current);
      Collection<JetType> supertypes=current.getConstructor().getSupertypes();
      List<JetType> result=new ArrayList<JetType>(supertypes.size());
      for (      JetType supertype : supertypes) {
        if (visited.contains(supertype.getConstructor())) {
          continue;
        }
        result.add(substitutor.safeSubstitute(supertype,Variance.INVARIANT));
      }
      return result;
    }
  }
,new DFS.Visited<JetType>(){
    @Override public boolean checkAndMarkVisited(    JetType current){
      return visited.add(current.getConstructor());
    }
  }
,new DFS.NodeHandlerWithListResult<JetType,TypeConstructor>(){
    @Override public boolean beforeChildren(    JetType current){
      TypeConstructor constructor=current.getConstructor();
      Set<JetType> instances=constructorToAllInstances.get(constructor);
      if (instances == null) {
        instances=new HashSet<JetType>();
        constructorToAllInstances.put(constructor,instances);
      }
      instances.add(current);
      return true;
    }
    @Override public void afterChildren(    JetType current){
      result.addFirst(current.getConstructor());
    }
  }
);
}
