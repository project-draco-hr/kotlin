{
  List<Type> descTypes=new ArrayList<Type>();
  Parameters constructorParams=constructorInlineBuilder.buildParameters();
  final int[] capturedIndexes=new int[constructorParams.totalSize()];
  int index=0;
  int size=0;
  for (  ParameterInfo info : constructorParams) {
    if (!info.isSkipped()) {
      if (info.isCaptured() || info instanceof CapturedParamInfo) {
        capturedIndexes[index]=size;
        index++;
      }
      if (size != 0) {
        descTypes.add(info.getType());
      }
      size+=info.getType().getSize();
    }
  }
  final List<Pair<String,Type>> capturedFieldsToGenerate=new ArrayList<Pair<String,Type>>();
  for (  CapturedParamInfo capturedParamInfo : allCapturedBuilder.listCaptured()) {
    if (capturedParamInfo.getLambda() == null) {
      capturedFieldsToGenerate.add(new Pair<String,Type>(capturedParamInfo.getNewFieldName(),capturedParamInfo.getType()));
    }
  }
  String constructorDescriptor=Type.getMethodDescriptor(Type.VOID_TYPE,descTypes.toArray(new Type[descTypes.size()]));
  MethodVisitor constructorVisitor=classBuilder.newMethod(null,AsmUtil.NO_FLAG_PACKAGE_PRIVATE,"<init>",constructorDescriptor,null,ArrayUtil.EMPTY_STRING_ARRAY);
  MethodVisitor capturedFieldInitializer=new InstructionAdapter(InlineCodegenUtil.API,constructorVisitor){
    private boolean superCallProcessed;
    @Override public void visitMethodInsn(    int opcode,    String owner,    String name,    String desc,    boolean itf){
      super.visitMethodInsn(opcode,owner,name,desc,itf);
      if (!superCallProcessed && "<init>".equals(name)) {
        superCallProcessed=true;
        List<FieldInfo> fields=AsmUtil.transformCapturedParams(capturedFieldsToGenerate,newLambdaType);
        int paramIndex=0;
        for (        FieldInfo fieldInfo : fields) {
          AsmUtil.genAssignInstanceFieldFromParam(fieldInfo,capturedIndexes[paramIndex],this);
          paramIndex++;
        }
      }
    }
  }
;
  Parameters constructorParameters=constructorInlineBuilder.buildParameters();
  RegeneratedLambdaFieldRemapper remapper=new RegeneratedLambdaFieldRemapper(oldObjectType.getInternalName(),newLambdaType.getInternalName(),constructorParameters,invocation.getCapturedLambdasToInline(),parentRemapper);
  MethodInliner inliner=new MethodInliner(constructor,constructorParameters,inliningContext.subInline(inliningContext.nameGenerator.subGenerator("lambda")),remapper,isSameModule,"Transformer for constructor of " + invocation.getOwnerInternalName());
  InlineResult result=inliner.doInline(capturedFieldInitializer,new LocalVarRemapper(constructorParameters,0),false);
  constructorVisitor.visitMaxs(-1,-1);
  AsmUtil.genClosureFields(capturedFieldsToGenerate,classBuilder);
  invocation.setNewConstructorDescriptor(constructorDescriptor);
  return result;
}
