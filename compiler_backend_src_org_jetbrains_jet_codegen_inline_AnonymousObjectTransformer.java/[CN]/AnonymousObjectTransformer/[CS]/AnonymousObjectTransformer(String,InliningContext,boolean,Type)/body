{
  this.isSameModule=isSameModule;
  this.state=inliningContext.state;
  this.typeMapper=state.getTypeMapper();
  this.inliningContext=inliningContext;
  this.oldObjectType=Type.getObjectType(objectInternalName);
  this.newLambdaType=newLambdaType;
  try {
    OutputFile outputFile=state.getFactory().get(objectInternalName + ".class");
    if (outputFile != null) {
      reader=new ClassReader(outputFile.asByteArray());
    }
 else {
      VirtualFile file=InlineCodegenUtil.findVirtualFile(state.getProject(),objectInternalName);
      if (file == null) {
        throw new RuntimeException("Couldn't find virtual file for " + objectInternalName);
      }
      reader=new ClassReader(file.contentsToByteArray());
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}
