{
  if (!(descriptor instanceof JavaCallableMemberDescriptor)) {
    String platformName=getJvmName(descriptor);
    if (platformName != null)     return platformName;
  }
  String nameForSpecialFunction=SpecialBuiltinMembers.getJvmMethodNameIfSpecial(descriptor);
  if (nameForSpecialFunction != null)   return nameForSpecialFunction;
  if (descriptor instanceof PropertyAccessorDescriptor) {
    PropertyDescriptor property=((PropertyAccessorDescriptor)descriptor).getCorrespondingProperty();
    if (isAnnotationClass(property.getContainingDeclaration())) {
      return property.getName().asString();
    }
    boolean isAccessor=property instanceof AccessorForPropertyDescriptor;
    String propertyName=isAccessor ? ((AccessorForPropertyDescriptor)property).getAccessorSuffix() : property.getName().asString();
    String accessorName=descriptor instanceof PropertyGetterDescriptor ? JvmAbi.getterName(propertyName) : JvmAbi.setterName(propertyName);
    return updateMemberNameIfInternal(isAccessor ? "access$" + accessorName : accessorName,descriptor);
  }
 else   if (isFunctionLiteral(descriptor)) {
    PsiElement element=DescriptorToSourceUtils.getSourceFromDescriptor(descriptor);
    if (element instanceof KtFunctionLiteral) {
      PsiElement expression=element.getParent();
      if (expression instanceof KtLambdaExpression) {
        SamType samType=bindingContext.get(SAM_VALUE,(KtExpression)expression);
        if (samType != null) {
          return samType.getAbstractMethod().getName().asString();
        }
      }
    }
    return OperatorNameConventions.INVOKE.asString();
  }
 else   if (isLocalFunction(descriptor) || isFunctionExpression(descriptor)) {
    return OperatorNameConventions.INVOKE.asString();
  }
 else {
    return updateMemberNameIfInternal(descriptor.getName().asString(),descriptor);
  }
}
