{
  if (files.isEmpty()) {
    return false;
  }
  VirtualFileSystem fileSystem=VirtualFileManager.getInstance().getFileSystem(StandardFileSystems.FILE_PROTOCOL);
  VirtualFileSystem jarFileSystem=VirtualFileManager.getInstance().getFileSystem(StandardFileSystems.JAR_PROTOCOL);
  for (  String path : files) {
    VirtualFile file;
    File filePath=new File(path);
    if (!filePath.exists()) {
      report.invoke("Path '" + path + "' does not exist");
      return true;
    }
    if (path.endsWith(".jar") || path.endsWith(".zip")) {
      file=jarFileSystem.findFileByPath(path + URLUtil.JAR_SEPARATOR);
    }
 else {
      file=fileSystem.findFileByPath(path);
    }
    if (file == null) {
      report.invoke("File '" + path + "' does not exist or could not be read");
      return true;
    }
    String moduleName;
    if (isOldKotlinJavascriptLibrary(filePath)) {
      moduleName=LibraryUtils.getKotlinJsModuleName(filePath);
    }
 else     if (isKotlinJavascriptLibraryWithMetadata(filePath)) {
      moduleName=null;
    }
 else {
      report.invoke("'" + path + "' is not a valid Kotlin Javascript library");
      return true;
    }
    if (action != null) {
      action.invoke(moduleName,file);
    }
  }
  return false;
}
