{
  if (files.isEmpty()) {
    return false;
  }
  VirtualFileSystem fileSystem=VirtualFileManager.getInstance().getFileSystem(StandardFileSystems.FILE_PROTOCOL);
  VirtualFileSystem jarFileSystem=VirtualFileManager.getInstance().getFileSystem(StandardFileSystems.JAR_PROTOCOL);
  String moduleName=null;
  for (  String path : files) {
    VirtualFile file;
    String actualModuleName=moduleName;
    if (path.charAt(0) == '@') {
      moduleName=path.substring(1);
      continue;
    }
    File filePath=new File(path);
    if (!filePath.exists()) {
      report.invoke("Path '" + path + "'does not exist");
      return true;
    }
    if (path.endsWith(".jar") || path.endsWith(".zip")) {
      file=jarFileSystem.findFileByPath(path + URLUtil.JAR_SEPARATOR);
    }
 else {
      file=fileSystem.findFileByPath(path);
    }
    if (file == null) {
      report.invoke("File '" + path + "'does not exist or could not be read");
      return true;
    }
 else {
      if (isKotlinJavascriptStdLibrary(filePath)) {
        actualModuleName=STDLIB_JS_MODULE_NAME;
      }
 else       if (isKotlinJavascriptLibrary(filePath)) {
        actualModuleName=LibraryUtils.getKotlinJsModuleName(filePath);
      }
 else       if (actualModuleName == null) {
        report.invoke("'" + path + "' is not a valid Kotlin Javascript library");
        return true;
      }
      if (actualModuleName == null) {
        report.invoke("Could not find " + LibraryUtils.KOTLIN_JS_MODULE_NAME + " for '"+ path+ "'");
        return true;
      }
      if (action != null) {
        action.invoke(actualModuleName,file);
      }
    }
    moduleName=null;
  }
  return false;
}
