{
  if (withoutSuperTypes)   return;
  if (!klass.equals(KotlinBuiltIns.getInstance().getNothing())) {
    Collection<JetType> supertypes=klass.getTypeConstructor().getSupertypes();
    if (supertypes.isEmpty() || supertypes.size() == 1 && KotlinBuiltIns.getInstance().isAnyOrNullableAny(supertypes.iterator().next())) {
    }
 else {
      renderSpaceIfNeeded(builder);
      builder.append(": ");
      for (Iterator<JetType> iterator=supertypes.iterator(); iterator.hasNext(); ) {
        JetType supertype=iterator.next();
        builder.append(renderType(supertype));
        if (iterator.hasNext()) {
          builder.append(", ");
        }
      }
    }
  }
}
