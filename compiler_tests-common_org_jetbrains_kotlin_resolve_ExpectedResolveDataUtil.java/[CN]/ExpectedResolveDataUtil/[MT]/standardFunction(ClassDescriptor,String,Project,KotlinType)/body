{
  ModuleDescriptorImpl emptyModule=KotlinTestUtils.createEmptyModule();
  ContainerForTests container=InjectionKt.createContainerForTests(project,emptyModule);
  emptyModule.setDependencies(emptyModule);
  emptyModule.initialize(PackageFragmentProvider.Empty.INSTANCE);
  LexicalScopeImpl lexicalScope=new LexicalScopeImpl(ImportingScope.Empty.INSTANCE,classDescriptor,false,classDescriptor.getThisAsReceiverParameter(),LexicalScopeKind.SYNTHETIC);
  ExpressionTypingContext context=ExpressionTypingContext.newContext(new BindingTraceContext(),lexicalScope,DataFlowInfoFactory.EMPTY,TypeUtils.NO_EXPECTED_TYPE);
  KtExpression callElement=KtPsiFactory(project).createExpression(name);
  TemporaryBindingTrace traceWithFakeArgumentInfo=TemporaryBindingTrace.create(context.trace,"trace to store fake argument for",name);
  List<KtExpression> fakeArguments=new ArrayList<KtExpression>(parameterTypes.length);
  for (  KotlinType type : parameterTypes) {
    fakeArguments.add(ExpressionTypingUtils.createFakeExpressionOfType(project,traceWithFakeArgumentInfo,"fakeArgument" + fakeArguments.size(),type));
  }
  OverloadResolutionResults<FunctionDescriptor> functions=container.getFakeCallResolver().resolveFakeCall(context,null,Name.identifier(name),callElement,callElement,FakeCallKind.OTHER,fakeArguments);
  for (  ResolvedCall<? extends FunctionDescriptor> resolvedCall : functions.getResultingCalls()) {
    List<ValueParameterDescriptor> unsubstitutedValueParameters=resolvedCall.getResultingDescriptor().getValueParameters();
    for (int i=0, unsubstitutedValueParametersSize=unsubstitutedValueParameters.size(); i < unsubstitutedValueParametersSize; i++) {
      ValueParameterDescriptor unsubstitutedValueParameter=unsubstitutedValueParameters.get(i);
      if (unsubstitutedValueParameter.getType().equals(parameterTypes[i])) {
        return resolvedCall.getResultingDescriptor();
      }
    }
  }
  throw new IllegalArgumentException("Not found: kotlin::" + classDescriptor.getName() + "."+ name+ "("+ Arrays.toString(parameterTypes)+ ")");
}
