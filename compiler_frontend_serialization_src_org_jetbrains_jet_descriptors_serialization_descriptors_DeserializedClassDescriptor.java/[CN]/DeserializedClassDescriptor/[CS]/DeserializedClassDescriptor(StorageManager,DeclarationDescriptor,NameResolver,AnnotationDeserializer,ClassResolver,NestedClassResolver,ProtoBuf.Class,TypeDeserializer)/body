{
  this.classProto=classProto;
  this.name=nameResolver.getName(classProto.getName());
  TypeDeserializer notNullTypeDeserializer=new TypeDeserializer(outerTypeDeserializer,nameResolver,classResolver,"Deserializer for class " + name,NONE);
  DescriptorDeserializer outerDeserializer=DescriptorDeserializer.create(notNullTypeDeserializer,this,nameResolver,annotationResolver);
  List<TypeParameterDescriptor> typeParameters=new ArrayList<TypeParameterDescriptor>(classProto.getTypeParametersCount());
  this.deserializer=outerDeserializer.createChildDeserializer(this,classProto.getTypeParametersList(),typeParameters);
  this.typeDeserializer=deserializer.getTypeDeserializer();
  this.containingDeclaration=containingDeclaration;
  this.typeConstructor=new DeserializedClassTypeConstructor(typeParameters);
  this.memberScope=new DeserializedClassMemberScope(this);
  this.innerClassesScope=new InnerClassesScopeWrapper(memberScope);
  this.thisAsReceiverParameter=new LazyClassReceiverParameterDescriptor();
  int flags=classProto.getFlags();
  this.modality=DescriptorDeserializer.modality(Flags.MODALITY.get(flags));
  this.visibility=DescriptorDeserializer.visibility(Flags.VISIBILITY.get(flags));
  this.kind=DescriptorDeserializer.classKind(Flags.CLASS_KIND.get(flags));
  this.isInner=Flags.INNER.get(flags);
  this.annotationDeserializer=annotationResolver;
  this.annotations=storageManager.createLazyValue(new Computable<List<AnnotationDescriptor>>(){
    @Override public List<AnnotationDescriptor> compute(){
      return computeAnnotations();
    }
  }
);
  this.primaryConstructor=storageManager.createNullableLazyValue(new Computable<ConstructorDescriptor>(){
    @Override public ConstructorDescriptor compute(){
      return computePrimaryConstructor();
    }
  }
);
  this.nestedClassResolver=_nestedClassResolver;
  this.classObjectDescriptor=storageManager.createNullableLazyValue(new Computable<ClassDescriptor>(){
    @Override public ClassDescriptor compute(){
      return computeClassObjectDecriptor();
    }
  }
);
  this.nestedClasses=new NestedClassDescriptors(storageManager,stringSet(classProto.getNestedClassNamesList(),nameResolver)){
    @Override protected ClassDescriptor resolveNestedClass(    @NotNull Name name){
      return nestedClassResolver.resolveNestedClass(DeserializedClassDescriptor.this,name);
    }
  }
;
  this.nestedObjects=new NestedClassDescriptors(storageManager,stringSet(classProto.getNestedObjectNamesList(),nameResolver)){
    @Override protected ClassDescriptor resolveNestedClass(    @NotNull Name name){
      return nestedClassResolver.resolveNestedClass(DeserializedClassDescriptor.this,name);
    }
  }
;
}
