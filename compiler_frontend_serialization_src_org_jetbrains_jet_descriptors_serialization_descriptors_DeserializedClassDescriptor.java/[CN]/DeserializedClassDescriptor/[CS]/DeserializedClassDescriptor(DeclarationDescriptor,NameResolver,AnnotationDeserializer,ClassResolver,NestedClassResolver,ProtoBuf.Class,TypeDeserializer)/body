{
  this.classProto=classProto;
  this.typeDeserializer=new TypeDeserializer(outerTypeDeserializer,nameResolver,classResolver);
  this.deserializer=DescriptorDeserializer.create(typeDeserializer,this,nameResolver,annotationResolver);
  this.containingDeclaration=containingDeclaration;
  this.typeConstructor=new DeserializedClassTypeConstructor();
  this.memberScope=new DeserializedClassMemberScope(this);
  this.thisAsReceiverParameter=new ReceiverParameterDescriptorImpl(this,getDefaultType(),new ClassReceiver(this));
  this.name=nameResolver.getName(classProto.getName());
  int flags=classProto.getFlags();
  this.modality=DescriptorDeserializer.modality(Flags.getModality(flags));
  this.visibility=DescriptorDeserializer.visibility(Flags.getVisibility(flags));
  this.kind=DescriptorDeserializer.classKind(Flags.getClassKind(flags));
  this.isInner=Flags.isInner(flags);
  this.annotationDeserializer=annotationResolver;
  this.annotations=new NotNullLazyValueImpl<List<AnnotationDescriptor>>(){
    @NotNull @Override protected List<AnnotationDescriptor> doCompute(){
      return computeAnnotations();
    }
  }
;
  this.primaryConstructor=new NullableLazyValueImpl<ConstructorDescriptor>(){
    @Override protected ConstructorDescriptor doCompute(){
      return computePrimaryConstructor();
    }
  }
;
  this.nestedClassResolver=_nestedClassResolver;
  this.classObjectDescriptor=new NullableLazyValueImpl<ClassDescriptor>(){
    @Override protected ClassDescriptor doCompute(){
      return computeClassObjectDecriptor();
    }
  }
;
  this.nestedClasses=new NestedClassDescriptors(stringSet(classProto.getNestedClassNamesList(),nameResolver)){
    @Override protected ClassDescriptor resolveNestedClass(    @NotNull Name name){
      return nestedClassResolver.resolveNestedClass(DeserializedClassDescriptor.this,name);
    }
  }
;
  this.nestedObjects=new NestedClassDescriptors(stringSet(classProto.getNestedObjectNamesList(),nameResolver)){
    @Override protected ClassDescriptor resolveNestedClass(    @NotNull Name name){
      return nestedClassResolver.resolveNestedClass(DeserializedClassDescriptor.this,name);
    }
  }
;
}
