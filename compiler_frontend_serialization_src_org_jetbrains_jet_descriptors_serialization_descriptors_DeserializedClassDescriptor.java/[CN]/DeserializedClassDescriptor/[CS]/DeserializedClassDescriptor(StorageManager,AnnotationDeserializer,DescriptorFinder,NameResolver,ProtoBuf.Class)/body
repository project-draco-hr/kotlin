{
  super(storageManager,nameResolver.getClassId(classProto.getFqName()).getRelativeClassName().shortName());
  this.classProto=classProto;
  this.classId=nameResolver.getClassId(classProto.getFqName());
  this.storageManager=storageManager;
  this.descriptorFinder=descriptorFinder;
  TypeDeserializer notNullTypeDeserializer=new TypeDeserializer(storageManager,null,nameResolver,descriptorFinder,"Deserializer for class " + getName(),NONE);
  DescriptorDeserializer outerDeserializer=DescriptorDeserializer.create(storageManager,notNullTypeDeserializer,this,nameResolver,annotationResolver);
  List<TypeParameterDescriptor> typeParameters=new ArrayList<TypeParameterDescriptor>(classProto.getTypeParameterCount());
  this.deserializer=outerDeserializer.createChildDeserializer(this,classProto.getTypeParameterList(),typeParameters);
  this.typeDeserializer=deserializer.getTypeDeserializer();
  this.containingDeclaration=storageManager.createLazyValue(new Function0<DeclarationDescriptor>(){
    @Override public DeclarationDescriptor invoke(){
      return computeContainingDeclaration();
    }
  }
);
  this.typeConstructor=new DeserializedClassTypeConstructor(typeParameters);
  this.memberScope=new DeserializedClassMemberScope(storageManager,this);
  int flags=classProto.getFlags();
  this.modality=DescriptorDeserializer.modality(Flags.MODALITY.get(flags));
  this.visibility=DescriptorDeserializer.visibility(Flags.VISIBILITY.get(flags));
  this.kind=DescriptorDeserializer.classKind(Flags.CLASS_KIND.get(flags));
  this.isInner=Flags.INNER.get(flags);
  this.annotationDeserializer=annotationResolver;
  this.annotations=storageManager.createLazyValue(new Function0<List<AnnotationDescriptor>>(){
    @Override public List<AnnotationDescriptor> invoke(){
      return computeAnnotations();
    }
  }
);
  this.primaryConstructor=storageManager.createNullableLazyValue(new Function0<ConstructorDescriptor>(){
    @Override public ConstructorDescriptor invoke(){
      return computePrimaryConstructor();
    }
  }
);
  this.classObjectDescriptor=storageManager.createNullableLazyValue(new Function0<ClassDescriptor>(){
    @Override public ClassDescriptor invoke(){
      return computeClassObjectDescriptor();
    }
  }
);
  this.nestedClasses=new NestedClassDescriptors();
}
