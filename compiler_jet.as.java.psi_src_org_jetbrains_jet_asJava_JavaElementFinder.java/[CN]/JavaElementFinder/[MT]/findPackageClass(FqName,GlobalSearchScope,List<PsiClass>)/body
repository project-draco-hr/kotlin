{
  List<LightClassGenerationSupport.KotlinLightPackageClassInfo> packageClassesInfos=lightClassGenerationSupport.findPackageClassesInfos(qualifiedName,scope);
  for (  LightClassGenerationSupport.KotlinLightPackageClassInfo info : packageClassesInfos) {
    Collection<JetFile> files=info.getFiles();
    if (PackagePartClassUtils.getPackageFilesWithCallables(files).isEmpty())     continue;
    KotlinLightClassForPackage lightClass=KotlinLightClassForPackage.create(psiManager,qualifiedName,info.getScope(),files);
    if (lightClass == null)     continue;
    answer.add(lightClass);
    if (files.size() > 1) {
      for (      JetFile file : files) {
        answer.add(new FakeLightClassForFileOfPackage(psiManager,lightClass,file));
      }
    }
  }
}
