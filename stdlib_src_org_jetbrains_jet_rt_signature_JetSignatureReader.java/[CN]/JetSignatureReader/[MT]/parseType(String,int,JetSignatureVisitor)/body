{
  if (signature.length() == 0) {
    throw new IllegalStateException();
  }
  char c;
  int start, end;
  boolean visited, inner;
  String name;
  boolean nullable=false;
  if (signature.charAt(pos) == '?') {
    nullable=true;
    pos++;
  }
switch (c=signature.charAt(pos++)) {
case 'Z':
case 'C':
case 'B':
case 'S':
case 'I':
case 'F':
case 'J':
case 'D':
case 'V':
    v.visitBaseType(c,nullable);
  return pos;
case '[':
return parseType(signature,pos,v.visitArrayType(nullable));
case 'T':
end=signature.indexOf(';',pos);
v.visitTypeVariable(signature.substring(pos,end),nullable);
return end + 1;
case 'L':
case 'M':
boolean forceReal=signature.charAt(pos - 1) == 'M';
start=pos;
visited=false;
inner=false;
for (; ; ) {
switch (c=signature.charAt(pos++)) {
case '.':
case ';':
if (!visited) {
name=signature.substring(start,pos - 1);
if (inner) {
v.visitInnerClassType(name,nullable);
}
 else {
v.visitClassType(name,nullable,forceReal);
}
}
if (c == ';') {
v.visitEnd();
return pos;
}
start=pos;
visited=false;
inner=true;
break;
case '<':
name=signature.substring(start,pos - 1);
if (inner) {
v.visitInnerClassType(name,nullable);
}
 else {
v.visitClassType(name,nullable,forceReal);
}
visited=true;
top: for (; ; ) {
switch (c=signature.charAt(pos)) {
case '>':
break top;
case '*':
++pos;
v.visitTypeArgument();
break;
case '+':
case '-':
pos=parseType(signature,pos + 1,v.visitTypeArgument(JetSignatureVariance.parseVariance(c)));
break;
default :
pos=parseType(signature,pos,v.visitTypeArgument(JetSignatureVariance.INVARIANT));
break;
}
}
}
}
default :
throw new IllegalStateException();
}
}
