{
  if (!methodFromSuper.getName().equals(initialMethodName)) {
    return false;
  }
  Collection<JavaValueParameter> fromSuperParameters=methodFromSuper.getValueParameters();
  if (fromSuperParameters.size() != initialParametersErasure.size()) {
    return false;
  }
  Iterator<JavaType> originalIterator=initialParametersErasure.iterator();
  Iterator<JavaValueParameter> superIterator=fromSuperParameters.iterator();
  while (originalIterator.hasNext()) {
    JavaType originalType=originalIterator.next();
    JavaType typeFromSuper=superIterator.next().getType();
    boolean isVarargType=methodFromSuper.isVararg() && !superIterator.hasNext();
    JavaType typeFromSuperErased=erasure(varargToArray(supertypeSubstitutor.substitute(typeFromSuper),isVarargType));
    if (!originalType.equals(typeFromSuperErased)) {
      return false;
    }
  }
  return true;
}
