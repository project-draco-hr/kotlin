{
  super.setUp();
  final VirtualFile baseDir=getProject().getBaseDir();
  assertNotNull(baseDir);
  final VirtualFile libraryDir=ApplicationManager.getApplication().runWriteAction(new ThrowableComputable<VirtualFile,IOException>(){
    @Override public VirtualFile compute() throws IOException {
      VirtualFile libraryDir=baseDir.createChildDirectory(this,"lib");
      baseDir.createChildDirectory(this,SRC_DIR_NAME);
      return libraryDir;
    }
  }
);
  VirtualFile testDataDir=LocalFileSystem.getInstance().findFileByPath(TEST_DATA_PATH);
  assertNotNull(testDataDir);
  VfsUtilCore.visitChildrenRecursively(testDataDir,new VirtualFileVisitor(){
    @Override public boolean visitFile(    @NotNull VirtualFile file){
      file.getChildren();
      file.refresh(false,true);
      return true;
    }
  }
);
  final VirtualFile librarySourceDir=LocalFileSystem.getInstance().findFileByPath(SOURCES_PATH);
  assertNotNull(librarySourceDir);
  FileUtil.copyDir(getTempDirWithCompiled(),new File(libraryDir.getPath()));
  ((NewVirtualFile)baseDir).markDirtyRecursively();
  baseDir.refresh(false,true);
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    @Override public void run(){
      ModifiableRootModel moduleModel=ModuleRootManager.getInstance(myModule).getModifiableModel();
      Library.ModifiableModel libraryModel=moduleModel.getModuleLibraryTable().getModifiableModel().createLibrary("myKotlinLib").getModifiableModel();
      libraryModel.addRoot(libraryDir,OrderRootType.CLASSES);
      if (isWithSources()) {
        libraryModel.addRoot(librarySourceDir,OrderRootType.SOURCES);
      }
      libraryModel.commit();
      VirtualFile srcDir=baseDir.findChild(SRC_DIR_NAME);
      assertNotNull(srcDir);
      moduleModel.addContentEntry(srcDir).addSourceFolder(srcDir,false);
      moduleModel.commit();
    }
  }
);
}
