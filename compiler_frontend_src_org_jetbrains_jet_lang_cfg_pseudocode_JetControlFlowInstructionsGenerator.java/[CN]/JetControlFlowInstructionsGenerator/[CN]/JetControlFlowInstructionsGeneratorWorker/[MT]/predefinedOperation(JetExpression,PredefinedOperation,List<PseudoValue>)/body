{
  Map<PseudoValue,TypePredicate> expectedTypes;
switch (operation) {
case AND:
case OR:
    SingleType onlyBoolean=new SingleType(KotlinBuiltIns.getInstance().getBooleanType());
  expectedTypes=PseudocodePackage.expectedTypeFor(onlyBoolean,inputValues);
break;
case NOT_NULL_ASSERTION:
expectedTypes=PseudocodePackage.expectedTypeFor(AllTypes.instance$,inputValues);
break;
default :
throw new IllegalArgumentException("Invalid operation: " + operation);
}
return magic(expression,expression,inputValues,expectedTypes);
}
