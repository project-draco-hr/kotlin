{
  boolean classObject=descriptor.getKind() == ClassKind.CLASS_OBJECT;
  if (!startFromName) {
    if (!classObject) {
      renderAnnotations(descriptor,builder);
      renderVisibility(descriptor.getVisibility(),builder);
      if (descriptor.getKind() != ClassKind.TRAIT && descriptor.getKind() != ClassKind.OBJECT) {
        renderModality(descriptor.getModality(),builder);
      }
    }
    builder.append(renderKeyword(getClassKindPrefix(descriptor)));
    if (!classObject) {
      builder.append(" ");
    }
  }
  List<TypeParameterDescriptor> typeParameters=descriptor.getTypeConstructor().getParameters();
  if (!classObject) {
    renderName(descriptor,builder);
    renderTypeParameters(typeParameters,builder);
    if (classWithPrimaryConstructor) {
      ConstructorDescriptor primaryConstructor=descriptor.getUnsubstitutedPrimaryConstructor();
      if (primaryConstructor != null) {
        renderValueParameters(primaryConstructor,builder);
      }
    }
  }
  if (!descriptor.equals(KotlinBuiltIns.getInstance().getNothing())) {
    Collection<JetType> supertypes=descriptor.getTypeConstructor().getSupertypes();
    if (supertypes.isEmpty() || supertypes.size() == 1 && KotlinBuiltIns.getInstance().isAny(supertypes.iterator().next())) {
    }
 else {
      builder.append(" : ");
      for (Iterator<JetType> iterator=supertypes.iterator(); iterator.hasNext(); ) {
        JetType supertype=iterator.next();
        builder.append(renderType(supertype));
        if (iterator.hasNext()) {
          builder.append(", ");
        }
      }
    }
  }
  renderWhereSuffix(typeParameters,builder);
}
