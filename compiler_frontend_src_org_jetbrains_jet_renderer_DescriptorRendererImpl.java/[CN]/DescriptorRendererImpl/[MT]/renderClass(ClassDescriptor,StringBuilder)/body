{
  boolean classObject=klass.getKind() == ClassKind.CLASS_OBJECT;
  if (!startFromName) {
    if (!classObject) {
      renderAnnotations(klass,builder);
      renderVisibility(klass.getVisibility(),builder);
      if (klass.getKind() != ClassKind.TRAIT && klass.getKind() != ClassKind.OBJECT) {
        renderModality(klass.getModality(),builder);
      }
    }
    builder.append(renderKeyword(getClassKindPrefix(klass)));
    if (!classObject) {
      builder.append(" ");
    }
  }
  List<TypeParameterDescriptor> typeParameters=klass.getTypeConstructor().getParameters();
  if (!classObject || verbose) {
    renderName(klass,builder);
  }
  renderTypeParameters(typeParameters,builder,false);
  if (!classObject && classWithPrimaryConstructor) {
    ConstructorDescriptor primaryConstructor=klass.getUnsubstitutedPrimaryConstructor();
    if (primaryConstructor != null) {
      renderValueParameters(primaryConstructor,builder);
    }
  }
  if (!klass.equals(KotlinBuiltIns.getInstance().getNothing())) {
    Collection<JetType> supertypes=klass.getTypeConstructor().getSupertypes();
    if (supertypes.isEmpty() || supertypes.size() == 1 && KotlinBuiltIns.getInstance().isAny(supertypes.iterator().next())) {
    }
 else {
      builder.append(" : ");
      for (Iterator<JetType> iterator=supertypes.iterator(); iterator.hasNext(); ) {
        JetType supertype=iterator.next();
        builder.append(renderType(supertype));
        if (iterator.hasNext()) {
          builder.append(", ");
        }
      }
    }
  }
  renderWhereSuffix(typeParameters,builder);
}
