{
  DeclarationDescriptor descriptor=classOrigin.getDescriptor();
  if (!(descriptor instanceof ClassDescriptor))   return;
  ClassDescriptor classDescriptor=(ClassDescriptor)descriptor;
  MultiMap<RawSignature,CallableMemberDescriptor> groupedBySignature=MultiMap.create();
  Queue<DeclarationDescriptor> queue=new LinkedList<DeclarationDescriptor>(classDescriptor.getDefaultType().getMemberScope().getAllDescriptors());
  while (!queue.isEmpty()) {
    DeclarationDescriptor member=queue.poll();
    if (member instanceof DeclarationDescriptorWithVisibility && ((DeclarationDescriptorWithVisibility)member).getVisibility() == Visibilities.INVISIBLE_FAKE) {
      continue;
    }
    if (member instanceof PropertyDescriptor) {
      PropertyDescriptor propertyDescriptor=(PropertyDescriptor)member;
      PropertyGetterDescriptor getter=propertyDescriptor.getGetter();
      if (getter != null) {
        queue.add(getter);
      }
      PropertySetterDescriptor setter=propertyDescriptor.getSetter();
      if (setter != null) {
        queue.add(setter);
      }
    }
 else     if (member instanceof FunctionDescriptor) {
      FunctionDescriptor functionDescriptor=(FunctionDescriptor)member;
      JvmMethodSignature methodSignature=typeMapper.mapSignature(functionDescriptor);
      RawSignature rawSignature=new RawSignature(methodSignature.getAsmMethod().getName(),methodSignature.getAsmMethod().getDescriptor(),MemberKind.METHOD);
      groupedBySignature.putValue(rawSignature,functionDescriptor);
    }
  }
  signatures:   for (  Map.Entry<RawSignature,Collection<CallableMemberDescriptor>> entry : groupedBySignature.entrySet()) {
    RawSignature rawSignature=entry.getKey();
    Collection<CallableMemberDescriptor> members=entry.getValue();
    if (members.size() <= 1)     continue;
    PsiElement memberElement=null;
    int nonFakeCount=0;
    for (    CallableMemberDescriptor member : members) {
      if (member.getKind() != FAKE_OVERRIDE) {
        nonFakeCount++;
        if (nonFakeCount > 1)         continue signatures;
        if (member.getKind() != DELEGATION) {
          memberElement=BindingContextUtils.callableDescriptorToDeclaration(getBindingContext(),member);
          if (memberElement == null && member instanceof PropertyAccessorDescriptor) {
            memberElement=BindingContextUtils.callableDescriptorToDeclaration(getBindingContext(),((PropertyAccessorDescriptor)member).getCorrespondingProperty());
          }
        }
      }
    }
    PsiElement elementToReportOn=memberElement == null ? classOrigin.getElement() : memberElement;
    if (elementToReportOn == null)     return;
    List<JvmDeclarationOrigin> origins=KotlinPackage.map(members,new Function1<CallableMemberDescriptor,JvmDeclarationOrigin>(){
      @Override public JvmDeclarationOrigin invoke(      CallableMemberDescriptor descriptor){
        return DiagnosticsPackage.OtherOrigin(descriptor);
      }
    }
);
    ConflictingJvmDeclarationsData data=new ConflictingJvmDeclarationsData(classInternalName,classOrigin,rawSignature,origins);
    diagnostics.report(ErrorsJvm.ACCIDENTAL_OVERRIDE.on(elementToReportOn,data));
  }
}
