{
  Type asmType=Type.getObjectType(getWrapperName(file));
  JetType functionType=samType.getKotlinFunctionType();
  SimpleFunctionDescriptor erasedInterfaceFunction=samType.getAbstractMethod().getOriginal();
  ClassBuilder cv=state.getFactory().newVisitor(null,erasedInterfaceFunction,asmType,file);
  cv.defineClass(file,V1_6,ACC_FINAL,asmType.getInternalName(),null,OBJECT_TYPE.getInternalName(),new String[]{typeMapper.mapType(samType.getType()).getInternalName()});
  cv.visitSource(file.getName(),null);
  writeKotlinSyntheticClassAnnotation(cv,KotlinSyntheticClass.Kind.SAM_WRAPPER);
  Type functionAsmType=typeMapper.mapType(functionType);
  cv.newField(null,erasedInterfaceFunction,ACC_SYNTHETIC | ACC_PRIVATE | ACC_FINAL,FUNCTION_FIELD_NAME,functionAsmType.getDescriptor(),null,null);
  generateConstructor(asmType,functionAsmType,cv);
  generateMethod(asmType,functionAsmType,cv,erasedInterfaceFunction,functionType);
  cv.done();
  return asmType;
}
