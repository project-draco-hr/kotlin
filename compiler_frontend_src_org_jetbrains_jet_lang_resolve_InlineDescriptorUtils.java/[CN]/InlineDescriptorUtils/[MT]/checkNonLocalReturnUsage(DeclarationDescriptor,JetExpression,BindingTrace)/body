{
  PsiElement containingFunction=PsiTreeUtil.getParentOfType(startExpression,JetClassOrObject.class,JetDeclarationWithBody.class);
  if (containingFunction == null) {
    return false;
  }
  DeclarationDescriptor containingFunctionDescriptor=trace.get(BindingContext.DECLARATION_TO_DESCRIPTOR,containingFunction);
  if (containingFunctionDescriptor == null) {
    return false;
  }
  BindingContext bindingContext=trace.getBindingContext();
  while (containingFunction instanceof JetFunctionLiteral && fromFunction != containingFunctionDescriptor) {
    containingFunction=containingFunction.getParent();
    boolean isInlinedLambda=false;
    JetExpression call=JetPsiUtil.getParentCallIfPresent((JetFunctionLiteralExpression)containingFunction);
    if (call != null) {
      ResolvedCall<?> resolvedCall=bindingContext.get(BindingContext.RESOLVED_CALL,JetPsiUtil.getCalleeExpressionIfAny(call));
      CallableDescriptor resultingDescriptor=resolvedCall == null ? null : resolvedCall.getResultingDescriptor();
      if (resultingDescriptor instanceof SimpleFunctionDescriptor) {
        isInlinedLambda=((SimpleFunctionDescriptor)resultingDescriptor).getInlineStrategy().isInline();
      }
    }
    if (!isInlinedLambda) {
      return false;
    }
    containingFunctionDescriptor=getContainingClassOrFunctionDescriptor(containingFunctionDescriptor,true);
    containingFunction=containingFunctionDescriptor != null ? BindingContextUtils.descriptorToDeclaration(bindingContext,containingFunctionDescriptor) : null;
  }
  return fromFunction == containingFunctionDescriptor;
}
