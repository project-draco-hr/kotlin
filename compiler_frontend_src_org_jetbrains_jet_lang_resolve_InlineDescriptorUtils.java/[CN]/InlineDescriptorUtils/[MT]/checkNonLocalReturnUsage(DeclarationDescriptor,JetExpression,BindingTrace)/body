{
  PsiElement containingFunction=PsiTreeUtil.getParentOfType(startExpression,JetClassOrObject.class,JetDeclarationWithBody.class);
  if (containingFunction == null) {
    return false;
  }
  DeclarationDescriptor containingFunctionDescriptor=trace.get(BindingContext.DECLARATION_TO_DESCRIPTOR,containingFunction);
  if (containingFunctionDescriptor == null) {
    return false;
  }
  BindingContext bindingContext=trace.getBindingContext();
  while (containingFunction instanceof JetFunctionLiteral && fromFunction != containingFunctionDescriptor) {
    containingFunction=containingFunction.getParent();
    boolean allowsNonLocalReturns=false;
    JetExpression call=JetPsiUtil.getParentCallIfPresent((JetFunctionLiteralExpression)containingFunction);
    if (call != null) {
      ResolvedCall<?> resolvedCall=BindingContextUtilPackage.getResolvedCall(call,bindingContext);
      CallableDescriptor resultingDescriptor=resolvedCall == null ? null : resolvedCall.getResultingDescriptor();
      if (resultingDescriptor instanceof SimpleFunctionDescriptor && ((SimpleFunctionDescriptor)resultingDescriptor).getInlineStrategy().isInline()) {
        ValueArgument argument=getContainingArgument(containingFunction,call);
        if (argument != null) {
          ArgumentMapping mapping=resolvedCall.getArgumentMapping(argument);
          if (mapping instanceof ArgumentMatch) {
            allowsNonLocalReturns=allowsNonLocalReturns(((ArgumentMatch)mapping).getValueParameter());
          }
        }
      }
    }
    if (!allowsNonLocalReturns) {
      return false;
    }
    containingFunctionDescriptor=getContainingClassOrFunctionDescriptor(containingFunctionDescriptor,true);
    containingFunction=containingFunctionDescriptor != null ? BindingContextUtils.descriptorToDeclaration(containingFunctionDescriptor) : null;
  }
  return fromFunction == containingFunctionDescriptor;
}
