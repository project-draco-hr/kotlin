{
  return new JetChangeSignatureConfiguration(){
    @NotNull @Override public JetMethodDescriptor configure(    @NotNull final JetMethodDescriptor originalDescriptor,    @NotNull final BindingContext bindingContext){
      return ChangeSignaturePackage.modify(originalDescriptor,new Function1<JetMutableMethodDescriptor,Unit>(){
        @Override public Unit invoke(        JetMutableMethodDescriptor descriptor){
          List<ValueParameterDescriptor> parameters=functionDescriptor.getValueParameters();
          List<? extends ValueArgument> arguments=callElement.getValueArguments();
          CollectingNameValidator validator=new CollectingNameValidator();
          for (int i=0; i < arguments.size(); i++) {
            ValueArgument argument=arguments.get(i);
            JetExpression expression=argument.getArgumentExpression();
            if (i < parameters.size()) {
              validator.addName(parameters.get(i).getName().asString());
              JetType argumentType=expression != null ? bindingContext.getType(expression) : null;
              JetType parameterType=parameters.get(i).getType();
              if (argumentType != null && !JetTypeChecker.DEFAULT.isSubtypeOf(argumentType,parameterType)) {
                descriptor.getParameters().get(i).setCurrentTypeText(IdeDescriptorRenderers.SOURCE_CODE.renderType(argumentType));
                typesToShorten.add(argumentType);
              }
            }
 else {
              JetParameterInfo parameterInfo=getNewParameterInfo(originalDescriptor.getBaseDescriptor(),bindingContext,argument,validator);
              typesToShorten.add(parameterInfo.getOriginalType());
              if (expression != null) {
                parameterInfo.setDefaultValueForCall(expression);
              }
              descriptor.addParameter(parameterInfo);
            }
          }
          return null;
        }
      }
);
    }
    @Override public boolean performSilently(    @NotNull Collection<? extends PsiElement> affectedFunctions){
      if (affectedFunctions.size() != 1) {
        return false;
      }
      PsiElement onlyFunction=affectedFunctions.iterator().next();
      return !hasTypeMismatches && !isConstructor() && !hasOtherUsages(onlyFunction);
    }
    @Override public boolean forcePerformForSelectedFunctionOnly(){
      return false;
    }
  }
;
}
