{
  List<JetType> supertypes=Lists.newArrayList(TypeUtils.getAllSupertypes(classDescriptor.getDefaultType()));
  Collections.sort(supertypes,new Comparator<JetType>(){
    @Override public int compare(    JetType o1,    JetType o2){
      if (o1.equals(o2)) {
        return 0;
      }
      if (JetTypeChecker.INSTANCE.isSubtypeOf(o1,o2)) {
        return -1;
      }
      if (JetTypeChecker.INSTANCE.isSubtypeOf(o2,o1)) {
        return 1;
      }
      return o1.toString().compareTo(o2.toString());
    }
  }
);
  List<ClassDescriptor> supertypesDescriptors=Lists.newArrayList();
  for (  JetType supertype : supertypes) {
    supertypesDescriptors.add(DescriptorUtils.getClassDescriptorForType(supertype));
  }
  return supertypesDescriptors;
}
