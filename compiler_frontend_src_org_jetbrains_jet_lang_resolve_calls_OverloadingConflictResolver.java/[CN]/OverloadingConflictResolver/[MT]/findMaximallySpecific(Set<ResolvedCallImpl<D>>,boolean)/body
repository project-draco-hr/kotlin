{
  Set<ResolvedCallImpl<D>> maximallySpecific=new THashSet<ResolvedCallImpl<D>>(new TObjectHashingStrategy<ResolvedCallImpl<D>>(){
    @Override public boolean equals(    ResolvedCallImpl<D> o1,    ResolvedCallImpl<D> o2){
      return o1 == null ? o2 == null : o1.getResultingDescriptor().equals(o2.getResultingDescriptor());
    }
    @Override public int computeHashCode(    ResolvedCallImpl<D> object){
      return object == null ? 0 : object.getResultingDescriptor().hashCode();
    }
  }
);
  meLoop:   for (  ResolvedCallImpl<D> candidateCall : candidates) {
    D me=candidateCall.getResultingDescriptor();
    for (    ResolvedCallImpl<D> otherCall : candidates) {
      D other=otherCall.getResultingDescriptor();
      if (other == me)       continue;
      if (!moreSpecific(me,other,discriminateGenericDescriptors) || moreSpecific(other,me,discriminateGenericDescriptors)) {
        continue meLoop;
      }
    }
    maximallySpecific.add(candidateCall);
  }
  if (maximallySpecific.size() == 1) {
    ResolvedCallImpl<D> result=maximallySpecific.iterator().next();
    result.getTrace().commit();
    return result;
  }
  return null;
}
