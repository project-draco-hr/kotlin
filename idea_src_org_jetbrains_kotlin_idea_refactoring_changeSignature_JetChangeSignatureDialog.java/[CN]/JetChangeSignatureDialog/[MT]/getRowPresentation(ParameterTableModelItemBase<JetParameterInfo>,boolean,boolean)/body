{
  JPanel panel=new JPanel(new BorderLayout());
  String valOrVar="";
  if (myMethod.getKind() == Kind.PRIMARY_CONSTRUCTOR) {
switch (item.parameter.getValOrVar()) {
case None:
      valOrVar="    ";
    break;
case Val:
  valOrVar="val ";
break;
case Var:
valOrVar="var ";
break;
}
}
String parameterName=getPresentationName(item);
String typeText=item.typeCodeFragment.getText();
String defaultValue=item.defaultValueCodeFragment.getText();
String separator=StringUtil.repeatSymbol(' ',getParamNamesMaxLength() - parameterName.length() + 1);
String text=valOrVar + parameterName + ":"+ separator+ typeText;
if (StringUtil.isNotEmpty(defaultValue)) text+=" // default value = " + defaultValue;
EditorTextField field=new EditorTextField(" " + text,getProject(),getFileType()){
@Override protected boolean shouldHaveBorder(){
return false;
}
}
;
Font font=EditorColorsManager.getInstance().getGlobalScheme().getFont(EditorFontType.PLAIN);
font=new Font(font.getFontName(),font.getStyle(),12);
field.setFont(font);
if (selected && focused) {
panel.setBackground(UIUtil.getTableSelectionBackground());
field.setAsRendererWithSelection(UIUtil.getTableSelectionBackground(),UIUtil.getTableSelectionForeground());
}
 else {
panel.setBackground(UIUtil.getTableBackground());
if (selected && !focused) {
panel.setBorder(new DottedBorder(UIUtil.getTableForeground()));
}
}
panel.add(field,BorderLayout.WEST);
return panel;
}
