{
  List<JetTypeParameter> decompiledParameters=typeParameterListOwner.getTypeParameters();
  if (decompiledParameters.size() != typeParameterDescriptors.size()) {
    return false;
  }
  Multimap<Name,String> decompiledParameterToBounds=Multimaps.newSetMultimap(Maps.<Name,Collection<String>>newHashMap(),CommonSuppliers.<String>getHashSetSupplier());
  for (  JetTypeParameter parameter : decompiledParameters) {
    JetTypeReference extendsBound=parameter.getExtendsBound();
    if (extendsBound != null) {
      decompiledParameterToBounds.put(parameter.getNameAsName(),extendsBound.getText());
    }
  }
  for (  JetTypeConstraint typeConstraint : typeParameterListOwner.getTypeConstraints()) {
    Name name=typeConstraint.getSubjectTypeParameterName().getReferencedNameAsName();
    decompiledParameterToBounds.put(name,typeConstraint.getBoundTypeReference().getText());
  }
  for (int i=0; i < decompiledParameters.size(); i++) {
    JetTypeParameter decompiledParameter=decompiledParameters.get(i);
    TypeParameterDescriptor descriptor=typeParameterDescriptors.get(i);
    if (!decompiledParameter.getNameAsName().equals(descriptor.getName())) {
      return false;
    }
    Set<String> descriptorUpperBounds=Sets.newHashSet(ContainerUtil.map(descriptor.getUpperBounds(),new Function<JetType,String>(){
      @Override public String fun(      JetType type){
        return DescriptorRenderer.TEXT.renderType(type);
      }
    }
));
    Set<String> decompiledUpperBounds=decompiledParameterToBounds.get(descriptor.getName()).isEmpty() ? Sets.newHashSet(DescriptorRenderer.TEXT.renderType(KotlinBuiltIns.getInstance().getDefaultBound())) : Sets.newHashSet(decompiledParameterToBounds.get(descriptor.getName()));
    if (!descriptorUpperBounds.equals(decompiledUpperBounds)) {
      return false;
    }
  }
  return true;
}
