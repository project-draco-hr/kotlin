{
  JetFile containingFile=decompiledDeclaration.getContainingJetFile();
  VirtualFile libraryFile=containingFile.getVirtualFile();
  if (libraryFile == null) {
    return GlobalSearchScope.EMPTY_SCOPE;
  }
  Project project=decompiledDeclaration.getProject();
  ProjectFileIndex projectFileIndex=ProjectFileIndex.SERVICE.getInstance(project);
  if (!projectFileIndex.isInLibraryClasses(libraryFile)) {
    return GlobalSearchScope.EMPTY_SCOPE;
  }
  Set<VirtualFile> sourceRootSet=Sets.newLinkedHashSet();
  for (  OrderEntry entry : projectFileIndex.getOrderEntriesForFile(libraryFile)) {
    if (entry instanceof LibraryOrSdkOrderEntry) {
      VirtualFile[] sourceRoots=((LibraryOrSdkOrderEntry)entry).getRootFiles(OrderRootType.SOURCES);
      KotlinPackage.addAll(sourceRootSet,sourceRoots);
    }
  }
  return new LibraryScopeBaseFix(project,VirtualFile.EMPTY_ARRAY,ArrayUtil.toObjectArray(sourceRootSet,VirtualFile.class));
}
