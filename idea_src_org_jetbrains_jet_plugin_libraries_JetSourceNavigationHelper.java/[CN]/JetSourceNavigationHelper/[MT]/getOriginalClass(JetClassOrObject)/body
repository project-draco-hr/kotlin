{
  String internalName=PsiCodegenPredictor.getPredefinedJvmInternalName(classOrObject);
  if (internalName == null) {
    return null;
  }
  String fqName=JvmClassName.byInternalName(internalName).getFqNameForClassNameWithoutDollars().asString();
  JetFile file=(JetFile)classOrObject.getContainingFile();
  VirtualFile vFile=file.getVirtualFile();
  Project project=file.getProject();
  final ProjectFileIndex idx=ProjectRootManager.getInstance(project).getFileIndex();
  if (vFile == null || !idx.isInLibrarySource(vFile))   return null;
  final Set<OrderEntry> orderEntries=new THashSet<OrderEntry>(idx.getOrderEntriesForFile(vFile));
  return JavaPsiFacade.getInstance(project).findClass(fqName,new GlobalSearchScope(project){
    @Override public int compare(    @NotNull VirtualFile file1,    @NotNull VirtualFile file2){
      return 0;
    }
    @Override public boolean contains(    @NotNull VirtualFile file){
      List<OrderEntry> entries=idx.getOrderEntriesForFile(file);
      for (      OrderEntry entry : entries) {
        if (orderEntries.contains(entry))         return true;
      }
      return false;
    }
    @Override public boolean isSearchInModuleContent(    @NotNull Module aModule){
      return false;
    }
    @Override public boolean isSearchInLibraries(){
      return true;
    }
  }
);
}
