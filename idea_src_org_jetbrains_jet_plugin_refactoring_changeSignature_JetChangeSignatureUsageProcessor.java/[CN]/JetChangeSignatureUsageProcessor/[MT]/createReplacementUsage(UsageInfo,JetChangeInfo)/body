{
  if (originalUsageInfo instanceof KotlinSAMUsage) {
    final KotlinSAMUsage samUsage=(KotlinSAMUsage)originalUsageInfo;
    return new JavaMethodKotlinUsageWithDelegate<JetFunction>(samUsage.getFunctionLiteral(),javaMethodChangeInfo){
      private final JetFunctionDefinitionUsage<JetFunction> delegateUsage=new JetFunctionDefinitionUsage<JetFunction>(samUsage.getFunctionLiteral(),samUsage.getFunctionDescriptor(),javaMethodChangeInfo.getMethodDescriptor().getOriginalPrimaryFunction(),samUsage.getSamCallType());
      @NotNull @Override protected JetUsageInfo<JetFunction> getDelegateUsage(){
        return delegateUsage;
      }
    }
;
  }
  JetCallElement callElement=PsiTreeUtil.getParentOfType(originalUsageInfo.getElement(),JetCallElement.class);
  return callElement != null ? new JavaMethodKotlinCallUsage(callElement,javaMethodChangeInfo) : null;
}
