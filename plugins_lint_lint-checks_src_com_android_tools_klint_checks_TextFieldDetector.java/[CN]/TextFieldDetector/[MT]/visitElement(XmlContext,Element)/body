{
  Node inputTypeNode=element.getAttributeNodeNS(ANDROID_URI,ATTR_INPUT_TYPE);
  String inputType="";
  if (inputTypeNode != null) {
    inputType=inputTypeNode.getNodeValue();
  }
  boolean haveHint=false;
  if (inputTypeNode == null) {
    haveHint=element.hasAttributeNS(ANDROID_URI,ATTR_HINT);
    String style=element.getAttribute(ATTR_STYLE);
    if (style != null && !style.isEmpty()) {
      LintClient client=context.getClient();
      if (client.supportsProjectResources()) {
        Project project=context.getMainProject();
        List<ResourceValue> styles=LintUtils.getStyleAttributes(project,client,style,ANDROID_URI,ATTR_INPUT_TYPE);
        if (styles != null && !styles.isEmpty()) {
          ResourceValue value=styles.get(0);
          inputType=value.getValue();
          inputTypeNode=element;
        }
 else         if (!haveHint) {
          styles=LintUtils.getStyleAttributes(project,client,style,ANDROID_URI,ATTR_HINT);
          if (styles != null && !styles.isEmpty()) {
            haveHint=true;
          }
        }
      }
 else {
        return;
      }
    }
  }
  if (inputTypeNode == null && !haveHint) {
    if (element.hasAttributeNS(ANDROID_URI,ATTR_INPUT_METHOD)) {
      return;
    }
    context.report(ISSUE,element,context.getLocation(element),"This text field does not specify an `inputType` or a `hint`");
  }
  Attr idNode=element.getAttributeNodeNS(ANDROID_URI,ATTR_ID);
  if (idNode == null) {
    return;
  }
  String id=idNode.getValue();
  if (id.isEmpty()) {
    return;
  }
  if (id.startsWith("editText")) {
    return;
  }
  if (containsWord(id,"phone",true,true)) {
    if (!inputType.contains("phone") && element.getAttributeNodeNS(ANDROID_URI,ATTR_PHONE_NUMBER) == null) {
      String message=String.format("The view name (`%1$s`) suggests this is a phone " + "number, but it does not include '`phone`' in the `inputType`",id);
      reportMismatch(context,idNode,inputTypeNode,message);
    }
    return;
  }
  if (containsWord(id,"width",false,true) || containsWord(id,"height",false,true) || containsWord(id,"size",false,true)|| containsWord(id,"length",false,true)|| containsWord(id,"weight",false,true)|| containsWord(id,"number",false,true)) {
    if (!inputType.contains("number") && !inputType.contains("phone")) {
      String message=String.format("The view name (`%1$s`) suggests this is a number, " + "but it does not include a numeric `inputType` (such as '`numberSigned`')",id);
      reportMismatch(context,idNode,inputTypeNode,message);
    }
    return;
  }
  if (containsWord(id,"password",true,true)) {
    if (!(inputType.contains("Password")) && element.getAttributeNodeNS(ANDROID_URI,ATTR_PASSWORD) == null) {
      String message=String.format("The view name (`%1$s`) suggests this is a password, " + "but it does not include '`textPassword`' in the `inputType`",id);
      reportMismatch(context,idNode,inputTypeNode,message);
    }
    return;
  }
  if (containsWord(id,"email",true,true)) {
    if (!inputType.contains("Email")) {
      String message=String.format("The view name (`%1$s`) suggests this is an e-mail " + "address, but it does not include '`textEmail`' in the `inputType`",id);
      reportMismatch(context,idNode,inputTypeNode,message);
    }
    return;
  }
  if (endsWith(id,"pin",false,true)) {
    if (!(inputType.contains("numberPassword")) && element.getAttributeNodeNS(ANDROID_URI,ATTR_PASSWORD) == null) {
      String message=String.format("The view name (`%1$s`) suggests this is a password, " + "but it does not include '`numberPassword`' in the `inputType`",id);
      reportMismatch(context,idNode,inputTypeNode,message);
    }
    return;
  }
  if ((containsWord(id,"uri") || containsWord(id,"url")) && !inputType.contains("textUri")) {
    String message=String.format("The view name (`%1$s`) suggests this is a URI, " + "but it does not include '`textUri`' in the `inputType`",id);
    reportMismatch(context,idNode,inputTypeNode,message);
  }
  if ((containsWord(id,"date")) && !inputType.contains("date")) {
    String message=String.format("The view name (`%1$s`) suggests this is a date, " + "but it does not include '`date`' or '`datetime`' in the `inputType`",id);
    reportMismatch(context,idNode,inputTypeNode,message);
  }
}
