{
  List<String> libraryFiles=Arrays.asList("Library.jet","Numbers.jet","Ranges.jet","Iterables.jet","Iterators.jet","Arrays.jet");
  try {
    List<JetFile> files=new LinkedList<JetFile>();
    for (    String fileName : libraryFiles) {
      String path="jet/" + fileName;
      InputStream stream=JetStandardClasses.class.getClassLoader().getResourceAsStream(path);
      if (stream == null) {
        throw new IllegalStateException("resource not found in classpath: " + path);
      }
      JetFile file=(JetFile)PsiFileFactory.getInstance(project).createFileFromText(fileName,JetFileType.INSTANCE,FileUtil.loadTextAndClose(new InputStreamReader(stream)));
      files.add(file);
    }
    BindingTraceContext bindingTraceContext=new BindingTraceContext();
    WritableScopeImpl writableScope=new WritableScopeImpl(JetStandardClasses.STANDARD_CLASSES,JetStandardClasses.STANDARD_CLASSES_NAMESPACE,RedeclarationHandler.THROW_EXCEPTION).setDebugName("Root bootstrap scope");
    writableScope.changeLockLevel(WritableScope.LockLevel.BOTH);
    TopDownAnalyzer.processStandardLibraryNamespace(project,bindingTraceContext,writableScope,JetStandardClasses.STANDARD_CLASSES_NAMESPACE,files);
    AnalyzingUtils.throwExceptionOnErrors(bindingTraceContext.getBindingContext());
    initStdClasses();
  }
 catch (  IOException e) {
    throw new IllegalStateException(e);
  }
catch (  ProcessCanceledException e) {
    throw e;
  }
}
