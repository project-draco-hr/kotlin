{
  if (libraryScope == null) {
    this.libraryScope=JetStandardClasses.STANDARD_CLASSES_NAMESPACE.getMemberScope();
    this.numberClass=getStdClassByName("Number");
    this.stringClass=getStdClassByName("String");
    this.charSequenceClass=getStdClassByName("CharSequence");
    this.arrayClass=getStdClassByName("Array");
    this.throwableClass=getStdClassByName("Throwable");
    this.enumClass=getStdClassByName("Enum");
    this.volatileClass=getStdClassByName("volatile");
    this.dataClass=getStdClassByName("data");
    this.iterableClass=getStdClassByName("Iterable");
    this.iteratorClass=getStdClassByName("Iterator");
    this.mutableIterableClass=getStdClassByName("MutableIterable");
    this.mutableIteratorClass=getStdClassByName("MutableIterator");
    this.comparableClass=getStdClassByName("Comparable");
    this.stringType=new JetTypeImpl(getString());
    this.tuple0Type=new JetTypeImpl(JetStandardClasses.getTuple(0));
    this.annotationClass=getStdClassByName("Annotation");
    this.annotationType=new JetTypeImpl(annotationClass);
    primitiveTypeToClass=new EnumMap<PrimitiveType,ClassDescriptor>(PrimitiveType.class);
    primitiveTypeToJetType=new EnumMap<PrimitiveType,JetType>(PrimitiveType.class);
    primitiveTypeToNullableJetType=new EnumMap<PrimitiveType,JetType>(PrimitiveType.class);
    primitiveTypeToArrayJetType=new EnumMap<PrimitiveType,JetType>(PrimitiveType.class);
    primitiveJetTypeToJetArrayType=new HashMap<JetType,JetType>();
    jetArrayTypeToPrimitiveJetType=new HashMap<JetType,JetType>();
    for (    PrimitiveType primitive : PrimitiveType.values()) {
      makePrimitive(primitive);
    }
  }
}
