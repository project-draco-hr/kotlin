{
  if (libraryScope == null) {
    this.libraryScope=JetStandardClasses.STANDARD_CLASSES_NAMESPACE.getMemberScope();
    this.numberClass=(ClassDescriptor)libraryScope.getClassifier(Name.identifier("Number"));
    this.stringClass=(ClassDescriptor)libraryScope.getClassifier(Name.identifier("String"));
    this.charSequenceClass=(ClassDescriptor)libraryScope.getClassifier(Name.identifier("CharSequence"));
    this.arrayClass=(ClassDescriptor)libraryScope.getClassifier(Name.identifier("Array"));
    this.volatileClass=(ClassDescriptor)libraryScope.getClassifier(Name.identifier("volatile"));
    this.throwableClass=(ClassDescriptor)libraryScope.getClassifier(Name.identifier("Throwable"));
    this.iterableClass=(ClassDescriptor)libraryScope.getClassifier(Name.identifier("Iterable"));
    this.comparableClass=(ClassDescriptor)libraryScope.getClassifier(Name.identifier("Comparable"));
    this.numberType=new JetTypeImpl(getNumber());
    this.nullableNumberType=TypeUtils.makeNullable(numberType);
    this.stringType=new JetTypeImpl(getString());
    this.charSequenceType=new JetTypeImpl(getCharSequence());
    this.nullableCharSequenceType=TypeUtils.makeNullable(charSequenceType);
    this.nullableStringType=TypeUtils.makeNullable(stringType);
    this.volatileType=new JetTypeImpl(getVolatile());
    this.throwableType=new JetTypeImpl(getThrowable());
    this.nullableThrowableType=TypeUtils.makeNullable(throwableType);
    this.tuple0Type=new JetTypeImpl(JetStandardClasses.getTuple(0));
    this.nullableTuple0Type=TypeUtils.makeNullable(tuple0Type);
    primitiveTypeToClass=new EnumMap<PrimitiveType,ClassDescriptor>(PrimitiveType.class);
    primitiveTypeToJetType=new EnumMap<PrimitiveType,JetType>(PrimitiveType.class);
    primitiveTypeToNullableJetType=new EnumMap<PrimitiveType,JetType>(PrimitiveType.class);
    primitiveTypeToArrayClass=new EnumMap<PrimitiveType,ClassDescriptor>(PrimitiveType.class);
    primitiveTypeToArrayJetType=new EnumMap<PrimitiveType,JetType>(PrimitiveType.class);
    primitiveTypeToNullableArrayJetType=new EnumMap<PrimitiveType,JetType>(PrimitiveType.class);
    primitiveJetTypeToJetArrayType=new HashMap<JetType,JetType>();
    jetArrayTypeToPrimitiveJetType=new HashMap<JetType,JetType>();
    for (    PrimitiveType primitive : PrimitiveType.values()) {
      makePrimitive(primitive);
    }
  }
}
