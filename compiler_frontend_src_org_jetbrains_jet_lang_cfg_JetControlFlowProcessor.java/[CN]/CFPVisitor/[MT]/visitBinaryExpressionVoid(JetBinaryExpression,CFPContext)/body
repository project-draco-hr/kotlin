{
  JetSimpleNameExpression operationReference=expression.getOperationReference();
  IElementType operationType=operationReference.getReferencedNameElementType();
  if (!ImmutableSet.of(ANDAND,OROR,EQ,ELVIS).contains(operationType)) {
    mark(expression);
  }
  JetExpression left=expression.getLeft();
  JetExpression right=expression.getRight();
  if (operationType == ANDAND) {
    generateInstructions(left,IN_CONDITION);
    Label resultLabel=builder.createUnboundLabel();
    builder.jumpOnFalse(resultLabel,expression,builder.getBoundValue(left));
    if (right != null) {
      generateInstructions(right,IN_CONDITION);
    }
    builder.bindLabel(resultLabel);
    if (!context.inCondition()) {
      predefinedOperation(expression,AND);
    }
  }
 else   if (operationType == OROR) {
    generateInstructions(left,IN_CONDITION);
    Label resultLabel=builder.createUnboundLabel();
    builder.jumpOnTrue(resultLabel,expression,builder.getBoundValue(left));
    if (right != null) {
      generateInstructions(right,IN_CONDITION);
    }
    builder.bindLabel(resultLabel);
    if (!context.inCondition()) {
      predefinedOperation(expression,OR);
    }
  }
 else   if (operationType == EQ) {
    visitAssignment(left,getDeferredValue(right),expression);
  }
 else   if (OperatorConventions.ASSIGNMENT_OPERATIONS.containsKey(operationType)) {
    ResolvedCall<?> resolvedCall=getResolvedCall(operationReference);
    if (resolvedCall != null) {
      CallableDescriptor descriptor=resolvedCall.getResultingDescriptor();
      Name assignMethodName=OperatorConventions.getNameForOperationSymbol((JetToken)expression.getOperationToken());
      if (descriptor.getName().equals(assignMethodName)) {
        generateCall(expression,operationReference,resolvedCall);
      }
 else {
        Function0<PseudoValue> rhsDeferredValue=getValueAsFunction(generateCall(null,operationReference,resolvedCall).getOutputValue());
        visitAssignment(left,rhsDeferredValue,expression);
      }
    }
 else {
      generateBothArguments(expression);
    }
  }
 else   if (operationType == ELVIS) {
    generateInstructions(left,NOT_IN_CONDITION);
    Label afterElvis=builder.createUnboundLabel();
    builder.jumpOnTrue(afterElvis,expression,builder.getBoundValue(left));
    if (right != null) {
      generateInstructions(right,NOT_IN_CONDITION);
    }
    builder.bindLabel(afterElvis);
    mergeValues(Arrays.asList(left,right),expression);
  }
 else {
    if (!generateCall(expression,operationReference)) {
      generateBothArguments(expression);
    }
  }
}
