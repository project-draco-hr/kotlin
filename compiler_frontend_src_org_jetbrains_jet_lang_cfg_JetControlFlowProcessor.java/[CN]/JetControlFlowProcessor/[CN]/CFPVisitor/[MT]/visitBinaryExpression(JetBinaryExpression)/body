{
  IElementType operationType=expression.getOperationReference().getReferencedNameElementType();
  JetExpression right=expression.getRight();
  if (operationType == JetTokens.ANDAND) {
    generateInstructions(expression.getLeft(),true);
    Label resultLabel=builder.createUnboundLabel();
    builder.jumpOnFalse(resultLabel);
    if (right != null) {
      generateInstructions(right,true);
    }
    builder.bindLabel(resultLabel);
    if (!inCondition) {
      builder.read(expression);
    }
  }
 else   if (operationType == JetTokens.OROR) {
    generateInstructions(expression.getLeft(),true);
    Label resultLabel=builder.createUnboundLabel();
    builder.jumpOnTrue(resultLabel);
    if (right != null) {
      generateInstructions(right,true);
    }
    builder.bindLabel(resultLabel);
    if (!inCondition) {
      builder.read(expression);
    }
  }
 else   if (operationType == JetTokens.EQ) {
    JetExpression left=JetPsiUtil.deparenthesizeWithNoTypeResolution(expression.getLeft());
    if (right != null) {
      generateInstructions(right,false);
    }
    if (left instanceof JetSimpleNameExpression) {
      builder.write(expression,left);
    }
 else     if (left instanceof JetArrayAccessExpression) {
      JetArrayAccessExpression arrayAccessExpression=(JetArrayAccessExpression)left;
      visitAssignToArrayAccess(expression,arrayAccessExpression);
    }
 else     if (left instanceof JetQualifiedExpression) {
      JetQualifiedExpression qualifiedExpression=(JetQualifiedExpression)left;
      generateInstructions(qualifiedExpression.getReceiverExpression(),false);
      generateInstructions(expression.getOperationReference(),false);
      builder.write(expression,left);
    }
 else {
      builder.unsupported(expression);
    }
  }
 else   if (OperatorConventions.ASSIGNMENT_OPERATIONS.containsKey(operationType)) {
    JetExpression left=JetPsiUtil.deparenthesizeWithNoTypeResolution(expression.getLeft());
    if (left != null) {
      generateInstructions(left,false);
    }
    if (right != null) {
      generateInstructions(right,false);
    }
    if (left instanceof JetSimpleNameExpression || left instanceof JetArrayAccessExpression) {
      generateInstructions(expression.getOperationReference(),false);
      builder.write(expression,left);
    }
 else     if (left != null) {
      builder.unsupported(expression);
    }
  }
 else   if (operationType == JetTokens.ELVIS) {
    builder.read(expression);
    generateInstructions(expression.getLeft(),false);
    generateInstructions(expression.getOperationReference(),false);
    Label afterElvis=builder.createUnboundLabel();
    builder.jumpOnTrue(afterElvis);
    if (right != null) {
      generateInstructions(right,false);
    }
    builder.bindLabel(afterElvis);
  }
 else {
    generateInstructions(expression.getLeft(),false);
    if (right != null) {
      generateInstructions(right,false);
    }
    generateInstructions(expression.getOperationReference(),false);
    builder.read(expression);
  }
}
