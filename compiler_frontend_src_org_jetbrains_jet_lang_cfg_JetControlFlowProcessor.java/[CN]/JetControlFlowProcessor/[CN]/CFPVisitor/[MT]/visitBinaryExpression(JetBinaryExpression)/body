{
  JetSimpleNameExpression operationReference=expression.getOperationReference();
  IElementType operationType=operationReference.getReferencedNameElementType();
  JetExpression left=expression.getLeft();
  JetExpression right=expression.getRight();
  if (operationType == ANDAND || operationType == OROR) {
    generateBooleanOperation(expression);
  }
 else   if (operationType == EQ) {
    visitAssignment(left,getDeferredValue(right),expression);
  }
 else   if (OperatorConventions.ASSIGNMENT_OPERATIONS.containsKey(operationType)) {
    ResolvedCall<?> resolvedCall=getResolvedCall(expression,trace.getBindingContext());
    if (resolvedCall != null) {
      PseudoValue rhsValue=generateCall(resolvedCall).getOutputValue();
      Name assignMethodName=OperatorConventions.getNameForOperationSymbol((JetToken)expression.getOperationToken());
      if (!resolvedCall.getResultingDescriptor().getName().equals(assignMethodName)) {
        visitAssignment(left,getValueAsFunction(rhsValue),expression);
      }
    }
 else {
      generateBothArgumentsAndMark(expression);
    }
  }
 else   if (operationType == ELVIS) {
    generateInstructions(left);
    mark(expression);
    Label afterElvis=builder.createUnboundLabel("after elvis operator");
    builder.jumpOnTrue(afterElvis,expression,builder.getBoundValue(left));
    if (right != null) {
      generateInstructions(right);
    }
    builder.bindLabel(afterElvis);
    mergeValues(Arrays.asList(left,right),expression);
  }
 else {
    if (!generateCall(expression)) {
      generateBothArgumentsAndMark(expression);
    }
  }
}
