{
  final JetFinallySection finallyBlock=expression.getFinallyBlock();
  if (finallyBlock != null) {
    builder.enterTryFinally(new GenerationTrigger(){
      private boolean working=false;
      @Override public void generate(){
        if (working)         return;
        working=true;
        value(finallyBlock.getFinalExpression(),inCondition);
        working=false;
      }
    }
);
  }
  List<JetCatchClause> catchClauses=expression.getCatchClauses();
  final boolean hasCatches=!catchClauses.isEmpty();
  Label onException=null;
  if (hasCatches) {
    onException=builder.createUnboundLabel();
    builder.nondeterministicJump(onException);
  }
  value(expression.getTryBlock(),inCondition);
  if (hasCatches) {
    builder.allowDead();
    Label afterCatches=builder.createUnboundLabel();
    builder.jump(afterCatches);
    builder.bindLabel(onException);
    LinkedList<Label> catchLabels=Lists.newLinkedList();
    int catchClausesSize=catchClauses.size();
    for (int i=0; i < catchClausesSize - 1; i++) {
      catchLabels.add(builder.createUnboundLabel());
    }
    builder.nondeterministicJump(catchLabels);
    boolean isFirst=true;
    for (    JetCatchClause catchClause : catchClauses) {
      if (!isFirst) {
        builder.bindLabel(catchLabels.remove());
      }
 else {
        isFirst=false;
      }
      JetParameter catchParameter=catchClause.getCatchParameter();
      if (catchParameter != null) {
        builder.declare(catchParameter);
        builder.write(catchParameter,catchParameter);
      }
      JetExpression catchBody=catchClause.getCatchBody();
      if (catchBody != null) {
        value(catchBody,false);
      }
      builder.allowDead();
      builder.jump(afterCatches);
    }
    builder.bindLabel(afterCatches);
  }
 else {
    builder.allowDead();
  }
  if (finallyBlock != null) {
    builder.exitTryFinally();
    value(finallyBlock.getFinalExpression(),inCondition);
  }
  builder.stopAllowDead();
}
