{
  QualifiedName.Builder builder=QualifiedName.newBuilder();
  if (descriptor instanceof ClassDescriptor) {
    builder.setKind(QualifiedName.Kind.CLASS);
  }
  DeclarationDescriptor containingDeclaration=descriptor.getContainingDeclaration();
  int shortName;
  if (containingDeclaration instanceof PackageFragmentDescriptor) {
    shortName=getSimpleNameIndex(descriptor.getName());
    PackageFragmentDescriptor fragment=(PackageFragmentDescriptor)containingDeclaration;
    if (!fragment.getFqName().isRoot()) {
      builder.setParentQualifiedName(getFqNameIndex(fragment.getFqName()));
    }
  }
 else   if (containingDeclaration instanceof ClassDescriptor) {
    shortName=getSimpleNameIndex(descriptor.getName());
    ClassDescriptor outerClass=(ClassDescriptor)containingDeclaration;
    builder.setParentQualifiedName(getFqNameIndex(outerClass));
  }
 else {
    if (descriptor instanceof ClassDescriptor) {
      builder.setKind(QualifiedName.Kind.LOCAL);
      shortName=getStringIndex(extension.getLocalClassName((ClassDescriptor)descriptor));
    }
 else {
      throw new IllegalStateException("Package container should be a package: " + descriptor);
    }
  }
  builder.setShortName(shortName);
  return qualifiedNames.intern(new FqNameProto(builder));
}
