{
  StringBuilder out=new StringBuilder();
  Printer p=new Printer(out);
  p.println(FileUtil.loadFile(new File("injector-generator/copyright.txt")));
  p.println("package ",suiteClassPackage,";");
  p.println();
  for (  String importedClassName : JUNIT3_IMPORTS) {
    p.println("import ",importedClassName,";");
  }
  p.println();
  p.println("import java.io.File;");
  p.println("import org.jetbrains.jet.JetTestUtils;");
  p.println("import org.jetbrains.jet.test.InnerTestClasses;");
  p.println("import org.jetbrains.jet.test.TestMetadata;");
  p.println();
  p.println("import ",baseTestClassPackage,".",baseTestClassName,";");
  p.println();
  p.println("/** This class is generated by {@link ",generatorName,"}. DO NOT MODIFY MANUALLY */");
  generateSuppressAllWarnings(p);
  if (testClassModels.size() == 1) {
    TestClassModel theOnlyTestClass=testClassModels.iterator().next();
    generateTestClass(p,new DelegatingTestClassModel(theOnlyTestClass){
      @Override public String getName(){
        return suiteClassName;
      }
    }
,false);
  }
 else {
    generateTestClass(p,new TestClassModel(){
      @NotNull @Override public Collection<TestClassModel> getInnerTestClasses(){
        return testClassModels;
      }
      @NotNull @Override public Collection<TestMethodModel> getTestMethods(){
        return Collections.emptyList();
      }
      @Override public boolean isEmpty(){
        return false;
      }
      @Override public String getName(){
        return suiteClassName;
      }
      @Override public String getDataString(){
        return null;
      }
    }
,false);
  }
  String testSourceFilePath=baseDir + "/" + suiteClassPackage.replace(".","/")+ "/"+ suiteClassName+ ".java";
  File testSourceFile=new File(testSourceFilePath);
  FileUtil.writeToFile(testSourceFile,out.toString());
  System.out.println("Output written to file:\n" + testSourceFile.getAbsolutePath());
}
