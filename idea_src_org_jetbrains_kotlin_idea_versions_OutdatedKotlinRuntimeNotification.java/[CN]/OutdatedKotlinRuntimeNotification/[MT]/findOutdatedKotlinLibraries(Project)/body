{
  List<VersionedLibrary> outdatedLibraries=Lists.newArrayList();
  for (  Library library : KotlinRuntimeLibraryUtil.findKotlinLibraries(project)) {
    LibraryVersionProperties libraryVersionProperties=LibraryPresentationProviderUtil.getLibraryProperties(JavaRuntimePresentationProvider.getInstance(),library);
    if (libraryVersionProperties == null) {
      libraryVersionProperties=LibraryPresentationProviderUtil.getLibraryProperties(JSLibraryStdPresentationProvider.getInstance(),library);
    }
    if (libraryVersionProperties == null) {
      continue;
    }
    String libraryVersion=libraryVersionProperties.getVersionString();
    String runtimeVersion=KotlinRuntimeLibraryUtil.bundledRuntimeVersion();
    boolean isOutdated=isRuntimeOutdated(libraryVersion,runtimeVersion);
    if (isOutdated) {
      outdatedLibraries.add(new VersionedLibrary(library,libraryVersion));
    }
  }
  return outdatedLibraries;
}
