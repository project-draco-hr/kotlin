{
  List<String> expectedReferences=Arrays.asList(InTextDirectivesUtils.findListWithPrefix("// REF:",editor.getDocument().getText()));
  Collections.sort(expectedReferences);
  if (gotoData != null) {
    List<String> psiElements=Lists.transform(Arrays.asList(gotoData.targets),new Function<PsiElement,String>(){
      @Override public String apply(      @Nullable PsiElement element){
        Assert.assertNotNull(element);
        if (element instanceof JetLightClass) {
          JetLightClass jetLightClass=(JetLightClass)element;
          JetLightClassListCellRenderer renderer=new JetLightClassListCellRenderer();
          String elementText=renderer.getElementText(jetLightClass);
          String containerText=JetLightClassListCellRenderer.getContainerTextStatic(jetLightClass);
          return (containerText != null) ? containerText + "." + elementText : elementText;
        }
        Assert.assertTrue(element instanceof NavigationItem);
        ItemPresentation presentation=((NavigationItem)element).getPresentation();
        Assert.assertNotNull(presentation);
        String presentableText=presentation.getPresentableText();
        String locationString=presentation.getLocationString();
        return locationString != null ? (locationString + "." + presentableText) : presentableText;
      }
    }
);
    UsefulTestCase.assertOrderedEquals(Ordering.natural().sortedCopy(psiElements),expectedReferences);
  }
 else {
    UsefulTestCase.assertEmpty(expectedReferences);
  }
}
