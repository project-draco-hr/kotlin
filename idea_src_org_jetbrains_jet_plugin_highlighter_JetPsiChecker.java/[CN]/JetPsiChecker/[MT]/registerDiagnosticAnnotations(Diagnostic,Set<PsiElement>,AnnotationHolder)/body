{
  if (!diagnostic.isValid())   return;
  List<TextRange> textRanges=diagnostic.getTextRanges();
  if (diagnostic.getSeverity() == Severity.ERROR) {
    if (diagnostic.getFactory() instanceof UnresolvedReferenceDiagnosticFactory) {
      JetReferenceExpression referenceExpression=(JetReferenceExpression)diagnostic.getPsiElement();
      PsiReference reference=referenceExpression.getReference();
      if (reference instanceof MultiRangeReference) {
        MultiRangeReference mrr=(MultiRangeReference)reference;
        for (        TextRange range : mrr.getRanges()) {
          Annotation annotation=holder.createErrorAnnotation(range.shiftRight(referenceExpression.getTextOffset()),getDefaultMessage(diagnostic));
          annotation.setTooltip(getMessage(diagnostic));
          registerQuickFix(annotation,diagnostic);
          annotation.setHighlightType(ProblemHighlightType.LIKE_UNKNOWN_SYMBOL);
        }
      }
 else {
        for (        TextRange textRange : textRanges) {
          Annotation annotation=holder.createErrorAnnotation(textRange,getDefaultMessage(diagnostic));
          annotation.setTooltip(getMessage(diagnostic));
          registerQuickFix(annotation,diagnostic);
          annotation.setHighlightType(ProblemHighlightType.LIKE_UNKNOWN_SYMBOL);
        }
      }
      return;
    }
    if (diagnostic.getFactory() == Errors.ILLEGAL_ESCAPE_SEQUENCE) {
      for (      TextRange textRange : diagnostic.getTextRanges()) {
        Annotation annotation=holder.createErrorAnnotation(textRange,getDefaultMessage(diagnostic));
        annotation.setTooltip(getMessage(diagnostic));
        annotation.setTextAttributes(JetHighlightingColors.INVALID_STRING_ESCAPE);
      }
      return;
    }
    if (diagnostic.getFactory() instanceof RedeclarationDiagnosticFactory) {
      registerQuickFix(markRedeclaration(redeclarations,diagnostic,holder),diagnostic);
      return;
    }
    for (    TextRange textRange : textRanges) {
      Annotation errorAnnotation=holder.createErrorAnnotation(textRange,getDefaultMessage(diagnostic));
      errorAnnotation.setTooltip(getMessage(diagnostic));
      registerQuickFix(errorAnnotation,diagnostic);
      if (diagnostic.getFactory() == Errors.INVISIBLE_REFERENCE) {
        errorAnnotation.setHighlightType(ProblemHighlightType.LIKE_UNKNOWN_SYMBOL);
      }
    }
  }
 else   if (diagnostic.getSeverity() == Severity.WARNING) {
    for (    TextRange textRange : textRanges) {
      Annotation annotation=holder.createWarningAnnotation(textRange,getDefaultMessage(diagnostic));
      annotation.setTooltip(getMessage(diagnostic));
      registerQuickFix(annotation,diagnostic);
      if (diagnostic.getFactory() instanceof UnusedElementDiagnosticFactory) {
        annotation.setHighlightType(ProblemHighlightType.LIKE_UNUSED_SYMBOL);
      }
    }
  }
}
