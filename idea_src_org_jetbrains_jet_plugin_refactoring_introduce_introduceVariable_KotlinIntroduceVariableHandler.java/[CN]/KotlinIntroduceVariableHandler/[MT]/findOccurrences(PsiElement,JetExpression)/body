{
  if (expression instanceof JetParenthesizedExpression) {
    JetParenthesizedExpression parenthesizedExpression=(JetParenthesizedExpression)expression;
    JetExpression innerExpression=parenthesizedExpression.getExpression();
    if (innerExpression != null) {
      expression=innerExpression;
    }
  }
  final JetExpression actualExpression=expression;
  final ArrayList<JetExpression> result=new ArrayList<JetExpression>();
  final BindingContext bindingContext=AnalyzerFacadeWithCache.getContextForElement(expression);
  JetVisitorVoid visitor=new JetVisitorVoid(){
    @Override public void visitJetElement(    @NotNull JetElement element){
      element.acceptChildren(this);
      super.visitJetElement(element);
    }
    @Override public void visitExpression(    @NotNull JetExpression expression){
      if (PsiEquivalenceUtil.areElementsEquivalent(expression,actualExpression,null,new Comparator<PsiElement>(){
        private boolean compareCalleesAndReceivers(        @NotNull ResolvedCall<?> rc1,        @NotNull ResolvedCall<?> rc2){
          if (rc1.getResultingDescriptor() != rc2.getResultingDescriptor() || rc1.getExplicitReceiverKind() != rc2.getExplicitReceiverKind())           return false;
switch (rc1.getExplicitReceiverKind()) {
case NO_EXPLICIT_RECEIVER:
            return rc1.getReceiverArgument() == rc2.getReceiverArgument() && rc1.getThisObject() == rc2.getThisObject();
case RECEIVER_ARGUMENT:
          return rc1.getThisObject() == rc2.getThisObject();
case THIS_OBJECT:
        return rc1.getReceiverArgument() == rc2.getReceiverArgument();
default :
      return true;
  }
}
@Override public int compare(@NotNull PsiElement element1,@NotNull PsiElement element2){
  if (element1.getNode().getElementType() == JetTokens.IDENTIFIER && element2.getNode().getElementType() == JetTokens.IDENTIFIER) {
    if (element1.getParent() instanceof JetSimpleNameExpression && element2.getParent() instanceof JetSimpleNameExpression) {
      JetSimpleNameExpression expr1=(JetSimpleNameExpression)element1.getParent();
      JetSimpleNameExpression expr2=(JetSimpleNameExpression)element2.getParent();
      ResolvedCall<?> rc1=getResolvedCall(expr1,bindingContext);
      ResolvedCall<?> rc2=getResolvedCall(expr2,bindingContext);
      return (rc1 != null && rc2 != null) && compareCalleesAndReceivers(rc1,rc2) ? 0 : 1;
    }
  }
  if (!element1.textMatches(element2)) {
    return 1;
  }
 else {
    return 0;
  }
}
}
,null,false)) {
PsiElement parent=expression.getParent();
if (parent instanceof JetParenthesizedExpression) {
  result.add((JetParenthesizedExpression)parent);
}
 else {
  result.add(expression);
}
}
 else {
super.visitExpression(expression);
}
}
}
;
occurrenceContainer.accept(visitor);
return result;
}
