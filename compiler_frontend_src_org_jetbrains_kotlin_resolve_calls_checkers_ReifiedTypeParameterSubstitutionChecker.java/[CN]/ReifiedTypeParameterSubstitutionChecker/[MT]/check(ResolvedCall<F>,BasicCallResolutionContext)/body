{
  Map<TypeParameterDescriptor,KotlinType> typeArguments=resolvedCall.getTypeArguments();
  for (  Map.Entry<TypeParameterDescriptor,KotlinType> entry : typeArguments.entrySet()) {
    TypeParameterDescriptor parameter=entry.getKey();
    KotlinType argument=entry.getValue();
    ClassifierDescriptor argumentDeclarationDescriptor=argument.getConstructor().getDeclarationDescriptor();
    if (!parameter.isReified() && !isTypeParameterOfKotlinArray(parameter)) {
      continue;
    }
    if (argumentDeclarationDescriptor instanceof TypeParameterDescriptor && !((TypeParameterDescriptor)argumentDeclarationDescriptor).isReified()) {
      context.trace.report(Errors.TYPE_PARAMETER_AS_REIFIED.on(getElementToReport(context,parameter.getIndex()),parameter));
    }
 else     if (TypeUtilsKt.cannotBeReified(argument)) {
      context.trace.report(Errors.REIFIED_TYPE_FORBIDDEN_SUBSTITUTION.on(getElementToReport(context,parameter.getIndex()),argument));
    }
  }
}
