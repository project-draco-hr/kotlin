{
  Map<TypeParameterDescriptor,KotlinType> typeArguments=resolvedCall.getTypeArguments();
  for (  Map.Entry<TypeParameterDescriptor,KotlinType> entry : typeArguments.entrySet()) {
    TypeParameterDescriptor parameter=entry.getKey();
    KotlinType argument=entry.getValue();
    ClassifierDescriptor argumentDeclarationDescription=argument.getConstructor().getDeclarationDescriptor();
    if (parameter.isReified()) {
      if (argumentDeclarationDescription instanceof TypeParameterDescriptor && !((TypeParameterDescriptor)argumentDeclarationDescription).isReified()) {
        context.trace.report(Errors.TYPE_PARAMETER_AS_REIFIED.on(getCallElement(context),parameter));
      }
 else       if (TypeUtilsKt.cannotBeReified(argument)) {
        context.trace.report(Errors.REIFIED_TYPE_FORBIDDEN_SUBSTITUTION.on(getCallElement(context),argument));
      }
    }
  }
}
