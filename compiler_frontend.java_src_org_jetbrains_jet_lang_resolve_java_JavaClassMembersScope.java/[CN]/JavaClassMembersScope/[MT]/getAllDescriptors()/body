{
  if (allDescriptors == null) {
    allDescriptors=Sets.newHashSet();
    TypeSubstitutor substitutorForGenericSupertypes=getTypeSubstitutorForSupertypes();
    for (    HierarchicalMethodSignature signature : psiClass.getVisibleSignatures()) {
      PsiMethod method=signature.getMethod();
      if (method.hasModifierProperty(PsiModifier.STATIC) != staticMembers) {
        continue;
      }
      FunctionDescriptor functionDescriptor=semanticServices.getDescriptorResolver().resolveMethodToFunctionDescriptor(containingDeclaration,psiClass,substitutorForGenericSupertypes,new PsiMethodWrapper(method));
      if (functionDescriptor != null) {
        allDescriptors.add(functionDescriptor);
      }
    }
    allDescriptors.addAll(semanticServices.getDescriptorResolver().resolveFieldGroup(containingDeclaration,psiClass,staticMembers));
    allDescriptors.addAll(semanticServices.getDescriptorResolver().resolveInnerClasses(containingDeclaration,psiClass,staticMembers));
  }
  return allDescriptors;
}
