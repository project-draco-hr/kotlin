{
  Call call=CallMaker.makeCall(reference,receiver,null,reference,ThrowingList.<ValueArgument>instance());
  TemporaryTraceAndCache temporaryTrace=TemporaryTraceAndCache.create(context,"trace to resolve callable reference as function",reference);
  BasicCallResolutionContext callResolutionContext=BasicCallResolutionContext.create(context.replaceTraceAndCache(temporaryTrace).replaceExpectedType(NO_EXPECTED_TYPE),call,CheckValueArgumentsMode.DISABLED);
  OverloadResolutionResults<CallableDescriptor> results=components.expressionTypingServices.getCallResolver().resolveCallForMember(reference,callResolutionContext);
  if (!results.isNothing()) {
    temporaryTrace.commit();
    result[0]=true;
    ResolvedCall<CallableDescriptor> callable=OverloadResolutionResultsUtil.getResultingCall(results,context.contextDependency);
    if (callable != null) {
      return callable.getResultingDescriptor();
    }
  }
  return null;
}
