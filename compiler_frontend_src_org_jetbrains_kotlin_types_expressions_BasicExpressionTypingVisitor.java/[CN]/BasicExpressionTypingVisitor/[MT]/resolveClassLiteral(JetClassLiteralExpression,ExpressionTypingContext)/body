{
  JetTypeReference typeReference=expression.getTypeReference();
  if (typeReference == null) {
    c.trace.report(UNSUPPORTED.on(expression,"Class literals with empty left hand side are not yet supported"));
    return null;
  }
  TypeResolutionContext context=new TypeResolutionContext(c.scope,c.trace,false,true);
  PossiblyBareType possiblyBareType=components.expressionTypingServices.getTypeResolver().resolvePossiblyBareType(context,typeReference);
  TypeConstructor typeConstructor=null;
  if (possiblyBareType.isBare()) {
    if (!possiblyBareType.isNullable()) {
      typeConstructor=possiblyBareType.getBareTypeConstructor();
    }
  }
 else {
    JetType type=possiblyBareType.getActualType();
    if (!type.isMarkedNullable() && type.getArguments().isEmpty()) {
      typeConstructor=type.getConstructor();
    }
  }
  if (typeConstructor != null) {
    ClassifierDescriptor classifier=typeConstructor.getDeclarationDescriptor();
    if (classifier instanceof ClassDescriptor) {
      return (ClassDescriptor)classifier;
    }
  }
  context.trace.report(CLASS_LITERAL_LHS_NOT_A_CLASS.on(expression));
  return null;
}
