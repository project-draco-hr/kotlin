{
  JetExpression left=binaryExpression.getLeft();
  JetTypeInfo typeInfo;
  if (left != null) {
    typeInfo=facade.getTypeInfo(left,context.replaceContextDependency(INDEPENDENT).replaceExpectedType(NO_EXPECTED_TYPE));
  }
 else {
    typeInfo=TypeInfoFactoryPackage.createTypeInfo(context);
  }
  ExpressionTypingContext contextWithDataFlow=context.replaceDataFlowInfo(typeInfo.getDataFlowInfo());
  OverloadResolutionResults<FunctionDescriptor> resolutionResults;
  if (left != null) {
    ExpressionReceiver receiver=safeGetExpressionReceiver(facade,left,context);
    resolutionResults=components.callResolver.resolveBinaryCall(contextWithDataFlow.replaceScope(context.scope),receiver,binaryExpression,name);
  }
 else {
    resolutionResults=OverloadResolutionResultsImpl.nameNotFound();
  }
  if (resolutionResults.isSingleResult()) {
    typeInfo=typeInfo.replaceDataFlowInfo(resolutionResults.getResultingCall().getDataFlowInfoForArguments().getResultInfo());
  }
  return typeInfo.replaceType(OverloadResolutionResultsUtil.getResultingType(resolutionResults,context.contextDependency));
}
