{
  final JetType[] result=new JetType[1];
  final TemporaryBindingTrace temporaryTrace=TemporaryBindingTrace.create(context.trace,"trace to resolve object literal expression",expression);
  ObservableBindingTrace.RecordHandler<PsiElement,ClassDescriptor> handler=new ObservableBindingTrace.RecordHandler<PsiElement,ClassDescriptor>(){
    @Override public void handleRecord(    WritableSlice<PsiElement,ClassDescriptor> slice,    PsiElement declaration,    final ClassDescriptor descriptor){
      if (slice == CLASS && declaration == expression.getObjectDeclaration()) {
        JetType defaultType=DeferredType.createRecursionIntolerant(components.globalContext.getStorageManager(),context.trace,new Function0<JetType>(){
          @Override public JetType invoke(){
            return descriptor.getDefaultType();
          }
        }
);
        result[0]=defaultType;
        if (!context.trace.get(PROCESSED,expression)) {
          temporaryTrace.recordType(expression,defaultType);
          temporaryTrace.record(PROCESSED,expression);
        }
      }
    }
  }
;
  ObservableBindingTrace traceAdapter=new ObservableBindingTrace(temporaryTrace);
  traceAdapter.addHandler(CLASS,handler);
  components.localClassifierAnalyzer.processClassOrObject(components.globalContext,null,context.replaceBindingTrace(traceAdapter).replaceContextDependency(INDEPENDENT),context.scope.getContainingDeclaration(),expression.getObjectDeclaration(),components.additionalCheckerProvider,components.dynamicTypesSettings);
  temporaryTrace.commit();
  return TypeInfoFactoryPackage.createCheckedTypeInfo(result[0],context,expression);
}
