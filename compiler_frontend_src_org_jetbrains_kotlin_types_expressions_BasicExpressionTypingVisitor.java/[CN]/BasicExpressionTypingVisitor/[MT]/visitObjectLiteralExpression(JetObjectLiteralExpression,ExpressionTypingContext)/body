{
  final JetType[] result=new JetType[1];
  TemporaryBindingTrace temporaryTrace=TemporaryBindingTrace.create(context.trace,"trace to resolve object literal expression",expression);
  ObservableBindingTrace.RecordHandler<PsiElement,ClassDescriptor> handler=new ObservableBindingTrace.RecordHandler<PsiElement,ClassDescriptor>(){
    @Override public void handleRecord(    WritableSlice<PsiElement,ClassDescriptor> slice,    PsiElement declaration,    final ClassDescriptor descriptor){
      if (slice == CLASS && declaration == expression.getObjectDeclaration()) {
        JetType defaultType=DeferredType.createRecursionIntolerant(components.globalContext.getStorageManager(),context.trace,new Function0<JetType>(){
          @Override public JetType invoke(){
            return descriptor.getDefaultType();
          }
        }
);
        result[0]=defaultType;
      }
    }
  }
;
  ObservableBindingTrace traceAdapter=new ObservableBindingTrace(temporaryTrace);
  traceAdapter.addHandler(CLASS,handler);
  components.localClassifierAnalyzer.processClassOrObject(null,context.replaceBindingTrace(traceAdapter).replaceContextDependency(INDEPENDENT),context.scope.getOwnerDescriptor(),expression.getObjectDeclaration());
  temporaryTrace.commit();
  DataFlowInfo resultFlowInfo=context.dataFlowInfo;
  for (  JetDelegationSpecifier specifier : expression.getObjectDeclaration().getDelegationSpecifiers()) {
    if (specifier instanceof JetDelegatorToSuperCall) {
      JetDelegatorToSuperCall delegator=(JetDelegatorToSuperCall)specifier;
      JetTypeInfo delegatorTypeInfo=context.trace.get(EXPRESSION_TYPE_INFO,delegator.getCalleeExpression());
      if (delegatorTypeInfo != null) {
        resultFlowInfo=resultFlowInfo.and(delegatorTypeInfo.getDataFlowInfo());
      }
    }
  }
  JetTypeInfo resultTypeInfo=components.dataFlowAnalyzer.checkType(TypeInfoFactoryPackage.createTypeInfo(result[0],resultFlowInfo),expression,context);
  context.trace.record(EXPRESSION_TYPE_INFO,expression,resultTypeInfo);
  context.trace.record(PROCESSED,expression);
  return resultTypeInfo;
}
