{
  PsiElement parent=PsiTreeUtil.skipParentsOfType(expression,KtParenthesizedExpression.class);
  if (parent instanceof KtUnaryExpression) {
    KtUnaryExpression unaryExpression=(KtUnaryExpression)parent;
    return unaryExpression.getOperationToken() == KtTokens.EXCLEXCL;
  }
  if (parent instanceof KtBinaryExpressionWithTypeRHS) {
    KtBinaryExpressionWithTypeRHS binaryExpression=(KtBinaryExpressionWithTypeRHS)parent;
    KotlinType type=context.trace.get(TYPE,binaryExpression.getRight());
    return type != null && !type.isMarkedNullable() && binaryExpression.getOperationReference().getReferencedNameElementType() == KtTokens.AS_KEYWORD;
  }
  if (parent instanceof KtQualifiedExpression) {
    KtQualifiedExpression qualifiedExpression=(KtQualifiedExpression)parent;
    return qualifiedExpression.getOperationSign() == KtTokens.DOT && qualifiedExpression.getReceiverExpression() == KtPsiUtil.deparenthesize(expression);
  }
  return false;
}
