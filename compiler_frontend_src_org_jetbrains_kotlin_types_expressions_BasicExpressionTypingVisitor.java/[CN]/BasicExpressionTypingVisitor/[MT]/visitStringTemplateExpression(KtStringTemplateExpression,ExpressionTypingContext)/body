{
  final ExpressionTypingContext context=contextWithExpectedType.replaceExpectedType(NO_EXPECTED_TYPE).replaceContextDependency(INDEPENDENT);
  checkLiteralPrefixAndSuffix(expression,context);
class StringTemplateVisitor extends KtVisitorVoid {
    private KotlinTypeInfo typeInfo=TypeInfoFactoryKt.noTypeInfo(context);
    @Override public void visitStringTemplateEntryWithExpression(    @NotNull KtStringTemplateEntryWithExpression entry){
      KtExpression entryExpression=entry.getExpression();
      if (entryExpression != null) {
        typeInfo=facade.getTypeInfo(entryExpression,context.replaceDataFlowInfo(typeInfo.getDataFlowInfo()));
      }
    }
    @Override public void visitEscapeStringTemplateEntry(    @NotNull KtEscapeStringTemplateEntry entry){
      CompileTimeConstantChecker.CharacterWithDiagnostic value=CompileTimeConstantChecker.escapedStringToCharacter(entry.getText(),entry);
      Diagnostic diagnostic=value.getDiagnostic();
      if (diagnostic != null) {
        context.trace.report(diagnostic);
      }
    }
  }
  StringTemplateVisitor visitor=new StringTemplateVisitor();
  for (  KtStringTemplateEntry entry : expression.getEntries()) {
    entry.accept(visitor);
  }
  components.constantExpressionEvaluator.evaluateExpression(expression,context.trace,contextWithExpectedType.expectedType);
  return components.dataFlowAnalyzer.checkType(visitor.typeInfo.replaceType(components.builtIns.getStringType()),expression,contextWithExpectedType);
}
