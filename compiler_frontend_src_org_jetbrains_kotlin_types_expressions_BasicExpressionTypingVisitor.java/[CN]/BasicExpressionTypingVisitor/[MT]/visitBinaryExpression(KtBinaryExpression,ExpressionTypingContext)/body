{
  ExpressionTypingContext context=isBinaryExpressionDependentOnExpectedType(expression) ? contextWithExpectedType : contextWithExpectedType.replaceContextDependency(INDEPENDENT).replaceExpectedType(NO_EXPECTED_TYPE);
  KtSimpleNameExpression operationSign=expression.getOperationReference();
  KtExpression left=expression.getLeft();
  KtExpression right=expression.getRight();
  IElementType operationType=operationSign.getReferencedNameElementType();
  KotlinTypeInfo result;
  if (operationType == KtTokens.IDENTIFIER) {
    Name referencedName=operationSign.getReferencedNameAsName();
    result=getTypeInfoForBinaryCall(referencedName,context,expression);
  }
 else   if (OperatorConventions.BINARY_OPERATION_NAMES.containsKey(operationType)) {
    Name referencedName=OperatorConventions.BINARY_OPERATION_NAMES.get(operationType);
    result=getTypeInfoForBinaryCall(referencedName,context,expression);
  }
 else   if (operationType == KtTokens.ELVIS) {
    return visitElvisExpression(expression,context);
  }
 else   if (operationType == KtTokens.EQ) {
    result=visitAssignment(expression,context);
  }
 else   if (OperatorConventions.ASSIGNMENT_OPERATIONS.containsKey(operationType)) {
    result=visitAssignmentOperation(expression,context);
  }
 else   if (OperatorConventions.COMPARISON_OPERATIONS.contains(operationType)) {
    result=visitComparison(expression,context,operationSign);
  }
 else   if (OperatorConventions.EQUALS_OPERATIONS.contains(operationType)) {
    result=visitEquality(expression,context,operationSign,left,right);
  }
 else   if (OperatorConventions.IDENTITY_EQUALS_OPERATIONS.contains(operationType)) {
    context.trace.record(REFERENCE_TARGET,operationSign,components.builtIns.getIdentityEquals());
    ensureNonemptyIntersectionOfOperandTypes(expression,context);
    result=TypeInfoFactoryKt.createTypeInfo(components.builtIns.getBooleanType(),context);
  }
 else   if (OperatorConventions.IN_OPERATIONS.contains(operationType)) {
    ValueArgument leftArgument=CallMaker.makeValueArgument(left,left != null ? left : operationSign);
    result=checkInExpression(expression,operationSign,leftArgument,right,context);
  }
 else   if (OperatorConventions.BOOLEAN_OPERATIONS.containsKey(operationType)) {
    result=visitBooleanOperationExpression(operationType,left,right,context);
  }
 else {
    context.trace.report(UNSUPPORTED.on(operationSign,"Unknown operation"));
    result=TypeInfoFactoryKt.noTypeInfo(context);
  }
  CompileTimeConstant<?> value=components.constantExpressionEvaluator.evaluateExpression(expression,contextWithExpectedType.trace,contextWithExpectedType.expectedType);
  if (value != null) {
    return components.dataFlowAnalyzer.createCompileTimeConstantTypeInfo(value,expression,contextWithExpectedType);
  }
  return components.dataFlowAnalyzer.checkType(result,expression,contextWithExpectedType);
}
