{
  if (supertypes.size() > 1) {
    ClassifierDescriptor resultClassifierDescriptor=result.getConstructor().getDeclarationDescriptor();
    for (    KotlinType otherSupertype : supertypes) {
      ClassifierDescriptor otherSupertypeClassifierDescriptor=otherSupertype.getConstructor().getDeclarationDescriptor();
      if (otherSupertypeClassifierDescriptor == resultClassifierDescriptor) {
        continue;
      }
      if (KotlinTypeChecker.DEFAULT.isSubtypeOf(otherSupertype,result)) {
        trace.report(QUALIFIED_SUPERTYPE_EXTENDED_BY_OTHER_SUPERTYPE.on(superTypeQualifier,otherSupertype));
        break;
      }
    }
  }
}
