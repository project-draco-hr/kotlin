{
  KtTypeReference typeReference=expression.getTypeReference();
  if (typeReference == null)   return;
  KtTypeElement typeElement=typeReference.getTypeElement();
  if (!(typeElement instanceof KtUserType))   return;
  KtUserType userType=(KtUserType)typeElement;
  while (true) {
    if (userType.getTypeArgumentList() != null)     return;
    KtUserType qualifier=userType.getQualifier();
    if (qualifier == null)     break;
    userType=qualifier;
  }
  KtSimpleNameExpression simpleNameExpression=userType.getReferenceExpression();
  if (simpleNameExpression == null)   return;
  TemporaryTraceAndCache traceAndCache=TemporaryTraceAndCache.create(c,"Resolve expression on LHS of callable reference",simpleNameExpression);
  OverloadResolutionResults<VariableDescriptor> resolutionResult=components.callExpressionResolver.resolveSimpleName(c.replaceTraceAndCache(traceAndCache),simpleNameExpression);
  Collection<? extends ResolvedCall<VariableDescriptor>> resultingCalls=CollectionsKt.filter(resolutionResult.getResultingCalls(),new Function1<ResolvedCall<VariableDescriptor>,Boolean>(){
    @Override public Boolean invoke(    ResolvedCall<VariableDescriptor> call){
      return call.getStatus().possibleTransformToSuccess();
    }
  }
);
  if (resultingCalls.isEmpty())   return;
  if (resultingCalls.size() == 1 && resultingCalls.iterator().next().getResultingDescriptor() instanceof FakeCallableDescriptorForObject)   return;
  ResolvedCall<?> originalResolvedCall=CallUtilKt.getResolvedCall(expression.getCallableReference(),c.trace.getBindingContext());
  CallableDescriptor originalResult=originalResolvedCall == null ? null : originalResolvedCall.getResultingDescriptor();
  throw new AssertionError(String.format("Expressions on left-hand side of callable reference are not supported yet.\n" + "Resolution result: %s\n" + "Original result: %s",CollectionsKt.map(resultingCalls,new Function1<ResolvedCall<VariableDescriptor>,VariableDescriptor>(){
    @Override public VariableDescriptor invoke(    ResolvedCall<VariableDescriptor> call){
      return call.getResultingDescriptor();
    }
  }
),originalResult));
}
