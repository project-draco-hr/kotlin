{
  JetExpression left=leftArgument.getArgumentExpression();
  ExpressionTypingContext contextWithNoExpectedType=context.replaceExpectedType(NO_EXPECTED_TYPE);
  if (right == null) {
    if (left != null)     facade.getTypeInfo(left,contextWithNoExpectedType);
    return TypeInfoFactoryPackage.noTypeInfo(context);
  }
  JetTypeInfo rightTypeInfo=facade.getTypeInfo(right,contextWithNoExpectedType);
  DataFlowInfo dataFlowInfo=rightTypeInfo.getDataFlowInfo();
  ExpressionReceiver receiver=safeGetExpressionReceiver(facade,right,contextWithNoExpectedType);
  ExpressionTypingContext contextWithDataFlow=context.replaceDataFlowInfo(dataFlowInfo);
  OverloadResolutionResults<FunctionDescriptor> resolutionResult=components.callResolver.resolveCallWithGivenName(contextWithDataFlow,CallMaker.makeCall(callElement,receiver,null,operationSign,Collections.singletonList(leftArgument)),operationSign,OperatorConventions.CONTAINS);
  JetType containsType=OverloadResolutionResultsUtil.getResultingType(resolutionResult,context.contextDependency);
  ensureBooleanResult(operationSign,OperatorConventions.CONTAINS,containsType,context);
  if (left != null) {
    dataFlowInfo=facade.getTypeInfo(left,contextWithDataFlow).getDataFlowInfo().and(dataFlowInfo);
    rightTypeInfo=rightTypeInfo.replaceDataFlowInfo(dataFlowInfo);
  }
  if (resolutionResult.isSuccess()) {
    return rightTypeInfo.replaceType(components.builtIns.getBooleanType());
  }
 else {
    return rightTypeInfo.clearType();
  }
}
