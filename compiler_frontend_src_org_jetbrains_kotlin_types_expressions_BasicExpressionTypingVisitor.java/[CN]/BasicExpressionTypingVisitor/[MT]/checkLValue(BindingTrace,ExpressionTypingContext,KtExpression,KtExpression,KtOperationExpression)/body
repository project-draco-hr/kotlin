{
  KtExpression expression=KtPsiUtil.deparenthesize(expressionWithParenthesis);
  if (expression instanceof KtArrayAccessExpression) {
    KtArrayAccessExpression arrayAccessExpression=(KtArrayAccessExpression)expression;
    KtExpression arrayExpression=arrayAccessExpression.getArrayExpression();
    if (arrayExpression == null || rightHandSide == null)     return false;
    TemporaryBindingTrace ignoreReportsTrace=TemporaryBindingTrace.create(trace,"Trace for checking set function");
    ExpressionTypingContext findSetterContext=context.replaceBindingTrace(ignoreReportsTrace);
    KotlinTypeInfo info=resolveArrayAccessSetMethod(arrayAccessExpression,rightHandSide,findSetterContext,ignoreReportsTrace);
    IElementType operationType=operationExpression.getOperationReference().getReferencedNameElementType();
    if (KtTokens.AUGMENTED_ASSIGNMENTS.contains(operationType) || operationType == KtTokens.PLUSPLUS || operationType == KtTokens.MINUSMINUS) {
      ResolvedCall<?> resolvedCall=ignoreReportsTrace.get(INDEXED_LVALUE_SET,expression);
      if (resolvedCall != null) {
        CallCheckerContext callCheckerContext=new CallCheckerContext(trace,context.scope,components.languageFeatureSettings,context.dataFlowInfo,context.isAnnotationContext);
        for (        CallChecker checker : components.callCheckers) {
          checker.check(resolvedCall,expression,callCheckerContext);
        }
      }
    }
    return info.getType() != null;
  }
  VariableDescriptor variable=BindingContextUtils.extractVariableDescriptorIfAny(trace.getBindingContext(),expression,true);
  boolean result=true;
  KtExpression reportOn=expression != null ? expression : expressionWithParenthesis;
  if (reportOn instanceof KtQualifiedExpression) {
    KtExpression selector=((KtQualifiedExpression)reportOn).getSelectorExpression();
    if (selector != null)     reportOn=selector;
  }
  if (variable instanceof PropertyDescriptor) {
    PropertyDescriptor propertyDescriptor=(PropertyDescriptor)variable;
    PropertySetterDescriptor setter=propertyDescriptor.getSetter();
    if (propertyDescriptor.isSetterProjectedOut()) {
      trace.report(SETTER_PROJECTED_OUT.on(reportOn,propertyDescriptor));
      result=false;
    }
 else     if (setter != null) {
      CallCheckerContext callCheckerContext=new CallCheckerContext(trace,context.scope,components.languageFeatureSettings,context.dataFlowInfo,false);
      for (      CallChecker checker : components.callCheckers) {
        checker.checkPropertyCall(setter,reportOn,callCheckerContext);
      }
    }
  }
  if (variable == null) {
    trace.report(VARIABLE_EXPECTED.on(reportOn));
    result=false;
  }
 else   if (!variable.isVar()) {
    result=false;
  }
  return result;
}
