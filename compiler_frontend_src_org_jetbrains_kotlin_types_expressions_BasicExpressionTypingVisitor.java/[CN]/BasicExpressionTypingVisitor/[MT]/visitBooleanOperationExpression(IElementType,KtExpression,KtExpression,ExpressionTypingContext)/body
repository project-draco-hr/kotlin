{
  KotlinType booleanType=components.builtIns.getBooleanType();
  KotlinTypeInfo leftTypeInfo=getTypeInfoOrNullType(left,context.replaceExpectedType(booleanType),facade);
  DataFlowInfo dataFlowInfo=leftTypeInfo.getDataFlowInfo();
  LexicalWritableScope leftScope=newWritableScopeImpl(context,LexicalScopeKind.LEFT_BOOLEAN_EXPRESSION);
  boolean isAnd=operationType == KtTokens.ANDAND;
  DataFlowInfo flowInfoLeft=components.dataFlowAnalyzer.extractDataFlowInfoFromCondition(left,isAnd,context).and(dataFlowInfo);
  LexicalWritableScope rightScope=isAnd ? leftScope : newWritableScopeImpl(context,LexicalScopeKind.RIGHT_BOOLEAN_EXPRESSION);
  ExpressionTypingContext contextForRightExpr=context.replaceDataFlowInfo(flowInfoLeft).replaceScope(rightScope).replaceExpectedType(booleanType);
  if (right != null) {
    facade.getTypeInfo(right,contextForRightExpr);
  }
  return leftTypeInfo.replaceType(booleanType);
}
