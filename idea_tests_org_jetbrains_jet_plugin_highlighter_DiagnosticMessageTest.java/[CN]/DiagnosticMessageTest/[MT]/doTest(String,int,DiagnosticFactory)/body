{
  String fileName=name + ".kt";
  JetFile psiFile=createPsiFile(null,fileName,loadFile(fileName));
  AnalyzeExhaust analyzeExhaust=AnalyzerFacadeForJVM.analyzeOneFileWithJavaIntegration(psiFile,Collections.<AnalyzerScriptParameter>emptyList());
  BindingContext bindingContext=analyzeExhaust.getBindingContext();
  final Set<DiagnosticFactory> factoriesSet=Sets.newHashSet(diagnosticFactories);
  List<Diagnostic> diagnostics=ContainerUtil.filter(bindingContext.getDiagnostics().all(),new Condition<Diagnostic>(){
    @Override public boolean value(    Diagnostic diagnostic){
      return factoriesSet.contains(diagnostic.getFactory());
    }
  }
);
  assertEquals("Expected diagnostics number mismatch:",diagnosticNumber,diagnostics.size());
  int index=1;
  for (  Diagnostic diagnostic : diagnostics) {
    String readableDiagnosticText;
    String extension;
    if (IdeErrorMessages.MAP.get(diagnostic.getFactory()) != null) {
      readableDiagnosticText=IdeErrorMessages.RENDERER.render(diagnostic).replaceAll(">",">\n");
      extension="html";
    }
 else {
      readableDiagnosticText=DefaultErrorMessages.RENDERER.render(diagnostic);
      extension="txt";
    }
    String errorMessageFileName=name + index;
    String path=getTestDataPath() + "/" + errorMessageFileName+ "."+ extension;
    String actualText="<!-- " + errorMessageFileName + " -->\n"+ readableDiagnosticText;
    assertSameLinesWithFile(path,actualText);
    index++;
  }
}
