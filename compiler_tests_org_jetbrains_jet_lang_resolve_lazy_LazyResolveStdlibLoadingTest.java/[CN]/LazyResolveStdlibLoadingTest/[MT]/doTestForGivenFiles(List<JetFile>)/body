{
  Set<Name> namespaceShortNames=Sets.newLinkedHashSet();
  for (  JetFile file : files) {
    JetNamespaceHeader header=file.getNamespaceHeader();
    if (header != null) {
      List<JetSimpleNameExpression> names=header.getParentNamespaceNames();
      Name name=names.isEmpty() ? header.getNameAsName() : names.get(0).getReferencedNameAsName();
      namespaceShortNames.add(name);
    }
 else {
      throw new IllegalStateException("There's a file in stdlib that declares the default package: " + file.getName());
    }
  }
  ModuleDescriptor module=LazyResolveTestUtil.resolveEagerly(files,stdlibEnvironment);
  ModuleDescriptor lazyModule=LazyResolveTestUtil.resolveLazily(files,stdlibEnvironment);
  for (  Name name : namespaceShortNames) {
    NamespaceDescriptor a=module.getRootNamespace().getMemberScope().getNamespace(name);
    NamespaceDescriptor b=lazyModule.getRootNamespace().getMemberScope().getNamespace(name);
    NamespaceComparator.assertNamespacesEqual(a,b,true,Predicates.<NamespaceDescriptor>alwaysTrue());
  }
}
