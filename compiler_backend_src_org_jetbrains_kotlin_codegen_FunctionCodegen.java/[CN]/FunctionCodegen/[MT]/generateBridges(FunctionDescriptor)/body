{
  if (descriptor instanceof ConstructorDescriptor)   return;
  if (owner.getContextKind() == OwnerKind.TRAIT_IMPL)   return;
  if (isTrait(descriptor.getContainingDeclaration()))   return;
  if (isMethodOfAny(descriptor))   return;
  if (CallResolverUtil.isOrOverridesSynthesized(descriptor))   return;
  Set<Bridge<Method>> bridgesToGenerate=BridgesPackage.generateBridgesForFunctionDescriptor(descriptor,new Function1<FunctionDescriptor,Method>(){
    @Override public Method invoke(    FunctionDescriptor descriptor){
      return typeMapper.mapSignature(descriptor).getAsmMethod();
    }
  }
);
  if (!bridgesToGenerate.isEmpty()) {
    PsiElement origin=descriptor.getKind() == DECLARATION ? callableDescriptorToDeclaration(descriptor) : null;
    for (    Bridge<Method> bridge : bridgesToGenerate) {
      generateBridge(origin,descriptor,bridge.getFrom(),bridge.getTo());
    }
  }
}
