{
  OwnerKind contextKind=methodContext.getContextKind();
  if (isInterface(functionDescriptor.getContainingDeclaration()) && functionDescriptor.getVisibility() == Visibilities.PRIVATE && contextKind != OwnerKind.DEFAULT_IMPLS) {
    return;
  }
  JvmMethodGenericSignature jvmSignature=typeMapper.mapSignatureWithGeneric(functionDescriptor,contextKind);
  Method asmMethod=jvmSignature.getAsmMethod();
  int flags=getMethodAsmFlags(functionDescriptor,contextKind,state);
  if (origin.getOriginKind() == JvmDeclarationOriginKind.SAM_DELEGATION) {
    flags|=ACC_SYNTHETIC;
  }
  if (functionDescriptor.isExternal() && owner instanceof MultifileClassFacadeContext) {
    return;
  }
  MethodVisitor mv=v.newMethod(origin,flags,asmMethod.getName(),asmMethod.getDescriptor(),jvmSignature.getGenericsSignature(),getThrownExceptions(functionDescriptor,typeMapper));
  if (CodegenContextUtil.isImplClassOwner(owner)) {
    v.getSerializationBindings().put(METHOD_FOR_FUNCTION,functionDescriptor,asmMethod);
  }
  generateMethodAnnotations(functionDescriptor,asmMethod,mv);
  generateParameterAnnotations(functionDescriptor,mv,typeMapper.mapSignatureSkipGeneric(functionDescriptor));
  generateBridges(functionDescriptor);
  boolean staticInCompanionObject=AnnotationUtilKt.isPlatformStaticInCompanionObject(functionDescriptor);
  if (staticInCompanionObject) {
    ImplementationBodyCodegen parentBodyCodegen=(ImplementationBodyCodegen)memberCodegen.getParentCodegen();
    parentBodyCodegen.addAdditionalTask(new JvmStaticGenerator(functionDescriptor,origin,state,parentBodyCodegen));
  }
  if (!state.getClassBuilderMode().generateBodies || isAbstractMethod(functionDescriptor,contextKind,state)) {
    generateLocalVariableTable(mv,jvmSignature,functionDescriptor,getThisTypeForFunction(functionDescriptor,methodContext,typeMapper),new Label(),new Label(),contextKind);
    mv.visitEnd();
    return;
  }
  if (!functionDescriptor.isExternal()) {
    generateMethodBody(mv,functionDescriptor,methodContext,jvmSignature,strategy,memberCodegen);
  }
 else   if (staticInCompanionObject) {
    mv.visitCode();
    FunctionDescriptor staticFunctionDescriptor=JvmStaticGenerator.createStaticFunctionDescriptor(functionDescriptor);
    Method accessorMethod=typeMapper.mapAsmMethod(memberCodegen.getContext().accessibleDescriptor(staticFunctionDescriptor,null));
    Type owningType=typeMapper.mapClass((ClassifierDescriptor)staticFunctionDescriptor.getContainingDeclaration());
    generateDelegateToMethodBody(false,mv,accessorMethod,owningType.getInternalName());
  }
  endVisit(mv,null,origin.getElement());
}
