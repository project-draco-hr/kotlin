{
  OwnerKind contextKind=methodContext.getContextKind();
  JvmMethodSignature jvmSignature=typeMapper.mapSignature(functionDescriptor,contextKind);
  Method asmMethod=jvmSignature.getAsmMethod();
  int flags=getMethodAsmFlags(functionDescriptor,contextKind);
  boolean isNative=NativeDeclarationsPackage.hasNativeAnnotation(functionDescriptor);
  if (isNative && owner instanceof PackageContext && !(owner instanceof PackageFacadeContext)) {
    return;
  }
  MethodVisitor mv=v.newMethod(origin,flags,asmMethod.getName(),asmMethod.getDescriptor(),jvmSignature.getGenericsSignature(),getThrownExceptions(functionDescriptor,typeMapper));
  if (owner instanceof PackageFacadeContext) {
    Type ownerType=((PackageFacadeContext)owner).getDelegateToClassType();
    v.getSerializationBindings().put(IMPL_CLASS_NAME_FOR_CALLABLE,functionDescriptor,shortNameByAsmType(ownerType));
  }
 else {
    v.getSerializationBindings().put(METHOD_FOR_FUNCTION,functionDescriptor,asmMethod);
  }
  generateTargetedAnnotations(functionDescriptor,asmMethod,mv);
  generateParameterAnnotations(functionDescriptor,mv,typeMapper.mapSignature(functionDescriptor));
  generateBridges(functionDescriptor);
  boolean staticInCompanionObject=AnnotationsPackage.isPlatformStaticInCompanionObject(functionDescriptor);
  if (staticInCompanionObject) {
    ImplementationBodyCodegen parentBodyCodegen=(ImplementationBodyCodegen)memberCodegen.getParentCodegen();
    parentBodyCodegen.addAdditionalTask(new PlatformStaticGenerator(functionDescriptor,origin,state));
  }
  if (state.getClassBuilderMode() == ClassBuilderMode.LIGHT_CLASSES || isAbstractMethod(functionDescriptor,contextKind)) {
    generateLocalVariableTable(mv,jvmSignature,functionDescriptor,getThisTypeForFunction(functionDescriptor,methodContext,typeMapper),new Label(),new Label(),contextKind);
    mv.visitEnd();
    return;
  }
  if (!isNative) {
    generateMethodBody(mv,functionDescriptor,methodContext,jvmSignature,strategy,memberCodegen);
  }
 else   if (staticInCompanionObject) {
    mv.visitCode();
    FunctionDescriptor staticFunctionDescriptor=PlatformStaticGenerator.createStaticFunctionDescriptor(functionDescriptor);
    JvmMethodSignature jvmMethodSignature=typeMapper.mapSignature(memberCodegen.getContext().accessibleFunctionDescriptor(staticFunctionDescriptor));
    Type owningType=typeMapper.mapClass((ClassifierDescriptor)staticFunctionDescriptor.getContainingDeclaration());
    generateDelegateToMethodBody(false,mv,jvmMethodSignature.getAsmMethod(),owningType.getInternalName());
  }
  endVisit(mv,null,origin.getElement());
  methodContext.recordSyntheticAccessorIfNeeded(functionDescriptor,bindingContext);
}
