{
  OwnerKind contextKind=methodContext.getContextKind();
  if (isInterface(functionDescriptor.getContainingDeclaration()) && functionDescriptor.getVisibility() == Visibilities.PRIVATE && contextKind != OwnerKind.DEFAULT_IMPLS) {
    return;
  }
  JvmMethodSignature jvmSignature=typeMapper.mapSignature(functionDescriptor,contextKind);
  Method asmMethod=jvmSignature.getAsmMethod();
  int flags=getMethodAsmFlags(functionDescriptor,contextKind);
  boolean isNative=NativeKt.hasNativeAnnotation(functionDescriptor);
  if (isNative && owner instanceof DelegatingFacadeContext) {
    return;
  }
  MethodVisitor mv=v.newMethod(origin,flags,asmMethod.getName(),asmMethod.getDescriptor(),jvmSignature.getGenericsSignature(),getThrownExceptions(functionDescriptor,typeMapper));
  String implClassName=CodegenContextUtil.getImplementationClassShortName(owner);
  if (implClassName != null) {
    v.getSerializationBindings().put(IMPL_CLASS_NAME_FOR_CALLABLE,functionDescriptor,implClassName);
  }
  if (CodegenContextUtil.isImplClassOwner(owner)) {
    v.getSerializationBindings().put(METHOD_FOR_FUNCTION,functionDescriptor,asmMethod);
  }
  generateMethodAnnotations(functionDescriptor,asmMethod,mv);
  generateParameterAnnotations(functionDescriptor,mv,typeMapper.mapSignature(functionDescriptor));
  generateBridges(functionDescriptor);
  boolean staticInCompanionObject=AnnotationUtilKt.isPlatformStaticInCompanionObject(functionDescriptor);
  if (staticInCompanionObject) {
    ImplementationBodyCodegen parentBodyCodegen=(ImplementationBodyCodegen)memberCodegen.getParentCodegen();
    parentBodyCodegen.addAdditionalTask(new JvmStaticGenerator(functionDescriptor,origin,state));
  }
  if (state.getClassBuilderMode() == ClassBuilderMode.LIGHT_CLASSES || isAbstractMethod(functionDescriptor,contextKind)) {
    generateLocalVariableTable(mv,jvmSignature,functionDescriptor,getThisTypeForFunction(functionDescriptor,methodContext,typeMapper),new Label(),new Label(),contextKind);
    mv.visitEnd();
    return;
  }
  if (!isNative) {
    generateMethodBody(mv,functionDescriptor,methodContext,jvmSignature,strategy,memberCodegen);
  }
 else   if (staticInCompanionObject) {
    mv.visitCode();
    FunctionDescriptor staticFunctionDescriptor=JvmStaticGenerator.createStaticFunctionDescriptor(functionDescriptor);
    JvmMethodSignature jvmMethodSignature=typeMapper.mapSignature(memberCodegen.getContext().accessibleDescriptor(staticFunctionDescriptor,null));
    Type owningType=typeMapper.mapClass((ClassifierDescriptor)staticFunctionDescriptor.getContainingDeclaration());
    generateDelegateToMethodBody(false,mv,jvmMethodSignature.getAsmMethod(),owningType.getInternalName());
  }
  endVisit(mv,null,origin.getElement());
  methodContext.recordSyntheticAccessorIfNeeded(functionDescriptor,bindingContext);
}
