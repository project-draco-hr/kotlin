{
  Iterator<ValueParameterDescriptor> iterator=functionDescriptor.getValueParameters().iterator();
  List<JvmMethodParameterSignature> kotlinParameterTypes=jvmSignature.getValueParameters();
  for (int i=0; i < kotlinParameterTypes.size(); i++) {
    JvmMethodParameterSignature parameterSignature=kotlinParameterTypes.get(i);
    JvmMethodParameterKind kind=parameterSignature.getKind();
    if (kind.isSkippedInGenericSignature()) {
      markEnumOrInnerConstructorParameterAsSynthetic(mv,i);
      continue;
    }
    if (kind == JvmMethodParameterKind.VALUE) {
      ValueParameterDescriptor parameter=iterator.next();
      v.getSerializationBindings().put(INDEX_FOR_VALUE_PARAMETER,parameter,i);
      AnnotationCodegen.forParameter(i,mv,typeMapper).genAnnotations(parameter,parameterSignature.getAsmType());
    }
 else     if (kind == JvmMethodParameterKind.RECEIVER) {
      Annotated annotationHolder=(functionDescriptor instanceof PropertyAccessorDescriptor) ? ((PropertyAccessorDescriptor)functionDescriptor).getCorrespondingProperty() : functionDescriptor;
      AnnotationCodegen annotationCodegen=AnnotationCodegen.forParameter(i,mv,typeMapper);
      Annotated targetedAnnotations=new AnnotatedWithAdditionalAnnotations(null,annotationHolder);
      annotationCodegen.genAnnotations(targetedAnnotations,parameterSignature.getAsmType(),RECEIVER);
    }
  }
}
