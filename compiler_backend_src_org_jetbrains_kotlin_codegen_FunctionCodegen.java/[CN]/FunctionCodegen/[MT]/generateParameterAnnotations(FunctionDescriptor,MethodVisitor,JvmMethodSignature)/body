{
  Iterator<ValueParameterDescriptor> iterator=functionDescriptor.getValueParameters().iterator();
  List<JvmMethodParameterSignature> kotlinParameterTypes=jvmSignature.getValueParameters();
  for (int i=0; i < kotlinParameterTypes.size(); i++) {
    JvmMethodParameterSignature parameterSignature=kotlinParameterTypes.get(i);
    JvmMethodParameterKind kind=parameterSignature.getKind();
    if (kind.isSkippedInGenericSignature()) {
      markEnumOrInnerConstructorParameterAsSynthetic(mv,i);
      continue;
    }
    if (kind == JvmMethodParameterKind.VALUE) {
      ValueParameterDescriptor parameter=iterator.next();
      AnnotationCodegen annotationCodegen=AnnotationCodegen.forParameter(i,mv,typeMapper);
      if (functionDescriptor instanceof PropertySetterDescriptor) {
        PropertyDescriptor propertyDescriptor=((PropertySetterDescriptor)functionDescriptor).getCorrespondingProperty();
        Annotated targetedAnnotations=new AnnotatedWithOnlyTargetedAnnotations(propertyDescriptor);
        annotationCodegen.genAnnotations(targetedAnnotations,parameterSignature.getAsmType(),SETTER_PARAMETER);
      }
      if (functionDescriptor instanceof ConstructorDescriptor) {
        annotationCodegen.genAnnotations(parameter,parameterSignature.getAsmType(),CONSTRUCTOR_PARAMETER);
      }
 else {
        annotationCodegen.genAnnotations(parameter,parameterSignature.getAsmType());
      }
    }
 else     if (kind == JvmMethodParameterKind.RECEIVER) {
      ReceiverParameterDescriptor receiver=((functionDescriptor instanceof PropertyAccessorDescriptor) ? ((PropertyAccessorDescriptor)functionDescriptor).getCorrespondingProperty() : functionDescriptor).getExtensionReceiverParameter();
      if (receiver != null) {
        AnnotationCodegen annotationCodegen=AnnotationCodegen.forParameter(i,mv,typeMapper);
        Annotated targetedAnnotations=new AnnotatedWithOnlyTargetedAnnotations(receiver.getType());
        annotationCodegen.genAnnotations(targetedAnnotations,parameterSignature.getAsmType(),RECEIVER);
      }
    }
  }
}
