{
  GenerationState state=parentCodegen.state;
  JvmMethodSignature signature=state.getTypeMapper().mapSignature(functionDescriptor,methodContext.getContextKind());
  boolean isStatic=isStaticMethod(methodContext.getContextKind(),functionDescriptor);
  FrameMap frameMap=createFrameMap(state,functionDescriptor,signature,isStatic);
  ExpressionCodegen codegen=new ExpressionCodegen(mv,frameMap,signature.getReturnType(),methodContext,state,parentCodegen);
  CallGenerator generator=codegen.getOrCreateCallGenerator(functionDescriptor,function);
  loadExplicitArgumentsOnStack(OBJECT_TYPE,isStatic,signature,generator);
  List<JvmMethodParameterSignature> mappedParameters=signature.getValueParameters();
  int capturedArgumentsCount=0;
  while (capturedArgumentsCount < mappedParameters.size() && mappedParameters.get(capturedArgumentsCount).getKind() != JvmMethodParameterKind.VALUE) {
    capturedArgumentsCount++;
  }
  InstructionAdapter iv=new InstructionAdapter(mv);
  int maskIndex=0;
  List<ValueParameterDescriptor> valueParameters=functionDescriptor.getValueParameters();
  for (int index=0; index < valueParameters.size(); index++) {
    if (index % Integer.SIZE == 0) {
      maskIndex=frameMap.enterTemp(Type.INT_TYPE);
    }
    ValueParameterDescriptor parameterDescriptor=valueParameters.get(index);
    Type type=mappedParameters.get(capturedArgumentsCount + index).getAsmType();
    int parameterIndex=frameMap.getIndex(parameterDescriptor);
    if (parameterDescriptor.declaresDefaultValue()) {
      iv.load(maskIndex,Type.INT_TYPE);
      iv.iconst(1 << (index % Integer.SIZE));
      iv.and(Type.INT_TYPE);
      Label loadArg=new Label();
      iv.ifeq(loadArg);
      StackValue.local(parameterIndex,type).store(loadStrategy.genValue(parameterDescriptor,codegen),iv);
      iv.mark(loadArg);
    }
    generator.putValueIfNeeded(parameterDescriptor,type,StackValue.local(parameterIndex,type));
  }
  CallableMethod method;
  if (functionDescriptor instanceof ConstructorDescriptor) {
    method=state.getTypeMapper().mapToCallableMethod((ConstructorDescriptor)functionDescriptor);
  }
 else {
    method=state.getTypeMapper().mapToCallableMethod(functionDescriptor,false);
  }
  generator.genCallWithoutAssertions(method,codegen);
  iv.areturn(signature.getReturnType());
}
