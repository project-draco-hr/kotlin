{
  DeclarationDescriptor contextClass=owner.getContextDescriptor().getContainingDeclaration();
  if (kind != OwnerKind.DEFAULT_IMPLS && isInterface(contextClass)) {
    return;
  }
  if (!isDefaultNeeded(functionDescriptor)) {
    return;
  }
  int flags=getVisibilityAccessFlag(functionDescriptor) | getDeprecatedAccessFlag(functionDescriptor) | ACC_SYNTHETIC;
  if (!(functionDescriptor instanceof ConstructorDescriptor)) {
    flags|=ACC_STATIC | ACC_BRIDGE;
  }
  flags&=~ACC_PRIVATE;
  Method defaultMethod=typeMapper.mapDefaultMethod(functionDescriptor,kind);
  MethodVisitor mv=v.newMethod(JvmDeclarationOriginKt.Synthetic(function,functionDescriptor),flags,defaultMethod.getName(),defaultMethod.getDescriptor(),null,getThrownExceptions(functionDescriptor,typeMapper));
  AnnotationCodegen.forMethod(mv,typeMapper).genAnnotations(functionDescriptor,defaultMethod.getReturnType());
  if (state.getClassBuilderMode() == ClassBuilderMode.FULL) {
    if (this.owner instanceof DelegatingFacadeContext) {
      mv.visitCode();
      generateFacadeDelegateMethodBody(mv,defaultMethod,(DelegatingFacadeContext)this.owner);
      endVisit(mv,"default method delegation",getSourceFromDescriptor(functionDescriptor));
    }
 else {
      mv.visitCode();
      generateDefaultImplBody(owner,functionDescriptor,mv,loadStrategy,function,memberCodegen);
      endVisit(mv,"default method",getSourceFromDescriptor(functionDescriptor));
    }
  }
}
