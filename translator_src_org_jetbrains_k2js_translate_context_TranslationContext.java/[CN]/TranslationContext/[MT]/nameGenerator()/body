{
  Generator<JsName> nameGenerator=new Generator<JsName>();
  nameGenerator.addRule(new Rule<JsName>(){
    @Override @Nullable public JsName apply(    @NotNull DeclarationDescriptor data){
      if (aliaser().hasAliasForDeclaration(data)) {
        return aliaser().getAliasForDeclaration(data);
      }
      return null;
    }
  }
);
  nameGenerator.addRule(new Rule<JsName>(){
    @Override @Nullable public JsName apply(    @NotNull DeclarationDescriptor data){
      if (!standardClasses().isStandardObject(data)) {
        return null;
      }
      return standardClasses().getStandardObjectName(data);
    }
  }
);
  nameGenerator.addRule(new Rule<JsName>(){
    @Override @Nullable public JsName apply(    @NotNull DeclarationDescriptor descriptor){
      if (dynamicContext.isDeclared(descriptor)) {
        return dynamicContext.getLocalName(descriptor);
      }
      return null;
    }
  }
);
  nameGenerator.addRule(new Rule<JsName>(){
    @Override @Nullable public JsName apply(    @NotNull DeclarationDescriptor descriptor){
      if (staticContext.isDeclared(descriptor)) {
        return staticContext.getGlobalName(descriptor);
      }
      return null;
    }
  }
);
  return nameGenerator;
}
