{
  statements=MoveDeclarationsOutHelper.move(container,statements,true);
  if (statements.length == 0) {
    KotlinSurrounderUtils.showErrorHint(project,editor,KotlinSurrounderUtils.SURROUND_WITH_ERROR);
    return null;
  }
  JetTryExpression tryExpression=(JetTryExpression)JetPsiFactoryKt.JetPsiFactory(project).createExpression(getCodeTemplate());
  tryExpression=(JetTryExpression)container.addAfter(tryExpression,statements[statements.length - 1]);
  JetBlockExpression tryBlock=tryExpression.getTryBlock();
  KotlinSurrounderUtils.addStatementsInBlock(tryBlock,statements);
  container.deleteChildRange(statements[0],statements[statements.length - 1]);
  tryExpression=CodeInsightUtilBase.forcePsiPostprocessAndRestoreElement(tryExpression);
  return getTextRangeForCaret(tryExpression);
}
