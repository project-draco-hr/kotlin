{
  Project project=PlatformDataKeys.PROJECT.getData(dataContext);
  if (project == null)   return null;
  Editor editor=PlatformDataKeys.EDITOR.getData(dataContext);
  if (editor != null) {
    PsiFile file=PsiDocumentManager.getInstance(project).getPsiFile(editor.getDocument());
    if (file == null)     return null;
    if (!ProjectRootsUtil.isInProjectOrLibSource(file))     return null;
    PsiElement target=TargetElementUtilBase.findTargetElement(editor,TargetElementUtilBase.getInstance().getAllAccepted());
    if (target instanceof PsiClass) {
      return target;
    }
    if (target instanceof KtClassOrObject) {
      return JetSourceNavigationHelper.getOriginalPsiClassOrCreateLightClass((KtClassOrObject)target);
    }
 else     if (target instanceof KtNamedFunction) {
      KtNamedFunction function=(KtNamedFunction)target;
      String functionName=function.getName();
      FunctionDescriptor functionDescriptor=ResolutionUtils.analyze(function).get(BindingContext.FUNCTION,target);
      if (functionDescriptor != null) {
        KotlinType type=functionDescriptor.getReturnType();
        if (type != null) {
          String returnTypeText=DescriptorRenderer.FQ_NAMES_IN_TYPES.renderType(type);
          if (returnTypeText.equals(functionName)) {
            Collection<KtClassOrObject> classOrObjects=JetClassShortNameIndex.getInstance().get(functionName,project,GlobalSearchScope.allScope(project));
            if (classOrObjects.size() == 1) {
              KtClassOrObject classOrObject=classOrObjects.iterator().next();
              return JetSourceNavigationHelper.getOriginalPsiClassOrCreateLightClass(classOrObject);
            }
          }
        }
      }
    }
    int offset=editor.getCaretModel().getOffset();
    PsiElement element=file.findElementAt(offset);
    if (element == null)     return null;
    KtClassOrObject classOrObject=PsiTreeUtil.getParentOfType(element,KtClassOrObject.class);
    if (classOrObject != null) {
      return JetSourceNavigationHelper.getOriginalPsiClassOrCreateLightClass(classOrObject);
    }
  }
 else {
    PsiElement element=LangDataKeys.PSI_ELEMENT.getData(dataContext);
    if (element instanceof KtClassOrObject) {
      return JetSourceNavigationHelper.getOriginalPsiClassOrCreateLightClass((KtClassOrObject)element);
    }
  }
  return null;
}
