{
  if (type.isNullable()) {
    return true;
  }
  if (!type.getConstructor().isSealed()) {
    return true;
  }
  List<TypeParameterDescriptor> parameters=type.getConstructor().getParameters();
  List<TypeProjection> arguments=type.getArguments();
  for (int i=0, parametersSize=parameters.size(); i < parametersSize; i++) {
    TypeParameterDescriptor parameterDescriptor=parameters.get(i);
    TypeProjection typeProjection=arguments.get(i);
    Variance projectionKind=typeProjection.getProjectionKind();
    Type argument=typeProjection.getType();
switch (parameterDescriptor.getVariance()) {
case INVARIANT:
switch (projectionKind) {
case INVARIANT:
        if (lowerThanBound(argument,parameterDescriptor) || canHaveSubtypes(argument)) {
          return true;
        }
      break;
case IN_VARIANCE:
    if (lowerThanBound(argument,parameterDescriptor)) {
      return true;
    }
  break;
case OUT_VARIANCE:
if (canHaveSubtypes(argument)) {
  return true;
}
break;
}
break;
case IN_VARIANCE:
if (projectionKind != Variance.OUT_VARIANCE) {
if (lowerThanBound(argument,parameterDescriptor)) {
return true;
}
}
 else {
if (canHaveSubtypes(argument)) {
return true;
}
}
break;
case OUT_VARIANCE:
if (projectionKind != Variance.IN_VARIANCE) {
if (canHaveSubtypes(argument)) {
return true;
}
}
 else {
if (lowerThanBound(argument,parameterDescriptor)) {
return true;
}
}
break;
}
}
return false;
}
