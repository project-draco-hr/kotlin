{
  Collection<Name> result=new HashSet<Name>();
  for (  JetType supertype : getTypeConstructor().getSupertypes()) {
    for (    DeclarationDescriptor descriptor : supertype.getMemberScope().getAllDescriptors()) {
      if (descriptor instanceof SimpleFunctionDescriptor || descriptor instanceof PropertyDescriptor) {
        result.add(descriptor.getName());
      }
    }
  }
  final NameResolver nameResolver=context.getNameResolver();
  return KotlinPackage.mapTo(classProto.getMemberList(),result,new Function1<ProtoBuf.Callable,Name>(){
    @Override public Name invoke(    @NotNull ProtoBuf.Callable callable){
      return nameResolver.getName(callable.getName());
    }
  }
);
}
