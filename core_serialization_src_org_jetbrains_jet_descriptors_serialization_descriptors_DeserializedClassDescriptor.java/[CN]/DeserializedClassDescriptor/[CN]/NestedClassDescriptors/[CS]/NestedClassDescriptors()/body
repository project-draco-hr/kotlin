{
  this.nestedClassNames=nestedClassNames();
  this.enumEntryNames=enumEntryNames();
  final NotNullLazyValue<Collection<Name>> enumMemberNames=storageManager.createLazyValue(new Function0<Collection<Name>>(){
    @Override public Collection<Name> invoke(){
      return computeEnumMemberNames();
    }
  }
);
  this.findClass=storageManager.createMemoizedFunctionWithNullableValues(new Function1<Name,ClassDescriptor>(){
    @Override public ClassDescriptor invoke(    Name name){
      if (enumEntryNames.contains(name)) {
        return EnumEntrySyntheticClassDescriptor.create(storageManager,DeserializedClassDescriptor.this,name,enumMemberNames);
      }
      if (nestedClassNames.contains(name)) {
        return descriptorFinder.findClass(classId.createNestedClassId(name));
      }
      return null;
    }
  }
);
}
