{
  if (!myDoNotChangeVar) {
    myVarCheckbox=new NonFocusableCheckBox("Declare with var");
    myVarCheckbox.setSelected(isVar);
    myVarCheckbox.setMnemonic('v');
    myVarCheckbox.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        new WriteCommandAction(myProject,getCommandName(),getCommandName()){
          @Override protected void run(          Result result) throws Throwable {
            PsiDocumentManager.getInstance(myProject).commitDocument(myEditor.getDocument());
            KotlinChangePropertyActions.declareValueOrVariable(myVarCheckbox.isSelected(),myProperty);
          }
        }
.execute();
      }
    }
);
  }
  if (myExprType != null && !noTypeInference) {
    myExprTypeCheckbox=new NonFocusableCheckBox("Specify type explicitly");
    myExprTypeCheckbox.setSelected(false);
    myExprTypeCheckbox.setMnemonic('t');
    myExprTypeCheckbox.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        final Ref<Boolean> greedyToRight=new Ref<Boolean>();
        new WriteCommandAction(myProject,getCommandName(),getCommandName()){
          @Override protected void run(          Result result) throws Throwable {
            PsiDocumentManager.getInstance(myProject).commitDocument(myEditor.getDocument());
            if (myExprTypeCheckbox.isSelected()) {
              ASTNode identifier=myProperty.getNode().findChildByType(JetTokens.IDENTIFIER);
              if (identifier != null) {
                TextRange range=identifier.getTextRange();
                RangeHighlighter[] highlighters=myEditor.getMarkupModel().getAllHighlighters();
                for (                RangeHighlighter highlighter : highlighters) {
                  if (highlighter.getStartOffset() == range.getStartOffset()) {
                    if (highlighter.getEndOffset() == range.getEndOffset()) {
                      greedyToRight.set(highlighter.isGreedyToRight());
                      highlighter.setGreedyToRight(false);
                    }
                  }
                }
              }
              SpecifyTypeExplicitlyAction.addTypeAnnotation(myProject,myEditor,myProperty,myExprType);
              PsiDocumentManager.getInstance(myProject).commitDocument(myEditor.getDocument());
            }
 else {
              SpecifyTypeExplicitlyAction.removeTypeAnnotation(myProperty);
            }
          }
        }
.execute();
        ApplicationManager.getApplication().runReadAction(new Runnable(){
          @Override public void run(){
            if (myExprTypeCheckbox.isSelected()) {
              ASTNode identifier=myProperty.getNode().findChildByType(JetTokens.IDENTIFIER);
              if (identifier != null) {
                TextRange range=identifier.getTextRange();
                RangeHighlighter[] highlighters=myEditor.getMarkupModel().getAllHighlighters();
                for (                RangeHighlighter highlighter : highlighters) {
                  if (highlighter.getStartOffset() == range.getStartOffset()) {
                    if (highlighter.getEndOffset() == range.getEndOffset()) {
                      highlighter.setGreedyToRight(greedyToRight.get());
                    }
                  }
                }
              }
            }
          }
        }
);
      }
    }
);
  }
  JPanel panel=new JPanel(new GridBagLayout());
  panel.setBorder(null);
  int count=1;
  if (myVarCheckbox != null) {
    panel.add(myVarCheckbox,new GridBagConstraints(0,count,1,1,1,0,GridBagConstraints.NORTHWEST,GridBagConstraints.HORIZONTAL,new Insets(5,5,5,5),0,0));
    ++count;
  }
  if (myExprTypeCheckbox != null) {
    panel.add(myExprTypeCheckbox,new GridBagConstraints(0,count,1,1,1,0,GridBagConstraints.NORTHWEST,GridBagConstraints.HORIZONTAL,new Insets(5,5,5,5),0,0));
    ++count;
  }
  panel.add(Box.createVerticalBox(),new GridBagConstraints(0,count,1,1,1,1,GridBagConstraints.NORTHWEST,GridBagConstraints.BOTH,new Insets(0,0,0,0),0,0));
  return panel;
}
