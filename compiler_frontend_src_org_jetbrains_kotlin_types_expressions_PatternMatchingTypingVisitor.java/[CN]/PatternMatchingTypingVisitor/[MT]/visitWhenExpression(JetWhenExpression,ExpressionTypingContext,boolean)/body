{
  DataFlowUtils.recordExpectedType(contextWithExpectedType.trace,expression,contextWithExpectedType.expectedType);
  ExpressionTypingContext context=contextWithExpectedType.replaceExpectedType(NO_EXPECTED_TYPE).replaceContextDependency(INDEPENDENT);
  JetExpression subjectExpression=expression.getSubjectExpression();
  JetType subjectType;
  boolean loopBreakContinuePossible=false;
  if (subjectExpression == null) {
    subjectType=ErrorUtils.createErrorType("Unknown type");
  }
 else {
    JetTypeInfo typeInfo=facade.safeGetTypeInfo(subjectExpression,context);
    loopBreakContinuePossible=typeInfo.getJumpOutPossible();
    subjectType=typeInfo.getType();
    context=context.replaceDataFlowInfo(typeInfo.getDataFlowInfo());
  }
  DataFlowValue subjectDataFlowValue=subjectExpression != null ? DataFlowValueFactory.createDataFlowValue(subjectExpression,subjectType,context) : DataFlowValue.NULL;
  Set<JetType> expressionTypes=Sets.newHashSet();
  DataFlowInfo commonDataFlowInfo=null;
  DataFlowInfo elseDataFlowInfo=context.dataFlowInfo;
  for (  JetWhenEntry whenEntry : expression.getEntries()) {
    DataFlowInfos infosForCondition=getDataFlowInfosForEntryCondition(whenEntry,context.replaceDataFlowInfo(elseDataFlowInfo),subjectExpression,subjectType,subjectDataFlowValue);
    elseDataFlowInfo=elseDataFlowInfo.and(infosForCondition.elseInfo);
    JetExpression bodyExpression=whenEntry.getExpression();
    if (bodyExpression != null) {
      WritableScope scopeToExtend=newWritableScopeImpl(context,"Scope extended in when entry");
      ExpressionTypingContext newContext=contextWithExpectedType.replaceScope(scopeToExtend).replaceDataFlowInfo(infosForCondition.thenInfo).replaceContextDependency(INDEPENDENT);
      CoercionStrategy coercionStrategy=isStatement ? CoercionStrategy.COERCION_TO_UNIT : CoercionStrategy.NO_COERCION;
      JetTypeInfo typeInfo=components.expressionTypingServices.getBlockReturnedTypeWithWritableScope(scopeToExtend,Collections.singletonList(bodyExpression),coercionStrategy,newContext);
      loopBreakContinuePossible|=typeInfo.getJumpOutPossible();
      JetType type=typeInfo.getType();
      if (type != null) {
        expressionTypes.add(type);
      }
      if (commonDataFlowInfo == null) {
        commonDataFlowInfo=typeInfo.getDataFlowInfo();
      }
 else {
        commonDataFlowInfo=commonDataFlowInfo.or(typeInfo.getDataFlowInfo());
      }
    }
  }
  if (commonDataFlowInfo == null) {
    commonDataFlowInfo=context.dataFlowInfo;
  }
  if (expression.getElseExpression() == null && WhenChecker.isExhaustiveWhenOnPlatformNullableEnum(expression,context.trace)) {
    context.trace.report(WHEN_ENUM_CAN_BE_NULL_IN_JAVA.on(expression.getSubjectExpression()));
  }
  return TypeInfoFactoryPackage.createTypeInfo(expressionTypes.isEmpty() ? null : DataFlowUtils.checkImplicitCast(CommonSupertypes.commonSupertype(expressionTypes),expression,contextWithExpectedType,isStatement),commonDataFlowInfo,loopBreakContinuePossible,contextWithExpectedType.dataFlowInfo);
}
