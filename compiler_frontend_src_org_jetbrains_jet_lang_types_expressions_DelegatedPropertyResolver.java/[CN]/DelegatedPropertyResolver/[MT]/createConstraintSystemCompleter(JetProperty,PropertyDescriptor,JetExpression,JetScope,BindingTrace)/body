{
  final JetType expectedType=property.getTypeRef() != null ? propertyDescriptor.getType() : NO_EXPECTED_TYPE;
  return new ConstraintSystemCompleter(){
    @Override public void completeConstraintSystem(    @NotNull ConstraintSystem constraintSystem,    @NotNull ResolvedCall<?> resolvedCall){
      JetType returnType=resolvedCall.getCandidateDescriptor().getReturnType();
      if (returnType == null)       return;
      TemporaryBindingTrace traceToResolveConventionMethods=TemporaryBindingTrace.create(trace,"Trace to resolve delegated property convention methods");
      OverloadResolutionResults<FunctionDescriptor> getMethodResults=getDelegatedPropertyConventionMethod(propertyDescriptor,delegateExpression,returnType,traceToResolveConventionMethods,accessorScope,true);
      if (conventionMethodFound(getMethodResults)) {
        FunctionDescriptor descriptor=getMethodResults.getResultingDescriptor();
        JetType returnTypeOfGetMethod=descriptor.getReturnType();
        if (returnTypeOfGetMethod != null) {
          constraintSystem.addSupertypeConstraint(expectedType,returnTypeOfGetMethod,ConstraintPosition.FROM_COMPLETER);
        }
        addConstraintForThisValue(constraintSystem,descriptor);
      }
      if (!propertyDescriptor.isVar())       return;
      if (propertyDescriptor.getReturnType() instanceof DeferredType)       return;
      OverloadResolutionResults<FunctionDescriptor> setMethodResults=getDelegatedPropertyConventionMethod(propertyDescriptor,delegateExpression,returnType,traceToResolveConventionMethods,accessorScope,false);
      if (conventionMethodFound(setMethodResults)) {
        FunctionDescriptor descriptor=setMethodResults.getResultingDescriptor();
        List<ValueParameterDescriptor> valueParameters=descriptor.getValueParameters();
        if (valueParameters.size() == 3) {
          ValueParameterDescriptor valueParameterForThis=valueParameters.get(2);
          if (!noExpectedType(expectedType)) {
            constraintSystem.addSubtypeConstraint(expectedType,valueParameterForThis.getType(),ConstraintPosition.FROM_COMPLETER);
          }
          addConstraintForThisValue(constraintSystem,descriptor);
        }
      }
    }
    private boolean conventionMethodFound(    @NotNull OverloadResolutionResults<FunctionDescriptor> results){
      return results.isSuccess() || (results.isSingleResult() && results.getResultCode() == OverloadResolutionResults.Code.SINGLE_CANDIDATE_ARGUMENT_MISMATCH);
    }
    private void addConstraintForThisValue(    ConstraintSystem constraintSystem,    FunctionDescriptor resultingDescriptor){
      ReceiverParameterDescriptor receiverParameter=propertyDescriptor.getReceiverParameter();
      ReceiverParameterDescriptor thisObject=propertyDescriptor.getExpectedThisObject();
      JetType typeOfThis=receiverParameter != null ? receiverParameter.getType() : thisObject != null ? thisObject.getType() : KotlinBuiltIns.getInstance().getNullableNothingType();
      List<ValueParameterDescriptor> valueParameters=resultingDescriptor.getValueParameters();
      if (valueParameters.isEmpty())       return;
      ValueParameterDescriptor valueParameterForThis=valueParameters.get(0);
      constraintSystem.addSubtypeConstraint(typeOfThis,valueParameterForThis.getType(),ConstraintPosition.FROM_COMPLETER);
    }
  }
;
}
