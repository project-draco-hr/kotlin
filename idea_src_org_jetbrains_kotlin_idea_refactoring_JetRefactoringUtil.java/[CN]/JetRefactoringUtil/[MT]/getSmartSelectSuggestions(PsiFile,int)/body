{
  if (offset < 0) {
    return new ArrayList<JetExpression>();
  }
  PsiElement element=file.findElementAt(offset);
  if (element == null) {
    return new ArrayList<JetExpression>();
  }
  if (element instanceof PsiWhiteSpace) {
    return getSmartSelectSuggestions(file,offset - 1);
  }
  List<JetExpression> expressions=new ArrayList<JetExpression>();
  while (element != null && !(element instanceof JetBlockExpression && !(element.getParent() instanceof JetFunctionLiteral)) && !(element instanceof JetNamedFunction) && !(element instanceof JetClassBody)) {
    if (element instanceof JetExpression && !(element instanceof JetStatementExpression)) {
      boolean addExpression=true;
      if (JetPsiUtil.isLabelIdentifierExpression(element)) {
        addExpression=false;
      }
 else       if (element.getParent() instanceof JetQualifiedExpression) {
        JetQualifiedExpression qualifiedExpression=(JetQualifiedExpression)element.getParent();
        if (qualifiedExpression.getReceiverExpression() != element) {
          addExpression=false;
        }
      }
 else       if (element.getParent() instanceof JetCallElement || element.getParent() instanceof JetThisExpression || PsiTreeUtil.getParentOfType(element,JetSuperExpression.class) != null) {
        addExpression=false;
      }
 else       if (element.getParent() instanceof JetOperationExpression) {
        JetOperationExpression operationExpression=(JetOperationExpression)element.getParent();
        if (operationExpression.getOperationReference() == element) {
          addExpression=false;
        }
      }
      if (addExpression) {
        JetExpression expression=(JetExpression)element;
        BindingContext bindingContext=ResolvePackage.analyze(expression,BodyResolveMode.FULL);
        JetType expressionType=bindingContext.getType(expression);
        if (expressionType == null || !KotlinBuiltIns.isUnit(expressionType)) {
          expressions.add(expression);
        }
      }
    }
 else     if (element instanceof JetTypeElement) {
      expressions.clear();
    }
    element=element.getParent();
  }
  return expressions;
}
