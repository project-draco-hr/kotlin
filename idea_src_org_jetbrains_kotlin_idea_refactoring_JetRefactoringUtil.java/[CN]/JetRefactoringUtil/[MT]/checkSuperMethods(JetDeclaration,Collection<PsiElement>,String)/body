{
  BindingContext bindingContext=ResolutionUtils.analyze(declaration,BodyResolveMode.FULL);
  CallableDescriptor declarationDescriptor=(CallableDescriptor)bindingContext.get(BindingContext.DECLARATION_TO_DESCRIPTOR,declaration);
  if (declarationDescriptor == null || declarationDescriptor instanceof LocalVariableDescriptor) {
    return Collections.singletonList(declaration);
  }
  Project project=declaration.getProject();
  Map<PsiElement,CallableDescriptor> overriddenElementsToDescriptor=new HashMap<PsiElement,CallableDescriptor>();
  for (  CallableDescriptor overriddenDescriptor : DescriptorUtils.getAllOverriddenDescriptors(declarationDescriptor)) {
    PsiElement overriddenDeclaration=DescriptorToSourceUtilsIde.INSTANCE$.getAnyDeclaration(project,overriddenDescriptor);
    if (PsiTreeUtil.instanceOf(overriddenDeclaration,JetNamedFunction.class,JetProperty.class,PsiMethod.class)) {
      overriddenElementsToDescriptor.put(overriddenDeclaration,overriddenDescriptor);
    }
  }
  if (ignore != null) {
    overriddenElementsToDescriptor.keySet().removeAll(ignore);
  }
  if (overriddenElementsToDescriptor.isEmpty())   return Collections.singletonList(declaration);
  List<String> superClasses=getClassDescriptions(overriddenElementsToDescriptor);
  return askUserForMethodsToSearch(declaration,declarationDescriptor,overriddenElementsToDescriptor,superClasses,actionStringKey);
}
