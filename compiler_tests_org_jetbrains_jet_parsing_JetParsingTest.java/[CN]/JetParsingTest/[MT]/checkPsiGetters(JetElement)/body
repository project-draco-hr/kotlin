{
  Method[] methods=elem.getClass().getDeclaredMethods();
  for (  Method method : methods) {
    String methodName=method.getName();
    if (!methodName.startsWith("get") && !methodName.startsWith("find") || methodName.equals("getReference") || methodName.equals("getReferences") || methodName.equals("getUseScope"))     continue;
    if (!Modifier.isPublic(method.getModifiers()))     continue;
    if (method.getParameterTypes().length > 0)     continue;
    Class<?> declaringClass=method.getDeclaringClass();
    if (!declaringClass.getName().startsWith("org.jetbrains.jet"))     continue;
    Object result=method.invoke(elem);
    if (result == null) {
      for (      Annotation annotation : method.getDeclaredAnnotations()) {
        if (annotation instanceof JetElementImpl.IfNotParsed) {
          assertNotNull("Incomplete operation in parsed OK test, method " + methodName + " in "+ declaringClass.getSimpleName()+ " returns null. Element text: \n"+ elem.getText(),PsiTreeUtil.findChildOfType(elem,PsiErrorElement.class));
        }
      }
    }
  }
}
