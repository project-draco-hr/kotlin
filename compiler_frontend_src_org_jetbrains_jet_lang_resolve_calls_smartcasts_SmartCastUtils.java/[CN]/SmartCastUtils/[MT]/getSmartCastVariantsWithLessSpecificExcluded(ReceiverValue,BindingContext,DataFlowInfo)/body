{
  final List<JetType> variants=getSmartCastVariants(receiverToCast,bindingContext,dataFlowInfo);
  return KotlinPackage.filter(variants,new Function1<JetType,Boolean>(){
    @Override public Boolean invoke(    final JetType type){
      return !KotlinPackage.any(variants,new Function1<JetType,Boolean>(){
        @Override public Boolean invoke(        JetType another){
          return another != type && JetTypeChecker.DEFAULT.isSubtypeOf(another,type);
        }
      }
);
    }
  }
);
}
