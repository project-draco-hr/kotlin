{
  registrar.registerReferenceProvider(psiElement(JetSimpleNameExpression.class),new PsiReferenceProvider(){
    @NotNull @Override public PsiReference[] getReferencesByElement(    @NotNull PsiElement element,    @NotNull ProcessingContext processingContext){
      return new PsiReference[]{new JetSimpleNameReference((JetSimpleNameExpression)element)};
    }
  }
);
  registrar.registerReferenceProvider(psiElement(JetThisReferenceExpression.class),new PsiReferenceProvider(){
    @NotNull @Override public PsiReference[] getReferencesByElement(    @NotNull PsiElement element,    @NotNull ProcessingContext processingContext){
      return new PsiReference[]{new JetThisReference((JetThisReferenceExpression)element)};
    }
  }
);
  registrar.registerReferenceProvider(psiElement(JetArrayAccessExpression.class),new PsiReferenceProvider(){
    @NotNull @Override public PsiReference[] getReferencesByElement(    @NotNull PsiElement element,    @NotNull ProcessingContext processingContext){
      return JetArrayAccessReference.create((JetArrayAccessExpression)element);
    }
  }
);
  registrar.registerReferenceProvider(psiElement(JetCallExpression.class),new PsiReferenceProvider(){
    @NotNull @Override public PsiReference[] getReferencesByElement(    @NotNull PsiElement element,    @NotNull ProcessingContext processingContext){
      return JetInvokeFunctionReference.create((JetCallExpression)element);
    }
  }
);
  registrar.registerReferenceProvider(psiElement(JetPropertyDelegate.class),new PsiReferenceProvider(){
    @NotNull @Override public PsiReference[] getReferencesByElement(    @NotNull PsiElement element,    @NotNull ProcessingContext processingContext){
      return JetPropertyDelegationMethodsReference.create((JetPropertyDelegate)element);
    }
  }
);
  registrar.registerReferenceProvider(psiElement(JetForExpression.class),new PsiReferenceProvider(){
    @NotNull @Override public PsiReference[] getReferencesByElement(    @NotNull PsiElement element,    @NotNull ProcessingContext processingContext){
      return JetForLoopInReference.create((JetForExpression)element);
    }
  }
);
}
