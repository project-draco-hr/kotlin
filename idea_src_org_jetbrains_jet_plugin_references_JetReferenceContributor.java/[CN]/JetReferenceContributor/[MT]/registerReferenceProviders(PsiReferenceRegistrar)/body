{
  registrar.registerReferenceProvider(psiElement(JetSimpleNameExpression.class),new PsiReferenceProvider(){
    @NotNull @Override public PsiReference[] getReferencesByElement(    @NotNull PsiElement element,    @NotNull ProcessingContext processingContext){
      return toArray(new JetSimpleNameReference((JetSimpleNameExpression)element));
    }
  }
);
  registrar.registerReferenceProvider(psiElement(JetThisReferenceExpression.class),new PsiReferenceProvider(){
    @NotNull @Override public PsiReference[] getReferencesByElement(    @NotNull PsiElement element,    @NotNull ProcessingContext processingContext){
      return toArray(new JetThisReference((JetThisReferenceExpression)element));
    }
  }
);
  registrar.registerReferenceProvider(psiElement(JetArrayAccessExpression.class),new PsiReferenceProvider(){
    @NotNull @Override public PsiReference[] getReferencesByElement(    @NotNull PsiElement element,    @NotNull ProcessingContext processingContext){
      return toArray(new JetArrayAccessReference((JetArrayAccessExpression)element));
    }
  }
);
  registrar.registerReferenceProvider(psiElement(JetCallExpression.class),new PsiReferenceProvider(){
    @NotNull @Override public PsiReference[] getReferencesByElement(    @NotNull PsiElement element,    @NotNull ProcessingContext processingContext){
      return toArray(new JetInvokeFunctionReference((JetCallExpression)element));
    }
  }
);
  registrar.registerReferenceProvider(psiElement(JetPropertyDelegate.class),new PsiReferenceProvider(){
    @NotNull @Override public PsiReference[] getReferencesByElement(    @NotNull PsiElement element,    @NotNull ProcessingContext processingContext){
      return toArray(new JetPropertyDelegationMethodsReference((JetPropertyDelegate)element));
    }
  }
);
  registrar.registerReferenceProvider(psiElement(JetForExpression.class),new PsiReferenceProvider(){
    @NotNull @Override public PsiReference[] getReferencesByElement(    @NotNull PsiElement element,    @NotNull ProcessingContext processingContext){
      return toArray(new JetForLoopInReference((JetForExpression)element));
    }
  }
);
}
