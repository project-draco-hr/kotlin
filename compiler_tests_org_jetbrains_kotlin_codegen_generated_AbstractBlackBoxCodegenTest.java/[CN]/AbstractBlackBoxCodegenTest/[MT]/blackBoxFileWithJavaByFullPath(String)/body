{
  File dirFile=new File(directory);
  final List<String> javaFilePaths=new ArrayList<String>();
  final List<String> ktFilePaths=new ArrayList<String>();
  FileUtil.processFilesRecursively(dirFile,new Processor<File>(){
    @Override public boolean process(    File file){
      String path=relativePath(file);
      if (path.endsWith(".kt")) {
        ktFilePaths.add(path);
      }
 else       if (path.endsWith(".java")) {
        javaFilePaths.add(path);
      }
      return true;
    }
  }
);
  CompilerConfiguration configuration=JetTestUtils.compilerConfigurationForTests(ConfigurationKind.ALL,TestJdkKind.MOCK_JDK,JetTestUtils.getAnnotationsJar());
  addJavaSourceRoot(configuration,dirFile);
  myEnvironment=KotlinCoreEnvironment.createForTests(getTestRootDisposable(),configuration,EnvironmentConfigFiles.JVM_CONFIG_FILES);
  loadFiles(ArrayUtil.toStringArray(ktFilePaths));
  classFileFactory=GenerationUtils.compileManyFilesGetGenerationStateForTest(myEnvironment.getProject(),myFiles.getPsiFiles(),new JvmPackagePartProvider(myEnvironment)).getFactory();
  File kotlinOut=JetTestUtils.tmpDir(toString());
  OutputUtilsPackage.writeAllTo(classFileFactory,kotlinOut);
  List<String> javacOptions=new ArrayList<String>(0);
  for (  JetFile jetFile : myFiles.getPsiFiles()) {
    javacOptions.addAll(InTextDirectivesUtils.findListWithPrefixes(jetFile.getText(),"// JAVAC_OPTIONS:"));
  }
  File javaOut=compileJava(javaFilePaths,Collections.singletonList(kotlinOut.getPath()),javacOptions);
  addJvmClasspathRoot(configuration,javaOut);
  blackBox();
}
