{
  JetStandardLibrary standardLibrary=semanticServices.getStandardLibrary();
  if (noExpectedType(expectedType) || semanticServices.getTypeChecker().isSubtypeOf(standardLibrary.getDoubleType(),expectedType)) {
    try {
      return new DoubleValue(Double.parseDouble(text));
    }
 catch (    NumberFormatException e) {
      return OUT_OF_RANGE;
    }
  }
 else   if (semanticServices.getTypeChecker().isSubtypeOf(standardLibrary.getFloatType(),expectedType)) {
    try {
      return new DoubleValue(Float.parseFloat(text));
    }
 catch (    NumberFormatException e) {
      return OUT_OF_RANGE;
    }
  }
 else {
    return new ErrorValue("A floating-point literal does not conform to the expected type " + expectedType);
  }
}
