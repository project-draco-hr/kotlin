{
  final ExpressionTypingContext context=contextWithExpectedType.replaceExpectedType(NO_EXPECTED_TYPE).replaceScope(scope).replaceContextDependency(INDEPENDENT);
  JetExpression leftOperand=expression.getLeft();
  if (leftOperand instanceof JetAnnotatedExpression) {
    components.annotationResolver.resolveAnnotationsWithArguments(scope,((JetAnnotatedExpression)leftOperand).getAnnotationEntries(),context.trace);
  }
  JetExpression left=deparenthesize(leftOperand);
  JetExpression right=expression.getRight();
  if (left instanceof JetArrayAccessExpression) {
    JetArrayAccessExpression arrayAccessExpression=(JetArrayAccessExpression)left;
    if (right == null)     return TypeInfoFactoryKt.noTypeInfo(context);
    JetTypeInfo typeInfo=basic.resolveArrayAccessSetMethod(arrayAccessExpression,right,context,context.trace);
    basic.checkLValue(context.trace,context,arrayAccessExpression,right);
    return typeInfo.replaceType(checkAssignmentType(typeInfo.getType(),expression,contextWithExpectedType));
  }
  JetTypeInfo leftInfo=ExpressionTypingUtils.getTypeInfoOrNullType(left,context,facade);
  JetType leftType=leftInfo.getType();
  DataFlowInfo dataFlowInfo=leftInfo.getDataFlowInfo();
  JetTypeInfo resultInfo;
  if (right != null) {
    resultInfo=facade.getTypeInfo(right,context.replaceDataFlowInfo(dataFlowInfo).replaceExpectedType(leftType));
    dataFlowInfo=resultInfo.getDataFlowInfo();
    JetType rightType=resultInfo.getType();
    if (left != null && leftType != null && rightType != null) {
      DataFlowValue leftValue=DataFlowValueFactory.createDataFlowValue(left,leftType,context);
      DataFlowValue rightValue=DataFlowValueFactory.createDataFlowValue(right,rightType,context);
      resultInfo=resultInfo.replaceDataFlowInfo(dataFlowInfo.assign(leftValue,rightValue));
    }
  }
 else {
    resultInfo=leftInfo;
  }
  if (leftType != null && leftOperand != null) {
    basic.checkLValue(context.trace,context,leftOperand,right);
  }
  return resultInfo.replaceType(components.dataFlowAnalyzer.checkStatementType(expression,contextWithExpectedType));
}
