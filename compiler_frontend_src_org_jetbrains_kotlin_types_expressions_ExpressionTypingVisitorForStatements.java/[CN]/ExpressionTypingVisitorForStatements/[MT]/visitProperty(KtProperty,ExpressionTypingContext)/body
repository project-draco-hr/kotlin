{
  ExpressionTypingContext context=typingContext.replaceContextDependency(INDEPENDENT).replaceScope(scope);
  KtTypeReference receiverTypeRef=property.getReceiverTypeReference();
  if (receiverTypeRef != null) {
    context.trace.report(LOCAL_EXTENSION_PROPERTY.on(receiverTypeRef));
  }
  KtPropertyAccessor getter=property.getGetter();
  if (getter != null) {
    context.trace.report(LOCAL_VARIABLE_WITH_GETTER.on(getter));
  }
  KtPropertyAccessor setter=property.getSetter();
  if (setter != null) {
    context.trace.report(LOCAL_VARIABLE_WITH_SETTER.on(setter));
  }
  KtExpression delegateExpression=property.getDelegateExpression();
  if (delegateExpression != null) {
    components.expressionTypingServices.getTypeInfo(delegateExpression,context);
    context.trace.report(LOCAL_VARIABLE_WITH_DELEGATE.on(property.getDelegate()));
  }
  VariableDescriptor propertyDescriptor=components.descriptorResolver.resolveLocalVariableDescriptor(scope,property,context.dataFlowInfo,context.trace);
  KtExpression initializer=property.getInitializer();
  JetTypeInfo typeInfo;
  if (initializer != null) {
    KotlinType outType=propertyDescriptor.getType();
    typeInfo=facade.getTypeInfo(initializer,context.replaceExpectedType(outType));
    DataFlowInfo dataFlowInfo=typeInfo.getDataFlowInfo();
    KotlinType type=typeInfo.getType();
    if (property.getTypeReference() == null && type != null) {
      DataFlowValue variableDataFlowValue=DataFlowValueFactory.createDataFlowValueForProperty(property,propertyDescriptor,context.trace.getBindingContext(),DescriptorUtils.getContainingModuleOrNull(scope.getOwnerDescriptor()));
      DataFlowValue initializerDataFlowValue=DataFlowValueFactory.createDataFlowValue(initializer,type,context);
      typeInfo=typeInfo.replaceDataFlowInfo(dataFlowInfo.assign(variableDataFlowValue,initializerDataFlowValue));
    }
  }
 else {
    typeInfo=TypeInfoFactoryKt.noTypeInfo(context);
  }
{
    VariableDescriptor olderVariable=ScopeUtilsKt.findLocalVariable(scope,propertyDescriptor.getName());
    ExpressionTypingUtils.checkVariableShadowing(context,propertyDescriptor,olderVariable);
  }
  scope.addVariableDescriptor(propertyDescriptor);
  components.modifiersChecker.withTrace(context.trace).checkModifiersForLocalDeclaration(property,propertyDescriptor);
  components.identifierChecker.checkDeclaration(property,context.trace);
  return typeInfo.replaceType(components.dataFlowAnalyzer.checkStatementType(property,context));
}
