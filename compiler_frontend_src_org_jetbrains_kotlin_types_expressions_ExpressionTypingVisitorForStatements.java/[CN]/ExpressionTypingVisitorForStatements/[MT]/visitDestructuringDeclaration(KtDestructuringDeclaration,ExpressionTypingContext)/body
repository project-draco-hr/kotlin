{
  components.annotationResolver.resolveAnnotationsWithArguments(scope,multiDeclaration.getModifierList(),context.trace);
  KtExpression initializer=multiDeclaration.getInitializer();
  if (initializer == null) {
    context.trace.report(INITIALIZER_REQUIRED_FOR_DESTRUCTURING_DECLARATION.on(multiDeclaration));
  }
  ExpressionReceiver expressionReceiver=initializer != null ? ExpressionTypingUtils.getExpressionReceiver(facade,initializer,context.replaceExpectedType(NO_EXPECTED_TYPE).replaceContextDependency(INDEPENDENT)) : null;
  components.destructuringDeclarationResolver.defineLocalVariablesFromMultiDeclaration(scope,multiDeclaration,expressionReceiver,initializer,context);
  components.modifiersChecker.withTrace(context.trace).checkModifiersForDestructuringDeclaration(multiDeclaration);
  components.identifierChecker.checkDeclaration(multiDeclaration,context.trace);
  if (expressionReceiver == null) {
    return TypeInfoFactoryKt.noTypeInfo(context);
  }
 else {
    return facade.getTypeInfo(initializer,context).replaceType(components.dataFlowAnalyzer.checkStatementType(multiDeclaration,context));
  }
}
