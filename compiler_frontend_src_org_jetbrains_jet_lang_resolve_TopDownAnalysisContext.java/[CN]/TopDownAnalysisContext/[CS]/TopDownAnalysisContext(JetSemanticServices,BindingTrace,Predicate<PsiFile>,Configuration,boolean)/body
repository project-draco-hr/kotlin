{
class TdacModule extends AbstractModule {
    @Override protected void configure(){
      bind(JetSemanticServices.class).toInstance(semanticServices);
      bind(TopDownAnalysisContext.class).toInstance(TopDownAnalysisContext.this);
    }
  }
  Injector injector=Guice.createInjector(new TdacModule());
  this.importsResolver=injector.getInstance(ImportsResolver.class);
  this.bodyResolver=injector.getInstance(BodyResolver.class);
  this.declarationResolver=injector.getInstance(DeclarationResolver.class);
  this.callResolverContext=injector.getInstance(CallResolver.Context.class);
  this.typeResolver=injector.getInstance(TypeResolver.class);
  this.expressionTypingServices=injector.getInstance(ExpressionTypingServices.class);
  this.descriptorResolver=injector.getInstance(DescriptorResolver.class);
  this.trace=new ObservableBindingTrace(trace);
  this.analyzeCompletely=analyzeCompletely;
  this.configuration=configuration;
  this.declaredLocally=declaredLocally;
}
