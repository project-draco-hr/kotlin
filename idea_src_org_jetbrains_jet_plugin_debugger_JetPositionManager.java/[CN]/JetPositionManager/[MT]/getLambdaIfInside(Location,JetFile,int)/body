{
  String currentLocationFqName=location.declaringType().name();
  if (currentLocationFqName == null)   return null;
  Integer start=CodeInsightUtils.getStartLineOffset(file,lineNumber);
  Integer end=CodeInsightUtils.getEndLineOffset(file,lineNumber);
  if (start == null || end == null)   return null;
  PsiElement[] literals=CodeInsightUtils.findElementsOfClassInRange(file,start,end,JetFunctionLiteral.class);
  if (literals == null || literals.length == 0)   return null;
  boolean isInLibrary=LibraryUtil.findLibraryEntry(file.getVirtualFile(),file.getProject()) != null;
  JetTypeMapper typeMapper=!isInLibrary ? prepareTypeMapper(file) : createTypeMapperForLibraryFile(file.findElementAt(start),file);
  String currentLocationClassName=JvmClassName.byFqNameWithoutInnerClasses(new FqName(currentLocationFqName)).getInternalName();
  for (  PsiElement literal : literals) {
    JetFunctionLiteral functionLiteral=(JetFunctionLiteral)literal;
    if (isInlinedLambda(functionLiteral,typeMapper.getBindingContext())) {
      continue;
    }
    String internalClassName=getClassNameForElement(literal.getFirstChild(),typeMapper,file,isInLibrary);
    if (internalClassName.equals(currentLocationClassName)) {
      return functionLiteral;
    }
  }
  return null;
}
