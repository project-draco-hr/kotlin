{
  PsiElement element=PsiTreeUtil.getParentOfType(notPositionedElement,JetClassOrObject.class,JetFunctionLiteral.class,JetNamedFunction.class);
  if (element instanceof JetClassOrObject) {
    return getJvmInternalNameForImpl(typeMapper,(JetClassOrObject)element);
  }
 else   if (element instanceof JetFunctionLiteral) {
    if (isInlinedLambda((JetFunctionLiteral)element,typeMapper.getBindingContext())) {
      return getClassNameForElement(element.getParent(),typeMapper,file);
    }
 else {
      Type asmType=asmTypeForAnonymousClass(typeMapper.getBindingContext(),((JetFunctionLiteral)element));
      return asmType.getInternalName();
    }
  }
 else   if (element instanceof JetNamedFunction) {
    PsiElement parent=PsiTreeUtil.getParentOfType(element,JetClassOrObject.class,JetFunctionLiteralExpression.class,JetNamedFunction.class);
    if (parent instanceof JetClassOrObject) {
      return getJvmInternalNameForImpl(typeMapper,(JetClassOrObject)parent);
    }
 else     if (parent instanceof JetFunctionLiteralExpression || parent instanceof JetNamedFunction) {
      Type asmType=asmTypeForAnonymousClass(typeMapper.getBindingContext(),(JetElement)element);
      return asmType.getInternalName();
    }
  }
  return PackageCodegen.getPackagePartInternalName(file);
}
