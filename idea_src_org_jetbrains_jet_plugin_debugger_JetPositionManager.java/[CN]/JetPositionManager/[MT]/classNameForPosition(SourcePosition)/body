{
  final Ref<String> result=Ref.create();
  ApplicationManager.getApplication().runReadAction(new Runnable(){
    @Override @SuppressWarnings("unchecked") public void run(){
      final JetFile namespace=(JetFile)sourcePosition.getFile();
      final JetTypeMapper typeMapper=prepareTypeMapper(namespace);
      PsiElement element=PsiTreeUtil.getParentOfType(sourcePosition.getElementAt(),JetClassOrObject.class,JetFunctionLiteralExpression.class,JetNamedFunction.class);
      if (element instanceof JetClassOrObject) {
        result.set(getJvmInternalNameForImpl(typeMapper,(JetClassOrObject)element));
      }
 else       if (element instanceof JetFunctionLiteralExpression) {
        result.set(classNameForAnonymousClass(typeMapper.getBindingContext(),(JetFunctionLiteralExpression)element).getInternalName());
      }
 else       if (element instanceof JetNamedFunction) {
        PsiElement parent=PsiTreeUtil.getParentOfType(element,JetClassOrObject.class,JetFunctionLiteralExpression.class,JetNamedFunction.class);
        if (parent instanceof JetClassOrObject) {
          result.set(getJvmInternalNameForImpl(typeMapper,(JetClassOrObject)parent));
        }
 else         if (parent instanceof JetFunctionLiteralExpression || parent instanceof JetNamedFunction) {
          result.set(classNameForAnonymousClass(typeMapper.getBindingContext(),(JetElement)element).getInternalName());
        }
      }
      if (result.isNull()) {
        FqName fqName=JetPsiUtil.getFQName(namespace);
        boolean multiFileNamespace=isMultiFileNamespace(typeMapper.getBindingContext(),fqName);
        if (multiFileNamespace) {
          result.set(NamespaceCodegen.getNamespacePartInternalName(namespace));
        }
 else {
          result.set(NamespaceCodegen.getJVMClassNameForKotlinNs(fqName).getInternalName());
        }
      }
    }
  }
);
  return result.get();
}
