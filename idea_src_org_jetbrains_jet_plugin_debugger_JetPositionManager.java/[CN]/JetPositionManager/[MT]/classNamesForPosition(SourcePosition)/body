{
  final Collection<String> names=new ArrayList<String>();
  ApplicationManager.getApplication().runReadAction(new Runnable(){
    @Override @SuppressWarnings("unchecked") public void run(){
      final JetFile namespace=(JetFile)sourcePosition.getFile();
      final JetTypeMapper typeMapper=prepareTypeMapper(namespace);
      PsiElement element=PsiTreeUtil.getParentOfType(sourcePosition.getElementAt(),JetClassOrObject.class,JetFunctionLiteralExpression.class,JetNamedFunction.class);
      if (element instanceof JetClassOrObject) {
        names.add(typeMapper.getJvmInternalName((JetClassOrObject)element));
      }
 else       if (element instanceof JetFunctionLiteralExpression) {
        names.add(typeMapper.getClosureAnnotator().classNameForAnonymousClass((JetFunctionLiteralExpression)element).getInternalName());
      }
 else       if (element instanceof JetNamedFunction) {
        PsiElement parent=PsiTreeUtil.getParentOfType(element,JetClassOrObject.class,JetFunctionLiteralExpression.class,JetNamedFunction.class);
        if (parent instanceof JetClassOrObject) {
          names.add(typeMapper.getJvmInternalName((JetClassOrObject)parent));
        }
 else         if (parent instanceof JetFunctionLiteralExpression || parent instanceof JetNamedFunction) {
          names.add(typeMapper.getClosureAnnotator().classNameForAnonymousClass((JetElement)element).getInternalName());
        }
      }
      if (names.isEmpty()) {
        FqName fqName=JetPsiUtil.getFQName(namespace);
        boolean multiFileNamespace=typeMapper.getClosureAnnotator().isMultiFileNamespace(fqName);
        String namespaceInternalName=NamespaceCodegen.getJVMClassNameForKotlinNs(fqName).getInternalName();
        if (multiFileNamespace) {
          String name=namespace.getName();
          names.add(namespaceInternalName + "$src$" + name.substring(0,name.lastIndexOf('.')));
        }
 else {
          names.add(namespaceInternalName);
        }
      }
    }
  }
);
  return names;
}
