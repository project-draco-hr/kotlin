{
  FqName fqName=JetPsiUtil.getFQName(file);
  CachedValue<JetTypeMapper> value=myTypeMappers.get(fqName);
  if (value == null) {
    value=CachedValuesManager.getManager(file.getProject()).createCachedValue(new CachedValueProvider<JetTypeMapper>(){
      @Override public Result<JetTypeMapper> compute(){
        final AnalyzeExhaust analyzeExhaust=WholeProjectAnalyzerFacade.analyzeProjectWithCacheOnAFile(file);
        analyzeExhaust.throwIfError();
        List<JetFile> namespaceFiles=JetFilesProvider.getInstance(file.getProject()).allNamespaceFiles().fun(file);
        JetTypeMapper typeMapper=new InjectorForJetTypeMapper(analyzeExhaust.getBindingContext(),namespaceFiles).getJetTypeMapper();
        typeMapper.getClosureAnnotator().init();
        return new Result<JetTypeMapper>(typeMapper,PsiModificationTracker.MODIFICATION_COUNT);
      }
    }
,false);
    myTypeMappers.put(fqName,value);
  }
  return value.getValue();
}
