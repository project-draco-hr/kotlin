{
  final FqName fqName=file.getPackageFqName();
  CachedValue<JetTypeMapper> value=myTypeMappers.get(fqName);
  if (value == null) {
    value=CachedValuesManager.getManager(file.getProject()).createCachedValue(new CachedValueProvider<JetTypeMapper>(){
      @Override public Result<JetTypeMapper> compute(){
        Project project=file.getProject();
        GlobalSearchScope packageFacadeScope=ResolvePackage.getModuleInfo(file).contentScope();
        Collection<JetFile> packageFiles=findFilesWithExactPackage(fqName,packageFacadeScope,project);
        AnalyzeExhaust analyzeExhaust=ResolvePackage.getAnalysisResultsForElements(packageFiles);
        analyzeExhaust.throwIfError();
        GenerationState state=new GenerationState(project,ClassBuilderFactories.THROW_EXCEPTION,analyzeExhaust.getModuleDescriptor(),analyzeExhaust.getBindingContext(),new ArrayList<JetFile>(packageFiles));
        state.beforeCompile();
        return new Result<JetTypeMapper>(state.getTypeMapper(),PsiModificationTracker.MODIFICATION_COUNT);
      }
    }
,false);
    myTypeMappers.put(fqName,value);
  }
  return value.getValue();
}
