{
  FqName fqName=file.getPackageFqName();
  CachedValue<JetTypeMapper> value=myTypeMappers.get(fqName);
  if (value == null) {
    value=CachedValuesManager.getManager(file.getProject()).createCachedValue(new CachedValueProvider<JetTypeMapper>(){
      @Override public Result<JetTypeMapper> compute(){
        Collection<JetFile> packageFiles=JetFilesProvider.getInstance(file.getProject()).allPackageFiles(file);
        AnalyzeExhaust analyzeExhaust=ResolvePackage.getAnalysisResultsForElements(packageFiles);
        analyzeExhaust.throwIfError();
        DelegatingBindingTrace bindingTrace=new DelegatingBindingTrace(analyzeExhaust.getBindingContext(),"trace created in JetPositionManager");
        JetTypeMapper typeMapper=new JetTypeMapper(bindingTrace,ClassBuilderMode.FULL);
        CodegenBinding.initTrace(bindingTrace,packageFiles);
        return new Result<JetTypeMapper>(typeMapper,PsiModificationTracker.MODIFICATION_COUNT);
      }
    }
,false);
    myTypeMappers.put(fqName,value);
  }
  return value.getValue();
}
