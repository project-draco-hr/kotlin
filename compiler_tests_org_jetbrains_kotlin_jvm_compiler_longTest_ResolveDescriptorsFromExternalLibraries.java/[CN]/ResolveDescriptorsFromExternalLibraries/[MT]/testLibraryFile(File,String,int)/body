{
  System.out.println("Testing library " + libDescription + "...");
  if (jar != null) {
    System.out.println("Using file " + jar);
  }
 else {
    jar=findRtJar();
    System.out.println("Using rt.jar: " + jar);
  }
  long start=System.currentTimeMillis();
  FileInputStream is=new FileInputStream(jar);
  boolean hasErrors=false;
  try {
    ZipInputStream zip=new ZipInputStream(is);
    while (zip.available() > 0) {
      hasErrors|=parseLibraryFileChunk(jar,libDescription,zip,classesPerChunk);
    }
  }
  finally {
    try {
      is.close();
    }
 catch (    Throwable e) {
    }
  }
  System.out.println("Testing library " + libDescription + " done in "+ millisecondsToSecondsString(System.currentTimeMillis() - start)+ "s "+ (hasErrors ? "with" : "without")+ " errors");
  return hasErrors;
}
