{
  if (psiElement instanceof JetPackageDirective) {
    return PlatformIcons.PACKAGE_ICON;
  }
  if (psiElement instanceof KotlinLightClassForPackage) {
    return JetIcons.FILE;
  }
  if (psiElement instanceof KotlinLightClassForExplicitDeclaration) {
    psiElement=psiElement.getNavigationElement();
  }
  if (psiElement instanceof JetNamedFunction) {
    if (((JetFunction)psiElement).getReceiverTypeRef() != null) {
      return JetIcons.EXTENSION_FUNCTION;
    }
    if (PsiTreeUtil.getParentOfType(psiElement,JetNamedDeclaration.class) instanceof JetClass) {
      if (JetPsiUtil.isAbstract((JetFunction)psiElement)) {
        return PlatformIcons.ABSTRACT_METHOD_ICON;
      }
 else {
        return PlatformIcons.METHOD_ICON;
      }
    }
 else {
      return JetIcons.FUNCTION;
    }
  }
  if (psiElement instanceof JetFunctionLiteral)   return JetIcons.LAMBDA;
  if (psiElement instanceof JetClass) {
    JetClass jetClass=(JetClass)psiElement;
    if (jetClass.isTrait()) {
      return JetIcons.TRAIT;
    }
    Icon icon=jetClass.isEnum() ? JetIcons.ENUM : JetIcons.CLASS;
    if (jetClass instanceof JetEnumEntry) {
      JetEnumEntry enumEntry=(JetEnumEntry)jetClass;
      if (enumEntry.getPrimaryConstructorParameterList() == null) {
        icon=JetIcons.ENUM;
      }
    }
    return icon;
  }
  if (psiElement instanceof JetObjectDeclaration || psiElement instanceof JetClassObject) {
    return JetIcons.OBJECT;
  }
  if (psiElement instanceof JetParameter) {
    JetParameter parameter=(JetParameter)psiElement;
    if (JetPsiUtil.getClassIfParameterIsProperty(parameter) != null) {
      return parameter.isMutable() ? JetIcons.FIELD_VAR : JetIcons.FIELD_VAL;
    }
    return JetIcons.PARAMETER;
  }
  if (psiElement instanceof JetProperty) {
    JetProperty property=(JetProperty)psiElement;
    return property.isVar() ? JetIcons.FIELD_VAR : JetIcons.FIELD_VAL;
  }
  return null;
}
