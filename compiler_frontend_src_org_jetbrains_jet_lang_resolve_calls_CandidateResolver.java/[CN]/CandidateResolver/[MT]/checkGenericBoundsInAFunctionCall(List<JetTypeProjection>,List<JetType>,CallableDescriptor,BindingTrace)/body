{
  Map<TypeConstructor,TypeProjection> context=Maps.newHashMap();
  List<TypeParameterDescriptor> typeParameters=functionDescriptor.getOriginal().getTypeParameters();
  for (int i=0, typeParametersSize=typeParameters.size(); i < typeParametersSize; i++) {
    TypeParameterDescriptor typeParameter=typeParameters.get(i);
    JetType typeArgument=typeArguments.get(i);
    context.put(typeParameter.getTypeConstructor(),new TypeProjectionImpl(typeArgument));
  }
  TypeSubstitutor substitutor=TypeSubstitutor.create(context);
  for (int i=0, typeParametersSize=typeParameters.size(); i < typeParametersSize; i++) {
    TypeParameterDescriptor typeParameterDescriptor=typeParameters.get(i);
    JetType typeArgument=typeArguments.get(i);
    JetTypeReference typeReference=jetTypeArguments.get(i).getTypeReference();
    if (typeReference != null) {
      DescriptorResolver.checkBounds(typeReference,typeArgument,typeParameterDescriptor,substitutor,trace);
    }
  }
}
