{
  ProgressIndicatorProvider.checkCanceled();
  MutableResolvedCall<D> candidateCall=context.candidateCall;
  D candidate=candidateCall.getCandidateDescriptor();
  candidateCall.addStatus(checkReceiverTypeError(context));
  if (ErrorUtils.isError(candidate)) {
    candidateCall.addStatus(SUCCESS);
    return;
  }
  if (!checkOuterClassMemberIsAccessible(context)) {
    candidateCall.addStatus(OTHER_ERROR);
    return;
  }
  DeclarationDescriptorWithVisibility invisibleMember=Visibilities.findInvisibleMember(candidate,context.scope.getContainingDeclaration());
  if (invisibleMember != null) {
    candidateCall.addStatus(OTHER_ERROR);
    context.tracing.invisibleMember(context.trace,invisibleMember);
  }
  if (task.checkArguments == CheckValueArgumentsMode.ENABLED) {
    Set<ValueArgument> unmappedArguments=Sets.newLinkedHashSet();
    ValueArgumentsToParametersMapper.Status argumentMappingStatus=ValueArgumentsToParametersMapper.mapValueArgumentsToParameters(context.call,context.tracing,candidateCall,unmappedArguments);
    if (!argumentMappingStatus.isSuccess()) {
      if (argumentMappingStatus == ValueArgumentsToParametersMapper.Status.STRONG_ERROR) {
        candidateCall.addStatus(RECEIVER_PRESENCE_ERROR);
      }
 else {
        candidateCall.addStatus(OTHER_ERROR);
      }
    }
  }
  if (!checkDispatchReceiver(context)) {
    candidateCall.addStatus(OTHER_ERROR);
  }
  List<JetTypeProjection> jetTypeArguments=context.call.getTypeArguments();
  if (!jetTypeArguments.isEmpty()) {
    List<JetType> typeArguments=new ArrayList<JetType>();
    for (    JetTypeProjection projection : jetTypeArguments) {
      if (projection.getProjectionKind() != JetProjectionKind.NONE) {
        context.trace.report(PROJECTION_ON_NON_CLASS_TYPE_ARGUMENT.on(projection));
      }
      typeArguments.add(argumentTypeResolver.resolveTypeRefWithDefault(projection.getTypeReference(),context.scope,context.trace,ErrorUtils.createErrorType("Star projection in a call")));
    }
    int expectedTypeArgumentCount=candidate.getTypeParameters().size();
    for (int index=jetTypeArguments.size(); index < expectedTypeArgumentCount; index++) {
      typeArguments.add(ErrorUtils.createErrorType("Explicit type argument expected for " + candidate.getTypeParameters().get(index).getName()));
    }
    Map<TypeConstructor,TypeProjection> substitutionContext=FunctionDescriptorUtil.createSubstitutionContext((FunctionDescriptor)candidate,typeArguments);
    TypeSubstitutor substitutor=TypeSubstitutor.create(substitutionContext);
    if (expectedTypeArgumentCount != jetTypeArguments.size()) {
      candidateCall.addStatus(OTHER_ERROR);
      context.tracing.wrongNumberOfTypeArguments(context.trace,expectedTypeArgumentCount);
    }
 else {
      checkGenericBoundsInAFunctionCall(jetTypeArguments,typeArguments,candidate,substitutor,context.trace);
    }
    candidateCall.setResultingSubstitutor(substitutor);
  }
  if (jetTypeArguments.isEmpty() && !candidate.getTypeParameters().isEmpty()) {
    candidateCall.addStatus(inferTypeArguments(context));
  }
 else {
    candidateCall.addStatus(checkAllValueArguments(context,SHAPE_FUNCTION_ARGUMENTS).status);
  }
  task.performAdvancedChecks(candidate,context.trace,context.tracing);
  JetSuperExpression superExpression=TaskPrioritizer.getReceiverSuper(candidateCall.getExtensionReceiver());
  if (superExpression != null) {
    context.trace.report(SUPER_IS_NOT_AN_EXPRESSION.on(superExpression,superExpression.getText()));
    candidateCall.addStatus(OTHER_ERROR);
  }
}
