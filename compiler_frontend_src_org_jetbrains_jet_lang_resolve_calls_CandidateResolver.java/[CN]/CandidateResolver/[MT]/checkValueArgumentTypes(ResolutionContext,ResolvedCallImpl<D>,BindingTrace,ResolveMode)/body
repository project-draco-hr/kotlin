{
  ResolutionStatus resultStatus=SUCCESS;
  DataFlowInfo dataFlowInfo=context.dataFlowInfo;
  List<JetType> argumentTypes=Lists.newArrayList();
  for (  Map.Entry<ValueParameterDescriptor,ResolvedValueArgument> entry : candidateCall.getValueArguments().entrySet()) {
    ValueParameterDescriptor parameterDescriptor=entry.getKey();
    ResolvedValueArgument resolvedArgument=entry.getValue();
    for (    ValueArgument argument : resolvedArgument.getArguments()) {
      JetExpression expression=argument.getArgumentExpression();
      if (expression == null)       continue;
      JetType expectedType=getEffectiveExpectedType(parameterDescriptor,argument);
      if (TypeUtils.dependsOnTypeParameters(expectedType,candidateCall.getCandidateDescriptor().getTypeParameters())) {
        expectedType=NO_EXPECTED_TYPE;
      }
      JetTypeInfo typeInfo=argumentTypeResolver.getArgumentTypeInfo(expression,trace,context.scope,dataFlowInfo,expectedType,resolveFunctionArgumentBodies);
      JetType type=typeInfo.getType();
      dataFlowInfo=dataFlowInfo.and(typeInfo.getDataFlowInfo());
      if (type == null || (ErrorUtils.isErrorType(type) && type != PLACEHOLDER_FUNCTION_TYPE)) {
        candidateCall.argumentHasNoType();
        argumentTypes.add(type);
      }
 else {
        JetType resultingType;
        if (expectedType == NO_EXPECTED_TYPE || argumentTypeResolver.isSubtypeOfForArgumentType(type,expectedType)) {
          resultingType=type;
        }
 else {
          resultingType=autocastValueArgumentTypeIfPossible(expression,expectedType,type,trace,dataFlowInfo);
          if (resultingType == null) {
            resultingType=type;
            resultStatus=OTHER_ERROR;
          }
        }
        argumentTypes.add(resultingType);
      }
    }
  }
  return new ValueArgumentsCheckingResult(resultStatus,argumentTypes);
}
