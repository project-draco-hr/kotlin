{
  JetVisitor<JetExpression,Void> selectorExpressionFinder=new JetVisitor<JetExpression,Void>(){
    @Override public JetExpression visitQualifiedExpression(    JetQualifiedExpression expression,    Void data){
      JetExpression selector=expression.getSelectorExpression();
      return selector != null ? selector.accept(this,null) : null;
    }
    @Override public JetExpression visitExpression(    JetExpression expression,    Void data){
      return expression;
    }
    @Override public JetExpression visitParenthesizedExpression(    JetParenthesizedExpression expression,    Void data){
      return expression.getExpression();
    }
    @Override public JetExpression visitPrefixExpression(    JetPrefixExpression expression,    Void data){
      JetExpression baseExpression=JetPsiUtil.getBaseExpressionIfLabeledExpression(expression);
      return baseExpression != null ? baseExpression : expression;
    }
    @Override public JetExpression visitBlockExpression(    JetBlockExpression expression,    Void data){
      JetElement lastStatement=JetPsiUtil.getLastStatementInABlock(expression);
      if (lastStatement != null) {
        return lastStatement.accept(this,data);
      }
      return expression;
    }
    @SuppressWarnings("SuspiciousMethodCalls") @Override public JetExpression visitBinaryExpression(    JetBinaryExpression expression,    Void data){
      IElementType operationType=expression.getOperationReference().getReferencedNameElementType();
      if (OperatorConventions.COMPARISON_OPERATIONS.contains(operationType)) {
        return null;
      }
      if (OperatorConventions.ASSIGNMENT_OPERATIONS.containsKey(operationType)) {
        return null;
      }
      return super.visitBinaryExpression(expression,data);
    }
  }
;
  return expression.accept(selectorExpressionFinder,null);
}
