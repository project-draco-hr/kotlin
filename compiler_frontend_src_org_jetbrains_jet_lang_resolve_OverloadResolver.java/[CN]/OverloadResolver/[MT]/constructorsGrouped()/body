{
  MultiMap<ClassDescriptor,ConstructorDescriptor> inClasses=MultiMap.create();
  MultiMap<Key,ConstructorDescriptor> inNamespaces=MultiMap.create();
  for (  MutableClassDescriptor klass : context.getClasses().values()) {
    DeclarationDescriptor containingDeclaration=klass.getContainingDeclaration();
    if (containingDeclaration instanceof NamespaceDescriptor) {
      NamespaceDescriptor namespaceDescriptor=(NamespaceDescriptor)containingDeclaration;
      inNamespaces.put(new Key(namespaceDescriptor,klass.getName()),klass.getConstructors());
    }
 else     if (containingDeclaration instanceof ClassDescriptor) {
      ClassDescriptor classDescriptor=(ClassDescriptor)containingDeclaration;
      inClasses.put(classDescriptor,klass.getConstructors());
    }
 else     if (!(containingDeclaration instanceof FunctionDescriptor)) {
      throw new IllegalStateException();
    }
  }
  return Pair.create(inClasses,inNamespaces);
}
