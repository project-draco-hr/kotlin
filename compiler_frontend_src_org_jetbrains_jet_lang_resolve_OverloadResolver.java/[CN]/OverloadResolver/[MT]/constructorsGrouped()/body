{
  MultiMap<ClassDescriptor,ConstructorDescriptor> inClasses=MultiMap.create();
  MultiMap<Key,ConstructorDescriptor> inPackages=MultiMap.create();
  for (  MutableClassDescriptor klass : context.getClasses().values()) {
    if (klass.getKind().isSingleton()) {
      continue;
    }
    DeclarationDescriptor containingDeclaration=klass.getContainingDeclaration();
    if (containingDeclaration instanceof PackageFragmentDescriptor) {
      PackageFragmentDescriptor packageFragment=(PackageFragmentDescriptor)containingDeclaration;
      inPackages.put(new Key(packageFragment,klass.getName()),klass.getConstructors());
    }
 else     if (containingDeclaration instanceof ClassDescriptor) {
      ClassDescriptor classDescriptor=(ClassDescriptor)containingDeclaration;
      inClasses.put(classDescriptor,klass.getConstructors());
    }
 else     if (!(containingDeclaration instanceof FunctionDescriptor)) {
      throw new IllegalStateException();
    }
  }
  return Pair.create(inClasses,inPackages);
}
