{
  if (descriptor instanceof FunctionDescriptor) {
    throw new IllegalStateException("requested fq name for function: " + descriptor);
  }
  if (descriptor.getContainingDeclaration() instanceof ModuleDescriptor || descriptor instanceof ScriptDescriptor) {
    return "";
  }
  if (descriptor instanceof ModuleDescriptor) {
    throw new IllegalStateException("missed something");
  }
  if (descriptor instanceof ClassDescriptor) {
    ClassDescriptor klass=(ClassDescriptor)descriptor;
    if (klass.getKind() == ClassKind.OBJECT || klass.getKind() == ClassKind.CLASS_OBJECT) {
      if (klass.getContainingDeclaration() instanceof ClassDescriptor) {
        ClassDescriptor containingKlass=(ClassDescriptor)klass.getContainingDeclaration();
        if (containingKlass.getKind() == ClassKind.ENUM_CLASS) {
          return getJvmInternalName(bindingTrace,containingKlass).getInternalName();
        }
 else {
          return getJvmInternalName(bindingTrace,containingKlass).getInternalName() + JvmAbi.CLASS_OBJECT_SUFFIX;
        }
      }
    }
 else     if (klass.getKind() == ClassKind.ENUM_ENTRY) {
      if (enumEntryNeedSubclass(bindingTrace.getBindingContext(),klass)) {
        return getJvmInternalName(bindingTrace,klass.getContainingDeclaration()).getInternalName() + "$" + klass.getName().getName();
      }
 else {
        return getJvmInternalName(bindingTrace,klass.getContainingDeclaration()).getInternalName();
      }
    }
    JvmClassName name=classNameForClassDescriptor(bindingTrace.getBindingContext(),(ClassDescriptor)descriptor);
    if (name != null) {
      return name.getInternalName();
    }
  }
  DeclarationDescriptor container=descriptor.getContainingDeclaration();
  if (container == null) {
    throw new IllegalStateException("descriptor has no container: " + descriptor);
  }
  Name name=descriptor.getName();
  String baseName=getJvmInternalName(bindingTrace,container).getInternalName();
  if (!baseName.isEmpty()) {
    return baseName + (container instanceof NamespaceDescriptor ? "/" : "$") + name.getIdentifier();
  }
  return name.getIdentifier();
}
