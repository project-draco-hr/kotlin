{
  final Map<MemberSignature,List<AnnotationDescriptor>> memberAnnotations=new HashMap<MemberSignature,List<AnnotationDescriptor>>();
  final Map<MemberSignature,CompileTimeConstant<?>> propertyConstants=new HashMap<MemberSignature,CompileTimeConstant<?>>();
  kotlinClass.visitMembers(new KotlinJvmBinaryClass.MemberVisitor(){
    @Nullable @Override public KotlinJvmBinaryClass.MethodAnnotationVisitor visitMethod(    @NotNull Name name,    @NotNull String desc){
      return new AnnotationVisitorForMethod(MemberSignature.fromMethodNameAndDesc(name.asString() + desc));
    }
    @Nullable @Override public KotlinJvmBinaryClass.AnnotationVisitor visitField(    @NotNull Name name,    @NotNull String desc,    @Nullable Object initializer){
      MemberSignature signature=MemberSignature.fromFieldNameAndDesc(name,desc);
      if (initializer != null) {
        propertyConstants.put(signature,ConstantsPackage.createCompileTimeConstant(initializer,true,true,null));
      }
      return new MemberAnnotationVisitor(signature);
    }
class AnnotationVisitorForMethod extends MemberAnnotationVisitor implements KotlinJvmBinaryClass.MethodAnnotationVisitor {
      public AnnotationVisitorForMethod(      @NotNull MemberSignature signature){
        super(signature);
      }
      @Nullable @Override public KotlinJvmBinaryClass.AnnotationArgumentVisitor visitParameterAnnotation(      int index,      @NotNull JvmClassName className){
        MemberSignature paramSignature=MemberSignature.fromMethodSignatureAndParameterIndex(signature,index);
        List<AnnotationDescriptor> result=memberAnnotations.get(paramSignature);
        if (result == null) {
          result=new ArrayList<AnnotationDescriptor>();
          memberAnnotations.put(paramSignature,result);
        }
        return AnnotationDescriptorDeserializer.resolveAnnotation(className,result,classResolver);
      }
    }
class MemberAnnotationVisitor implements KotlinJvmBinaryClass.AnnotationVisitor {
      private final List<AnnotationDescriptor> result=new ArrayList<AnnotationDescriptor>();
      protected final MemberSignature signature;
      public MemberAnnotationVisitor(      @NotNull MemberSignature signature){
        this.signature=signature;
      }
      @Nullable @Override public KotlinJvmBinaryClass.AnnotationArgumentVisitor visitAnnotation(      @NotNull JvmClassName className){
        return AnnotationDescriptorDeserializer.resolveAnnotation(className,result,classResolver);
      }
      @Override public void visitEnd(){
        if (!result.isEmpty()) {
          memberAnnotations.put(signature,result);
        }
      }
    }
  }
);
  return new Storage(memberAnnotations,propertyConstants);
}
