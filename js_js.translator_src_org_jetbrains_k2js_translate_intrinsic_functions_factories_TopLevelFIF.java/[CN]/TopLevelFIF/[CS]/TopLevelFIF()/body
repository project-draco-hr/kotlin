{
  add(pattern("jet","toString").receiverExists(true),new BuiltInFunctionIntrinsic("toString"));
  add(pattern("jet","equals").receiverExists(true),EQUALS);
  add(pattern(NamePredicate.PRIMITIVE_NUMBERS,"equals"),EQUALS);
  add(pattern("String|Boolean|Char|Number.equals"),EQUALS);
  add(pattern("jet","arrayOfNulls"),new CallStandardMethodIntrinsic(new JsNameRef("nullArray","Kotlin"),false,1));
  add(pattern("jet","iterator").receiverExists(true),RETURN_RECEIVER_INTRINSIC);
  add(new DescriptorPredicate(){
    @Override public boolean apply(    @NotNull FunctionDescriptor descriptor){
      if (!descriptor.getName().asString().equals("invoke")) {
        return false;
      }
      int parameterCount=descriptor.getValueParameters().size();
      DeclarationDescriptor fun=descriptor.getContainingDeclaration();
      return fun == (descriptor.getReceiverParameter() == null ? KotlinBuiltIns.getInstance().getFunction(parameterCount) : KotlinBuiltIns.getInstance().getExtensionFunction(parameterCount));
    }
  }
,new CallParametersAwareFunctionIntrinsic(){
    @NotNull @Override public JsExpression apply(    @NotNull CallTranslator callTranslator,    @NotNull List<JsExpression> arguments,    @NotNull TranslationContext context){
      JsExpression thisExpression=callTranslator.getCallParameters().getThisObject();
      if (thisExpression == null) {
        return new JsInvocation(callTranslator.getCallParameters().getFunctionReference(),arguments);
      }
 else       if (callTranslator.getResolvedCall().getReceiverArgument().exists()) {
        return callTranslator.extensionFunctionCall(false);
      }
 else {
        return new JsInvocation(new JsNameRef("call",callTranslator.getCallParameters().getFunctionReference()),generateCallArgumentList(thisExpression,arguments));
      }
    }
  }
);
  add(pattern("java","util","set").receiverExists(true),NATIVE_MAP_SET);
  add(pattern("jet","Map","get"),NATIVE_MAP_GET);
  add(pattern("java","util","HashMap","get"),NATIVE_MAP_GET);
}
