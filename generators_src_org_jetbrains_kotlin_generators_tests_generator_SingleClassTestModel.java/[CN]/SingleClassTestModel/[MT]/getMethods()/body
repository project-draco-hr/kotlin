{
  if (methods == null) {
    final List<TestMethodModel> result=Lists.newArrayList();
    result.add(new TestAllFilesPresentMethodModel());
    FileUtil.processFilesRecursively(rootFile,new Processor<File>(){
      @Override public boolean process(      File file){
        if (!file.isDirectory() && filenamePattern.matcher(file.getName()).matches()) {
          result.addAll(getTestMethodsFromFile(file));
        }
        return true;
      }
    }
);
    ContainerUtil.sort(result,new Comparator<TestMethodModel>(){
      @Override public int compare(      @NotNull TestMethodModel o1,      @NotNull TestMethodModel o2){
        return StringUtil.compare(o1.getName(),o2.getName(),true);
      }
    }
);
    methods=Lists.<MethodModel>newArrayList(result);
  }
  return methods;
}
