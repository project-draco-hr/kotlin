{
  boolean haveCustomNamespace=false;
  Element root=document.getDocumentElement();
  NamedNodeMap attributes=root.getAttributes();
  for (int i=0, n=attributes.getLength(); i < n; i++) {
    Node item=attributes.item(i);
    if (item.getNodeName().startsWith(XMLNS_PREFIX)) {
      String value=item.getNodeValue();
      if (!value.equals(ANDROID_URI)) {
        Attr attribute=(Attr)item;
        if (value.startsWith(URI_PREFIX)) {
          haveCustomNamespace=true;
          if (mUnusedNamespaces == null) {
            mUnusedNamespaces=new HashMap<String,Attr>();
          }
          mUnusedNamespaces.put(item.getNodeName().substring(XMLNS_PREFIX.length()),attribute);
        }
 else         if (value.startsWith("urn:")) {
          continue;
        }
 else         if (!value.startsWith("http://")) {
          if (context.isEnabled(TYPO)) {
            context.report(TYPO,attribute,context.getValueLocation(attribute),"Suspicious namespace: should start with `http://`");
          }
          continue;
        }
 else         if (!value.equals(AUTO_URI) && value.contains("auto") && value.startsWith("http://schemas.android.com/")) {
          context.report(RES_AUTO,attribute,context.getValueLocation(attribute),"Suspicious namespace: Did you mean `" + AUTO_URI + "`?");
        }
        if (!context.isEnabled(TYPO)) {
          continue;
        }
        String name=attribute.getName();
        if (!name.equals(XMLNS_ANDROID) && !name.equals(XMLNS_A)) {
          int resIndex=value.indexOf("/res/");
          if (resIndex != -1 && value.length() + 5 > URI_PREFIX.length()) {
            String urlPrefix=value.substring(0,resIndex + 5);
            if (!urlPrefix.equals(URI_PREFIX) && LintUtils.editDistance(URI_PREFIX,urlPrefix) <= 3) {
              String correctUri=URI_PREFIX + value.substring(resIndex + 5);
              context.report(TYPO,attribute,context.getValueLocation(attribute),String.format("Possible typo in URL: was `\"%1$s\"`, should " + "probably be `\"%2$s\"`",value,correctUri));
            }
          }
          continue;
        }
        if (name.equals(XMLNS_A)) {
          if (LintUtils.editDistance(ANDROID_URI,value) > 4) {
            continue;
          }
        }
        if (value.equalsIgnoreCase(ANDROID_URI)) {
          context.report(TYPO,attribute,context.getValueLocation(attribute),String.format("URI is case sensitive: was `\"%1$s\"`, expected `\"%2$s\"`",value,ANDROID_URI));
        }
 else {
          context.report(TYPO,attribute,context.getValueLocation(attribute),String.format("Unexpected namespace URI bound to the `\"android\"` " + "prefix, was `%1$s`, expected `%2$s`",value,ANDROID_URI));
        }
      }
    }
  }
  if (haveCustomNamespace) {
    Project project=context.getProject();
    boolean checkCustomAttrs=context.isEnabled(CUSTOM_VIEW) && project.isLibrary() || context.isEnabled(RES_AUTO) && project.isGradleProject();
    mCheckUnused=context.isEnabled(UNUSED);
    if (checkCustomAttrs) {
      checkCustomNamespace(context,root);
    }
    checkElement(root);
    if (mCheckUnused && !mUnusedNamespaces.isEmpty()) {
      for (      Map.Entry<String,Attr> entry : mUnusedNamespaces.entrySet()) {
        String prefix=entry.getKey();
        Attr attribute=entry.getValue();
        context.report(UNUSED,attribute,context.getLocation(attribute),String.format("Unused namespace `%1$s`",prefix));
      }
    }
  }
}
