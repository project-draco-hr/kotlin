{
  if (argument instanceof NullLiteral) {
    return;
  }
  if (argument instanceof StringLiteral) {
    StringLiteral string=(StringLiteral)argument;
    checkTypeDefConstant(context,annotation,argument,errorNode,false,string.astValue());
  }
 else   if (argument instanceof IntegralLiteral) {
    IntegralLiteral literal=(IntegralLiteral)argument;
    int value=literal.astIntValue();
    if (flag && value == 0) {
      return;
    }
    checkTypeDefConstant(context,annotation,argument,errorNode,flag,value);
  }
 else   if (isMinusOne(argument)) {
    if (!flag) {
      reportTypeDef(context,annotation,argument,errorNode);
    }
  }
 else   if (argument instanceof InlineIfExpression) {
    InlineIfExpression expression=(InlineIfExpression)argument;
    if (expression.astIfTrue() != null) {
      checkTypeDefConstant(context,annotation,expression.astIfTrue(),errorNode,flag);
    }
    if (expression.astIfFalse() != null) {
      checkTypeDefConstant(context,annotation,expression.astIfFalse(),errorNode,flag);
    }
  }
 else   if (argument instanceof UnaryExpression) {
    UnaryExpression expression=(UnaryExpression)argument;
    UnaryOperator operator=expression.astOperator();
    if (flag) {
      checkTypeDefConstant(context,annotation,expression.astOperand(),errorNode,true);
    }
 else     if (operator == UnaryOperator.BINARY_NOT) {
      context.report(TYPE_DEF,expression,context.getLocation(expression),"Flag not allowed here");
    }
  }
 else   if (argument instanceof BinaryExpression) {
    BinaryExpression expression=(BinaryExpression)argument;
    if (flag) {
      checkTypeDefConstant(context,annotation,expression.astLeft(),errorNode,true);
      checkTypeDefConstant(context,annotation,expression.astRight(),errorNode,true);
    }
 else {
      BinaryOperator operator=expression.astOperator();
      if (operator == BinaryOperator.BITWISE_AND || operator == BinaryOperator.BITWISE_OR || operator == BinaryOperator.BITWISE_XOR) {
        context.report(TYPE_DEF,expression,context.getLocation(expression),"Flag not allowed here");
      }
    }
  }
 else {
    ResolvedNode resolved=context.resolve(argument);
    if (resolved instanceof ResolvedField) {
      checkTypeDefConstant(context,annotation,argument,errorNode,flag,resolved);
    }
 else     if (argument instanceof VariableReference) {
      Statement statement=getParentOfType(argument,Statement.class,false);
      if (statement != null) {
        ListIterator<Node> iterator=statement.getParent().getChildren().listIterator();
        while (iterator.hasNext()) {
          if (iterator.next() == statement) {
            if (iterator.hasPrevious()) {
              iterator.previous();
            }
            break;
          }
        }
        String targetName=((VariableReference)argument).astIdentifier().astValue();
        while (iterator.hasPrevious()) {
          Node previous=iterator.previous();
          if (previous instanceof VariableDeclaration) {
            VariableDeclaration declaration=(VariableDeclaration)previous;
            VariableDefinition definition=declaration.astDefinition();
            for (            VariableDefinitionEntry entry : definition.astVariables()) {
              if (entry.astInitializer() != null && entry.astName().astValue().equals(targetName)) {
                checkTypeDefConstant(context,annotation,entry.astInitializer(),errorNode != null ? errorNode : argument,flag);
                return;
              }
            }
          }
 else           if (previous instanceof ExpressionStatement) {
            ExpressionStatement expressionStatement=(ExpressionStatement)previous;
            Expression expression=expressionStatement.astExpression();
            if (expression instanceof BinaryExpression && ((BinaryExpression)expression).astOperator() == BinaryOperator.ASSIGN) {
              BinaryExpression binaryExpression=(BinaryExpression)expression;
              if (targetName.equals(binaryExpression.astLeft().toString())) {
                checkTypeDefConstant(context,annotation,binaryExpression.astRight(),errorNode != null ? errorNode : argument,flag);
                return;
              }
            }
          }
        }
      }
    }
  }
}
