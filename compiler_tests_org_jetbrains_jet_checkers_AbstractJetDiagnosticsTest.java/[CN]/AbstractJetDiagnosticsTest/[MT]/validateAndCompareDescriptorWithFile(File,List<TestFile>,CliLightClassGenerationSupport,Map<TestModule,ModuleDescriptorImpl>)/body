{
  ModuleDescriptorImpl lightClassModule=support.getLightClassModule();
  if (lightClassModule == null) {
    ModuleDescriptorImpl cliModule=support.newModule();
    cliModule.initialize(new PackageFragmentProvider(){
      @NotNull @Override public List<PackageFragmentDescriptor> getPackageFragments(      @NotNull FqName fqName){
        return Collections.emptyList();
      }
      @NotNull @Override public Collection<FqName> getSubPackagesOf(      @NotNull FqName fqName,      @NotNull Function1<? super Name,? extends Boolean> nameFilter){
        return Collections.emptyList();
      }
    }
);
  }
  RecursiveDescriptorComparator comparator=new RecursiveDescriptorComparator(createdAffectedPackagesConfiguration(testFiles));
  boolean isMultiModuleTest=modules.size() != 1;
  StringBuilder rootPackageText=new StringBuilder();
  for (  TestModule module : KotlinPackage.sort(modules.keySet())) {
    ModuleDescriptorImpl moduleDescriptor=modules.get(module);
    if (isMultiModuleTest) {
      rootPackageText.append(String.format("// -- Module: %s --\n",moduleDescriptor.getName()));
    }
    DeclarationDescriptor aPackage=moduleDescriptor.getPackage(FqName.ROOT);
    assertNotNull(aPackage);
    String actualSerialized=comparator.serializeRecursively(aPackage);
    rootPackageText.append(actualSerialized);
    if (isMultiModuleTest) {
      rootPackageText.append("\n\n");
    }
  }
  JetTestUtils.assertEqualsToFile(expectedFile,rootPackageText.toString());
}
