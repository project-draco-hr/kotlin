{
  Map<TestModule,List<TestFile>> groupedByModule=KotlinPackage.groupByTo(testFiles,new LinkedHashMap<TestModule,List<TestFile>>(),new Function1<TestFile,TestModule>(){
    @Override public TestModule invoke(    TestFile file){
      return file.getModule();
    }
  }
);
  CliLightClassGenerationSupport support=CliLightClassGenerationSupport.getInstanceForCli(getProject());
  BindingTrace supportTrace=support.getTrace();
  List<JetFile> allJetFiles=new ArrayList<JetFile>();
  Map<TestModule,ModuleDescriptorImpl> modules=createModules(groupedByModule);
  Map<TestModule,BindingContext> moduleBindings=new HashMap<TestModule,BindingContext>();
  for (  Map.Entry<TestModule,List<TestFile>> entry : groupedByModule.entrySet()) {
    TestModule testModule=entry.getKey();
    List<? extends TestFile> testFilesInModule=entry.getValue();
    List<JetFile> jetFiles=getJetFiles(testFilesInModule);
    allJetFiles.addAll(jetFiles);
    ModuleDescriptorImpl module=modules.get(testModule);
    BindingTrace moduleTrace=groupedByModule.size() > 1 ? new DelegatingBindingTrace(supportTrace.getBindingContext(),"Trace for module " + module) : supportTrace;
    moduleBindings.put(testModule,moduleTrace.getBindingContext());
    if (module == null) {
      module=support.newModule();
      modules.put(entry.getKey(),module);
    }
 else {
      module.addDependencyOnModule(KotlinBuiltIns.getInstance().getBuiltInsModule());
      module.seal();
    }
    TopDownAnalyzerFacadeForJVM.analyzeFilesWithJavaIntegration(getProject(),jetFiles,moduleTrace,Predicates.<PsiFile>alwaysTrue(),module,null,null);
    checkAllResolvedCallsAreCompleted(jetFiles,moduleTrace.getBindingContext());
  }
  boolean ok=true;
  StringBuilder actualText=new StringBuilder();
  for (  TestFile testFile : testFiles) {
    ok&=testFile.getActualText(moduleBindings.get(testFile.getModule()),actualText,groupedByModule.size() > 1);
  }
  JetTestUtils.assertEqualsToFile(testDataFile,actualText.toString());
  assertTrue("Diagnostics mismatch. See the output above",ok);
  checkAllResolvedCallsAreCompleted(allJetFiles,supportTrace.getBindingContext());
  File expectedFile=new File(FileUtil.getNameWithoutExtension(testDataFile.getAbsolutePath()) + ".txt");
  validateAndCompareDescriptorWithFile(expectedFile,testFiles,support,modules);
}
