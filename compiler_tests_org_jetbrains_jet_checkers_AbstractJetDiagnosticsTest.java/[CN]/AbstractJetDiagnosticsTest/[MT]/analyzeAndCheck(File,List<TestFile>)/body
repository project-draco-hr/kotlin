{
  Map<TestModule,List<TestFile>> groupedByModule=KotlinPackage.groupByTo(testFiles,new LinkedHashMap<TestModule,List<TestFile>>(),new Function1<TestFile,TestModule>(){
    @Override public TestModule invoke(    TestFile file){
      return file.getModule();
    }
  }
);
  CliLightClassGenerationSupport support=CliLightClassGenerationSupport.getInstanceForCli(getProject());
  BindingTrace trace=support.getTrace();
  List<JetFile> allJetFiles=new ArrayList<JetFile>();
  Map<TestModule,ModuleDescriptorImpl> modules=createModules(groupedByModule);
  for (  Map.Entry<TestModule,List<TestFile>> entry : groupedByModule.entrySet()) {
    TestModule testModule=entry.getKey();
    List<? extends TestFile> testFilesInModule=entry.getValue();
    List<JetFile> jetFiles=getJetFiles(testFilesInModule);
    allJetFiles.addAll(jetFiles);
    ModuleDescriptorImpl module=modules.get(testModule);
    analyzeModule(trace,module == null ? support.getModule() : module,jetFiles);
  }
  boolean ok=true;
  StringBuilder actualText=new StringBuilder();
  for (  TestFile testFile : testFiles) {
    ok&=testFile.getActualText(trace.getBindingContext(),actualText);
  }
  JetTestUtils.assertEqualsToFile(testDataFile,actualText.toString());
  assertTrue("Diagnostics mismatch. See the output above",ok);
  checkAllResolvedCallsAreCompleted(allJetFiles,trace.getBindingContext());
}
