{
  if (this.jetFile == null) {
    actualText.append(this.clearText);
    return true;
  }
  final boolean[] ok={true};
  List<Diagnostic> diagnostics=CheckerTestUtil.getDiagnosticsIncludingSyntaxErrors(bindingContext,jetFile);
  CheckerTestUtil.diagnosticsDiff(diagnosedRanges,diagnostics,new CheckerTestUtil.DiagnosticDiffCallbacks(){
    @Override public void missingDiagnostic(    String type,    int expectedStart,    int expectedEnd){
      String message="Missing " + type + DiagnosticUtils.atLocation(jetFile,new TextRange(expectedStart,expectedEnd));
      System.err.println(message);
      ok[0]=false;
    }
    @Override public void unexpectedDiagnostic(    String type,    int actualStart,    int actualEnd){
      String message="Unexpected " + type + DiagnosticUtils.atLocation(jetFile,new TextRange(actualStart,actualEnd));
      System.err.println(message);
      ok[0]=false;
    }
  }
);
  actualText.append(CheckerTestUtil.addDiagnosticMarkersToText(jetFile,diagnostics));
  return ok[0];
}
