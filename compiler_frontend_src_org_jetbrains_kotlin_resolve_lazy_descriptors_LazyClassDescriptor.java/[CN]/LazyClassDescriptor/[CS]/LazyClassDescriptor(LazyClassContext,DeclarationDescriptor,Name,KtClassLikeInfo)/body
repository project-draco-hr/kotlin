{
  super(c.getStorageManager(),containingDeclaration,name,KotlinSourceElementKt.toSourceElement(classLikeInfo.getCorrespondingClassOrObject()));
  this.c=c;
  KtClassOrObject classOrObject=classLikeInfo.getCorrespondingClassOrObject();
  if (classOrObject != null) {
    this.c.getTrace().record(BindingContext.CLASS,classOrObject,this);
  }
  this.c.getTrace().record(BindingContext.FQNAME_TO_CLASS_DESCRIPTOR,DescriptorUtils.getFqName(this),this);
  this.declarationProvider=c.getDeclarationProviderFactory().getClassMemberDeclarationProvider(classLikeInfo);
  this.unsubstitutedMemberScope=createMemberScope(c,this.declarationProvider);
  this.staticScope=new StaticScopeForKotlinClass(this);
  this.typeConstructor=new LazyClassTypeConstructor();
  final ClassKind syntaxKind=classLikeInfo.getClassKind();
  this.isCompanionObject=classLikeInfo instanceof KtObjectInfo && ((KtObjectInfo)classLikeInfo).isCompanionObject();
  final KtModifierList modifierList=classLikeInfo.getModifierList();
  if (syntaxKind.isSingleton()) {
    this.modality=Modality.FINAL;
  }
 else {
    Modality defaultModality=syntaxKind == ClassKind.INTERFACE ? Modality.ABSTRACT : Modality.FINAL;
    this.modality=resolveModalityFromModifiers(modifierList,defaultModality);
  }
  boolean isLocal=classOrObject != null && KtPsiUtil.isLocal(classOrObject);
  Visibility defaultVisibility;
  if (syntaxKind == ClassKind.ENUM_ENTRY || (syntaxKind == ClassKind.OBJECT && isCompanionObject)) {
    defaultVisibility=Visibilities.PUBLIC;
  }
 else {
    defaultVisibility=Visibilities.DEFAULT_VISIBILITY;
  }
  this.visibility=isLocal ? Visibilities.LOCAL : resolveVisibilityFromModifiers(modifierList,defaultVisibility);
  StorageManager storageManager=c.getStorageManager();
  final ClassDescriptor descriptor=this;
  this.isInner=storageManager.createLazyValue(new Function0<Boolean>(){
    @Override public Boolean invoke(){
      return isInnerClass(modifierList) && !ModifiersChecker.isIllegalInner(descriptor);
    }
  }
);
  this.isData=storageManager.createLazyValue(new Function0<Boolean>(){
    @Override public Boolean invoke(){
      return modifierList != null && modifierList.hasModifier(KtTokens.DATA_KEYWORD);
    }
  }
);
  this.kind=storageManager.createLazyValue(new Function0<ClassKind>(){
    @Override public ClassKind invoke(){
      return (syntaxKind == ClassKind.CLASS && modifierList != null && modifierList.hasModifier(KtTokens.ANNOTATION_KEYWORD)) ? ClassKind.ANNOTATION_CLASS : syntaxKind;
    }
  }
);
  List<KtAnnotationEntry> annotationEntries=new ArrayList<KtAnnotationEntry>();
  if (classOrObject != null && classOrObject.getParent() instanceof KtObjectLiteralExpression) {
    annotationEntries.addAll(KtPsiUtilKt.getAnnotationEntries((KtObjectLiteralExpression)classOrObject.getParent()));
  }
  if (modifierList != null) {
    annotationEntries.addAll(modifierList.getAnnotationEntries());
  }
  if (!annotationEntries.isEmpty()) {
    this.annotations=new LazyAnnotations(new LazyAnnotationsContext(c.getAnnotationResolver(),storageManager,c.getTrace()){
      @NotNull @Override public LexicalScope getScope(){
        return getOuterScope();
      }
    }
,annotationEntries);
  }
 else {
    this.annotations=Annotations.Companion.getEMPTY();
  }
  List<KtAnnotationEntry> jetDanglingAnnotations=classLikeInfo.getDanglingAnnotations();
  if (jetDanglingAnnotations.isEmpty()) {
    this.danglingAnnotations=Annotations.Companion.getEMPTY();
  }
 else {
    this.danglingAnnotations=new LazyAnnotations(new LazyAnnotationsContext(c.getAnnotationResolver(),storageManager,c.getTrace()){
      @NotNull @Override public LexicalScope getScope(){
        return getScopeForMemberDeclarationResolution();
      }
    }
,jetDanglingAnnotations);
  }
  this.companionObjectDescriptor=storageManager.createNullableLazyValue(new Function0<LazyClassDescriptor>(){
    @Override public LazyClassDescriptor invoke(){
      return computeCompanionObjectDescriptor(getCompanionObjectIfAllowed());
    }
  }
);
  this.extraCompanionObjectDescriptors=storageManager.createMemoizedFunction(new Function1<KtObjectDeclaration,ClassDescriptor>(){
    @Override public ClassDescriptor invoke(    KtObjectDeclaration companionObject){
      return computeCompanionObjectDescriptor(companionObject);
    }
  }
);
  this.forceResolveAllContents=storageManager.createRecursionTolerantNullableLazyValue(new Function0<Void>(){
    @Override public Void invoke(){
      doForceResolveAllContents();
      return null;
    }
  }
,null);
  this.resolutionScopesSupport=new ClassResolutionScopesSupport(this,storageManager,new Function0<LexicalScope>(){
    @Override public LexicalScope invoke(){
      return getOuterScope();
    }
  }
);
  this.parameters=c.getStorageManager().createLazyValue(new Function0<List<TypeParameterDescriptor>>(){
    @Override public List<TypeParameterDescriptor> invoke(){
      KtClassLikeInfo classInfo=declarationProvider.getOwnerInfo();
      KtTypeParameterList typeParameterList=classInfo.getTypeParameterList();
      if (typeParameterList == null)       return Collections.emptyList();
      if (classInfo.getClassKind() == ClassKind.ENUM_CLASS) {
        c.getTrace().report(TYPE_PARAMETERS_IN_ENUM.on(typeParameterList));
      }
      List<KtTypeParameter> typeParameters=typeParameterList.getParameters();
      if (typeParameters.isEmpty())       return Collections.emptyList();
      List<TypeParameterDescriptor> parameters=new ArrayList<TypeParameterDescriptor>(typeParameters.size());
      for (int i=0; i < typeParameters.size(); i++) {
        parameters.add(new LazyTypeParameterDescriptor(c,LazyClassDescriptor.this,typeParameters.get(i),i));
      }
      return parameters;
    }
  }
);
  this.scopeForInitializerResolution=storageManager.createLazyValue(new Function0<LexicalScope>(){
    @Override public LexicalScope invoke(){
      return ClassResolutionScopesSupportKt.scopeForInitializerResolution(LazyClassDescriptor.this,createInitializerScopeParent(),classLikeInfo.getPrimaryConstructorParameters());
    }
  }
);
}
