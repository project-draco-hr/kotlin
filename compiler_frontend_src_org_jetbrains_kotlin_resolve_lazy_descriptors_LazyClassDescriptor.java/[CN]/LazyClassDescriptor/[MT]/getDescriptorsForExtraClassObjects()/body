{
  final JetObjectDeclaration allowedClassObject=getClassObjectIfAllowed();
  return KotlinPackage.map(KotlinPackage.filter(declarationProvider.getOwnerInfo().getClassObjects(),new Function1<JetObjectDeclaration,Boolean>(){
    @Override public Boolean invoke(    JetObjectDeclaration classObject){
      return classObject != allowedClassObject;
    }
  }
),new Function1<JetObjectDeclaration,ClassDescriptor>(){
    @Override public ClassDescriptor invoke(    JetObjectDeclaration classObject){
      return extraClassObjectDescriptors.invoke(classObject);
    }
  }
);
}
