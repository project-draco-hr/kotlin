{
  final JetObjectDeclaration allowedCompanionObject=getCompanionObjectIfAllowed();
  return KotlinPackage.map(KotlinPackage.filter(declarationProvider.getOwnerInfo().getCompanionObjects(),new Function1<JetObjectDeclaration,Boolean>(){
    @Override public Boolean invoke(    JetObjectDeclaration companionObject){
      return companionObject != allowedCompanionObject;
    }
  }
),new Function1<JetObjectDeclaration,ClassDescriptor>(){
    @Override public ClassDescriptor invoke(    JetObjectDeclaration companionObject){
      return extraCompanionObjectDescriptors.invoke(companionObject);
    }
  }
);
}
