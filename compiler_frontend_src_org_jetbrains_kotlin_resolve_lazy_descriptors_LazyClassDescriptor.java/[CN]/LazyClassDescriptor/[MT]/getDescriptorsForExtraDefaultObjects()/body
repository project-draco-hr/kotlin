{
  final JetObjectDeclaration allowedDefaultObject=getDefaultObjectIfAllowed();
  return KotlinPackage.map(KotlinPackage.filter(declarationProvider.getOwnerInfo().getDefaultObjects(),new Function1<JetObjectDeclaration,Boolean>(){
    @Override public Boolean invoke(    JetObjectDeclaration defaultObject){
      return defaultObject != allowedDefaultObject;
    }
  }
),new Function1<JetObjectDeclaration,ClassDescriptor>(){
    @Override public ClassDescriptor invoke(    JetObjectDeclaration defaultObject){
      return extraDefaultObjectDescriptors.invoke(defaultObject);
    }
  }
);
}
