{
  final PsiJavaFileStubImpl answer=new PsiJavaFileStubImpl(JetPsiUtil.getFQName(file).getFqName(),true);
  final Project project=getProject();
  final Stack<StubElement> stubStack=new Stack<StubElement>();
  final ClassBuilderFactory builderFactory=new ClassBuilderFactory(){
    @NotNull @Override public ClassBuilderMode getClassBuilderMode(){
      return ClassBuilderMode.SIGNATURES;
    }
    @Override public ClassBuilder newClassBuilder(){
      return new StubClassBuilder(stubStack);
    }
    @Override public String asText(    ClassBuilder builder){
      throw new UnsupportedOperationException("asText is not implemented");
    }
    @Override public byte[] asBytes(    ClassBuilder builder){
      throw new UnsupportedOperationException("asBytes is not implemented");
    }
  }
;
  AnalyzeExhaust context=AnalyzerFacadeForJVM.shallowAnalyzeFiles(JetFilesProvider.getInstance(project).sampleToAllFilesInModule().fun(file),CompilerSpecialMode.REGULAR,CompilerDependencies.compilerDependenciesForProduction(CompilerSpecialMode.REGULAR));
  if (context.isError()) {
    throw new IllegalStateException("failed to analyze: " + context.getError(),context.getError());
  }
  final GenerationState state=new GenerationState(project,builderFactory,context,Collections.singletonList(file)){
    @Override protected void generateNamespace(    JetFile namespace){
      PsiManager manager=PsiManager.getInstance(project);
      stubStack.push(answer);
      answer.setPsiFactory(new ClsWrapperStubPsiFactory());
      final ClsFileImpl fakeFile=new ClsFileImpl((PsiManagerImpl)manager,new ClassFileViewProvider(manager,file.getVirtualFile())){
        @NotNull @Override public PsiClassHolderFileStub getStub(){
          return answer;
        }
      }
;
      fakeFile.setPhysical(false);
      answer.setPsi(fakeFile);
      super.generateNamespace(namespace);
      final StubElement pop=stubStack.pop();
      if (pop != answer) {
        LOG.error("Unbalanced stack operations: " + pop);
      }
    }
  }
;
  state.compileCorrectFiles(CompilationErrorHandler.THROW_EXCEPTION);
  state.getFactory().files();
  return answer;
}
