{
  if (LightClassUtil.belongsToKotlinBuiltIns(file)) {
    logErrorWithOSInfo(null);
  }
  final PsiJavaFileStubImpl answer=new PsiJavaFileStubImpl(JetPsiUtil.getFQName(file).getFqName(),true);
  final Project project=getProject();
  final Stack<StubElement> stubStack=new Stack<StubElement>();
  final ClassBuilderFactory builderFactory=new ClassBuilderFactory(){
    @NotNull @Override public ClassBuilderMode getClassBuilderMode(){
      return ClassBuilderMode.SIGNATURES;
    }
    @Override public ClassBuilder newClassBuilder(){
      return new StubClassBuilder(stubStack);
    }
    @Override public String asText(    ClassBuilder builder){
      throw new UnsupportedOperationException("asText is not implemented");
    }
    @Override public byte[] asBytes(    ClassBuilder builder){
      throw new UnsupportedOperationException("asBytes is not implemented");
    }
  }
;
  AnalyzeExhaust context=AnalyzerFacadeForJVM.shallowAnalyzeFiles(JetFilesProvider.getInstance(project).sampleToAllFilesInModule().fun(file));
  if (context.isError()) {
    throw new IllegalStateException("failed to analyze: " + context.getError(),context.getError());
  }
  try {
    GenerationState state=new GenerationState(project,builderFactory,context,Collections.singletonList(file));
    GenerationStrategy strategy=new LightClassGenerationStrategy(this,stubStack,answer);
    strategy.compileCorrectFiles(state,CompilationErrorHandler.THROW_EXCEPTION);
    state.getFactory().files();
  }
 catch (  ProcessCanceledException e) {
    throw e;
  }
catch (  RuntimeException e) {
    logErrorWithOSInfo(e);
    throw e;
  }
  return answer;
}
