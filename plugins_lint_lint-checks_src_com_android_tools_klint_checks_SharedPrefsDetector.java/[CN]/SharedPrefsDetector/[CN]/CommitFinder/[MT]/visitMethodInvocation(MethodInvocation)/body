{
  if (node == mTarget) {
    mSeenTarget=true;
  }
 else   if (mAllowCommitBeforeTarget || mSeenTarget || node.astOperand() == mTarget) {
    String name=node.astName().astValue();
    boolean isCommit="commit".equals(name);
    if (isCommit || "apply".equals(name)) {
      mFound=true;
      ResolvedNode resolved=mContext.resolve(node);
      if (resolved instanceof JavaParser.ResolvedMethod) {
        ResolvedMethod method=(ResolvedMethod)resolved;
        JavaParser.ResolvedClass clz=method.getContainingClass();
        if (clz.isSubclassOf("android.content.SharedPreferences.Editor",false) && mContext.getProject().getMinSdkVersion().getApiLevel() >= 9) {
          Node parent=node.getParent();
          boolean returnValueIgnored=false;
          if (parent instanceof MethodDeclaration || parent instanceof ConstructorDeclaration || parent instanceof ClassDeclaration|| parent instanceof Block|| parent instanceof ExpressionStatement) {
            returnValueIgnored=true;
          }
 else           if (parent instanceof Statement) {
            if (parent instanceof If) {
              returnValueIgnored=((If)parent).astCondition() != node;
            }
 else             if (parent instanceof Return) {
              returnValueIgnored=false;
            }
 else             if (parent instanceof VariableDeclaration) {
              returnValueIgnored=false;
            }
 else             if (parent instanceof For) {
              returnValueIgnored=((For)parent).astCondition() != node;
            }
 else             if (parent instanceof While) {
              returnValueIgnored=((While)parent).astCondition() != node;
            }
 else             if (parent instanceof DoWhile) {
              returnValueIgnored=((DoWhile)parent).astCondition() != node;
            }
 else             if (parent instanceof Case) {
              returnValueIgnored=((Case)parent).astCondition() != node;
            }
 else             if (parent instanceof Assert) {
              returnValueIgnored=((Assert)parent).astAssertion() != node;
            }
 else {
              returnValueIgnored=true;
            }
          }
          if (returnValueIgnored && isCommit) {
            String message="Consider using `apply()` instead; `commit` writes " + "its data to persistent storage immediately, whereas " + "`apply` will handle it in the background";
            mContext.report(ISSUE,node,mContext.getLocation(node),message);
          }
        }
      }
    }
  }
  return super.visitMethodInvocation(node);
}
