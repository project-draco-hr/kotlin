{
  BindingContext context=WholeProjectAnalyzerFacade.analyzeProjectWithCacheOnAFile((JetFile)position.getContainingFile());
  JetExpression receiverExpression=expression.getReceiverExpression();
  if (receiverExpression != null) {
    JetType expressionType=context.get(BindingContext.EXPRESSION_TYPE,receiverExpression);
    JetScope scope=context.get(BindingContext.RESOLUTION_SCOPE,receiverExpression);
    if (expressionType != null && scope != null) {
      JetShortNamesCache namesCache=JetCacheManager.getInstance(position.getProject()).getNamesCache();
      Collection<String> extensionFunctionsNames=namesCache.getAllJetExtensionFunctionsNames(GlobalSearchScope.allScope(position.getProject()));
      Set<String> functionFQNs=new HashSet<String>();
      for (      String name : extensionFunctionsNames) {
        if (result.getPrefixMatcher().prefixMatches(name)) {
          Collection<PsiElement> extensionFunctions=namesCache.getJetExtensionFunctionsByName(name,GlobalSearchScope.allScope(position.getProject()));
          for (          PsiElement extensionFunction : extensionFunctions) {
            if (extensionFunction instanceof JetNamedFunction) {
              functionFQNs.add(JetPsiUtil.getFQName((JetNamedFunction)extensionFunction));
            }
 else             if (extensionFunction instanceof PsiMethod) {
              PsiMethod function=(PsiMethod)extensionFunction;
              PsiClass containingClass=function.getContainingClass();
              if (containingClass != null) {
                String classFQN=containingClass.getQualifiedName();
                if (classFQN != null) {
                  String classParentFQN=QualifiedNamesUtil.withoutLastSegment(classFQN);
                  functionFQNs.add(QualifiedNamesUtil.combine(classParentFQN,function.getName()));
                }
              }
            }
          }
        }
      }
      for (      String functionFQN : functionFQNs) {
        for (        CallableDescriptor functionDescriptor : ExpressionTypingUtils.canFindSuitableCall(functionFQN,position.getProject(),receiverExpression,expressionType,scope)) {
          result.addElement(DescriptorLookupConverter.createLookupElement(context,functionDescriptor));
        }
      }
    }
  }
}
