{
  try {
    this.builtInsModule=new ModuleDescriptor(Name.special("<built-ins lazy module>"));
    this.analyzer=createLazyResolveSession(project);
    this.functionClassesSet=computeIndexedClasses("Function",getFunctionTraitCount());
    this.extensionFunctionClassesSet=computeIndexedClasses("ExtensionFunction",getFunctionTraitCount());
    this.primitiveTypeToClass=new EnumMap<PrimitiveType,ClassDescriptor>(PrimitiveType.class);
    this.primitiveTypeToJetType=new EnumMap<PrimitiveType,JetType>(PrimitiveType.class);
    this.primitiveTypeToNullableJetType=new EnumMap<PrimitiveType,JetType>(PrimitiveType.class);
    this.primitiveTypeToArrayClass=new EnumMap<PrimitiveType,ClassDescriptor>(PrimitiveType.class);
    this.primitiveTypeToArrayJetType=new EnumMap<PrimitiveType,JetType>(PrimitiveType.class);
    this.primitiveJetTypeToJetArrayType=new HashMap<JetType,JetType>();
    this.jetArrayTypeToPrimitiveJetType=new HashMap<JetType,JetType>();
    this.nothingClass=getBuiltInClassByName("Nothing");
    this.arrayClass=getBuiltInClassByName("Array");
    this.deprecatedAnnotationClass=getBuiltInClassByName("deprecated");
    this.dataAnnotationClass=getBuiltInClassByName("data");
    this.functionClasses=new ClassDescriptor[getFunctionTraitCount()];
    for (int i=0; i < functionClasses.length; i++) {
      functionClasses[i]=getBuiltInClassByName("Function" + i);
    }
  }
 catch (  IOException e) {
    throw new IllegalStateException(e);
  }
}
