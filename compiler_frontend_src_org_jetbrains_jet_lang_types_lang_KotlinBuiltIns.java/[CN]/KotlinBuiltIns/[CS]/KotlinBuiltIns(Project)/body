{
  try {
    this.builtInsModule=new ModuleDescriptor(Name.special("<built-ins lazy module>"));
    this.resolveSession=createLazyResolveSession(project);
    this.functionClassesSet=computeIndexedClasses("Function",getFunctionTraitCount());
    this.extensionFunctionClassesSet=computeIndexedClasses("ExtensionFunction",getFunctionTraitCount());
    this.tupleClassesSet=computeIndexedClasses("Tuple",getFunctionTraitCount());
    this.primitiveTypeToClass=new EnumMap<PrimitiveType,ClassDescriptor>(PrimitiveType.class);
    this.primitiveTypeToJetType=new EnumMap<PrimitiveType,JetType>(PrimitiveType.class);
    this.primitiveTypeToNullableJetType=new EnumMap<PrimitiveType,JetType>(PrimitiveType.class);
    this.primitiveTypeToArrayClass=new EnumMap<PrimitiveType,ClassDescriptor>(PrimitiveType.class);
    this.primitiveTypeToArrayJetType=new EnumMap<PrimitiveType,JetType>(PrimitiveType.class);
    this.primitiveJetTypeToJetArrayType=new HashMap<JetType,JetType>();
    this.jetArrayTypeToPrimitiveJetType=new HashMap<JetType,JetType>();
  }
 catch (  IOException e) {
    throw new IllegalStateException(e);
  }
catch (  ProcessCanceledException e) {
    throw e;
  }
}
