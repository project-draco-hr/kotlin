{
  boolean nestedClass=classOrObject.getParent() != classOrObject.getContainingFile();
  Collection<String> psiModifiers=Sets.newHashSet();
  List<Pair<JetKeywordToken,String>> jetTokenToPsiModifier=Lists.newArrayList(Pair.create(PUBLIC_KEYWORD,PsiModifier.PUBLIC),Pair.create(INTERNAL_KEYWORD,PsiModifier.PUBLIC),Pair.create(PROTECTED_KEYWORD,PsiModifier.PROTECTED),Pair.create(FINAL_KEYWORD,PsiModifier.FINAL));
  for (  Pair<JetKeywordToken,String> tokenAndModifier : jetTokenToPsiModifier) {
    if (classOrObject.hasModifier(tokenAndModifier.first)) {
      psiModifiers.add(tokenAndModifier.second);
    }
  }
  if (classOrObject.hasModifier(PRIVATE_KEYWORD)) {
    psiModifiers.add(nestedClass ? PsiModifier.PRIVATE : PsiModifier.PUBLIC);
  }
  if (!psiModifiers.contains(PsiModifier.PRIVATE) && !psiModifiers.contains(PsiModifier.PROTECTED)) {
    psiModifiers.add(PsiModifier.PUBLIC);
  }
  if (isAbstract(classOrObject)) {
    psiModifiers.add(PsiModifier.ABSTRACT);
  }
 else   if (!classOrObject.hasModifier(OPEN_KEYWORD)) {
    psiModifiers.add(PsiModifier.FINAL);
  }
  if (nestedClass && !classOrObject.hasModifier(INNER_KEYWORD)) {
    psiModifiers.add(PsiModifier.STATIC);
  }
  return psiModifiers.toArray(new String[psiModifiers.size()]);
}
