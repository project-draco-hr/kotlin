{
  super(parentDisposable);
  this.configuration=configuration;
  registerFileType(JetFileType.INSTANCE,"kt");
  registerFileType(JetFileType.INSTANCE,"kts");
  registerFileType(JetFileType.INSTANCE,"ktm");
  registerFileType(JetFileType.INSTANCE,JetParser.KTSCRIPT_FILE_SUFFIX);
  registerFileType(JetFileType.INSTANCE,"jet");
  registerParserDefinition(new JavaParserDefinition());
  registerParserDefinition(new JetParserDefinition());
  projectEnvironment=new JavaCoreProjectEnvironment(parentDisposable,this);
  MockProject project=projectEnvironment.getProject();
  project.registerService(JetFilesProvider.class,new CliJetFilesProvider(this));
  project.registerService(CoreJavaFileManager.class,(CoreJavaFileManager)ServiceManager.getService(project,JavaFileManager.class));
  Extensions.getArea(project).getExtensionPoint(PsiElementFinder.EP_NAME).registerExtension(new JavaElementFinder(project));
  annotationsProvider=new CoreAnnotationsProvider();
  project.registerService(ExternalAnnotationsProvider.class,annotationsProvider);
  for (  File path : configuration.getList(JVMConfigurationKeys.CLASSPATH_KEY)) {
    addToClasspath(path);
  }
  for (  File path : configuration.getList(JVMConfigurationKeys.ANNOTATIONS_PATH_KEY)) {
    addExternalAnnotationsRoot(PathUtil.jarFileOrDirectoryToVirtualFile(path));
  }
  for (  String path : configuration.getList(CommonConfigurationKeys.SOURCE_ROOTS_KEY)) {
    addSources(path);
  }
  JetStandardLibrary.initialize(project);
  initialized=true;
}
