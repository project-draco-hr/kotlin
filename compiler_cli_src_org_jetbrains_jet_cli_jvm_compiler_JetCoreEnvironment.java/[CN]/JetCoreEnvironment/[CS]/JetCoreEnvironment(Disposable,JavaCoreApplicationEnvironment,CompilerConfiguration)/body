{
  this.configuration=configuration.copy();
  this.configuration.setReadOnly(true);
  projectEnvironment=new JavaCoreProjectEnvironment(parentDisposable,applicationEnvironment);
  MockProject project=projectEnvironment.getProject();
  project.registerService(JetScriptDefinitionProvider.class,new JetScriptDefinitionProvider());
  project.registerService(JetFilesProvider.class,new CliJetFilesProvider(this));
  project.registerService(CoreJavaFileManager.class,(CoreJavaFileManager)ServiceManager.getService(project,JavaFileManager.class));
  CliLightClassGenerationSupport cliLightClassGenerationSupport=new CliLightClassGenerationSupport();
  project.registerService(LightClassGenerationSupport.class,cliLightClassGenerationSupport);
  project.registerService(CliLightClassGenerationSupport.class,cliLightClassGenerationSupport);
  Extensions.getArea(project).getExtensionPoint(PsiElementFinder.EP_NAME).registerExtension(new JavaElementFinder(project,cliLightClassGenerationSupport));
  CoreApplicationEnvironment.registerExtensionPoint(Extensions.getRootArea(),ClsCustomNavigationPolicy.EP_NAME,ClsCustomNavigationPolicy.class);
  CoreApplicationEnvironment.registerExtensionPoint(Extensions.getRootArea(),ClassFileDecompilers.EP_NAME,ClassFileDecompilers.Decompiler.class);
  annotationsManager=new CoreExternalAnnotationsManager(project.getComponent(PsiManager.class));
  project.registerService(ExternalAnnotationsManager.class,annotationsManager);
  for (  File path : configuration.getList(JVMConfigurationKeys.CLASSPATH_KEY)) {
    addToClasspath(path);
  }
  for (  File path : configuration.getList(JVMConfigurationKeys.ANNOTATIONS_PATH_KEY)) {
    addExternalAnnotationsRoot(path);
  }
  for (  String path : configuration.getList(CommonConfigurationKeys.SOURCE_ROOTS_KEY)) {
    addSources(path);
  }
  JetScriptDefinitionProvider.getInstance(project).addScriptDefinitions(configuration.getList(CommonConfigurationKeys.SCRIPT_DEFINITIONS_KEY));
  project.registerService(VirtualFileFinder.class,new CliVirtualFileFinder(classPath));
  project.registerService(PsiDocumentManager.class,new MockPsiDocumentManager());
}
