{
  this.project=project;
  this.globalContext=globalContext;
  this.storageManager=globalContext.getStorageManager();
  this.bindingTrace=bindingTrace;
  this.moduleDescriptor=moduleDescriptor;
  this.platformToKotlinClassMap=moduleDescriptor.getPlatformToKotlinClassMap();
  this.topDownAnalyzer=new TopDownAnalyzer();
  this.lazyTopDownAnalyzer=new LazyTopDownAnalyzer();
  this.mutablePackageFragmentProvider=new MutablePackageFragmentProvider(getModuleDescriptor());
  this.javaClassFinder=new JavaClassFinderImpl();
  this.virtualFileFinder=org.jetbrains.jet.lang.resolve.kotlin.VirtualFileFinder.SERVICE.getInstance(project);
  this.traceBasedErrorReporter=new TraceBasedErrorReporter();
  this.deserializedDescriptorResolver=new DeserializedDescriptorResolver(traceBasedErrorReporter);
  this.psiBasedExternalAnnotationResolver=new PsiBasedExternalAnnotationResolver();
  this.traceBasedExternalSignatureResolver=new TraceBasedExternalSignatureResolver();
  this.psiBasedMethodSignatureChecker=new PsiBasedMethodSignatureChecker();
  this.traceBasedJavaResolverCache=new TraceBasedJavaResolverCache();
  this.javaPropertyInitializerEvaluator=new JavaPropertyInitializerEvaluatorImpl();
  this.samConversionResolver=SamConversionResolverImpl.INSTANCE$;
  this.javaSourceElementFactory=new JavaSourceElementFactoryImpl();
  this.singleModuleClassResolver=new SingleModuleClassResolver();
  this.globalJavaResolverContext=new GlobalJavaResolverContext(storageManager,javaClassFinder,virtualFileFinder,deserializedDescriptorResolver,psiBasedExternalAnnotationResolver,traceBasedExternalSignatureResolver,traceBasedErrorReporter,psiBasedMethodSignatureChecker,traceBasedJavaResolverCache,javaPropertyInitializerEvaluator,samConversionResolver,javaSourceElementFactory,singleModuleClassResolver);
  this.lazyJavaPackageFragmentProvider=new LazyJavaPackageFragmentProvider(globalJavaResolverContext,getModuleDescriptor());
  this.javaDescriptorResolver=new JavaDescriptorResolver(lazyJavaPackageFragmentProvider,getModuleDescriptor());
  this.javaClassDataFinder=new JavaClassDataFinder(virtualFileFinder,deserializedDescriptorResolver);
  this.binaryClassAnnotationAndConstantLoader=new BinaryClassAnnotationAndConstantLoader(getModuleDescriptor(),storageManager,virtualFileFinder,traceBasedErrorReporter);
  this.deserializationComponentsForJava=new DeserializationComponentsForJava(storageManager,getModuleDescriptor(),javaClassDataFinder,binaryClassAnnotationAndConstantLoader,lazyJavaPackageFragmentProvider);
  this.additionalCheckerProvider=org.jetbrains.jet.lang.resolve.kotlin.JavaDeclarationCheckerProvider.INSTANCE$;
  this.globalSearchScope=com.intellij.psi.search.GlobalSearchScope.allScope(project);
  this.javaFlexibleTypeCapabilitiesProvider=new JavaFlexibleTypeCapabilitiesProvider();
  this.bodyResolver=new BodyResolver();
  this.annotationResolver=new AnnotationResolver();
  this.callResolver=new CallResolver();
  this.argumentTypeResolver=new ArgumentTypeResolver();
  this.expressionTypingComponents=new ExpressionTypingComponents();
  this.expressionTypingServices=new ExpressionTypingServices(expressionTypingComponents);
  this.controlStructureTypingUtils=new ControlStructureTypingUtils(expressionTypingServices);
  this.expressionTypingUtils=new ExpressionTypingUtils(expressionTypingServices,callResolver);
  this.forLoopConventionsChecker=new ForLoopConventionsChecker();
  this.reflectionTypes=new ReflectionTypes(getModuleDescriptor());
  this.callExpressionResolver=new CallExpressionResolver();
  this.descriptorResolver=new DescriptorResolver();
  this.delegatedPropertyResolver=new DelegatedPropertyResolver();
  this.qualifiedExpressionResolver=new QualifiedExpressionResolver();
  this.lazinessToken=new LazinessToken();
  this.typeResolver=new TypeResolver(annotationResolver,qualifiedExpressionResolver,getModuleDescriptor(),javaFlexibleTypeCapabilitiesProvider,storageManager,lazinessToken);
  this.callResolverExtensionProvider=new CallResolverExtensionProvider();
  this.partialBodyResolveProvider=new PartialBodyResolveProvider();
  this.candidateResolver=new CandidateResolver();
  this.callCompleter=new CallCompleter(argumentTypeResolver,candidateResolver);
  this.taskPrioritizer=new TaskPrioritizer(storageManager);
  this.controlFlowAnalyzer=new ControlFlowAnalyzer();
  this.declarationsChecker=new DeclarationsChecker();
  this.modifiersChecker=new ModifiersChecker(bindingTrace,additionalCheckerProvider);
  this.functionAnalyzerExtension=new FunctionAnalyzerExtension();
  this.scriptBodyResolver=new ScriptBodyResolver();
  this.declarationResolver=new DeclarationResolver();
  this.importsResolver=new ImportsResolver();
  this.jetImportsFactory=new JetImportsFactory();
  this.overloadResolver=new OverloadResolver();
  this.overrideResolver=new OverrideResolver();
  this.typeHierarchyResolver=new TypeHierarchyResolver();
  this.scriptHeaderResolver=new ScriptHeaderResolver();
  this.topDownAnalyzer.setAdditionalCheckerProvider(additionalCheckerProvider);
  this.topDownAnalyzer.setBodyResolver(bodyResolver);
  this.topDownAnalyzer.setDeclarationResolver(declarationResolver);
  this.topDownAnalyzer.setLazyTopDownAnalyzer(lazyTopDownAnalyzer);
  this.topDownAnalyzer.setModuleDescriptor(moduleDescriptor);
  this.topDownAnalyzer.setOverloadResolver(overloadResolver);
  this.topDownAnalyzer.setOverrideResolver(overrideResolver);
  this.topDownAnalyzer.setPackageFragmentProvider(mutablePackageFragmentProvider);
  this.topDownAnalyzer.setProject(project);
  this.topDownAnalyzer.setTrace(bindingTrace);
  this.topDownAnalyzer.setTypeHierarchyResolver(typeHierarchyResolver);
  this.lazyTopDownAnalyzer.setBodyResolver(bodyResolver);
  this.lazyTopDownAnalyzer.setDeclarationResolver(declarationResolver);
  this.lazyTopDownAnalyzer.setModuleDescriptor(moduleDescriptor);
  this.lazyTopDownAnalyzer.setOverloadResolver(overloadResolver);
  this.lazyTopDownAnalyzer.setOverrideResolver(overrideResolver);
  this.lazyTopDownAnalyzer.setTrace(bindingTrace);
  javaClassFinder.setProject(project);
  javaClassFinder.setScope(globalSearchScope);
  traceBasedExternalSignatureResolver.setExternalAnnotationResolver(psiBasedExternalAnnotationResolver);
  traceBasedExternalSignatureResolver.setProject(project);
  traceBasedExternalSignatureResolver.setTrace(bindingTrace);
  traceBasedJavaResolverCache.setTrace(bindingTrace);
  traceBasedErrorReporter.setTrace(bindingTrace);
  psiBasedMethodSignatureChecker.setExternalAnnotationResolver(psiBasedExternalAnnotationResolver);
  psiBasedMethodSignatureChecker.setExternalSignatureResolver(traceBasedExternalSignatureResolver);
  singleModuleClassResolver.setResolver(javaDescriptorResolver);
  bodyResolver.setAnnotationResolver(annotationResolver);
  bodyResolver.setCallResolver(callResolver);
  bodyResolver.setControlFlowAnalyzer(controlFlowAnalyzer);
  bodyResolver.setDeclarationsChecker(declarationsChecker);
  bodyResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);
  bodyResolver.setExpressionTypingServices(expressionTypingServices);
  bodyResolver.setFunctionAnalyzerExtension(functionAnalyzerExtension);
  bodyResolver.setScriptBodyResolverResolver(scriptBodyResolver);
  bodyResolver.setTrace(bindingTrace);
  annotationResolver.setCallResolver(callResolver);
  annotationResolver.setStorageManager(storageManager);
  annotationResolver.setTypeResolver(typeResolver);
  callResolver.setArgumentTypeResolver(argumentTypeResolver);
  callResolver.setCallCompleter(callCompleter);
  callResolver.setCandidateResolver(candidateResolver);
  callResolver.setExpressionTypingServices(expressionTypingServices);
  callResolver.setTaskPrioritizer(taskPrioritizer);
  callResolver.setTypeResolver(typeResolver);
  argumentTypeResolver.setExpressionTypingServices(expressionTypingServices);
  argumentTypeResolver.setTypeResolver(typeResolver);
  expressionTypingServices.setAnnotationResolver(annotationResolver);
  expressionTypingServices.setCallExpressionResolver(callExpressionResolver);
  expressionTypingServices.setCallResolver(callResolver);
  expressionTypingServices.setDescriptorResolver(descriptorResolver);
  expressionTypingServices.setExtensionProvider(callResolverExtensionProvider);
  expressionTypingServices.setPartialBodyResolveProvider(partialBodyResolveProvider);
  expressionTypingServices.setProject(project);
  expressionTypingServices.setTypeResolver(typeResolver);
  expressionTypingComponents.setAdditionalCheckerProvider(additionalCheckerProvider);
  expressionTypingComponents.setCallResolver(callResolver);
  expressionTypingComponents.setControlStructureTypingUtils(controlStructureTypingUtils);
  expressionTypingComponents.setExpressionTypingServices(expressionTypingServices);
  expressionTypingComponents.setExpressionTypingUtils(expressionTypingUtils);
  expressionTypingComponents.setForLoopConventionsChecker(forLoopConventionsChecker);
  expressionTypingComponents.setGlobalContext(globalContext);
  expressionTypingComponents.setPlatformToKotlinClassMap(platformToKotlinClassMap);
  expressionTypingComponents.setReflectionTypes(reflectionTypes);
  forLoopConventionsChecker.setExpressionTypingServices(expressionTypingServices);
  forLoopConventionsChecker.setExpressionTypingUtils(expressionTypingUtils);
  forLoopConventionsChecker.setProject(project);
  callExpressionResolver.setExpressionTypingServices(expressionTypingServices);
  descriptorResolver.setAnnotationResolver(annotationResolver);
  descriptorResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);
  descriptorResolver.setExpressionTypingServices(expressionTypingServices);
  descriptorResolver.setStorageManager(storageManager);
  descriptorResolver.setTypeResolver(typeResolver);
  delegatedPropertyResolver.setCallResolver(callResolver);
  delegatedPropertyResolver.setExpressionTypingServices(expressionTypingServices);
  candidateResolver.setArgumentTypeResolver(argumentTypeResolver);
  controlFlowAnalyzer.setTrace(bindingTrace);
  declarationsChecker.setDescriptorResolver(descriptorResolver);
  declarationsChecker.setModifiersChecker(modifiersChecker);
  declarationsChecker.setTrace(bindingTrace);
  functionAnalyzerExtension.setTrace(bindingTrace);
  scriptBodyResolver.setExpressionTypingServices(expressionTypingServices);
  declarationResolver.setAnnotationResolver(annotationResolver);
  declarationResolver.setDescriptorResolver(descriptorResolver);
  declarationResolver.setImportsResolver(importsResolver);
  declarationResolver.setTrace(bindingTrace);
  importsResolver.setImportsFactory(jetImportsFactory);
  importsResolver.setModuleDescriptor(moduleDescriptor);
  importsResolver.setQualifiedExpressionResolver(qualifiedExpressionResolver);
  importsResolver.setTrace(bindingTrace);
  jetImportsFactory.setProject(project);
  overloadResolver.setTrace(bindingTrace);
  overrideResolver.setTrace(bindingTrace);
  typeHierarchyResolver.setDescriptorResolver(descriptorResolver);
  typeHierarchyResolver.setImportsResolver(importsResolver);
  typeHierarchyResolver.setPackageFragmentProvider(mutablePackageFragmentProvider);
  typeHierarchyResolver.setScriptHeaderResolver(scriptHeaderResolver);
  typeHierarchyResolver.setTrace(bindingTrace);
  scriptHeaderResolver.setPackageFragmentProvider(mutablePackageFragmentProvider);
  scriptHeaderResolver.setTrace(bindingTrace);
  deserializedDescriptorResolver.setComponents(deserializationComponentsForJava);
  javaClassFinder.initialize();
}
