{
  this.topDownAnalyzer=new TopDownAnalyzer();
  this.topDownAnalysisContext=new TopDownAnalysisContext();
  this.bodyResolver=new BodyResolver();
  this.controlFlowAnalyzer=new ControlFlowAnalyzer();
  this.declarationsChecker=new DeclarationsChecker();
  this.descriptorResolver=new DescriptorResolver();
  this.callResolverExtensionProvider=new CallResolverExtensionProvider();
  this.project=project;
  this.topDownAnalysisParameters=topDownAnalysisParameters;
  this.bindingTrace=bindingTrace;
  this.moduleDescriptor=moduleDescriptor;
  this.javaDescriptorResolver=new JavaDescriptorResolver();
  this.javaToKotlinClassMap=org.jetbrains.jet.lang.resolve.java.mapping.JavaToKotlinClassMap.getInstance();
  this.javaClassFinder=new JavaClassFinderImpl();
  this.traceBasedExternalSignatureResolver=new TraceBasedExternalSignatureResolver();
  this.traceBasedJavaResolverCache=new TraceBasedJavaResolverCache();
  this.traceBasedErrorReporter=new TraceBasedErrorReporter();
  this.psiBasedMethodSignatureChecker=new PsiBasedMethodSignatureChecker();
  this.psiBasedExternalAnnotationResolver=new PsiBasedExternalAnnotationResolver();
  this.mutablePackageFragmentProvider=new MutablePackageFragmentProvider(getModuleDescriptor());
  this.namespaceFactory=new NamespaceFactoryImpl();
  this.javaPackageFragmentProvider=new JavaPackageFragmentProviderImpl();
  this.virtualFileFinder=com.intellij.openapi.components.ServiceManager.getService(project,VirtualFileFinder.class);
  this.declarationResolver=new DeclarationResolver();
  this.annotationResolver=new AnnotationResolver();
  this.callResolver=new CallResolver();
  this.argumentTypeResolver=new ArgumentTypeResolver();
  this.expressionTypingServices=new ExpressionTypingServices();
  this.callExpressionResolver=new CallExpressionResolver();
  this.typeResolver=new TypeResolver();
  this.qualifiedExpressionResolver=new QualifiedExpressionResolver();
  this.candidateResolver=new CandidateResolver();
  this.importsResolver=new ImportsResolver();
  this.jetImportsFactory=new JetImportsFactory();
  this.scriptHeaderResolver=new ScriptHeaderResolver();
  this.overloadResolver=new OverloadResolver();
  this.overrideResolver=new OverrideResolver();
  this.typeHierarchyResolver=new TypeHierarchyResolver();
  this.delegatedPropertyResolver=new DelegatedPropertyResolver();
  this.functionAnalyzerExtension=new FunctionAnalyzerExtension();
  this.scriptBodyResolver=new ScriptBodyResolver();
  this.javaClassResolver=new JavaClassResolver();
  this.javaAnnotationResolver=new JavaAnnotationResolver();
  this.javaAnnotationArgumentResolver=new JavaAnnotationArgumentResolver();
  this.javaTypeTransformer=new JavaTypeTransformer();
  this.deserializedDescriptorResolver=new DeserializedDescriptorResolver();
  this.annotationDescriptorDeserializer=new AnnotationDescriptorDeserializer();
  this.javaFunctionResolver=new JavaFunctionResolver();
  this.javaTypeParameterResolver=new JavaTypeParameterResolver();
  this.javaValueParameterResolver=new JavaValueParameterResolver();
  this.javaMemberResolver=new JavaMemberResolver();
  this.javaConstructorResolver=new JavaConstructorResolver();
  this.javaPropertyResolver=new JavaPropertyResolver();
  this.javaSupertypeResolver=new JavaSupertypeResolver();
  this.topDownAnalyzer.setBodyResolver(bodyResolver);
  this.topDownAnalyzer.setContext(topDownAnalysisContext);
  this.topDownAnalyzer.setDeclarationResolver(declarationResolver);
  this.topDownAnalyzer.setModuleDescriptor(moduleDescriptor);
  this.topDownAnalyzer.setOverloadResolver(overloadResolver);
  this.topDownAnalyzer.setOverrideResolver(overrideResolver);
  this.topDownAnalyzer.setPackageFragmentProvider(mutablePackageFragmentProvider);
  this.topDownAnalyzer.setTopDownAnalysisParameters(topDownAnalysisParameters);
  this.topDownAnalyzer.setTrace(bindingTrace);
  this.topDownAnalyzer.setTypeHierarchyResolver(typeHierarchyResolver);
  this.topDownAnalysisContext.setTopDownAnalysisParameters(topDownAnalysisParameters);
  this.bodyResolver.setAnnotationResolver(annotationResolver);
  this.bodyResolver.setCallResolver(callResolver);
  this.bodyResolver.setContext(topDownAnalysisContext);
  this.bodyResolver.setControlFlowAnalyzer(controlFlowAnalyzer);
  this.bodyResolver.setDeclarationsChecker(declarationsChecker);
  this.bodyResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);
  this.bodyResolver.setExpressionTypingServices(expressionTypingServices);
  this.bodyResolver.setFunctionAnalyzerExtension(functionAnalyzerExtension);
  this.bodyResolver.setScriptBodyResolverResolver(scriptBodyResolver);
  this.bodyResolver.setTopDownAnalysisParameters(topDownAnalysisParameters);
  this.bodyResolver.setTrace(bindingTrace);
  this.controlFlowAnalyzer.setTopDownAnalysisParameters(topDownAnalysisParameters);
  this.controlFlowAnalyzer.setTrace(bindingTrace);
  this.declarationsChecker.setTrace(bindingTrace);
  this.descriptorResolver.setAnnotationResolver(annotationResolver);
  this.descriptorResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);
  this.descriptorResolver.setExpressionTypingServices(expressionTypingServices);
  this.descriptorResolver.setTypeResolver(typeResolver);
  javaDescriptorResolver.setClassResolver(javaClassResolver);
  javaDescriptorResolver.setPackageFragmentProvider(javaPackageFragmentProvider);
  javaClassFinder.setProject(project);
  traceBasedExternalSignatureResolver.setAnnotationResolver(javaAnnotationResolver);
  traceBasedExternalSignatureResolver.setTrace(bindingTrace);
  traceBasedJavaResolverCache.setTrace(bindingTrace);
  traceBasedErrorReporter.setTrace(bindingTrace);
  psiBasedMethodSignatureChecker.setAnnotationResolver(javaAnnotationResolver);
  psiBasedMethodSignatureChecker.setExternalSignatureResolver(traceBasedExternalSignatureResolver);
  namespaceFactory.setModule(moduleDescriptor);
  namespaceFactory.setPackageFragmentProvider(mutablePackageFragmentProvider);
  namespaceFactory.setTrace(bindingTrace);
  this.javaPackageFragmentProvider.setCache(traceBasedJavaResolverCache);
  this.javaPackageFragmentProvider.setDeserializedDescriptorResolver(deserializedDescriptorResolver);
  this.javaPackageFragmentProvider.setJavaClassFinder(javaClassFinder);
  this.javaPackageFragmentProvider.setJavaDescriptorResolver(javaDescriptorResolver);
  this.javaPackageFragmentProvider.setKotlinClassFinder(virtualFileFinder);
  this.javaPackageFragmentProvider.setMemberResolver(javaMemberResolver);
  this.javaPackageFragmentProvider.setModule(moduleDescriptor);
  declarationResolver.setAnnotationResolver(annotationResolver);
  declarationResolver.setContext(topDownAnalysisContext);
  declarationResolver.setDescriptorResolver(descriptorResolver);
  declarationResolver.setImportsResolver(importsResolver);
  declarationResolver.setScriptHeaderResolver(scriptHeaderResolver);
  declarationResolver.setTrace(bindingTrace);
  annotationResolver.setCallResolver(callResolver);
  annotationResolver.setExpressionTypingServices(expressionTypingServices);
  callResolver.setArgumentTypeResolver(argumentTypeResolver);
  callResolver.setCandidateResolver(candidateResolver);
  callResolver.setExpressionTypingServices(expressionTypingServices);
  callResolver.setTypeResolver(typeResolver);
  argumentTypeResolver.setExpressionTypingServices(expressionTypingServices);
  argumentTypeResolver.setTypeResolver(typeResolver);
  expressionTypingServices.setAnnotationResolver(annotationResolver);
  expressionTypingServices.setCallExpressionResolver(callExpressionResolver);
  expressionTypingServices.setCallResolver(callResolver);
  expressionTypingServices.setDescriptorResolver(descriptorResolver);
  expressionTypingServices.setExtensionProvider(callResolverExtensionProvider);
  expressionTypingServices.setPlatformToKotlinClassMap(javaToKotlinClassMap);
  expressionTypingServices.setProject(project);
  expressionTypingServices.setTypeResolver(typeResolver);
  callExpressionResolver.setExpressionTypingServices(expressionTypingServices);
  typeResolver.setAnnotationResolver(annotationResolver);
  typeResolver.setModuleDescriptor(moduleDescriptor);
  typeResolver.setQualifiedExpressionResolver(qualifiedExpressionResolver);
  candidateResolver.setArgumentTypeResolver(argumentTypeResolver);
  importsResolver.setContext(topDownAnalysisContext);
  importsResolver.setImportsFactory(jetImportsFactory);
  importsResolver.setModuleDescriptor(moduleDescriptor);
  importsResolver.setQualifiedExpressionResolver(qualifiedExpressionResolver);
  importsResolver.setTrace(bindingTrace);
  jetImportsFactory.setProject(project);
  scriptHeaderResolver.setContext(topDownAnalysisContext);
  scriptHeaderResolver.setDependencyClassByQualifiedNameResolver(javaDescriptorResolver);
  scriptHeaderResolver.setNamespaceFactory(namespaceFactory);
  scriptHeaderResolver.setTopDownAnalysisParameters(topDownAnalysisParameters);
  scriptHeaderResolver.setTrace(bindingTrace);
  overloadResolver.setContext(topDownAnalysisContext);
  overloadResolver.setTrace(bindingTrace);
  overrideResolver.setContext(topDownAnalysisContext);
  overrideResolver.setTopDownAnalysisParameters(topDownAnalysisParameters);
  overrideResolver.setTrace(bindingTrace);
  typeHierarchyResolver.setContext(topDownAnalysisContext);
  typeHierarchyResolver.setDescriptorResolver(descriptorResolver);
  typeHierarchyResolver.setImportsResolver(importsResolver);
  typeHierarchyResolver.setNamespaceFactory(namespaceFactory);
  typeHierarchyResolver.setScriptHeaderResolver(scriptHeaderResolver);
  typeHierarchyResolver.setTrace(bindingTrace);
  delegatedPropertyResolver.setExpressionTypingServices(expressionTypingServices);
  functionAnalyzerExtension.setTrace(bindingTrace);
  scriptBodyResolver.setContext(topDownAnalysisContext);
  scriptBodyResolver.setExpressionTypingServices(expressionTypingServices);
  scriptBodyResolver.setTrace(bindingTrace);
  javaClassResolver.setAnnotationResolver(javaAnnotationResolver);
  javaClassResolver.setCache(traceBasedJavaResolverCache);
  javaClassResolver.setDeserializedDescriptorResolver(deserializedDescriptorResolver);
  javaClassResolver.setFunctionResolver(javaFunctionResolver);
  javaClassResolver.setJavaClassFinder(javaClassFinder);
  javaClassResolver.setKotlinClassFinder(virtualFileFinder);
  javaClassResolver.setMemberResolver(javaMemberResolver);
  javaClassResolver.setPackageFragmentProvider(javaPackageFragmentProvider);
  javaClassResolver.setSupertypesResolver(javaSupertypeResolver);
  javaClassResolver.setTypeParameterResolver(javaTypeParameterResolver);
  javaAnnotationResolver.setArgumentResolver(javaAnnotationArgumentResolver);
  javaAnnotationResolver.setClassResolver(javaClassResolver);
  javaAnnotationResolver.setExternalAnnotationResolver(psiBasedExternalAnnotationResolver);
  javaAnnotationArgumentResolver.setAnnotationResolver(javaAnnotationResolver);
  javaAnnotationArgumentResolver.setClassResolver(javaClassResolver);
  javaAnnotationArgumentResolver.setTypeTransformer(javaTypeTransformer);
  javaTypeTransformer.setClassResolver(javaClassResolver);
  deserializedDescriptorResolver.setAnnotationDeserializer(annotationDescriptorDeserializer);
  deserializedDescriptorResolver.setErrorReporter(traceBasedErrorReporter);
  deserializedDescriptorResolver.setJavaClassResolver(javaClassResolver);
  deserializedDescriptorResolver.setJavaPackageFragmentProvider(javaPackageFragmentProvider);
  annotationDescriptorDeserializer.setErrorReporter(traceBasedErrorReporter);
  annotationDescriptorDeserializer.setJavaClassResolver(javaClassResolver);
  annotationDescriptorDeserializer.setKotlinClassFinder(virtualFileFinder);
  javaFunctionResolver.setAnnotationResolver(javaAnnotationResolver);
  javaFunctionResolver.setCache(traceBasedJavaResolverCache);
  javaFunctionResolver.setErrorReporter(traceBasedErrorReporter);
  javaFunctionResolver.setExternalSignatureResolver(traceBasedExternalSignatureResolver);
  javaFunctionResolver.setSignatureChecker(psiBasedMethodSignatureChecker);
  javaFunctionResolver.setTypeParameterResolver(javaTypeParameterResolver);
  javaFunctionResolver.setTypeTransformer(javaTypeTransformer);
  javaFunctionResolver.setValueParameterResolver(javaValueParameterResolver);
  javaTypeParameterResolver.setTypeTransformer(javaTypeTransformer);
  javaValueParameterResolver.setAnnotationResolver(javaAnnotationResolver);
  javaValueParameterResolver.setTypeTransformer(javaTypeTransformer);
  javaMemberResolver.setClassResolver(javaClassResolver);
  javaMemberResolver.setConstructorResolver(javaConstructorResolver);
  javaMemberResolver.setFunctionResolver(javaFunctionResolver);
  javaMemberResolver.setPropertyResolver(javaPropertyResolver);
  javaConstructorResolver.setCache(traceBasedJavaResolverCache);
  javaConstructorResolver.setExternalSignatureResolver(traceBasedExternalSignatureResolver);
  javaConstructorResolver.setTypeTransformer(javaTypeTransformer);
  javaConstructorResolver.setValueParameterResolver(javaValueParameterResolver);
  javaPropertyResolver.setAnnotationResolver(javaAnnotationResolver);
  javaPropertyResolver.setCache(traceBasedJavaResolverCache);
  javaPropertyResolver.setErrorReporter(traceBasedErrorReporter);
  javaPropertyResolver.setExternalSignatureResolver(traceBasedExternalSignatureResolver);
  javaPropertyResolver.setTypeTransformer(javaTypeTransformer);
  javaSupertypeResolver.setClassResolver(javaClassResolver);
  javaSupertypeResolver.setTypeTransformer(javaTypeTransformer);
  javaClassFinder.initialize();
}
