{
  this.topDownAnalyzer=new TopDownAnalyzer();
  this.topDownAnalysisContext=new TopDownAnalysisContext();
  this.bodyResolver=new BodyResolver();
  this.controlFlowAnalyzer=new ControlFlowAnalyzer();
  this.declarationsChecker=new DeclarationsChecker();
  this.descriptorResolver=new DescriptorResolver();
  this.needSyntheticCallResolverExtension=new NeedSyntheticCallResolverExtension();
  this.project=project;
  this.topDownAnalysisParameters=topDownAnalysisParameters;
  this.bindingTrace=bindingTrace;
  this.moduleDescriptor=moduleDescriptor;
  this.javaBridgeConfiguration=new JavaBridgeConfiguration();
  this.javaDescriptorResolver=new JavaDescriptorResolver();
  this.psiClassFinder=new PsiClassFinderImpl();
  this.namespaceFactory=new NamespaceFactoryImpl();
  this.virtualFileFinder=com.intellij.openapi.components.ServiceManager.getService(project,VirtualFileFinder.class);
  this.declarationResolver=new DeclarationResolver();
  this.annotationResolver=new AnnotationResolver();
  this.callResolver=new CallResolver();
  this.argumentTypeResolver=new ArgumentTypeResolver();
  this.expressionTypingServices=new ExpressionTypingServices();
  this.callExpressionResolver=new CallExpressionResolver();
  this.typeResolver=new TypeResolver();
  this.qualifiedExpressionResolver=new QualifiedExpressionResolver();
  this.candidateResolver=new CandidateResolver();
  this.importsResolver=new ImportsResolver();
  this.jetImportsFactory=new JetImportsFactory();
  this.scriptHeaderResolver=new ScriptHeaderResolver();
  this.overloadResolver=new OverloadResolver();
  this.overrideResolver=new OverrideResolver();
  this.typeHierarchyResolver=new TypeHierarchyResolver();
  this.scriptBodyResolver=new ScriptBodyResolver();
  this.javaClassResolver=new JavaClassResolver();
  this.javaAnnotationResolver=new JavaAnnotationResolver();
  this.javaCompileTimeConstResolver=new JavaCompileTimeConstResolver();
  this.javaFunctionResolver=new JavaFunctionResolver();
  this.javaValueParameterResolver=new JavaValueParameterResolver();
  this.javaTypeTransformer=new JavaTypeTransformer();
  this.javaSignatureResolver=new JavaSignatureResolver();
  this.deserializedDescriptorResolver=new DeserializedDescriptorResolver();
  this.annotationDescriptorDeserializer=new AnnotationDescriptorDeserializer();
  this.javaNamespaceResolver=new JavaNamespaceResolver();
  this.javaSupertypeResolver=new JavaSupertypeResolver();
  this.javaConstructorResolver=new JavaConstructorResolver();
  this.javaPropertyResolver=new JavaPropertyResolver();
  this.topDownAnalyzer.setBodyResolver(bodyResolver);
  this.topDownAnalyzer.setContext(topDownAnalysisContext);
  this.topDownAnalyzer.setDeclarationResolver(declarationResolver);
  this.topDownAnalyzer.setModuleDescriptor(moduleDescriptor);
  this.topDownAnalyzer.setNamespaceFactory(namespaceFactory);
  this.topDownAnalyzer.setOverloadResolver(overloadResolver);
  this.topDownAnalyzer.setOverrideResolver(overrideResolver);
  this.topDownAnalyzer.setTopDownAnalysisParameters(topDownAnalysisParameters);
  this.topDownAnalyzer.setTrace(bindingTrace);
  this.topDownAnalyzer.setTypeHierarchyResolver(typeHierarchyResolver);
  this.topDownAnalysisContext.setTopDownAnalysisParameters(topDownAnalysisParameters);
  this.bodyResolver.setAnnotationResolver(annotationResolver);
  this.bodyResolver.setCallResolver(callResolver);
  this.bodyResolver.setContext(topDownAnalysisContext);
  this.bodyResolver.setControlFlowAnalyzer(controlFlowAnalyzer);
  this.bodyResolver.setDeclarationsChecker(declarationsChecker);
  this.bodyResolver.setDescriptorResolver(descriptorResolver);
  this.bodyResolver.setExpressionTypingServices(expressionTypingServices);
  this.bodyResolver.setScriptBodyResolverResolver(scriptBodyResolver);
  this.bodyResolver.setTopDownAnalysisParameters(topDownAnalysisParameters);
  this.bodyResolver.setTrace(bindingTrace);
  this.controlFlowAnalyzer.setTopDownAnalysisParameters(topDownAnalysisParameters);
  this.controlFlowAnalyzer.setTrace(bindingTrace);
  this.declarationsChecker.setTrace(bindingTrace);
  this.descriptorResolver.setAnnotationResolver(annotationResolver);
  this.descriptorResolver.setExpressionTypingServices(expressionTypingServices);
  this.descriptorResolver.setTypeResolver(typeResolver);
  this.javaBridgeConfiguration.setJavaDescriptorResolver(javaDescriptorResolver);
  javaDescriptorResolver.setClassResolver(javaClassResolver);
  javaDescriptorResolver.setConstructorResolver(javaConstructorResolver);
  javaDescriptorResolver.setFunctionResolver(javaFunctionResolver);
  javaDescriptorResolver.setNamespaceResolver(javaNamespaceResolver);
  javaDescriptorResolver.setPropertiesResolver(javaPropertyResolver);
  psiClassFinder.setProject(project);
  this.namespaceFactory.setModuleDescriptor(moduleDescriptor);
  this.namespaceFactory.setTrace(bindingTrace);
  declarationResolver.setAnnotationResolver(annotationResolver);
  declarationResolver.setContext(topDownAnalysisContext);
  declarationResolver.setDescriptorResolver(descriptorResolver);
  declarationResolver.setImportsResolver(importsResolver);
  declarationResolver.setScriptHeaderResolver(scriptHeaderResolver);
  declarationResolver.setTrace(bindingTrace);
  annotationResolver.setCallResolver(callResolver);
  annotationResolver.setExpressionTypingServices(expressionTypingServices);
  callResolver.setArgumentTypeResolver(argumentTypeResolver);
  callResolver.setCandidateResolver(candidateResolver);
  callResolver.setExpressionTypingServices(expressionTypingServices);
  callResolver.setExtension(needSyntheticCallResolverExtension);
  callResolver.setTypeResolver(typeResolver);
  argumentTypeResolver.setExpressionTypingServices(expressionTypingServices);
  argumentTypeResolver.setTypeResolver(typeResolver);
  expressionTypingServices.setCallExpressionResolver(callExpressionResolver);
  expressionTypingServices.setCallResolver(callResolver);
  expressionTypingServices.setDescriptorResolver(descriptorResolver);
  expressionTypingServices.setProject(project);
  expressionTypingServices.setTypeResolver(typeResolver);
  callExpressionResolver.setExpressionTypingServices(expressionTypingServices);
  typeResolver.setAnnotationResolver(annotationResolver);
  typeResolver.setDescriptorResolver(descriptorResolver);
  typeResolver.setModuleDescriptor(moduleDescriptor);
  typeResolver.setQualifiedExpressionResolver(qualifiedExpressionResolver);
  candidateResolver.setArgumentTypeResolver(argumentTypeResolver);
  importsResolver.setContext(topDownAnalysisContext);
  importsResolver.setImportsFactory(jetImportsFactory);
  importsResolver.setModuleDescriptor(moduleDescriptor);
  importsResolver.setQualifiedExpressionResolver(qualifiedExpressionResolver);
  importsResolver.setTrace(bindingTrace);
  jetImportsFactory.setProject(project);
  scriptHeaderResolver.setContext(topDownAnalysisContext);
  scriptHeaderResolver.setDependencyClassByQualifiedNameResolver(javaDescriptorResolver);
  scriptHeaderResolver.setNamespaceFactory(namespaceFactory);
  scriptHeaderResolver.setTopDownAnalysisParameters(topDownAnalysisParameters);
  scriptHeaderResolver.setTrace(bindingTrace);
  overloadResolver.setContext(topDownAnalysisContext);
  overloadResolver.setTrace(bindingTrace);
  overrideResolver.setContext(topDownAnalysisContext);
  overrideResolver.setTopDownAnalysisParameters(topDownAnalysisParameters);
  overrideResolver.setTrace(bindingTrace);
  typeHierarchyResolver.setContext(topDownAnalysisContext);
  typeHierarchyResolver.setDescriptorResolver(descriptorResolver);
  typeHierarchyResolver.setImportsResolver(importsResolver);
  typeHierarchyResolver.setNamespaceFactory(namespaceFactory);
  typeHierarchyResolver.setScriptHeaderResolver(scriptHeaderResolver);
  typeHierarchyResolver.setTrace(bindingTrace);
  scriptBodyResolver.setContext(topDownAnalysisContext);
  scriptBodyResolver.setExpressionTypingServices(expressionTypingServices);
  scriptBodyResolver.setTrace(bindingTrace);
  javaClassResolver.setAnnotationResolver(javaAnnotationResolver);
  javaClassResolver.setFunctionResolver(javaFunctionResolver);
  javaClassResolver.setJavaDescriptorResolver(javaDescriptorResolver);
  javaClassResolver.setKotlinDescriptorResolver(deserializedDescriptorResolver);
  javaClassResolver.setNamespaceResolver(javaNamespaceResolver);
  javaClassResolver.setPsiClassFinder(psiClassFinder);
  javaClassResolver.setSignatureResolver(javaSignatureResolver);
  javaClassResolver.setSupertypesResolver(javaSupertypeResolver);
  javaClassResolver.setTrace(bindingTrace);
  javaClassResolver.setVirtualFileFinder(virtualFileFinder);
  javaAnnotationResolver.setClassResolver(javaClassResolver);
  javaAnnotationResolver.setCompileTimeConstResolver(javaCompileTimeConstResolver);
  javaCompileTimeConstResolver.setAnnotationResolver(javaAnnotationResolver);
  javaCompileTimeConstResolver.setClassResolver(javaClassResolver);
  javaFunctionResolver.setAnnotationResolver(javaAnnotationResolver);
  javaFunctionResolver.setParameterResolver(javaValueParameterResolver);
  javaFunctionResolver.setSignatureResolver(javaSignatureResolver);
  javaFunctionResolver.setTrace(bindingTrace);
  javaFunctionResolver.setTypeTransformer(javaTypeTransformer);
  javaValueParameterResolver.setTypeTransformer(javaTypeTransformer);
  javaTypeTransformer.setResolver(javaDescriptorResolver);
  javaSignatureResolver.setTypeTransformer(javaTypeTransformer);
  deserializedDescriptorResolver.setAnnotationDeserializer(annotationDescriptorDeserializer);
  deserializedDescriptorResolver.setJavaClassResolver(javaClassResolver);
  deserializedDescriptorResolver.setJavaNamespaceResolver(javaNamespaceResolver);
  annotationDescriptorDeserializer.setJavaClassResolver(javaClassResolver);
  annotationDescriptorDeserializer.setPsiClassFinder(psiClassFinder);
  javaNamespaceResolver.setDeserializedDescriptorResolver(deserializedDescriptorResolver);
  javaNamespaceResolver.setJavaDescriptorResolver(javaDescriptorResolver);
  javaNamespaceResolver.setPsiClassFinder(psiClassFinder);
  javaNamespaceResolver.setTrace(bindingTrace);
  javaNamespaceResolver.setVirtualFileFinder(virtualFileFinder);
  javaSupertypeResolver.setClassResolver(javaClassResolver);
  javaSupertypeResolver.setTrace(bindingTrace);
  javaSupertypeResolver.setTypeTransformer(javaTypeTransformer);
  javaConstructorResolver.setTrace(bindingTrace);
  javaConstructorResolver.setTypeTransformer(javaTypeTransformer);
  javaConstructorResolver.setValueParameterResolver(javaValueParameterResolver);
  javaPropertyResolver.setAnnotationResolver(javaAnnotationResolver);
  javaPropertyResolver.setTrace(bindingTrace);
  javaPropertyResolver.setTypeTransformer(javaTypeTransformer);
  psiClassFinder.initialize();
}
