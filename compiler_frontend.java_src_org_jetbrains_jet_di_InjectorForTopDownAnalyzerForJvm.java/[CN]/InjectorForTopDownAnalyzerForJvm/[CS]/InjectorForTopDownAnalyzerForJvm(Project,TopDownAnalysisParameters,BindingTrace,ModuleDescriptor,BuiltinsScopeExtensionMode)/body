{
  this.topDownAnalyzer=new TopDownAnalyzer();
  this.topDownAnalysisContext=new TopDownAnalysisContext();
  this.bodyResolver=new BodyResolver();
  this.controlFlowAnalyzer=new ControlFlowAnalyzer();
  this.declarationsChecker=new DeclarationsChecker();
  this.descriptorResolver=new DescriptorResolver();
  this.project=project;
  this.topDownAnalysisParameters=topDownAnalysisParameters;
  this.bindingTrace=bindingTrace;
  this.moduleDescriptor=moduleDescriptor;
  this.builtinsScopeExtensionMode=builtinsScopeExtensionMode;
  this.moduleConfiguration=new JavaBridgeConfiguration();
  this.javaDescriptorResolver=new JavaDescriptorResolver();
  this.psiClassFinder=new PsiClassFinderImpl();
  this.namespaceFactory=new NamespaceFactoryImpl();
  this.declarationResolver=new DeclarationResolver();
  this.annotationResolver=new AnnotationResolver();
  this.callResolver=new CallResolver();
  this.expressionTypingServices=new ExpressionTypingServices();
  this.typeResolver=new TypeResolver();
  this.qualifiedExpressionResolver=new QualifiedExpressionResolver();
  this.overloadingConflictResolver=new OverloadingConflictResolver();
  this.importsResolver=new ImportsResolver();
  this.scriptHeaderResolver=new ScriptHeaderResolver();
  this.overloadResolver=new OverloadResolver();
  this.overrideResolver=new OverrideResolver();
  this.typeHierarchyResolver=new TypeHierarchyResolver();
  this.scriptBodyResolver=new ScriptBodyResolver();
  this.javaSemanticServices=new JavaSemanticServices();
  this.javaTypeTransformer=new JavaTypeTransformer();
  this.javaClassResolver=new JavaClassResolver();
  this.javaAnnotationResolver=new JavaAnnotationResolver();
  this.javaCompileTimeConstResolver=new JavaCompileTimeConstResolver();
  this.javaClassObjectResolver=new JavaClassObjectResolver();
  this.javaSupertypesResolver=new JavaSupertypesResolver();
  this.javaNamespaceResolver=new JavaNamespaceResolver();
  this.javaSignatureResolver=new JavaSignatureResolver();
  this.javaConstructorResolver=new JavaConstructorResolver();
  this.javaValueParameterResolver=new JavaValueParameterResolver();
  this.javaFunctionResolver=new JavaFunctionResolver();
  this.javaInnerClassResolver=new JavaInnerClassResolver();
  this.javaPropertiesResolver=new JavaPropertiesResolver();
  this.topDownAnalyzer.setBodyResolver(bodyResolver);
  this.topDownAnalyzer.setContext(topDownAnalysisContext);
  this.topDownAnalyzer.setDeclarationResolver(declarationResolver);
  this.topDownAnalyzer.setModuleDescriptor(moduleDescriptor);
  this.topDownAnalyzer.setNamespaceFactory(namespaceFactory);
  this.topDownAnalyzer.setOverloadResolver(overloadResolver);
  this.topDownAnalyzer.setOverrideResolver(overrideResolver);
  this.topDownAnalyzer.setTopDownAnalysisParameters(topDownAnalysisParameters);
  this.topDownAnalyzer.setTrace(bindingTrace);
  this.topDownAnalyzer.setTypeHierarchyResolver(typeHierarchyResolver);
  this.topDownAnalysisContext.setTopDownAnalysisParameters(topDownAnalysisParameters);
  this.bodyResolver.setCallResolver(callResolver);
  this.bodyResolver.setContext(topDownAnalysisContext);
  this.bodyResolver.setControlFlowAnalyzer(controlFlowAnalyzer);
  this.bodyResolver.setDeclarationsChecker(declarationsChecker);
  this.bodyResolver.setDescriptorResolver(descriptorResolver);
  this.bodyResolver.setExpressionTypingServices(expressionTypingServices);
  this.bodyResolver.setScriptBodyResolverResolver(scriptBodyResolver);
  this.bodyResolver.setTopDownAnalysisParameters(topDownAnalysisParameters);
  this.bodyResolver.setTrace(bindingTrace);
  this.controlFlowAnalyzer.setTopDownAnalysisParameters(topDownAnalysisParameters);
  this.controlFlowAnalyzer.setTrace(bindingTrace);
  this.declarationsChecker.setTrace(bindingTrace);
  this.descriptorResolver.setAnnotationResolver(annotationResolver);
  this.descriptorResolver.setExpressionTypingServices(expressionTypingServices);
  this.descriptorResolver.setTypeResolver(typeResolver);
  this.moduleConfiguration.setBuiltinsScopeExtensionMode(builtinsScopeExtensionMode);
  this.moduleConfiguration.setJavaSemanticServices(javaSemanticServices);
  this.moduleConfiguration.setProject(project);
  javaDescriptorResolver.setClassResolver(javaClassResolver);
  javaDescriptorResolver.setConstructorResolver(javaConstructorResolver);
  javaDescriptorResolver.setFunctionResolver(javaFunctionResolver);
  javaDescriptorResolver.setInnerClassResolver(javaInnerClassResolver);
  javaDescriptorResolver.setNamespaceResolver(javaNamespaceResolver);
  javaDescriptorResolver.setPropertiesResolver(javaPropertiesResolver);
  psiClassFinder.setProject(project);
  this.namespaceFactory.setConfiguration(moduleConfiguration);
  this.namespaceFactory.setModuleDescriptor(moduleDescriptor);
  this.namespaceFactory.setTrace(bindingTrace);
  declarationResolver.setAnnotationResolver(annotationResolver);
  declarationResolver.setContext(topDownAnalysisContext);
  declarationResolver.setDescriptorResolver(descriptorResolver);
  declarationResolver.setImportsResolver(importsResolver);
  declarationResolver.setScriptHeaderResolver(scriptHeaderResolver);
  declarationResolver.setTrace(bindingTrace);
  annotationResolver.setCallResolver(callResolver);
  annotationResolver.setExpressionTypingServices(expressionTypingServices);
  callResolver.setDescriptorResolver(descriptorResolver);
  callResolver.setExpressionTypingServices(expressionTypingServices);
  callResolver.setOverloadingConflictResolver(overloadingConflictResolver);
  callResolver.setTypeResolver(typeResolver);
  expressionTypingServices.setCallResolver(callResolver);
  expressionTypingServices.setDescriptorResolver(descriptorResolver);
  expressionTypingServices.setProject(project);
  expressionTypingServices.setTypeResolver(typeResolver);
  typeResolver.setAnnotationResolver(annotationResolver);
  typeResolver.setDescriptorResolver(descriptorResolver);
  typeResolver.setModuleConfiguration(moduleConfiguration);
  typeResolver.setQualifiedExpressionResolver(qualifiedExpressionResolver);
  importsResolver.setConfiguration(moduleConfiguration);
  importsResolver.setContext(topDownAnalysisContext);
  importsResolver.setQualifiedExpressionResolver(qualifiedExpressionResolver);
  importsResolver.setTrace(bindingTrace);
  scriptHeaderResolver.setContext(topDownAnalysisContext);
  scriptHeaderResolver.setDependencyClassByQualifiedNameResolver(javaDescriptorResolver);
  scriptHeaderResolver.setNamespaceFactory(namespaceFactory);
  scriptHeaderResolver.setTopDownAnalysisParameters(topDownAnalysisParameters);
  scriptHeaderResolver.setTrace(bindingTrace);
  overloadResolver.setContext(topDownAnalysisContext);
  overloadResolver.setTrace(bindingTrace);
  overrideResolver.setContext(topDownAnalysisContext);
  overrideResolver.setTopDownAnalysisParameters(topDownAnalysisParameters);
  overrideResolver.setTrace(bindingTrace);
  typeHierarchyResolver.setContext(topDownAnalysisContext);
  typeHierarchyResolver.setDescriptorResolver(descriptorResolver);
  typeHierarchyResolver.setImportsResolver(importsResolver);
  typeHierarchyResolver.setNamespaceFactory(namespaceFactory);
  typeHierarchyResolver.setScriptHeaderResolver(scriptHeaderResolver);
  typeHierarchyResolver.setTrace(bindingTrace);
  scriptBodyResolver.setContext(topDownAnalysisContext);
  scriptBodyResolver.setExpressionTypingServices(expressionTypingServices);
  scriptBodyResolver.setTrace(bindingTrace);
  javaSemanticServices.setDescriptorResolver(javaDescriptorResolver);
  javaSemanticServices.setPsiClassFinder(psiClassFinder);
  javaSemanticServices.setTrace(bindingTrace);
  javaSemanticServices.setTypeTransformer(javaTypeTransformer);
  javaTypeTransformer.setJavaSemanticServices(javaSemanticServices);
  javaTypeTransformer.setResolver(javaDescriptorResolver);
  javaClassResolver.setAnnotationResolver(javaAnnotationResolver);
  javaClassResolver.setClassObjectResolver(javaClassObjectResolver);
  javaClassResolver.setJavaDescriptorResolver(javaDescriptorResolver);
  javaClassResolver.setNamespaceResolver(javaNamespaceResolver);
  javaClassResolver.setPsiClassFinder(psiClassFinder);
  javaClassResolver.setSemanticServices(javaSemanticServices);
  javaClassResolver.setSignatureResolver(javaSignatureResolver);
  javaClassResolver.setSupertypesResolver(javaSupertypesResolver);
  javaClassResolver.setTrace(bindingTrace);
  javaAnnotationResolver.setClassResolver(javaClassResolver);
  javaAnnotationResolver.setCompileTimeConstResolver(javaCompileTimeConstResolver);
  javaCompileTimeConstResolver.setAnnotationResolver(javaAnnotationResolver);
  javaCompileTimeConstResolver.setClassResolver(javaClassResolver);
  javaClassObjectResolver.setJavaDescriptorResolver(javaDescriptorResolver);
  javaClassObjectResolver.setSemanticServices(javaSemanticServices);
  javaClassObjectResolver.setSupertypesResolver(javaSupertypesResolver);
  javaClassObjectResolver.setTrace(bindingTrace);
  javaSupertypesResolver.setClassResolver(javaClassResolver);
  javaSupertypesResolver.setSemanticServices(javaSemanticServices);
  javaSupertypesResolver.setTrace(bindingTrace);
  javaSupertypesResolver.setTypeTransformer(javaTypeTransformer);
  javaNamespaceResolver.setJavaSemanticServices(javaSemanticServices);
  javaNamespaceResolver.setPsiClassFinder(psiClassFinder);
  javaNamespaceResolver.setTrace(bindingTrace);
  javaSignatureResolver.setJavaSemanticServices(javaSemanticServices);
  javaConstructorResolver.setTrace(bindingTrace);
  javaConstructorResolver.setTypeTransformer(javaTypeTransformer);
  javaConstructorResolver.setValueParameterResolver(javaValueParameterResolver);
  javaValueParameterResolver.setTypeTransformer(javaTypeTransformer);
  javaFunctionResolver.setAnnotationResolver(javaAnnotationResolver);
  javaFunctionResolver.setParameterResolver(javaValueParameterResolver);
  javaFunctionResolver.setSignatureResolver(javaSignatureResolver);
  javaFunctionResolver.setTrace(bindingTrace);
  javaFunctionResolver.setTypeTransformer(javaTypeTransformer);
  javaInnerClassResolver.setClassResolver(javaClassResolver);
  javaPropertiesResolver.setAnnotationResolver(javaAnnotationResolver);
  javaPropertiesResolver.setClassResolver(javaClassResolver);
  javaPropertiesResolver.setJavaSignatureResolver(javaSignatureResolver);
  javaPropertiesResolver.setSemanticServices(javaSemanticServices);
  javaPropertiesResolver.setTrace(bindingTrace);
  moduleConfiguration.init();
  psiClassFinder.initialize();
}
