{
  if (firstPhase) {
    return Collections2.filter(descriptors,new Predicate<DeclarationDescriptor>(){
      @Override public boolean apply(      @Nullable DeclarationDescriptor descriptor){
        return (descriptor instanceof ClassDescriptor) || (descriptor instanceof NamespaceDescriptor);
      }
    }
);
  }
  Collection<? extends DeclarationDescriptor> filteredDescriptors;
  if (namespaceLevel) {
    filteredDescriptors=descriptors;
  }
 else {
    filteredDescriptors=Collections2.filter(descriptors,new Predicate<DeclarationDescriptor>(){
      @Override public boolean apply(      @Nullable DeclarationDescriptor descriptor){
        return (descriptor instanceof NamespaceDescriptor) || (descriptor instanceof ClassDescriptor) || (descriptor instanceof VariableDescriptor && ((VariableDescriptor)descriptor).isObjectDeclaration());
      }
    }
);
  }
  if (descriptors.size() == 1 && filteredDescriptors.size() <= 1) {
    trace.record(BindingContext.REFERENCE_TARGET,referenceExpression,descriptors.iterator().next());
  }
  if (filteredDescriptors.isEmpty()) {
    if (!descriptors.isEmpty()) {
      trace.report(CANNOT_BE_IMPORTED.on(referenceExpression,descriptors.iterator().next()));
    }
 else {
      trace.report(UNRESOLVED_REFERENCE.on(referenceExpression));
    }
  }
 else   if (filteredDescriptors.size() > 1) {
    trace.record(BindingContext.AMBIGUOUS_REFERENCE_TARGET,referenceExpression,descriptors);
  }
  if (descriptors.size() <= 1) {
    trace.record(BindingContext.RESOLUTION_SCOPE,referenceExpression,resolutionScope);
  }
  return filteredDescriptors;
}
