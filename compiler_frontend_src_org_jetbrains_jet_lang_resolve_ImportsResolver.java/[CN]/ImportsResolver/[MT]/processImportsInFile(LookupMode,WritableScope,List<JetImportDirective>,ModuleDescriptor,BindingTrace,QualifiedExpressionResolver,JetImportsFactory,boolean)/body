{
  @NotNull JetScope rootScope=JetModuleUtil.getSubpackagesOfRootScope(module);
  Importer.DelayedImporter delayedImporter=new Importer.DelayedImporter(fileScope);
  if (lookupMode == LookupMode.EVERYTHING) {
    fileScope.clearImports();
  }
  for (  ImportPath defaultImportPath : module.getDefaultImports()) {
    TemporaryBindingTrace temporaryTrace=TemporaryBindingTrace.create(trace,"transient trace to resolve default imports");
    JetImportDirective defaultImportDirective=importsFactory.createImportDirective(defaultImportPath);
    qualifiedExpressionResolver.processImportReference(defaultImportDirective,rootScope,fileScope,delayedImporter,temporaryTrace,module,lookupMode);
  }
  Map<JetImportDirective,Collection<? extends DeclarationDescriptor>> resolvedDirectives=Maps.newHashMap();
  JetScope rootScopeForFile=JetModuleUtil.getImportsResolutionScope(module,inRootPackage);
  for (  JetImportDirective importDirective : importDirectives) {
    Collection<? extends DeclarationDescriptor> descriptors=qualifiedExpressionResolver.processImportReference(importDirective,rootScopeForFile,fileScope,delayedImporter,trace,module,lookupMode);
    if (!descriptors.isEmpty()) {
      resolvedDirectives.put(importDirective,descriptors);
    }
    if (lookupMode != LookupMode.ONLY_CLASSES) {
      checkPlatformTypesMappedToKotlin(module,trace,importDirective,descriptors);
    }
  }
  delayedImporter.processImports();
  if (lookupMode == LookupMode.EVERYTHING) {
    for (    JetImportDirective importDirective : importDirectives) {
      reportUselessImport(importDirective,fileScope,resolvedDirectives,trace);
    }
  }
}
