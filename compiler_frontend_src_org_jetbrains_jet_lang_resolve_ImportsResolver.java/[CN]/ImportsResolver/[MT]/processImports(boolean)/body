{
  for (  JetFile file : context.getNamespaceDescriptors().keySet()) {
    JetScope rootScope=context.getRootScope();
    WritableScope namespaceScope=context.getNamespaceScopes().get(file);
    Importer.DelayedImporter delayedImporter=new Importer.DelayedImporter(namespaceScope);
    if (!onlyClasses) {
      namespaceScope.clearImports();
    }
    Map<JetImportDirective,DeclarationDescriptor> resolvedDirectives=Maps.newHashMap();
    Collection<JetImportDirective> defaultImportDirectives=Lists.newArrayList();
    configuration.addDefaultImports(defaultImportDirectives);
    for (    JetImportDirective defaultImportDirective : defaultImportDirectives) {
      TemporaryBindingTrace temporaryTrace=TemporaryBindingTrace.create(trace);
      qualifiedExpressionResolver.processImportReference(defaultImportDirective,rootScope,namespaceScope,delayedImporter,temporaryTrace,onlyClasses);
    }
    List<JetImportDirective> importDirectives=file.getImportDirectives();
    for (    JetImportDirective importDirective : importDirectives) {
      Collection<? extends DeclarationDescriptor> descriptors=qualifiedExpressionResolver.processImportReference(importDirective,rootScope,namespaceScope,delayedImporter,trace,onlyClasses);
      if (descriptors.size() == 1) {
        resolvedDirectives.put(importDirective,descriptors.iterator().next());
      }
    }
    delayedImporter.processImports();
    if (!onlyClasses) {
      for (      JetImportDirective importDirective : importDirectives) {
        reportUselessImport(importDirective,namespaceScope,resolvedDirectives);
      }
    }
  }
}
