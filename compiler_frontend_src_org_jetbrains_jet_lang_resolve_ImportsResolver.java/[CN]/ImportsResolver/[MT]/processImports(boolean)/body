{
  TemporaryBindingTrace temporaryTrace=TemporaryBindingTrace.create(trace);
  for (  JetFile file : context.getNamespaceDescriptors().keySet()) {
    WritableScope namespaceScope=context.getNamespaceScopes().get(file);
    Importer.DelayedImporter delayedImporter=new Importer.DelayedImporter(namespaceScope,firstPhase);
    if (!firstPhase) {
      namespaceScope.clearImports();
    }
    Map<JetImportDirective,DeclarationDescriptor> resolvedDirectives=Maps.newHashMap();
    Collection<JetImportDirective> defaultImportDirectives=Lists.newArrayList();
    configuration.addDefaultImports(namespaceScope,defaultImportDirectives);
    for (    JetImportDirective defaultImportDirective : defaultImportDirectives) {
      singleImportResolver.processImportReference(defaultImportDirective,namespaceScope,delayedImporter,temporaryTrace,firstPhase);
    }
    List<JetImportDirective> importDirectives=file.getImportDirectives();
    for (    JetImportDirective importDirective : importDirectives) {
      Collection<? extends DeclarationDescriptor> descriptors=singleImportResolver.processImportReference(importDirective,namespaceScope,delayedImporter,trace,firstPhase);
      if (descriptors.size() == 1) {
        resolvedDirectives.put(importDirective,descriptors.iterator().next());
      }
    }
    delayedImporter.processImports();
    if (firstPhase) {
      continue;
    }
    for (    JetImportDirective importDirective : importDirectives) {
      reportUselessImport(importDirective,namespaceScope,resolvedDirectives);
    }
  }
}
