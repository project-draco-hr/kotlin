{
  assertNotOverloadable("fun a() : Int","fun a() : Int");
  assertNotOverloadable("fun a() : Int","fun a() : Any");
  assertNotOverloadable("fun a<T1>() : T1","fun a<T>() : T");
  assertNotOverloadable("fun a<T1>(a : T1) : T1","fun a<T>(a : T) : T");
  assertNotOverloadable("fun a<T1, X : T1>(a : T1) : T1","fun a<T, Y : T>(a : T) : T");
  assertNotOverloadable("fun a<T1, X : T1>(a : T1) : T1","fun a<T, Y : T>(a : T) : Y");
  assertOverloadable("fun ab() : Int","fun a() : Int");
  assertNotOverloadable("fun a() : Int","fun a() : Any");
  assertOverloadable("fun a(a : Int) : Int","fun a() : Int");
  assertOverloadable("fun a() : Int","fun a(a : Int) : Int");
  assertOverloadable("fun a(a : Int?) : Int","fun a(a : Int) : Int");
  assertOverloadable("fun a<T1, X : T1>(a : T1) : T1","fun a<T, Y>(a : T) : T");
  assertOverloadable("fun a<T1, X : T1>(a : T1) : T1","fun a<T, Y : T>(a : Y) : T");
  assertNotOverloadable("fun a<T1, X : T1>(a : T1) : X","fun a<T, Y : T>(a : T) : T");
  assertNotOverloadable("fun a<T1, X : Array<out T1>>(a : Array<in T1>) : T1","fun a<T, Y : Array<out T>>(a : Array<in T>) : T");
  assertOverloadable("fun a<T1, X : Array<T1>>(a : Array<in T1>) : T1","fun a<T, Y : Array<out T>>(a : Array<in T>) : T");
  assertOverloadable("fun a<T1, X : Array<out T1>>(a : Array<in T1>) : T1","fun a<T, Y : Array<in T>>(a : Array<in T>) : T");
  assertOverloadable("fun a<T1, X : Array<out T1>>(a : Array<in T1>) : T1","fun a<T, Y : Array<*>>(a : Array<in T>) : T");
  assertOverloadable("fun a<T1, X : Array<out T1>>(a : Array<in T1>) : T1","fun a<T, Y : Array<out T>>(a : Array<out T>) : T");
  assertOverloadable("fun a<T1, X : Array<out T1>>(a : Array<*>) : T1","fun a<T, Y : Array<out T>>(a : Array<in T>) : T");
  assertOverloadable("fun ff() : Int","fun Int.ff() : Int");
}
