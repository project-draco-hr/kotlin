{
  List<File> javaBinaryRoots=new ArrayList<File>();
  javaBinaryRoots.add(KotlinTestUtils.getAnnotationsJar());
  List<File> javaSourceRoots=new ArrayList<File>();
  javaSourceRoots.add(new File("compiler/testData/loadJava/include"));
  if (isBinaryRoot) {
    javaBinaryRoots.add(javaRoot);
  }
 else {
    javaSourceRoots.add(javaRoot);
  }
  CompilerConfiguration configuration=KotlinTestUtils.compilerConfigurationForTests(configurationKind,testJdkKind,javaBinaryRoots,javaSourceRoots);
  KotlinCoreEnvironment environment=KotlinCoreEnvironment.createForTests(disposable,configuration,EnvironmentConfigFiles.JVM_CONFIG_FILES);
  AnalysisResult analysisResult=JvmResolveUtil.analyze(environment);
  PackageViewDescriptor packageView=analysisResult.getModuleDescriptor().getPackage(TEST_PACKAGE_FQNAME);
  return Pair.create(packageView,analysisResult.getBindingContext());
}
