{
  File kotlinSrc=new File(expectedFileName);
  File librarySrc=new File(expectedFileName.replaceFirst("\\.kt$",""));
  File expectedFile=new File(expectedFileName.replaceFirst("\\.kt$",".txt"));
  File libraryOut=new File(tmpdir,"libraryOut");
  compileKotlinWithJava(FileUtil.findFilesByMask(Pattern.compile(".+\\.java$"),librarySrc),FileUtil.findFilesByMask(Pattern.compile(".+\\.kt$"),librarySrc),libraryOut,getTestRootDisposable());
  JetCoreEnvironment environment=JetCoreEnvironment.createForTests(getTestRootDisposable(),compilerConfigurationForTests(ConfigurationKind.JDK_ONLY,TestJdkKind.MOCK_JDK,getAnnotationsJar(),libraryOut),EnvironmentConfigFiles.JVM_CONFIG_FILES);
  JetFile jetFile=JetTestUtils.createFile(kotlinSrc.getPath(),FileUtil.loadFile(kotlinSrc,true),environment.getProject());
  AnalysisResult result=JvmResolveUtil.analyzeFilesWithJavaIntegrationAndCheckForErrors(environment.getProject(),Collections.singleton(jetFile),Predicates.<PsiFile>alwaysTrue());
  PackageViewDescriptor packageView=result.getModuleDescriptor().getPackage(TEST_PACKAGE_FQNAME);
  assertNotNull(packageView);
  validateAndCompareDescriptorWithFile(packageView,DONT_INCLUDE_METHODS_OF_OBJECT.withValidationStrategy(new DeserializedScopeValidationVisitor()),expectedFile);
}
