{
  if (expression instanceof JsUnaryOperation) {
    JsUnaryOperation unary=(JsUnaryOperation)expression;
    if (unary.getOperator() == JsUnaryOperator.NOT)     return unary.getArg();
  }
 else   if (expression instanceof JsBinaryOperation) {
    JsBinaryOperation binary=(JsBinaryOperation)expression;
switch (binary.getOperator()) {
case AND:
      return or(negatedOptimized(binary.getArg1()),negatedOptimized(binary.getArg2()));
case OR:
    return and(negatedOptimized(binary.getArg1()),negatedOptimized(binary.getArg2()));
case EQ:
  return new JsBinaryOperation(JsBinaryOperator.NEQ,binary.getArg1(),binary.getArg2());
case NEQ:
return new JsBinaryOperation(JsBinaryOperator.EQ,binary.getArg1(),binary.getArg2());
case REF_EQ:
return inequality(binary.getArg1(),binary.getArg2());
case REF_NEQ:
return equality(binary.getArg1(),binary.getArg2());
case LT:
return greaterThanEq(binary.getArg1(),binary.getArg2());
case LTE:
return greaterThan(binary.getArg1(),binary.getArg2());
case GT:
return lessThanEq(binary.getArg1(),binary.getArg2());
case GTE:
return lessThan(binary.getArg1(),binary.getArg2());
default :
break;
}
}
return negated(expression);
}
