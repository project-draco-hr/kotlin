{
  final Map<Instruction,Edges<InitControlFlowInfo>> initializers=pseudocodeVariablesData.getVariableInitializers();
  PseudocodeTraverserKt.traverse(pseudocode,TraversalOrder.FORWARD,new ControlFlowInformationProvider.FunctionVoid1<Instruction>(){
    @Override public void execute(    @NotNull Instruction instruction){
      if (instruction instanceof MagicInstruction) {
        MagicInstruction magicInstruction=(MagicInstruction)instruction;
        if (magicInstruction.getKind() == MagicKind.EXHAUSTIVE_WHEN_ELSE) {
          Instruction next=magicInstruction.getNext();
          if (next instanceof MergeInstruction) {
            MergeInstruction mergeInstruction=(MergeInstruction)next;
            if (initializers.containsKey(mergeInstruction) && initializers.containsKey(magicInstruction)) {
              InitControlFlowInfo mergeInfo=initializers.get(mergeInstruction).getIncoming();
              InitControlFlowInfo magicInfo=initializers.get(magicInstruction).getOutgoing();
              if (mergeInstruction.getElement() instanceof KtWhenExpression && magicInfo.checkDefiniteInitializationInWhen(mergeInfo)) {
                trace.record(IMPLICIT_EXHAUSTIVE_WHEN,(KtWhenExpression)mergeInstruction.getElement());
              }
            }
          }
        }
      }
      PseudoValue value=instruction instanceof InstructionWithValue ? ((InstructionWithValue)instruction).getOutputValue() : null;
      for (      KtElement element : instruction.getOwner().getValueElements(value)) {
        if (!(element instanceof KtWhenExpression))         continue;
        KtWhenExpression whenExpression=(KtWhenExpression)element;
        if (whenExpression.getElseExpression() != null)         continue;
        if (WhenChecker.mustHaveElse(whenExpression,trace)) {
          trace.report(NO_ELSE_IN_WHEN.on(whenExpression));
        }
 else         if (whenExpression.getSubjectExpression() != null) {
          ClassDescriptor enumClassDescriptor=WhenChecker.getClassDescriptorOfTypeIfEnum(trace.getType(whenExpression.getSubjectExpression()));
          if (enumClassDescriptor != null && !WhenChecker.isWhenOnEnumExhaustive(whenExpression,trace,enumClassDescriptor)) {
            trace.report(NON_EXHAUSTIVE_WHEN.on(whenExpression));
          }
        }
      }
    }
  }
);
}
