{
  ImmutableCollection<ClassData> classDatas=mapContainer.map.get(classFqName.asString());
  List<FunctionDescriptor> result=Lists.newArrayList();
  Set<ClassDescriptor> allSuperClasses=DescriptorUtils.getAllSuperClasses(containingClass);
  String serializedMethod=JavaSignatureFormatter.formatMethod(javaMethod);
  for (  ClassData classData : classDatas) {
    String expectedSerializedFunction=classData.method2Function.get(serializedMethod);
    if (expectedSerializedFunction == null)     continue;
    ClassDescriptor kotlinClass=classData.kotlinClass;
    if (!allSuperClasses.contains(kotlinClass))     continue;
    Collection<FunctionDescriptor> functions=kotlinClass.getDefaultType().getMemberScope().getFunctions(javaMethod.getName());
    for (    FunctionDescriptor function : functions) {
      if (expectedSerializedFunction.equals(serializeFunction(function))) {
        result.add(function);
      }
    }
  }
  return result;
}
