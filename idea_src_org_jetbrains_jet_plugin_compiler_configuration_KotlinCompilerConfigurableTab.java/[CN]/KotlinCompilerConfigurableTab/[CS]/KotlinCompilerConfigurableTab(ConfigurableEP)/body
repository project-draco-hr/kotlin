{
  this.extPoint=ep;
  this.commonCompilerArguments=KotlinCommonCompilerArgumentsHolder.getInstance(ep.getProject()).getSettings();
  this.k2jsCompilerArguments=Kotlin2JsCompilerArgumentsHolder.getInstance(ep.getProject()).getSettings();
  this.compilerSettings=KotlinCompilerSettings.getInstance(ep.getProject()).getSettings();
  this.compilerWorkspaceSettings=ServiceManager.getService(ep.getProject(),KotlinCompilerWorkspaceSettings.class);
  additionalArgsOptionsField.attachLabel(additionalArgsLabel);
  setupFileChooser(labelForOutputPrefixFile,outputPrefixFile,JetBundle.message("kotlin.compiler.js.option.output.prefix.browse.title"));
  setupFileChooser(labelForOutputPostfixFile,outputPostfixFile,JetBundle.message("kotlin.compiler.js.option.output.postfix.browse.title"));
  labelForOutputDirectory.setLabelFor(outputDirectory);
  copyRuntimeFilesCheckBox.addChangeListener(new ChangeListener(){
    @Override public void stateChanged(    @NotNull ChangeEvent e){
      outputDirectory.setEnabled(copyRuntimeFilesCheckBox.isSelected());
      labelForOutputDirectory.setEnabled(copyRuntimeFilesCheckBox.isSelected());
    }
  }
);
}
