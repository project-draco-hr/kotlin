{
  if (elements.isEmpty()) {
    return;
  }
  Project project=elements.get(0).getProject();
  if (!isMarkersEnabled(project)) {
    return;
  }
  InjectorForJavaDescriptorResolver injector=createInjector(project);
  JavaDescriptorResolver javaDescriptorResolver=injector.getJavaDescriptorResolver();
  BindingTrace trace=injector.getBindingTrace();
  for (  PsiElement element : elements) {
    if (!(element instanceof PsiMember)) {
      continue;
    }
    PsiMember member=(PsiMember)element;
    if (member.hasModifierProperty(PsiModifier.PRIVATE)) {
      continue;
    }
    DeclarationDescriptor memberDescriptor=getDescriptorForMember(javaDescriptorResolver,member,trace);
    if (memberDescriptor == null)     continue;
    List<String> errors=trace.get(BindingContext.LOAD_FROM_JAVA_SIGNATURE_ERRORS,memberDescriptor);
    boolean hasSignatureAnnotation=KotlinSignatureUtil.findKotlinSignatureAnnotation(element) != null;
    if (errors != null || hasSignatureAnnotation) {
      result.add(new MyLineMarkerInfo((PsiModifierListOwner)element,errors,hasSignatureAnnotation));
    }
  }
}
