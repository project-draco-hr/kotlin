{
  if (elements.isEmpty()) {
    return;
  }
  PsiElement firstElement=elements.get(0);
  Project project=firstElement.getProject();
  if (!isMarkersEnabled(project)) {
    return;
  }
  if (!ProjectStructureUtil.hasJvmKotlinModules(project)) {
    return;
  }
  Module module=ModuleUtilCore.findModuleForPsiElement(firstElement);
  if (module != null && !ProjectStructureUtil.isUsedInKotlinJavaModule(module)) {
    return;
  }
  for (  PsiElement element : elements) {
    if (!(element instanceof PsiMember) || element instanceof PsiClass) {
      continue;
    }
    PsiMember member=(PsiMember)element;
    if (member.hasModifierProperty(PsiModifier.PRIVATE)) {
      continue;
    }
    PsiClass containingClass=member.getContainingClass();
    if (containingClass != null && PsiUtil.isLocalOrAnonymousClass(containingClass)) {
      continue;
    }
    PsiModifierListOwner annotationOwner=KotlinSignatureUtil.getAnnotationOwner(element);
    JavaResolveExtension resolveExtension=JavaResolveExtension.INSTANCE$;
    BindingContext bindingContext=resolveExtension.getContext(project,annotationOwner);
    JavaDescriptorResolver javaDescriptorResolver=resolveExtension.getResolver(project,annotationOwner);
    DeclarationDescriptor memberDescriptor=getDescriptorForMember(javaDescriptorResolver,annotationOwner);
    if (memberDescriptor == null)     continue;
    List<String> errors=bindingContext.get(JavaBindingContext.LOAD_FROM_JAVA_SIGNATURE_ERRORS,memberDescriptor);
    boolean hasSignatureAnnotation=KotlinSignatureUtil.findKotlinSignatureAnnotation(annotationOwner) != null;
    if (errors != null || hasSignatureAnnotation) {
      result.add(new MyLineMarkerInfo((PsiModifierListOwner)element,errors,hasSignatureAnnotation));
    }
  }
}
