{
  StringBuilder builder=new StringBuilder();
  JavaSemanticServices jss=new JavaSemanticServices(project,JetSemanticServices.createSemanticServices(project),new BindingTraceContext());
  PsiClassOwner clsFile=(PsiClassOwner)PsiManager.getInstance(project).findFile(file);
  if (clsFile != null) {
    builder.append(PsiBundle.message("psi.decompiled.text.header"));
    builder.append("\n\n");
    String packageName=clsFile.getPackageName();
    if (packageName == null) {
      packageName="";
    }
    if (packageName.length() > 0) {
      builder.append("package ").append(packageName).append("\n\n");
    }
    PsiClass psiClass=clsFile.getClasses()[0];
    JavaDescriptorResolver jdr=jss.getDescriptorResolver();
    if (psiClass.getName().equals("namespace")) {
      NamespaceDescriptor nd=jdr.resolveNamespace(packageName);
      if (nd != null) {
        for (        DeclarationDescriptor member : nd.getMemberScope().getAllDescriptors()) {
          if (member instanceof ClassDescriptor && member.getName().equals("namespace") || member instanceof NamespaceDescriptor) {
            continue;
          }
          appendMemberDescriptor(builder,member);
        }
      }
    }
 else {
      ClassDescriptor cd=jdr.resolveClass(psiClass);
      if (cd != null) {
        builder.append(DescriptorRenderer.COMPACT.render(cd));
        builder.append(" {\n");
        for (        DeclarationDescriptor member : cd.getDefaultType().getMemberScope().getAllDescriptors()) {
          if (member.getContainingDeclaration() == cd) {
            builder.append("    ");
            appendMemberDescriptor(builder,member);
          }
        }
        builder.append("}");
      }
    }
  }
  return builder.toString();
}
