{
  JetNamespaceHeader namespaceHeader=file.getNamespaceHeader();
  if (moduleDescriptor.getRootNs() == null) {
    createRootNamespaceDescriptorIfNeeded(null,moduleDescriptor,null,handler);
  }
  NamespaceDescriptorImpl currentOwner=moduleDescriptor.getRootNs();
  if (currentOwner == null) {
    throw new IllegalStateException("must be initialized 5 lines above");
  }
  for (  JetSimpleNameExpression nameExpression : namespaceHeader.getParentNamespaceNames()) {
    Name namespaceName=JetPsiUtil.safeName(nameExpression.getReferencedName());
    NamespaceDescriptorImpl namespaceDescriptor=createNamespaceDescriptorIfNeeded(null,currentOwner,namespaceName,nameExpression,handler);
    trace.record(BindingContext.NAMESPACE_IS_SRC,namespaceDescriptor,true);
    trace.record(RESOLUTION_SCOPE,nameExpression,outerScope);
    outerScope=namespaceDescriptor.getMemberScope();
    currentOwner=namespaceDescriptor;
  }
  NamespaceDescriptorImpl namespaceDescriptor;
  Name name;
  if (namespaceHeader.isRoot()) {
    namespaceDescriptor=moduleDescriptor.getRootNs();
    storeBindingForFileAndExpression(file,null,namespaceDescriptor);
  }
 else {
    name=namespaceHeader.getNameAsName();
    namespaceDescriptor=createNamespaceDescriptorIfNeeded(file,currentOwner,name,namespaceHeader.getLastPartExpression(),handler);
    trace.record(BindingContext.NAMESPACE_IS_SRC,namespaceDescriptor,true);
    trace.record(RESOLUTION_SCOPE,namespaceHeader,outerScope);
  }
  return namespaceDescriptor;
}
