{
  JetNamespaceHeader namespaceHeader=file.getNamespaceHeader();
  if (moduleDescriptor.getRootNs() == null) {
    createNamespaceDescriptorIfNeeded(null,moduleDescriptor,"<root>",true,null);
  }
  NamespaceDescriptorParent currentOwner=moduleDescriptor.getRootNs();
  if (currentOwner == null) {
    throw new IllegalStateException("must be initialized 5 lines above");
  }
  for (  JetSimpleNameExpression nameExpression : namespaceHeader.getParentNamespaceNames()) {
    String namespaceName=JetPsiUtil.safeName(nameExpression.getReferencedName());
    NamespaceDescriptorImpl namespaceDescriptor=createNamespaceDescriptorIfNeeded(null,currentOwner,namespaceName,false,nameExpression);
    trace.record(BindingContext.NAMESPACE_IS_SRC,namespaceDescriptor,true);
    trace.record(RESOLUTION_SCOPE,nameExpression,outerScope);
    outerScope=namespaceDescriptor.getMemberScope();
    currentOwner=namespaceDescriptor;
  }
  NamespaceDescriptorImpl namespaceDescriptor;
  String name;
  if (namespaceHeader.isRoot()) {
    namespaceDescriptor=createNamespaceDescriptorIfNeeded(file,moduleDescriptor,"<root>",true,null);
  }
 else {
    name=namespaceHeader.getName();
    namespaceDescriptor=createNamespaceDescriptorIfNeeded(file,currentOwner,name,namespaceHeader.isRoot(),namespaceHeader.getLastPartExpression());
    trace.record(BindingContext.NAMESPACE_IS_SRC,namespaceDescriptor,true);
    trace.record(RESOLUTION_SCOPE,namespaceHeader,outerScope);
  }
  return namespaceDescriptor;
}
