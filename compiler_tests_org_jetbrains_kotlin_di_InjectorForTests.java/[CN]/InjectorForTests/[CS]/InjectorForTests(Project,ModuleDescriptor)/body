{
  this.project=project;
  this.moduleDescriptor=moduleDescriptor;
  this.kotlinBuiltIns=moduleDescriptor.getBuiltIns();
  this.platformToKotlinClassMap=moduleDescriptor.getPlatformToKotlinClassMap();
  this.descriptorResolver=new DescriptorResolver();
  this.annotationResolver=new AnnotationResolver();
  this.qualifiedExpressionResolver=new QualifiedExpressionResolver();
  this.flexibleTypeCapabilitiesProvider=new FlexibleTypeCapabilitiesProvider();
  this.globalContext=org.jetbrains.kotlin.context.ContextPackage.GlobalContext();
  this.storageManager=globalContext.getStorageManager();
  this.typeLazinessToken=new TypeLazinessToken();
  this.dynamicTypesSettings=new DynamicTypesSettings();
  this.typeResolver=new TypeResolver(annotationResolver,getQualifiedExpressionResolver(),moduleDescriptor,flexibleTypeCapabilitiesProvider,storageManager,typeLazinessToken,dynamicTypesSettings);
  this.expressionTypingComponents=new ExpressionTypingComponents();
  this.expressionTypingServices=new ExpressionTypingServices(expressionTypingComponents);
  this.functionDescriptorResolver=new FunctionDescriptorResolver(getTypeResolver(),getDescriptorResolver(),annotationResolver,storageManager,getExpressionTypingServices(),kotlinBuiltIns);
  this.callResolver=new CallResolver();
  this.fakeCallResolver=new FakeCallResolver(project,callResolver);
  this.additionalCheckerProvider=KotlinJvmCheckerProvider.INSTANCE$;
  this.symbolUsageValidator=additionalCheckerProvider.getSymbolUsageValidator();
  this.argumentTypeResolver=new ArgumentTypeResolver();
  this.candidateResolver=new CandidateResolver();
  this.callCompleter=new CallCompleter(argumentTypeResolver,candidateResolver);
  this.taskPrioritizer=new TaskPrioritizer(storageManager);
  this.delegatedPropertyResolver=new DelegatedPropertyResolver();
  this.callExpressionResolver=new CallExpressionResolver(callResolver);
  this.controlStructureTypingUtils=new ControlStructureTypingUtils(callResolver);
  this.forLoopConventionsChecker=new ForLoopConventionsChecker();
  this.localClassifierAnalyzer=new LocalClassifierAnalyzer(getDescriptorResolver(),getFunctionDescriptorResolver(),getTypeResolver(),annotationResolver);
  this.multiDeclarationResolver=new MultiDeclarationResolver(getFakeCallResolver(),getDescriptorResolver(),getTypeResolver(),symbolUsageValidator);
  this.reflectionTypes=new ReflectionTypes(moduleDescriptor);
  this.valueParameterResolver=new ValueParameterResolver(getAdditionalCheckerProvider(),getExpressionTypingServices());
  this.statementFilter=new StatementFilter();
  this.descriptorResolver.setAnnotationResolver(annotationResolver);
  this.descriptorResolver.setBuiltIns(kotlinBuiltIns);
  this.descriptorResolver.setDelegatedPropertyResolver(delegatedPropertyResolver);
  this.descriptorResolver.setExpressionTypingServices(expressionTypingServices);
  this.descriptorResolver.setStorageManager(storageManager);
  this.descriptorResolver.setTypeResolver(typeResolver);
  this.expressionTypingServices.setStatementFilter(statementFilter);
  this.qualifiedExpressionResolver.setSymbolUsageValidator(symbolUsageValidator);
  annotationResolver.setCallResolver(callResolver);
  annotationResolver.setStorageManager(storageManager);
  annotationResolver.setTypeResolver(typeResolver);
  callResolver.setAdditionalCheckerProvider(additionalCheckerProvider);
  callResolver.setArgumentTypeResolver(argumentTypeResolver);
  callResolver.setCallCompleter(callCompleter);
  callResolver.setCandidateResolver(candidateResolver);
  callResolver.setExpressionTypingServices(expressionTypingServices);
  callResolver.setTaskPrioritizer(taskPrioritizer);
  callResolver.setTypeResolver(typeResolver);
  argumentTypeResolver.setBuiltIns(kotlinBuiltIns);
  argumentTypeResolver.setExpressionTypingServices(expressionTypingServices);
  argumentTypeResolver.setTypeResolver(typeResolver);
  candidateResolver.setArgumentTypeResolver(argumentTypeResolver);
  delegatedPropertyResolver.setAdditionalCheckerProvider(additionalCheckerProvider);
  delegatedPropertyResolver.setBuiltIns(kotlinBuiltIns);
  delegatedPropertyResolver.setCallResolver(callResolver);
  delegatedPropertyResolver.setExpressionTypingServices(expressionTypingServices);
  expressionTypingComponents.setAdditionalCheckerProvider(additionalCheckerProvider);
  expressionTypingComponents.setAnnotationResolver(annotationResolver);
  expressionTypingComponents.setBuiltIns(kotlinBuiltIns);
  expressionTypingComponents.setCallExpressionResolver(callExpressionResolver);
  expressionTypingComponents.setCallResolver(callResolver);
  expressionTypingComponents.setControlStructureTypingUtils(controlStructureTypingUtils);
  expressionTypingComponents.setDescriptorResolver(descriptorResolver);
  expressionTypingComponents.setDynamicTypesSettings(dynamicTypesSettings);
  expressionTypingComponents.setExpressionTypingServices(expressionTypingServices);
  expressionTypingComponents.setForLoopConventionsChecker(forLoopConventionsChecker);
  expressionTypingComponents.setFunctionDescriptorResolver(functionDescriptorResolver);
  expressionTypingComponents.setGlobalContext(globalContext);
  expressionTypingComponents.setLocalClassifierAnalyzer(localClassifierAnalyzer);
  expressionTypingComponents.setMultiDeclarationResolver(multiDeclarationResolver);
  expressionTypingComponents.setPlatformToKotlinClassMap(platformToKotlinClassMap);
  expressionTypingComponents.setReflectionTypes(reflectionTypes);
  expressionTypingComponents.setSymbolUsageValidator(symbolUsageValidator);
  expressionTypingComponents.setTypeResolver(typeResolver);
  expressionTypingComponents.setValueParameterResolver(valueParameterResolver);
  callExpressionResolver.setExpressionTypingServices(expressionTypingServices);
  forLoopConventionsChecker.setBuiltIns(kotlinBuiltIns);
  forLoopConventionsChecker.setFakeCallResolver(fakeCallResolver);
  forLoopConventionsChecker.setSymbolUsageValidator(symbolUsageValidator);
}
