{
  if (context.getProject().getMinSdk() >= 9) {
    return;
  }
  if ((method.access & Opcodes.ACC_STATIC) != 0) {
    return;
  }
  if (instruction.getOpcode() != Opcodes.INVOKEVIRTUAL) {
    return;
  }
  MethodInsnNode node=(MethodInsnNode)instruction;
  String name=node.name;
  String owner=node.owner;
  AbstractInsnNode prev=LintUtils.getPrevInstruction(instruction);
  if (prev == null || prev.getOpcode() != Opcodes.ALOAD) {
    return;
  }
  VarInsnNode prevVar=(VarInsnNode)prev;
  if (prevVar.var != 0) {
    return;
  }
  if (((name.startsWith("get") && name.length() > 3 && Character.isUpperCase(name.charAt(3))) || (name.startsWith("is") && name.length() > 2 && Character.isUpperCase(name.charAt(2)))) && owner.equals(classNode.name)) {
    if (mPendingCalls == null) {
      mPendingCalls=new ArrayList<Entry>();
    }
    mPendingCalls.add(new Entry(name,node,method));
  }
  super.checkInstruction(context,classNode,method,instruction);
}
