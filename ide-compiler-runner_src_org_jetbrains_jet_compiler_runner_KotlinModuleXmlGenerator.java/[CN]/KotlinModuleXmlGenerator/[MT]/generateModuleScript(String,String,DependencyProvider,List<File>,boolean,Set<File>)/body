{
  StringBuilder xml=new StringBuilder();
  final Printer p=new Printer(xml);
  openTag(p,MODULES);
  if (tests) {
    p.println("<!-- Module script for tests -->");
  }
 else {
    p.println("<!-- Module script for production -->");
  }
  p.println("<",MODULE," ",NAME,"=\"",escapeXml(moduleName),"\" ",OUTPUT_DIR,"=\"",getEscapedPath(new File(outputDir)),"\">");
  p.pushIndent();
  for (  File sourceFile : sourceFiles) {
    p.println("<",SOURCES," ",PATH,"=\"",getEscapedPath(sourceFile),"\"/>");
  }
  dependencyProvider.processClassPath(new DependencyProcessor(){
    @Override public void processClassPathSection(    @NotNull String sectionDescription,    @NotNull Collection<File> files){
      p.println("<!-- ",sectionDescription," -->");
      for (      File file : files) {
        boolean isOutput=directoriesToFilterOut.contains(file);
        if (isOutput) {
          p.println("<!-- Output directory, commented out -->");
          p.println("<!-- ");
          p.pushIndent();
        }
        p.println("<",CLASSPATH," ",PATH,"=\"",getEscapedPath(file),"\"/>");
        if (isOutput) {
          p.popIndent();
          p.println("-->");
        }
      }
    }
    @Override public void processAnnotationRoots(    @NotNull List<File> files){
      p.println("<!-- External annotations -->");
      for (      File file : files) {
        p.println("<",EXTERNAL_ANNOTATIONS," ",PATH,"= \"",getEscapedPath(file),"\"/>");
      }
    }
  }
);
  closeTag(p,MODULE);
  closeTag(p,MODULES);
  return xml;
}
