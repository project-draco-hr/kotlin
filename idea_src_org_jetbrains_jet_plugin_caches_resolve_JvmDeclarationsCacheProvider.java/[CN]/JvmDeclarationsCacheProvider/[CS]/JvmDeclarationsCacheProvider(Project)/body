{
  super(project,TargetPlatform.JVM);
  cachedKey=Key.create("KOTLIN_JVM_DECLARATIONS_CACHE");
  declarationsProvider=new CachedValueProvider<KotlinDeclarationsCache>(){
    @Nullable @Override public Result<KotlinDeclarationsCache> compute(){
synchronized (declarationAnalysisLock) {
        incompleteTrace=new BindingTraceContext();
        AnalyzeExhaust analyzeExhaust;
        try {
          analyzeExhaust=AnalyzerFacadeForJVM.analyzeFilesWithJavaIntegration(project,JetFilesProvider.getInstance(project).allInScope(GlobalSearchScope.allScope(project)),incompleteTrace,Predicates.<PsiFile>alwaysFalse(),true);
        }
  finally {
          incompleteTrace=null;
        }
        return Result.<KotlinDeclarationsCache>create(new KotlinDeclarationsCacheImpl(analyzeExhaust),PsiModificationTracker.OUT_OF_CODE_BLOCK_MODIFICATION_COUNT,KotlinCacheManager.getInstance(project).getDeclarationsTracker());
      }
    }
  }
;
}
