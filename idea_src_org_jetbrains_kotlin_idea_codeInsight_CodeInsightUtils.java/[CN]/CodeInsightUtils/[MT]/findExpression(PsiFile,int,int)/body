{
  PsiElement element=findElementOfClassAtRange(file,startOffset,endOffset,JetExpression.class);
  if (element == null)   return null;
  if (element instanceof JetOperationReferenceExpression && ((JetOperationReferenceExpression)element).getReferencedNameElementType() != JetTokens.IDENTIFIER && element.getParent() instanceof JetBinaryExpression) {
    return null;
  }
  if (JetPsiUtil.isLabelIdentifierExpression(element)) {
    element=PsiTreeUtil.getParentOfType(element,JetExpression.class);
  }
  if (element instanceof JetBlockExpression) {
    List<JetExpression> statements=((JetBlockExpression)element).getStatements();
    if (statements.size() == 1) {
      JetExpression statement=statements.get(0);
      if (statement.getText().equals(element.getText())) {
        return statement;
      }
    }
  }
  JetExpression expression=(JetExpression)element;
  BindingContext context=ResolutionUtils.analyze(expression);
  Qualifier qualifier=context.get(BindingContext.QUALIFIER,expression);
  if (qualifier != null) {
    ClassifierDescriptor classifier=qualifier.getClassifier();
    if (!(classifier instanceof ClassDescriptor) || ((ClassDescriptor)classifier).getKind() != ClassKind.OBJECT)     return null;
  }
  return expression;
}
