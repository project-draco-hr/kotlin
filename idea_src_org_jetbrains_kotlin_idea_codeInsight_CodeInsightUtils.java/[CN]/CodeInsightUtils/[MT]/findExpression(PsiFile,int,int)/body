{
  PsiElement element=findElementOfClassAtRange(file,startOffset,endOffset,KtExpression.class);
  if (element == null)   return null;
  if (element instanceof KtOperationReferenceExpression && ((KtOperationReferenceExpression)element).getReferencedNameElementType() != KtTokens.IDENTIFIER && element.getParent() instanceof KtBinaryExpression) {
    return null;
  }
  if (KtPsiUtil.isLabelIdentifierExpression(element)) {
    element=PsiTreeUtil.getParentOfType(element,KtExpression.class);
  }
  if (element instanceof KtBlockExpression) {
    List<KtExpression> statements=((KtBlockExpression)element).getStatements();
    if (statements.size() == 1) {
      KtExpression statement=statements.get(0);
      if (statement.getText().equals(element.getText())) {
        return statement;
      }
    }
  }
  KtExpression expression=(KtExpression)element;
  BindingContext context=ResolutionUtils.analyze(expression);
  Qualifier qualifier=context.get(BindingContext.QUALIFIER,expression);
  if (qualifier != null) {
    if (!(qualifier instanceof ClassQualifier))     return null;
    ClassifierDescriptor classifier=((ClassQualifier)qualifier).getClassifier();
    if (!(classifier instanceof ClassDescriptor) || ((ClassDescriptor)classifier).getKind() != ClassKind.OBJECT) {
      return null;
    }
  }
  return expression;
}
