{
  List<ClassDescriptor> result=new ArrayList<ClassDescriptor>();
  final Collection<NamedMembers> enumNonStaticMembers=MembersProvider.forClass(javaClass,true).allMembers();
  NotNullLazyValue<Collection<Name>> enumMemberNames=LockBasedStorageManager.NO_LOCKS.createLazyValue(new Function0<Collection<Name>>(){
    @Override public Collection<Name> invoke(){
      return KotlinPackage.map(enumNonStaticMembers,new Function1<NamedMembers,Name>(){
        @Override public Name invoke(        @NotNull NamedMembers members){
          return members.getName();
        }
      }
);
    }
  }
);
  for (  NamedMembers members : enumNonStaticMembers) {
    for (    JavaField field : members.getFields()) {
      if (field.isEnumEntry()) {
        EnumEntrySyntheticClassDescriptor enumEntry=EnumEntrySyntheticClassDescriptor.create(LockBasedStorageManager.NO_LOCKS,descriptor,members.getName(),enumMemberNames);
        result.add(enumEntry);
        break;
      }
    }
  }
  return result;
}
